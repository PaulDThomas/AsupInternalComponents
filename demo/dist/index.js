// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== "undefined"
      ? globalThis
      : typeof self !== "undefined"
      ? self
      : typeof window !== "undefined"
      ? window
      : typeof global !== "undefined"
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === "function" && globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== "undefined" &&
    typeof module.require === "function" &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === "function" && globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === "string") {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = "MODULE_NOT_FOUND";
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, "root", {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === "function" && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})(
  {
    "4q9Wv": [
      function (require, module, exports) {
        var global = arguments[3];
        var HMR_HOST = null;
        var HMR_PORT = null;
        var HMR_SECURE = false;
        var HMR_ENV_HASH = "d6ea1d42532a7575";
        var HMR_USE_SSE = false;
        module.bundle.HMR_BUNDLE_ID = "b9ff98ae71490ebc";
        ("use strict");
        /* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
        var OldModule = module.bundle.Module;
        function Module(moduleName) {
          OldModule.call(this, moduleName);
          this.hot = {
            data: module.bundle.hotData[moduleName],
            _acceptCallbacks: [],
            _disposeCallbacks: [],
            accept: function (fn) {
              this._acceptCallbacks.push(fn || function () {});
            },
            dispose: function (fn) {
              this._disposeCallbacks.push(fn);
            },
          };
          module.bundle.hotData[moduleName] = undefined;
        }
        module.bundle.Module = Module;
        module.bundle.hotData = {};
        var checkedAssets /*: {|[string]: boolean|} */,
          assetsToDispose /*: Array<[ParcelRequire, string]> */,
          assetsToAccept /*: Array<[ParcelRequire, string]> */;
        function getHostname() {
          return (
            HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost")
          );
        }
        function getPort() {
          return HMR_PORT || location.port;
        }
        // eslint-disable-next-line no-redeclare
        var parent = module.bundle.parent;
        if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
          var hostname = getHostname();
          var port = getPort();
          var protocol =
            HMR_SECURE ||
            (location.protocol == "https:" &&
              !["localhost", "127.0.0.1", "0.0.0.0"].includes(hostname))
              ? "wss"
              : "ws";
          var ws;
          if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
          else
            try {
              ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
            } catch (err) {
              if (err.message) console.error(err.message);
              ws = {};
            }
          // Web extension context
          var extCtx =
            typeof browser === "undefined"
              ? typeof chrome === "undefined"
                ? null
                : chrome
              : browser;
          // Safari doesn't support sourceURL in error stacks.
          // eval may also be disabled via CSP, so do a quick check.
          var supportsSourceURL = false;
          try {
            (0, eval)('throw new Error("test"); //# sourceURL=test.js');
          } catch (err) {
            supportsSourceURL = err.stack.includes("test.js");
          }
          // $FlowFixMe
          ws.onmessage = async function (event /*: {data: string, ...} */) {
            checkedAssets = {} /*: {|[string]: boolean|} */;
            assetsToAccept = [];
            assetsToDispose = [];
            var data /*: HMRMessage */ = JSON.parse(event.data);
            if (data.type === "update") {
              // Remove error overlay if there is one
              if (typeof document !== "undefined") removeErrorOverlay();
              let assets = data.assets.filter((asset) => asset.envHash === HMR_ENV_HASH);
              // Handle HMR Update
              let handled = assets.every((asset) => {
                return (
                  asset.type === "css" ||
                  (asset.type === "js" &&
                    hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle))
                );
              });
              if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined")
                  window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {}; /*: {|[string]: boolean|} */
                for (let i = 0; i < assetsToDispose.length; i++) {
                  let id = assetsToDispose[i][1];
                  if (!processedAssets[id]) {
                    hmrDispose(assetsToDispose[i][0], id);
                    processedAssets[id] = true;
                  }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for (let i = 0; i < assetsToAccept.length; i++) {
                  let id = assetsToAccept[i][1];
                  if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                  }
                }
              } else fullReload();
            }
            if (data.type === "error") {
              // Log parcel errors to console
              for (let ansiDiagnostic of data.diagnostics.ansi) {
                let stack = ansiDiagnostic.codeframe
                  ? ansiDiagnostic.codeframe
                  : ansiDiagnostic.stack;
                console.error(
                  "\uD83D\uDEA8 [parcel]: " +
                    ansiDiagnostic.message +
                    "\n" +
                    stack +
                    "\n\n" +
                    ansiDiagnostic.hints.join("\n"),
                );
              }
              if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
              }
            }
          };
          if (ws instanceof WebSocket) {
            ws.onerror = function (e) {
              if (e.message) console.error(e.message);
            };
            ws.onclose = function () {
              console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
          }
        }
        function removeErrorOverlay() {
          var overlay = document.getElementById(OVERLAY_ID);
          if (overlay) {
            overlay.remove();
            console.log("[parcel] \u2728 Error resolved");
          }
        }
        function createErrorOverlay(diagnostics) {
          var overlay = document.createElement("div");
          overlay.id = OVERLAY_ID;
          let errorHTML =
            '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
          for (let diagnostic of diagnostics) {
            let stack = diagnostic.frames.length
              ? diagnostic.frames.reduce((p, frame) => {
                  return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(
                    frame.location,
                  )}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${
                    frame.location
                  }</a>
${frame.code}`;
                }, "")
              : diagnostic.stack;
            errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint) => "<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${
          diagnostic.documentation
            ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>`
            : ""
        }
      </div>
    `;
          }
          errorHTML += "</div>";
          overlay.innerHTML = errorHTML;
          return overlay;
        }
        function fullReload() {
          if ("reload" in location) location.reload();
          else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
        }
        function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
          var modules = bundle.modules;
          if (!modules) return [];
          var parents = [];
          var k, d, dep;
          for (k in modules)
            for (d in modules[k][1]) {
              dep = modules[k][1][d];
              if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id))
                parents.push([bundle, k]);
            }
          if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
          return parents;
        }
        function updateLink(link) {
          var href = link.getAttribute("href");
          if (!href) return;
          var newLink = link.cloneNode();
          newLink.onload = function () {
            if (link.parentNode !== null)
              // $FlowFixMe
              link.parentNode.removeChild(link);
          };
          newLink.setAttribute(
            "href", // $FlowFixMe
            href.split("?")[0] + "?" + Date.now(),
          );
          // $FlowFixMe
          link.parentNode.insertBefore(newLink, link.nextSibling);
        }
        var cssTimeout = null;
        function reloadCSS() {
          if (cssTimeout) return;
          cssTimeout = setTimeout(function () {
            var links = document.querySelectorAll('link[rel="stylesheet"]');
            for (var i = 0; i < links.length; i++) {
              // $FlowFixMe[incompatible-type]
              var href /*: string */ = links[i].getAttribute("href");
              var hostname = getHostname();
              var servedFromHMRServer =
                hostname === "localhost"
                  ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(
                      href,
                    )
                  : href.indexOf(hostname + ":" + getPort());
              var absolute =
                /^https?:\/\//i.test(href) &&
                href.indexOf(location.origin) !== 0 &&
                !servedFromHMRServer;
              if (!absolute) updateLink(links[i]);
            }
            cssTimeout = null;
          }, 50);
        }
        function hmrDownload(asset) {
          if (asset.type === "js") {
            if (typeof document !== "undefined") {
              let script = document.createElement("script");
              script.src = asset.url + "?t=" + Date.now();
              if (asset.outputFormat === "esmodule") script.type = "module";
              return new Promise((resolve, reject) => {
                var _document$head;
                script.onload = () => resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null ||
                  _document$head === void 0 ||
                  _document$head.appendChild(script);
              });
            } else if (typeof importScripts === "function") {
              // Worker scripts
              if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
              else
                return new Promise((resolve, reject) => {
                  try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                  } catch (err) {
                    reject(err);
                  }
                });
            }
          }
        }
        async function hmrApplyUpdates(assets) {
          global.parcelHotUpdate = Object.create(null);
          let scriptsToRemove;
          try {
            // If sourceURL comments aren't supported in eval, we need to load
            // the update from the dev server over HTTP so that stack traces
            // are correct in errors/logs. This is much slower than eval, so
            // we only do it if needed (currently just Safari).
            // https://bugs.webkit.org/show_bug.cgi?id=137297
            // This path is also taken if a CSP disallows eval.
            if (!supportsSourceURL) {
              let promises = assets.map((asset) => {
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0
                  ? void 0
                  : _hmrDownload.catch((err) => {
                      // Web extension fix
                      if (
                        extCtx &&
                        extCtx.runtime &&
                        extCtx.runtime.getManifest().manifest_version == 3 &&
                        typeof ServiceWorkerGlobalScope != "undefined" &&
                        global instanceof ServiceWorkerGlobalScope
                      ) {
                        extCtx.runtime.reload();
                        return;
                      }
                      throw err;
                    });
              });
              scriptsToRemove = await Promise.all(promises);
            }
            assets.forEach(function (asset) {
              hmrApply(module.bundle.root, asset);
            });
          } finally {
            delete global.parcelHotUpdate;
            if (scriptsToRemove)
              scriptsToRemove.forEach((script) => {
                if (script) {
                  var _document$head2;
                  (_document$head2 = document.head) === null ||
                    _document$head2 === void 0 ||
                    _document$head2.removeChild(script);
                }
              });
          }
        }
        function hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {
          var modules = bundle.modules;
          if (!modules) return;
          if (asset.type === "css") reloadCSS();
          else if (asset.type === "js") {
            let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
            if (deps) {
              if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for (let dep in oldDeps)
                  if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                  }
              }
              if (supportsSourceURL)
                // Global eval. We would use `new Function` here but browser
                // support for source maps is better with eval.
                (0, eval)(asset.output);
              // $FlowFixMe
              let fn = global.parcelHotUpdate[asset.id];
              modules[asset.id] = [fn, deps];
            } else if (bundle.parent) hmrApply(bundle.parent, asset);
          }
        }
        function hmrDelete(bundle, id) {
          let modules = bundle.modules;
          if (!modules) return;
          if (modules[id]) {
            // Collect dependencies that will become orphaned when this module is deleted.
            let deps = modules[id][1];
            let orphans = [];
            for (let dep in deps) {
              let parents = getParents(module.bundle.root, deps[dep]);
              if (parents.length === 1) orphans.push(deps[dep]);
            }
            // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
            delete modules[id];
            delete bundle.cache[id];
            // Now delete the orphans.
            orphans.forEach((id) => {
              hmrDelete(module.bundle.root, id);
            });
          } else if (bundle.parent) hmrDelete(bundle.parent, id);
        }
        function hmrAcceptCheck(
          bundle /*: ParcelRequire */,
          id /*: string */,
          depsByBundle /*: ?{ [string]: { [string]: string } }*/,
        ) {
          if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
          // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
          let parents = getParents(module.bundle.root, id);
          let accepted = false;
          while (parents.length > 0) {
            let v = parents.shift();
            let a = hmrAcceptCheckOne(v[0], v[1], null);
            if (a)
              // If this parent accepts, stop traversing upward, but still consider siblings.
              accepted = true;
            else {
              // Otherwise, queue the parents in the next level upward.
              let p = getParents(module.bundle.root, v[1]);
              if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
              }
              parents.push(...p);
            }
          }
          return accepted;
        }
        function hmrAcceptCheckOne(
          bundle /*: ParcelRequire */,
          id /*: string */,
          depsByBundle /*: ?{ [string]: { [string]: string } }*/,
        ) {
          var modules = bundle.modules;
          if (!modules) return;
          if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
            // If we reached the root bundle without finding where the asset should go,
            // there's nothing to do. Mark as "accepted" so we don't reload the page.
            if (!bundle.parent) return true;
            return hmrAcceptCheck(bundle.parent, id, depsByBundle);
          }
          if (checkedAssets[id]) return true;
          checkedAssets[id] = true;
          var cached = bundle.cache[id];
          assetsToDispose.push([bundle, id]);
          if (!cached || (cached.hot && cached.hot._acceptCallbacks.length)) {
            assetsToAccept.push([bundle, id]);
            return true;
          }
        }
        function hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {
          var cached = bundle.cache[id];
          bundle.hotData[id] = {};
          if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
          if (cached && cached.hot && cached.hot._disposeCallbacks.length)
            cached.hot._disposeCallbacks.forEach(function (cb) {
              cb(bundle.hotData[id]);
            });
          delete bundle.cache[id];
        }
        function hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {
          // Execute the module.
          bundle(id);
          // Run the accept callbacks in the new version of the module.
          var cached = bundle.cache[id];
          if (cached && cached.hot && cached.hot._acceptCallbacks.length)
            cached.hot._acceptCallbacks.forEach(function (cb) {
              var assetsToAlsoAccept = cb(function () {
                return getParents(module.bundle.root, id);
              });
              if (assetsToAlsoAccept && assetsToAccept.length) {
                assetsToAlsoAccept.forEach(function (a) {
                  hmrDispose(a[0], a[1]);
                });
                // $FlowFixMe[method-unbinding]
                assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
              }
            });
        }
      },
      {},
    ],
    "1xC6H": [
      function (require, module, exports) {
        var Refresh = require("6d18d6bd340e7473");
        var ErrorOverlay = require("74ad5ea14201648c");
        Refresh.injectIntoGlobalHook(window);
        window.$RefreshReg$ = function () {};
        window.$RefreshSig$ = function () {
          return function (type) {
            return type;
          };
        };
        ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
          let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${
            errorLocation.colNumber || 1
          }`;
          fetch(`/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
        });
        ErrorOverlay.startReportingRuntimeErrors({
          onError: function () {},
        });
        window.addEventListener("parcelhmraccept", () => {
          ErrorOverlay.dismissRuntimeErrors();
        });
      },
      { "6d18d6bd340e7473": "786KC", "74ad5ea14201648c": "1dldy" },
    ],
    "786KC": [
      function (require, module, exports) {
        "use strict";
        module.exports = require("96622d495519d4e");
      },
      { "96622d495519d4e": "hdge7" },
    ],
    hdge7: [
      function (require, module, exports) {
        /** @license React v0.9.0
         * react-refresh-runtime.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          // ATTENTION
          // When adding new symbols to this file,
          // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
          // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
          // nor polyfill, then a plain number is used for performance.
          var REACT_ELEMENT_TYPE = 0xeac7;
          var REACT_PORTAL_TYPE = 0xeaca;
          var REACT_FRAGMENT_TYPE = 0xeacb;
          var REACT_STRICT_MODE_TYPE = 0xeacc;
          var REACT_PROFILER_TYPE = 0xead2;
          var REACT_PROVIDER_TYPE = 0xeacd;
          var REACT_CONTEXT_TYPE = 0xeace;
          var REACT_FORWARD_REF_TYPE = 0xead0;
          var REACT_SUSPENSE_TYPE = 0xead1;
          var REACT_SUSPENSE_LIST_TYPE = 0xead8;
          var REACT_MEMO_TYPE = 0xead3;
          var REACT_LAZY_TYPE = 0xead4;
          var REACT_BLOCK_TYPE = 0xead9;
          var REACT_SERVER_BLOCK_TYPE = 0xeada;
          var REACT_FUNDAMENTAL_TYPE = 0xead5;
          var REACT_SCOPE_TYPE = 0xead7;
          var REACT_OPAQUE_ID_TYPE = 0xeae0;
          var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
          var REACT_OFFSCREEN_TYPE = 0xeae2;
          var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map; // We never remove these associations.
          // It's OK to reference families, but use WeakMap/Set for types.
          var allFamiliesByID = new Map();
          var allFamiliesByType = new PossiblyWeakMap();
          var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
          // that have actually been edited here. This keeps checks fast.
          // $FlowIssue
          var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
          // It is an array of [Family, NextType] tuples.
          var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
          var helpersByRendererID = new Map();
          var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
          var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
          var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
          // It needs to be weak because we do this even for roots that failed to mount.
          // If there is no WeakMap, we won't attempt to do retrying.
          // $FlowIssue
          var rootElements = typeof WeakMap === "function" ? new WeakMap() : null;
          var isPerformingRefresh = false;
          function computeFullKey(signature) {
            if (signature.fullKey !== null) return signature.fullKey;
            var fullKey = signature.ownKey;
            var hooks;
            try {
              hooks = signature.getCustomHooks();
            } catch (err) {
              // This can happen in an edge case, e.g. if expression like Foo.useSomething
              // depends on Foo which is lazily initialized during rendering.
              // In that case just assume we'll have to remount.
              signature.forceReset = true;
              signature.fullKey = fullKey;
              return fullKey;
            }
            for (var i = 0; i < hooks.length; i++) {
              var hook = hooks[i];
              if (typeof hook !== "function") {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
              }
              var nestedHookSignature = allSignaturesByType.get(hook);
              if (nestedHookSignature === undefined) continue;
              var nestedHookKey = computeFullKey(nestedHookSignature);
              if (nestedHookSignature.forceReset) signature.forceReset = true;
              fullKey += "\n---\n" + nestedHookKey;
            }
            signature.fullKey = fullKey;
            return fullKey;
          }
          function haveEqualSignatures(prevType, nextType) {
            var prevSignature = allSignaturesByType.get(prevType);
            var nextSignature = allSignaturesByType.get(nextType);
            if (prevSignature === undefined && nextSignature === undefined) return true;
            if (prevSignature === undefined || nextSignature === undefined) return false;
            if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
            if (nextSignature.forceReset) return false;
            return true;
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function canPreserveStateBetween(prevType, nextType) {
            if (isReactClass(prevType) || isReactClass(nextType)) return false;
            if (haveEqualSignatures(prevType, nextType)) return true;
            return false;
          }
          function resolveFamily(type) {
            // Only check updated types to keep lookups fast.
            return updatedFamiliesByType.get(type);
          } // If we didn't care about IE11, we could use new Map/Set(iterable).
          function cloneMap(map) {
            var clone = new Map();
            map.forEach(function (value, key) {
              clone.set(key, value);
            });
            return clone;
          }
          function cloneSet(set) {
            var clone = new Set();
            set.forEach(function (value) {
              clone.add(value);
            });
            return clone;
          }
          function performReactRefresh() {
            if (pendingUpdates.length === 0) return null;
            if (isPerformingRefresh) return null;
            isPerformingRefresh = true;
            try {
              var staleFamilies = new Set();
              var updatedFamilies = new Set();
              var updates = pendingUpdates;
              pendingUpdates = [];
              updates.forEach(function (_ref) {
                var family = _ref[0],
                  nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
              }); // TODO: rename these fields to something more meaningful.
              var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies, // Families that will be remounted
              };
              helpersByRendererID.forEach(function (helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
              });
              var didError = false;
              var firstError = null; // We snapshot maps and sets that are mutated during commits.
              // If we don't do this, there is a risk they will be mutated while
              // we iterate over them. For example, trying to recover a failed root
              // may cause another root to be added to the failed list -- an infinite loop.
              var failedRootsSnapshot = cloneSet(failedRoots);
              var mountedRootsSnapshot = cloneSet(mountedRoots);
              var helpersByRootSnapshot = cloneMap(helpersByRoot);
              failedRootsSnapshot.forEach(function (root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined)
                  throw new Error(
                    "Could not find helpers for a root. This is a bug in React Refresh.",
                  );
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                  helpers.scheduleRoot(root, element);
                } catch (err) {
                  if (!didError) {
                    didError = true;
                    firstError = err;
                  } // Keep trying other roots.
                }
              });
              mountedRootsSnapshot.forEach(function (root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined)
                  throw new Error(
                    "Could not find helpers for a root. This is a bug in React Refresh.",
                  );
                mountedRoots.has(root);
                try {
                  helpers.scheduleRefresh(root, update);
                } catch (err) {
                  if (!didError) {
                    didError = true;
                    firstError = err;
                  } // Keep trying other roots.
                }
              });
              if (didError) throw firstError;
              return update;
            } finally {
              isPerformingRefresh = false;
            }
          }
          function register(type, id) {
            if (type === null) return;
            if (typeof type !== "function" && typeof type !== "object") return;
            // This can happen in an edge case, e.g. if we register
            // return value of a HOC but it returns a cached component.
            // Ignore anything but the first registration for each type.
            if (allFamiliesByType.has(type)) return;
            // Create family or remember to update it.
            // None of this bookkeeping affects reconciliation
            // until the first performReactRefresh() call above.
            var family = allFamiliesByID.get(id);
            if (family === undefined) {
              family = {
                current: type,
              };
              allFamiliesByID.set(id, family);
            } else pendingUpdates.push([family, type]);
            allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
            if (typeof type === "object" && type !== null)
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  register(type.render, id + "$render");
                  break;
                case REACT_MEMO_TYPE:
                  register(type.type, id + "$type");
                  break;
              }
          }
          function setSignature(type, key) {
            var forceReset =
              arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
            allSignaturesByType.set(type, {
              forceReset: forceReset,
              ownKey: key,
              fullKey: null,
              getCustomHooks:
                getCustomHooks ||
                function () {
                  return [];
                },
            });
          } // This is lazily called during first render for a type.
          // It captures Hook list at that time so inline requires don't break comparisons.
          function collectCustomHooksForSignature(type) {
            var signature = allSignaturesByType.get(type);
            if (signature !== undefined) computeFullKey(signature);
          }
          function getFamilyByID(id) {
            return allFamiliesByID.get(id);
          }
          function getFamilyByType(type) {
            return allFamiliesByType.get(type);
          }
          function findAffectedHostInstances(families) {
            var affectedInstances = new Set();
            mountedRoots.forEach(function (root) {
              var helpers = helpersByRoot.get(root);
              if (helpers === undefined)
                throw new Error(
                  "Could not find helpers for a root. This is a bug in React Refresh.",
                );
              var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
              instancesForRoot.forEach(function (inst) {
                affectedInstances.add(inst);
              });
            });
            return affectedInstances;
          }
          function injectIntoGlobalHook(globalObject) {
            // For React Native, the global hook will be set up by require('react-devtools-core').
            // That code will run before us. So we need to monkeypatch functions on existing hook.
            // For React Web, the global hook will be set up by the extension.
            // This will also run before us.
            var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook === undefined) {
              // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
              // Note that in this case it's important that renderer code runs *after* this method call.
              // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
              var nextID = 0;
              globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function (injected) {
                  return nextID++;
                },
                onScheduleFiberRoot: function (id, root, children) {},
                onCommitFiberRoot: function (id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function () {},
              };
            } // Here, we just want to get a reference to scheduleRefresh.
            var oldInject = hook.inject;
            hook.inject = function (injected) {
              var id = oldInject.apply(this, arguments);
              if (
                typeof injected.scheduleRefresh === "function" &&
                typeof injected.setRefreshHandler === "function"
              )
                // This version supports React Refresh.
                helpersByRendererID.set(id, injected);
              return id;
            }; // Do the same for any already injected roots.
            // This is useful if ReactDOM has already been initialized.
            // https://github.com/facebook/react/issues/17626
            hook.renderers.forEach(function (injected, id) {
              if (
                typeof injected.scheduleRefresh === "function" &&
                typeof injected.setRefreshHandler === "function"
              )
                // This version supports React Refresh.
                helpersByRendererID.set(id, injected);
            }); // We also want to track currently mounted roots.
            var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
            var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function () {};
            hook.onScheduleFiberRoot = function (id, root, children) {
              if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
              }
              return oldOnScheduleFiberRoot.apply(this, arguments);
            };
            hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
              var helpers = helpersByRendererID.get(id);
              if (helpers === undefined) return;
              helpersByRoot.set(root, helpers);
              var current = root.current;
              var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
              // This logic is copy-pasted from similar logic in the DevTools backend.
              // If this breaks with some refactoring, you'll want to update DevTools too.
              if (alternate !== null) {
                var wasMounted =
                  alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted =
                  current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                  // Mount a new root.
                  mountedRoots.add(root);
                  failedRoots.delete(root);
                } else if (wasMounted && isMounted);
                else if (wasMounted && !isMounted) {
                  // Unmount an existing root.
                  mountedRoots.delete(root);
                  if (didError)
                    // We'll remount it on future edits.
                    failedRoots.add(root);
                  else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                  if (didError)
                    // We'll remount it on future edits.
                    failedRoots.add(root);
                }
              } // Mount a new root.
              else mountedRoots.add(root);
              return oldOnCommitFiberRoot.apply(this, arguments);
            };
          }
          function hasUnrecoverableErrors() {
            // TODO: delete this after removing dependency in RN.
            return false;
          } // Exposed for testing.
          function _getMountedRootCount() {
            return mountedRoots.size;
          } // This is a wrapper over more primitive functions for setting signature.
          // Signatures let us decide whether the Hook order has changed on refresh.
          //
          // This function is intended to be used as a transform target, e.g.:
          // var _s = createSignatureFunctionForTransform()
          //
          // function Hello() {
          //   const [foo, setFoo] = useState(0);
          //   const value = useCustomHook();
          //   _s(); /* Second call triggers collecting the custom Hook list.
          //          * This doesn't happen during the module evaluation because we
          //          * don't want to change the module order with inline requires.
          //          * Next calls are noops. */
          //   return <h1>Hi</h1>;
          // }
          //
          // /* First call specifies the signature: */
          // _s(
          //   Hello,
          //   'useState{[foo, setFoo]}(0)',
          //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
          // );
          function createSignatureFunctionForTransform() {
            // We'll fill in the signature in two steps.
            // First, we'll know the signature itself. This happens outside the component.
            // Then, we'll know the references to custom Hooks. This happens inside the component.
            // After that, the returned function will be a fast path no-op.
            var status = "needsSignature";
            var savedType;
            var hasCustomHooks;
            return function (type, key, forceReset, getCustomHooks) {
              switch (status) {
                case "needsSignature":
                  if (type !== undefined) {
                    // If we received an argument, this is the initial registration call.
                    savedType = type;
                    hasCustomHooks = typeof getCustomHooks === "function";
                    setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                    status = "needsCustomHooks";
                  }
                  break;
                case "needsCustomHooks":
                  if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                  status = "resolved";
                  break;
              }
              return type;
            };
          }
          function isLikelyComponentType(type) {
            switch (typeof type) {
              case "function":
                // First, deal with classes.
                if (type.prototype != null) {
                  if (type.prototype.isReactComponent)
                    // React class.
                    return true;
                  var ownNames = Object.getOwnPropertyNames(type.prototype);
                  if (ownNames.length > 1 || ownNames[0] !== "constructor")
                    // This looks like a class.
                    return false;
                  // eslint-disable-next-line no-proto
                  if (type.prototype.__proto__ !== Object.prototype)
                    // It has a superclass.
                    return false;
                  // Pass through.
                  // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === "string" && /^[A-Z]/.test(name);
              case "object":
                if (type != null)
                  switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                      // Definitely React components.
                      return true;
                    default:
                      return false;
                  }
                return false;
              default:
                return false;
            }
          }
          exports._getMountedRootCount = _getMountedRootCount;
          exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
          exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
          exports.findAffectedHostInstances = findAffectedHostInstances;
          exports.getFamilyByID = getFamilyByID;
          exports.getFamilyByType = getFamilyByType;
          exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
          exports.injectIntoGlobalHook = injectIntoGlobalHook;
          exports.isLikelyComponentType = isLikelyComponentType;
          exports.performReactRefresh = performReactRefresh;
          exports.register = register;
          exports.setSignature = setSignature;
        })();
      },
      {},
    ],
    "1dldy": [
      function (require, module, exports) {
        var process = require("d1546958eb39fdcf");
        !(function (e, t) {
          module.exports = t();
        })(window, function () {
          return (function (e) {
            var t = {};
            function r(n) {
              if (t[n]) return t[n].exports;
              var o = (t[n] = {
                i: n,
                l: !1,
                exports: {},
              });
              return e[n].call(o.exports, o, o.exports, r), (o.l = !0), o.exports;
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, n) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: n,
                  });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", {
                    value: !0,
                  });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule) return e;
                var n = Object.create(null);
                if (
                  (r.r(n),
                  Object.defineProperty(n, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var o in e)
                    r.d(
                      n,
                      o,
                      function (t) {
                        return e[t];
                      }.bind(null, o),
                    );
                return n;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = ""),
              r((r.s = 15))
            );
          })([
            function (e, t, r) {
              e.exports = r(8);
            },
            function (e, t) {
              t.getArg = function (e, t, r) {
                if (t in e) return e[t];
                if (3 === arguments.length) return r;
                throw new Error('"' + t + '" is a required argument.');
              };
              var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,
                n = /^data:.+\,.+$/;
              function o(e) {
                var t = e.match(r);
                return t
                  ? {
                      scheme: t[1],
                      auth: t[2],
                      host: t[3],
                      port: t[4],
                      path: t[5],
                    }
                  : null;
              }
              function a(e) {
                var t = "";
                return (
                  e.scheme && (t += e.scheme + ":"),
                  (t += "//"),
                  e.auth && (t += e.auth + "@"),
                  e.host && (t += e.host),
                  e.port && (t += ":" + e.port),
                  e.path && (t += e.path),
                  t
                );
              }
              function i(e) {
                var r = e,
                  n = o(e);
                if (n) {
                  if (!n.path) return e;
                  r = n.path;
                }
                for (
                  var i, l = t.isAbsolute(r), u = r.split(/\/+/), c = 0, s = u.length - 1;
                  s >= 0;
                  s--
                )
                  "." === (i = u[s])
                    ? u.splice(s, 1)
                    : ".." === i
                    ? c++
                    : c > 0 && ("" === i ? (u.splice(s + 1, c), (c = 0)) : (u.splice(s, 2), c--));
                return (
                  "" === (r = u.join("/")) && (r = l ? "/" : "."), n ? ((n.path = r), a(n)) : r
                );
              }
              (t.urlParse = o),
                (t.urlGenerate = a),
                (t.normalize = i),
                (t.join = function (e, t) {
                  "" === e && (e = "."), "" === t && (t = ".");
                  var r = o(t),
                    l = o(e);
                  if ((l && (e = l.path || "/"), r && !r.scheme))
                    return l && (r.scheme = l.scheme), a(r);
                  if (r || t.match(n)) return t;
                  if (l && !l.host && !l.path) return (l.host = t), a(l);
                  var u = "/" === t.charAt(0) ? t : i(e.replace(/\/+$/, "") + "/" + t);
                  return l ? ((l.path = u), a(l)) : u;
                }),
                (t.isAbsolute = function (e) {
                  return "/" === e.charAt(0) || !!e.match(r);
                }),
                (t.relative = function (e, t) {
                  "" === e && (e = "."), (e = e.replace(/\/$/, ""));
                  for (var r = 0; 0 !== t.indexOf(e + "/"); ) {
                    var n = e.lastIndexOf("/");
                    if (n < 0) return t;
                    if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++r;
                  }
                  return Array(r + 1).join("../") + t.substr(e.length + 1);
                });
              var l = !("__proto__" in Object.create(null));
              function u(e) {
                return e;
              }
              function c(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (
                  95 !== e.charCodeAt(t - 1) ||
                  95 !== e.charCodeAt(t - 2) ||
                  111 !== e.charCodeAt(t - 3) ||
                  116 !== e.charCodeAt(t - 4) ||
                  111 !== e.charCodeAt(t - 5) ||
                  114 !== e.charCodeAt(t - 6) ||
                  112 !== e.charCodeAt(t - 7) ||
                  95 !== e.charCodeAt(t - 8) ||
                  95 !== e.charCodeAt(t - 9)
                )
                  return !1;
                for (var r = t - 10; r >= 0; r--) if (36 !== e.charCodeAt(r)) return !1;
                return !0;
              }
              function s(e, t) {
                return e === t ? 0 : e > t ? 1 : -1;
              }
              (t.toSetString = l
                ? u
                : function (e) {
                    return c(e) ? "$" + e : e;
                  }),
                (t.fromSetString = l
                  ? u
                  : function (e) {
                      return c(e) ? e.slice(1) : e;
                    }),
                (t.compareByOriginalPositions = function (e, t, r) {
                  var n = e.source - t.source;
                  return 0 !== n
                    ? n
                    : 0 !== (n = e.originalLine - t.originalLine)
                    ? n
                    : 0 !== (n = e.originalColumn - t.originalColumn) || r
                    ? n
                    : 0 !== (n = e.generatedColumn - t.generatedColumn)
                    ? n
                    : 0 !== (n = e.generatedLine - t.generatedLine)
                    ? n
                    : e.name - t.name;
                }),
                (t.compareByGeneratedPositionsDeflated = function (e, t, r) {
                  var n = e.generatedLine - t.generatedLine;
                  return 0 !== n
                    ? n
                    : 0 !== (n = e.generatedColumn - t.generatedColumn) || r
                    ? n
                    : 0 !== (n = e.source - t.source)
                    ? n
                    : 0 !== (n = e.originalLine - t.originalLine)
                    ? n
                    : 0 !== (n = e.originalColumn - t.originalColumn)
                    ? n
                    : e.name - t.name;
                }),
                (t.compareByGeneratedPositionsInflated = function (e, t) {
                  var r = e.generatedLine - t.generatedLine;
                  return 0 !== r
                    ? r
                    : 0 !== (r = e.generatedColumn - t.generatedColumn)
                    ? r
                    : 0 !== (r = s(e.source, t.source))
                    ? r
                    : 0 !== (r = e.originalLine - t.originalLine)
                    ? r
                    : 0 !== (r = e.originalColumn - t.originalColumn)
                    ? r
                    : s(e.name, t.name);
                });
            },
            function (e, t) {
              function r(e, t) {
                for (var r = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), r++)
                    : r && (e.splice(n, 1), r--);
                }
                if (t) for (; r--; r) e.unshift("..");
                return e;
              }
              function n(e, t) {
                if (e.filter) return e.filter(t);
                for (var r = [], n = 0; n < e.length; n++) t(e[n], n, e) && r.push(e[n]);
                return r;
              }
              (t.resolve = function () {
                for (var e = "", t = !1, o = arguments.length - 1; o >= -1 && !t; o--) {
                  var a = o >= 0 ? arguments[o] : process.cwd();
                  if ("string" != typeof a)
                    throw new TypeError("Arguments to path.resolve must be strings");
                  a && ((e = a + "/" + e), (t = "/" === a.charAt(0)));
                }
                return (
                  (t ? "/" : "") +
                    (e = r(
                      n(e.split("/"), function (e) {
                        return !!e;
                      }),
                      !t,
                    ).join("/")) || "."
                );
              }),
                (t.normalize = function (e) {
                  var a = t.isAbsolute(e),
                    i = "/" === o(e, -1);
                  return (
                    (e = r(
                      n(e.split("/"), function (e) {
                        return !!e;
                      }),
                      !a,
                    ).join("/")) ||
                      a ||
                      (e = "."),
                    e && i && (e += "/"),
                    (a ? "/" : "") + e
                  );
                }),
                (t.isAbsolute = function (e) {
                  return "/" === e.charAt(0);
                }),
                (t.join = function () {
                  var e = Array.prototype.slice.call(arguments, 0);
                  return t.normalize(
                    n(e, function (e, t) {
                      if ("string" != typeof e)
                        throw new TypeError("Arguments to path.join must be strings");
                      return e;
                    }).join("/"),
                  );
                }),
                (t.relative = function (e, r) {
                  function n(e) {
                    for (var t = 0; t < e.length && "" === e[t]; t++);
                    for (var r = e.length - 1; r >= 0 && "" === e[r]; r--);
                    return t > r ? [] : e.slice(t, r - t + 1);
                  }
                  (e = t.resolve(e).substr(1)), (r = t.resolve(r).substr(1));
                  for (
                    var o = n(e.split("/")),
                      a = n(r.split("/")),
                      i = Math.min(o.length, a.length),
                      l = i,
                      u = 0;
                    u < i;
                    u++
                  )
                    if (o[u] !== a[u]) {
                      l = u;
                      break;
                    }
                  var c = [];
                  for (u = l; u < o.length; u++) c.push("..");
                  return (c = c.concat(a.slice(l))).join("/");
                }),
                (t.sep = "/"),
                (t.delimiter = ":"),
                (t.dirname = function (e) {
                  if (("string" != typeof e && (e += ""), 0 === e.length)) return ".";
                  for (
                    var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, a = e.length - 1;
                    a >= 1;
                    --a
                  )
                    if (47 === (t = e.charCodeAt(a))) {
                      if (!o) {
                        n = a;
                        break;
                      }
                    } else o = !1;
                  return -1 === n ? (r ? "/" : ".") : r && 1 === n ? "/" : e.slice(0, n);
                }),
                (t.basename = function (e, t) {
                  var r = (function (e) {
                    "string" != typeof e && (e += "");
                    var t,
                      r = 0,
                      n = -1,
                      o = !0;
                    for (t = e.length - 1; t >= 0; --t)
                      if (47 === e.charCodeAt(t)) {
                        if (!o) {
                          r = t + 1;
                          break;
                        }
                      } else -1 === n && ((o = !1), (n = t + 1));
                    return -1 === n ? "" : e.slice(r, n);
                  })(e);
                  return (
                    t && r.substr(-1 * t.length) === t && (r = r.substr(0, r.length - t.length)), r
                  );
                }),
                (t.extname = function (e) {
                  "string" != typeof e && (e += "");
                  for (var t = -1, r = 0, n = -1, o = !0, a = 0, i = e.length - 1; i >= 0; --i) {
                    var l = e.charCodeAt(i);
                    if (47 !== l)
                      -1 === n && ((o = !1), (n = i + 1)),
                        46 === l ? (-1 === t ? (t = i) : 1 !== a && (a = 1)) : -1 !== t && (a = -1);
                    else if (!o) {
                      r = i + 1;
                      break;
                    }
                  }
                  return -1 === t || -1 === n || 0 === a || (1 === a && t === n - 1 && t === r + 1)
                    ? ""
                    : e.slice(t, n);
                });
              var o =
                "b" === "ab".substr(-1)
                  ? function (e, t, r) {
                      return e.substr(t, r);
                    }
                  : function (e, t, r) {
                      return t < 0 && (t = e.length + t), e.substr(t, r);
                    };
            },
            function (e, t, r) {
              (t.SourceMapGenerator = r(4).SourceMapGenerator),
                (t.SourceMapConsumer = r(11).SourceMapConsumer),
                (t.SourceNode = r(14).SourceNode);
            },
            function (e, t, r) {
              var n = r(5),
                o = r(1),
                a = r(6).ArraySet,
                i = r(10).MappingList;
              function l(e) {
                e || (e = {}),
                  (this._file = o.getArg(e, "file", null)),
                  (this._sourceRoot = o.getArg(e, "sourceRoot", null)),
                  (this._skipValidation = o.getArg(e, "skipValidation", !1)),
                  (this._sources = new a()),
                  (this._names = new a()),
                  (this._mappings = new i()),
                  (this._sourcesContents = null);
              }
              (l.prototype._version = 3),
                (l.fromSourceMap = function (e) {
                  var t = e.sourceRoot,
                    r = new l({
                      file: e.file,
                      sourceRoot: t,
                    });
                  return (
                    e.eachMapping(function (e) {
                      var n = {
                        generated: {
                          line: e.generatedLine,
                          column: e.generatedColumn,
                        },
                      };
                      null != e.source &&
                        ((n.source = e.source),
                        null != t && (n.source = o.relative(t, n.source)),
                        (n.original = {
                          line: e.originalLine,
                          column: e.originalColumn,
                        }),
                        null != e.name && (n.name = e.name)),
                        r.addMapping(n);
                    }),
                    e.sources.forEach(function (t) {
                      var n = e.sourceContentFor(t);
                      null != n && r.setSourceContent(t, n);
                    }),
                    r
                  );
                }),
                (l.prototype.addMapping = function (e) {
                  var t = o.getArg(e, "generated"),
                    r = o.getArg(e, "original", null),
                    n = o.getArg(e, "source", null),
                    a = o.getArg(e, "name", null);
                  this._skipValidation || this._validateMapping(t, r, n, a),
                    null != n && ((n = String(n)), this._sources.has(n) || this._sources.add(n)),
                    null != a && ((a = String(a)), this._names.has(a) || this._names.add(a)),
                    this._mappings.add({
                      generatedLine: t.line,
                      generatedColumn: t.column,
                      originalLine: null != r && r.line,
                      originalColumn: null != r && r.column,
                      source: n,
                      name: a,
                    });
                }),
                (l.prototype.setSourceContent = function (e, t) {
                  var r = e;
                  null != this._sourceRoot && (r = o.relative(this._sourceRoot, r)),
                    null != t
                      ? (this._sourcesContents || (this._sourcesContents = Object.create(null)),
                        (this._sourcesContents[o.toSetString(r)] = t))
                      : this._sourcesContents &&
                        (delete this._sourcesContents[o.toSetString(r)],
                        0 === Object.keys(this._sourcesContents).length &&
                          (this._sourcesContents = null));
                }),
                (l.prototype.applySourceMap = function (e, t, r) {
                  var n = t;
                  if (null == t) {
                    if (null == e.file)
                      throw new Error(
                        'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.',
                      );
                    n = e.file;
                  }
                  var i = this._sourceRoot;
                  null != i && (n = o.relative(i, n));
                  var l = new a(),
                    u = new a();
                  this._mappings.unsortedForEach(function (t) {
                    if (t.source === n && null != t.originalLine) {
                      var a = e.originalPositionFor({
                        line: t.originalLine,
                        column: t.originalColumn,
                      });
                      null != a.source &&
                        ((t.source = a.source),
                        null != r && (t.source = o.join(r, t.source)),
                        null != i && (t.source = o.relative(i, t.source)),
                        (t.originalLine = a.line),
                        (t.originalColumn = a.column),
                        null != a.name && (t.name = a.name));
                    }
                    var c = t.source;
                    null == c || l.has(c) || l.add(c);
                    var s = t.name;
                    null == s || u.has(s) || u.add(s);
                  }, this),
                    (this._sources = l),
                    (this._names = u),
                    e.sources.forEach(function (t) {
                      var n = e.sourceContentFor(t);
                      null != n &&
                        (null != r && (t = o.join(r, t)),
                        null != i && (t = o.relative(i, t)),
                        this.setSourceContent(t, n));
                    }, this);
                }),
                (l.prototype._validateMapping = function (e, t, r, n) {
                  if (t && "number" != typeof t.line && "number" != typeof t.column)
                    throw new Error(
                      "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.",
                    );
                  if (
                    (!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) ||
                      t ||
                      r ||
                      n) &&
                    !(
                      e &&
                      "line" in e &&
                      "column" in e &&
                      t &&
                      "line" in t &&
                      "column" in t &&
                      e.line > 0 &&
                      e.column >= 0 &&
                      t.line > 0 &&
                      t.column >= 0 &&
                      r
                    )
                  )
                    throw new Error(
                      "Invalid mapping: " +
                        JSON.stringify({
                          generated: e,
                          source: r,
                          original: t,
                          name: n,
                        }),
                    );
                }),
                (l.prototype._serializeMappings = function () {
                  for (
                    var e,
                      t,
                      r,
                      a,
                      i = 0,
                      l = 1,
                      u = 0,
                      c = 0,
                      s = 0,
                      f = 0,
                      d = "",
                      p = this._mappings.toArray(),
                      h = 0,
                      g = p.length;
                    h < g;
                    h++
                  ) {
                    if (((e = ""), (t = p[h]).generatedLine !== l))
                      for (i = 0; t.generatedLine !== l; ) (e += ";"), l++;
                    else if (h > 0) {
                      if (!o.compareByGeneratedPositionsInflated(t, p[h - 1])) continue;
                      e += ",";
                    }
                    (e += n.encode(t.generatedColumn - i)),
                      (i = t.generatedColumn),
                      null != t.source &&
                        ((a = this._sources.indexOf(t.source)),
                        (e += n.encode(a - f)),
                        (f = a),
                        (e += n.encode(t.originalLine - 1 - c)),
                        (c = t.originalLine - 1),
                        (e += n.encode(t.originalColumn - u)),
                        (u = t.originalColumn),
                        null != t.name &&
                          ((r = this._names.indexOf(t.name)), (e += n.encode(r - s)), (s = r))),
                      (d += e);
                  }
                  return d;
                }),
                (l.prototype._generateSourcesContent = function (e, t) {
                  return e.map(function (e) {
                    if (!this._sourcesContents) return null;
                    null != t && (e = o.relative(t, e));
                    var r = o.toSetString(e);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, r)
                      ? this._sourcesContents[r]
                      : null;
                  }, this);
                }),
                (l.prototype.toJSON = function () {
                  var e = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings(),
                  };
                  return (
                    null != this._file && (e.file = this._file),
                    null != this._sourceRoot && (e.sourceRoot = this._sourceRoot),
                    this._sourcesContents &&
                      (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)),
                    e
                  );
                }),
                (l.prototype.toString = function () {
                  return JSON.stringify(this.toJSON());
                }),
                (t.SourceMapGenerator = l);
            },
            function (e, t, r) {
              var n = r(9);
              (t.encode = function (e) {
                var t,
                  r = "",
                  o = (function (e) {
                    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
                  })(e);
                do (t = 31 & o), (o >>>= 5) > 0 && (t |= 32), (r += n.encode(t));
                while (o > 0);
                return r;
              }),
                (t.decode = function (e, t, r) {
                  var o,
                    a,
                    i,
                    l,
                    u = e.length,
                    c = 0,
                    s = 0;
                  do {
                    if (t >= u) throw new Error("Expected more digits in base 64 VLQ value.");
                    if (-1 === (a = n.decode(e.charCodeAt(t++))))
                      throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
                    (o = !!(32 & a)), (c += (a &= 31) << s), (s += 5);
                  } while (o);
                  (r.value = ((l = (i = c) >> 1), 1 == (1 & i) ? -l : l)), (r.rest = t);
                });
            },
            function (e, t, r) {
              var n = r(1),
                o = Object.prototype.hasOwnProperty,
                a = "undefined" != typeof Map;
              function i() {
                (this._array = []), (this._set = a ? new Map() : Object.create(null));
              }
              (i.fromArray = function (e, t) {
                for (var r = new i(), n = 0, o = e.length; n < o; n++) r.add(e[n], t);
                return r;
              }),
                (i.prototype.size = function () {
                  return a ? this._set.size : Object.getOwnPropertyNames(this._set).length;
                }),
                (i.prototype.add = function (e, t) {
                  var r = a ? e : n.toSetString(e),
                    i = a ? this.has(e) : o.call(this._set, r),
                    l = this._array.length;
                  (i && !t) || this._array.push(e),
                    i || (a ? this._set.set(e, l) : (this._set[r] = l));
                }),
                (i.prototype.has = function (e) {
                  if (a) return this._set.has(e);
                  var t = n.toSetString(e);
                  return o.call(this._set, t);
                }),
                (i.prototype.indexOf = function (e) {
                  if (a) {
                    var t = this._set.get(e);
                    if (t >= 0) return t;
                  } else {
                    var r = n.toSetString(e);
                    if (o.call(this._set, r)) return this._set[r];
                  }
                  throw new Error('"' + e + '" is not in the set.');
                }),
                (i.prototype.at = function (e) {
                  if (e >= 0 && e < this._array.length) return this._array[e];
                  throw new Error("No element indexed by " + e);
                }),
                (i.prototype.toArray = function () {
                  return this._array.slice();
                }),
                (t.ArraySet = i);
            },
            function (e, t, r) {
              "use strict";
              function n(e) {
                return (
                  Array.isArray(e) || (e = [e]),
                  Promise.all(
                    e.map(function (e) {
                      return e
                        .then(function (e) {
                          return {
                            isFulfilled: !0,
                            isRejected: !1,
                            value: e,
                          };
                        })
                        .catch(function (e) {
                          return {
                            isFulfilled: !1,
                            isRejected: !0,
                            reason: e,
                          };
                        });
                    }),
                  )
                );
              }
              Object.defineProperty(t, "__esModule", {
                value: !0,
              }),
                (t.settle = n),
                (t.default = n);
            },
            function (e, t, r) {
              var n = (function (e) {
                "use strict";
                var t,
                  r = Object.prototype,
                  n = r.hasOwnProperty,
                  o = "function" == typeof Symbol ? Symbol : {},
                  a = o.iterator || "@@iterator",
                  i = o.asyncIterator || "@@asyncIterator",
                  l = o.toStringTag || "@@toStringTag";
                function u(e, t, r) {
                  return (
                    Object.defineProperty(e, t, {
                      value: r,
                      enumerable: !0,
                      configurable: !0,
                      writable: !0,
                    }),
                    e[t]
                  );
                }
                try {
                  u({}, "");
                } catch (e) {
                  u = function (e, t, r) {
                    return (e[t] = r);
                  };
                }
                function c(e, t, r, n) {
                  var o = t && t.prototype instanceof m ? t : m,
                    a = Object.create(o.prototype),
                    i = new T(n || []);
                  return (
                    (a._invoke = (function (e, t, r) {
                      var n = f;
                      return function (o, a) {
                        if (n === p) throw new Error("Generator is already running");
                        if (n === h) {
                          if ("throw" === o) throw a;
                          return L();
                        }
                        for (r.method = o, r.arg = a; ; ) {
                          var i = r.delegate;
                          if (i) {
                            var l = _(i, r);
                            if (l) {
                              if (l === g) continue;
                              return l;
                            }
                          }
                          if ("next" === r.method) r.sent = r._sent = r.arg;
                          else if ("throw" === r.method) {
                            if (n === f) throw ((n = h), r.arg);
                            r.dispatchException(r.arg);
                          } else "return" === r.method && r.abrupt("return", r.arg);
                          n = p;
                          var u = s(e, t, r);
                          if ("normal" === u.type) {
                            if (((n = r.done ? h : d), u.arg === g)) continue;
                            return {
                              value: u.arg,
                              done: r.done,
                            };
                          }
                          "throw" === u.type && ((n = h), (r.method = "throw"), (r.arg = u.arg));
                        }
                      };
                    })(e, r, i)),
                    a
                  );
                }
                function s(e, t, r) {
                  try {
                    return {
                      type: "normal",
                      arg: e.call(t, r),
                    };
                  } catch (e) {
                    return {
                      type: "throw",
                      arg: e,
                    };
                  }
                }
                e.wrap = c;
                var f = "suspendedStart",
                  d = "suspendedYield",
                  p = "executing",
                  h = "completed",
                  g = {};
                function m() {}
                function v() {}
                function y() {}
                var b = {};
                b[a] = function () {
                  return this;
                };
                var w = Object.getPrototypeOf,
                  k = w && w(w(P([])));
                k && k !== r && n.call(k, a) && (b = k);
                var E = (y.prototype = m.prototype = Object.create(b));
                function S(e) {
                  ["next", "throw", "return"].forEach(function (t) {
                    u(e, t, function (e) {
                      return this._invoke(t, e);
                    });
                  });
                }
                function x(e, t) {
                  var r;
                  this._invoke = function (o, a) {
                    function i() {
                      return new t(function (r, i) {
                        !(function r(o, a, i, l) {
                          var u = s(e[o], e, a);
                          if ("throw" !== u.type) {
                            var c = u.arg,
                              f = c.value;
                            return f && "object" == typeof f && n.call(f, "__await")
                              ? t.resolve(f.__await).then(
                                  function (e) {
                                    r("next", e, i, l);
                                  },
                                  function (e) {
                                    r("throw", e, i, l);
                                  },
                                )
                              : t.resolve(f).then(
                                  function (e) {
                                    (c.value = e), i(c);
                                  },
                                  function (e) {
                                    return r("throw", e, i, l);
                                  },
                                );
                          }
                          l(u.arg);
                        })(o, a, r, i);
                      });
                    }
                    return (r = r ? r.then(i, i) : i());
                  };
                }
                function _(e, r) {
                  var n = e.iterator[r.method];
                  if (n === t) {
                    if (((r.delegate = null), "throw" === r.method)) {
                      if (
                        e.iterator.return &&
                        ((r.method = "return"), (r.arg = t), _(e, r), "throw" === r.method)
                      )
                        return g;
                      (r.method = "throw"),
                        (r.arg = new TypeError("The iterator does not provide a 'throw' method"));
                    }
                    return g;
                  }
                  var o = s(n, e.iterator, r.arg);
                  if ("throw" === o.type)
                    return (r.method = "throw"), (r.arg = o.arg), (r.delegate = null), g;
                  var a = o.arg;
                  return a
                    ? a.done
                      ? ((r[e.resultName] = a.value),
                        (r.next = e.nextLoc),
                        "return" !== r.method && ((r.method = "next"), (r.arg = t)),
                        (r.delegate = null),
                        g)
                      : a
                    : ((r.method = "throw"),
                      (r.arg = new TypeError("iterator result is not an object")),
                      (r.delegate = null),
                      g);
                }
                function C(e) {
                  var t = {
                    tryLoc: e[0],
                  };
                  1 in e && (t.catchLoc = e[1]),
                    2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                    this.tryEntries.push(t);
                }
                function O(e) {
                  var t = e.completion || {};
                  (t.type = "normal"), delete t.arg, (e.completion = t);
                }
                function T(e) {
                  (this.tryEntries = [
                    {
                      tryLoc: "root",
                    },
                  ]),
                    e.forEach(C, this),
                    this.reset(!0);
                }
                function P(e) {
                  if (e) {
                    var r = e[a];
                    if (r) return r.call(e);
                    if ("function" == typeof e.next) return e;
                    if (!isNaN(e.length)) {
                      var o = -1,
                        i = function r() {
                          for (; ++o < e.length; )
                            if (n.call(e, o)) return (r.value = e[o]), (r.done = !1), r;
                          return (r.value = t), (r.done = !0), r;
                        };
                      return (i.next = i);
                    }
                  }
                  return {
                    next: L,
                  };
                }
                function L() {
                  return {
                    value: t,
                    done: !0,
                  };
                }
                return (
                  (v.prototype = E.constructor = y),
                  (y.constructor = v),
                  (v.displayName = u(y, l, "GeneratorFunction")),
                  (e.isGeneratorFunction = function (e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === v || "GeneratorFunction" === (t.displayName || t.name));
                  }),
                  (e.mark = function (e) {
                    return (
                      Object.setPrototypeOf
                        ? Object.setPrototypeOf(e, y)
                        : ((e.__proto__ = y), u(e, l, "GeneratorFunction")),
                      (e.prototype = Object.create(E)),
                      e
                    );
                  }),
                  (e.awrap = function (e) {
                    return {
                      __await: e,
                    };
                  }),
                  S(x.prototype),
                  (x.prototype[i] = function () {
                    return this;
                  }),
                  (e.AsyncIterator = x),
                  (e.async = function (t, r, n, o, a) {
                    void 0 === a && (a = Promise);
                    var i = new x(c(t, r, n, o), a);
                    return e.isGeneratorFunction(r)
                      ? i
                      : i.next().then(function (e) {
                          return e.done ? e.value : i.next();
                        });
                  }),
                  S(E),
                  u(E, l, "Generator"),
                  (E[a] = function () {
                    return this;
                  }),
                  (E.toString = function () {
                    return "[object Generator]";
                  }),
                  (e.keys = function (e) {
                    var t = [];
                    for (var r in e) t.push(r);
                    return (
                      t.reverse(),
                      function r() {
                        for (; t.length; ) {
                          var n = t.pop();
                          if (n in e) return (r.value = n), (r.done = !1), r;
                        }
                        return (r.done = !0), r;
                      }
                    );
                  }),
                  (e.values = P),
                  (T.prototype = {
                    constructor: T,
                    reset: function (e) {
                      if (
                        ((this.prev = 0),
                        (this.next = 0),
                        (this.sent = this._sent = t),
                        (this.done = !1),
                        (this.delegate = null),
                        (this.method = "next"),
                        (this.arg = t),
                        this.tryEntries.forEach(O),
                        !e)
                      )
                        for (var r in this)
                          "t" === r.charAt(0) &&
                            n.call(this, r) &&
                            !isNaN(+r.slice(1)) &&
                            (this[r] = t);
                    },
                    stop: function () {
                      this.done = !0;
                      var e = this.tryEntries[0].completion;
                      if ("throw" === e.type) throw e.arg;
                      return this.rval;
                    },
                    dispatchException: function (e) {
                      if (this.done) throw e;
                      var r = this;
                      function o(n, o) {
                        return (
                          (l.type = "throw"),
                          (l.arg = e),
                          (r.next = n),
                          o && ((r.method = "next"), (r.arg = t)),
                          !!o
                        );
                      }
                      for (var a = this.tryEntries.length - 1; a >= 0; --a) {
                        var i = this.tryEntries[a],
                          l = i.completion;
                        if ("root" === i.tryLoc) return o("end");
                        if (i.tryLoc <= this.prev) {
                          var u = n.call(i, "catchLoc"),
                            c = n.call(i, "finallyLoc");
                          if (u && c) {
                            if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                            if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                          } else if (u) {
                            if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                          } else {
                            if (!c) throw new Error("try statement without catch or finally");
                            if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                          }
                        }
                      }
                    },
                    abrupt: function (e, t) {
                      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                        var o = this.tryEntries[r];
                        if (
                          o.tryLoc <= this.prev &&
                          n.call(o, "finallyLoc") &&
                          this.prev < o.finallyLoc
                        ) {
                          var a = o;
                          break;
                        }
                      }
                      a &&
                        ("break" === e || "continue" === e) &&
                        a.tryLoc <= t &&
                        t <= a.finallyLoc &&
                        (a = null);
                      var i = a ? a.completion : {};
                      return (
                        (i.type = e),
                        (i.arg = t),
                        a
                          ? ((this.method = "next"), (this.next = a.finallyLoc), g)
                          : this.complete(i)
                      );
                    },
                    complete: function (e, t) {
                      if ("throw" === e.type) throw e.arg;
                      return (
                        "break" === e.type || "continue" === e.type
                          ? (this.next = e.arg)
                          : "return" === e.type
                          ? ((this.rval = this.arg = e.arg),
                            (this.method = "return"),
                            (this.next = "end"))
                          : "normal" === e.type && t && (this.next = t),
                        g
                      );
                    },
                    finish: function (e) {
                      for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                        var r = this.tryEntries[t];
                        if (r.finallyLoc === e)
                          return this.complete(r.completion, r.afterLoc), O(r), g;
                      }
                    },
                    catch: function (e) {
                      for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                        var r = this.tryEntries[t];
                        if (r.tryLoc === e) {
                          var n = r.completion;
                          if ("throw" === n.type) {
                            var o = n.arg;
                            O(r);
                          }
                          return o;
                        }
                      }
                      throw new Error("illegal catch attempt");
                    },
                    delegateYield: function (e, r, n) {
                      return (
                        (this.delegate = {
                          iterator: P(e),
                          resultName: r,
                          nextLoc: n,
                        }),
                        "next" === this.method && (this.arg = t),
                        g
                      );
                    },
                  }),
                  e
                );
              })(e.exports);
              try {
                regeneratorRuntime = n;
              } catch (e) {
                Function("r", "regeneratorRuntime = r")(n);
              }
            },
            function (e, t) {
              var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
              (t.encode = function (e) {
                if (0 <= e && e < r.length) return r[e];
                throw new TypeError("Must be between 0 and 63: " + e);
              }),
                (t.decode = function (e) {
                  return 65 <= e && e <= 90
                    ? e - 65
                    : 97 <= e && e <= 122
                    ? e - 97 + 26
                    : 48 <= e && e <= 57
                    ? e - 48 + 52
                    : 43 == e
                    ? 62
                    : 47 == e
                    ? 63
                    : -1;
                });
            },
            function (e, t, r) {
              var n = r(1);
              function o() {
                (this._array = []),
                  (this._sorted = !0),
                  (this._last = {
                    generatedLine: -1,
                    generatedColumn: 0,
                  });
              }
              (o.prototype.unsortedForEach = function (e, t) {
                this._array.forEach(e, t);
              }),
                (o.prototype.add = function (e) {
                  var t, r, o, a, i, l;
                  (t = this._last),
                    (r = e),
                    (o = t.generatedLine),
                    (a = r.generatedLine),
                    (i = t.generatedColumn),
                    (l = r.generatedColumn),
                    a > o || (a == o && l >= i) || n.compareByGeneratedPositionsInflated(t, r) <= 0
                      ? ((this._last = e), this._array.push(e))
                      : ((this._sorted = !1), this._array.push(e));
                }),
                (o.prototype.toArray = function () {
                  return (
                    this._sorted ||
                      (this._array.sort(n.compareByGeneratedPositionsInflated),
                      (this._sorted = !0)),
                    this._array
                  );
                }),
                (t.MappingList = o);
            },
            function (e, t, r) {
              var n = r(1),
                o = r(12),
                a = r(6).ArraySet,
                i = r(5),
                l = r(13).quickSort;
              function u(e) {
                var t = e;
                return (
                  "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))),
                  null != t.sections ? new f(t) : new c(t)
                );
              }
              function c(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"),
                  o = n.getArg(t, "sources"),
                  i = n.getArg(t, "names", []),
                  l = n.getArg(t, "sourceRoot", null),
                  u = n.getArg(t, "sourcesContent", null),
                  c = n.getArg(t, "mappings"),
                  s = n.getArg(t, "file", null);
                if (r != this._version) throw new Error("Unsupported version: " + r);
                (o = o
                  .map(String)
                  .map(n.normalize)
                  .map(function (e) {
                    return l && n.isAbsolute(l) && n.isAbsolute(e) ? n.relative(l, e) : e;
                  })),
                  (this._names = a.fromArray(i.map(String), !0)),
                  (this._sources = a.fromArray(o, !0)),
                  (this.sourceRoot = l),
                  (this.sourcesContent = u),
                  (this._mappings = c),
                  (this.file = s);
              }
              function s() {
                (this.generatedLine = 0),
                  (this.generatedColumn = 0),
                  (this.source = null),
                  (this.originalLine = null),
                  (this.originalColumn = null),
                  (this.name = null);
              }
              function f(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"),
                  o = n.getArg(t, "sections");
                if (r != this._version) throw new Error("Unsupported version: " + r);
                (this._sources = new a()), (this._names = new a());
                var i = {
                  line: -1,
                  column: 0,
                };
                this._sections = o.map(function (e) {
                  if (e.url) throw new Error("Support for url field in sections not implemented.");
                  var t = n.getArg(e, "offset"),
                    r = n.getArg(t, "line"),
                    o = n.getArg(t, "column");
                  if (r < i.line || (r === i.line && o < i.column))
                    throw new Error("Section offsets must be ordered and non-overlapping.");
                  return (
                    (i = t),
                    {
                      generatedOffset: {
                        generatedLine: r + 1,
                        generatedColumn: o + 1,
                      },
                      consumer: new u(n.getArg(e, "map")),
                    }
                  );
                });
              }
              (u.fromSourceMap = function (e) {
                return c.fromSourceMap(e);
              }),
                (u.prototype._version = 3),
                (u.prototype.__generatedMappings = null),
                Object.defineProperty(u.prototype, "_generatedMappings", {
                  get: function () {
                    return (
                      this.__generatedMappings ||
                        this._parseMappings(this._mappings, this.sourceRoot),
                      this.__generatedMappings
                    );
                  },
                }),
                (u.prototype.__originalMappings = null),
                Object.defineProperty(u.prototype, "_originalMappings", {
                  get: function () {
                    return (
                      this.__originalMappings ||
                        this._parseMappings(this._mappings, this.sourceRoot),
                      this.__originalMappings
                    );
                  },
                }),
                (u.prototype._charIsMappingSeparator = function (e, t) {
                  var r = e.charAt(t);
                  return ";" === r || "," === r;
                }),
                (u.prototype._parseMappings = function (e, t) {
                  throw new Error("Subclasses must implement _parseMappings");
                }),
                (u.GENERATED_ORDER = 1),
                (u.ORIGINAL_ORDER = 2),
                (u.GREATEST_LOWER_BOUND = 1),
                (u.LEAST_UPPER_BOUND = 2),
                (u.prototype.eachMapping = function (e, t, r) {
                  var o,
                    a = t || null;
                  switch (r || u.GENERATED_ORDER) {
                    case u.GENERATED_ORDER:
                      o = this._generatedMappings;
                      break;
                    case u.ORIGINAL_ORDER:
                      o = this._originalMappings;
                      break;
                    default:
                      throw new Error("Unknown order of iteration.");
                  }
                  var i = this.sourceRoot;
                  o.map(function (e) {
                    var t = null === e.source ? null : this._sources.at(e.source);
                    return (
                      null != t && null != i && (t = n.join(i, t)),
                      {
                        source: t,
                        generatedLine: e.generatedLine,
                        generatedColumn: e.generatedColumn,
                        originalLine: e.originalLine,
                        originalColumn: e.originalColumn,
                        name: null === e.name ? null : this._names.at(e.name),
                      }
                    );
                  }, this).forEach(e, a);
                }),
                (u.prototype.allGeneratedPositionsFor = function (e) {
                  var t = n.getArg(e, "line"),
                    r = {
                      source: n.getArg(e, "source"),
                      originalLine: t,
                      originalColumn: n.getArg(e, "column", 0),
                    };
                  if (
                    (null != this.sourceRoot && (r.source = n.relative(this.sourceRoot, r.source)),
                    !this._sources.has(r.source))
                  )
                    return [];
                  r.source = this._sources.indexOf(r.source);
                  var a = [],
                    i = this._findMapping(
                      r,
                      this._originalMappings,
                      "originalLine",
                      "originalColumn",
                      n.compareByOriginalPositions,
                      o.LEAST_UPPER_BOUND,
                    );
                  if (i >= 0) {
                    var l = this._originalMappings[i];
                    if (void 0 === e.column)
                      for (var u = l.originalLine; l && l.originalLine === u; )
                        a.push({
                          line: n.getArg(l, "generatedLine", null),
                          column: n.getArg(l, "generatedColumn", null),
                          lastColumn: n.getArg(l, "lastGeneratedColumn", null),
                        }),
                          (l = this._originalMappings[++i]);
                    else
                      for (
                        var c = l.originalColumn;
                        l && l.originalLine === t && l.originalColumn == c;

                      )
                        a.push({
                          line: n.getArg(l, "generatedLine", null),
                          column: n.getArg(l, "generatedColumn", null),
                          lastColumn: n.getArg(l, "lastGeneratedColumn", null),
                        }),
                          (l = this._originalMappings[++i]);
                  }
                  return a;
                }),
                (t.SourceMapConsumer = u),
                (c.prototype = Object.create(u.prototype)),
                (c.prototype.consumer = u),
                (c.fromSourceMap = function (e) {
                  var t = Object.create(c.prototype),
                    r = (t._names = a.fromArray(e._names.toArray(), !0)),
                    o = (t._sources = a.fromArray(e._sources.toArray(), !0));
                  (t.sourceRoot = e._sourceRoot),
                    (t.sourcesContent = e._generateSourcesContent(
                      t._sources.toArray(),
                      t.sourceRoot,
                    )),
                    (t.file = e._file);
                  for (
                    var i = e._mappings.toArray().slice(),
                      u = (t.__generatedMappings = []),
                      f = (t.__originalMappings = []),
                      d = 0,
                      p = i.length;
                    d < p;
                    d++
                  ) {
                    var h = i[d],
                      g = new s();
                    (g.generatedLine = h.generatedLine),
                      (g.generatedColumn = h.generatedColumn),
                      h.source &&
                        ((g.source = o.indexOf(h.source)),
                        (g.originalLine = h.originalLine),
                        (g.originalColumn = h.originalColumn),
                        h.name && (g.name = r.indexOf(h.name)),
                        f.push(g)),
                      u.push(g);
                  }
                  return l(t.__originalMappings, n.compareByOriginalPositions), t;
                }),
                (c.prototype._version = 3),
                Object.defineProperty(c.prototype, "sources", {
                  get: function () {
                    return this._sources.toArray().map(function (e) {
                      return null != this.sourceRoot ? n.join(this.sourceRoot, e) : e;
                    }, this);
                  },
                }),
                (c.prototype._parseMappings = function (e, t) {
                  for (
                    var r,
                      o,
                      a,
                      u,
                      c,
                      f = 1,
                      d = 0,
                      p = 0,
                      h = 0,
                      g = 0,
                      m = 0,
                      v = e.length,
                      y = 0,
                      b = {},
                      w = {},
                      k = [],
                      E = [];
                    y < v;

                  )
                    if (";" === e.charAt(y)) f++, y++, (d = 0);
                    else if ("," === e.charAt(y)) y++;
                    else {
                      for (
                        (r = new s()).generatedLine = f, u = y;
                        u < v && !this._charIsMappingSeparator(e, u);
                        u++
                      );
                      if ((a = b[(o = e.slice(y, u))])) y += o.length;
                      else {
                        for (a = []; y < u; )
                          i.decode(e, y, w), (c = w.value), (y = w.rest), a.push(c);
                        if (2 === a.length)
                          throw new Error("Found a source, but no line and column");
                        if (3 === a.length)
                          throw new Error("Found a source and line, but no column");
                        b[o] = a;
                      }
                      (r.generatedColumn = d + a[0]),
                        (d = r.generatedColumn),
                        a.length > 1 &&
                          ((r.source = g + a[1]),
                          (g += a[1]),
                          (r.originalLine = p + a[2]),
                          (p = r.originalLine),
                          (r.originalLine += 1),
                          (r.originalColumn = h + a[3]),
                          (h = r.originalColumn),
                          a.length > 4 && ((r.name = m + a[4]), (m += a[4]))),
                        E.push(r),
                        "number" == typeof r.originalLine && k.push(r);
                    }
                  l(E, n.compareByGeneratedPositionsDeflated),
                    (this.__generatedMappings = E),
                    l(k, n.compareByOriginalPositions),
                    (this.__originalMappings = k);
                }),
                (c.prototype._findMapping = function (e, t, r, n, a, i) {
                  if (e[r] <= 0)
                    throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
                  if (e[n] < 0)
                    throw new TypeError("Column must be greater than or equal to 0, got " + e[n]);
                  return o.search(e, t, a, i);
                }),
                (c.prototype.computeColumnSpans = function () {
                  for (var e = 0; e < this._generatedMappings.length; ++e) {
                    var t = this._generatedMappings[e];
                    if (e + 1 < this._generatedMappings.length) {
                      var r = this._generatedMappings[e + 1];
                      if (t.generatedLine === r.generatedLine) {
                        t.lastGeneratedColumn = r.generatedColumn - 1;
                        continue;
                      }
                    }
                    t.lastGeneratedColumn = 1 / 0;
                  }
                }),
                (c.prototype.originalPositionFor = function (e) {
                  var t = {
                      generatedLine: n.getArg(e, "line"),
                      generatedColumn: n.getArg(e, "column"),
                    },
                    r = this._findMapping(
                      t,
                      this._generatedMappings,
                      "generatedLine",
                      "generatedColumn",
                      n.compareByGeneratedPositionsDeflated,
                      n.getArg(e, "bias", u.GREATEST_LOWER_BOUND),
                    );
                  if (r >= 0) {
                    var o = this._generatedMappings[r];
                    if (o.generatedLine === t.generatedLine) {
                      var a = n.getArg(o, "source", null);
                      null !== a &&
                        ((a = this._sources.at(a)),
                        null != this.sourceRoot && (a = n.join(this.sourceRoot, a)));
                      var i = n.getArg(o, "name", null);
                      return (
                        null !== i && (i = this._names.at(i)),
                        {
                          source: a,
                          line: n.getArg(o, "originalLine", null),
                          column: n.getArg(o, "originalColumn", null),
                          name: i,
                        }
                      );
                    }
                  }
                  return {
                    source: null,
                    line: null,
                    column: null,
                    name: null,
                  };
                }),
                (c.prototype.hasContentsOfAllSources = function () {
                  return (
                    !!this.sourcesContent &&
                    this.sourcesContent.length >= this._sources.size() &&
                    !this.sourcesContent.some(function (e) {
                      return null == e;
                    })
                  );
                }),
                (c.prototype.sourceContentFor = function (e, t) {
                  if (!this.sourcesContent) return null;
                  if (
                    (null != this.sourceRoot && (e = n.relative(this.sourceRoot, e)),
                    this._sources.has(e))
                  )
                    return this.sourcesContent[this._sources.indexOf(e)];
                  var r;
                  if (null != this.sourceRoot && (r = n.urlParse(this.sourceRoot))) {
                    var o = e.replace(/^file:\/\//, "");
                    if ("file" == r.scheme && this._sources.has(o))
                      return this.sourcesContent[this._sources.indexOf(o)];
                    if ((!r.path || "/" == r.path) && this._sources.has("/" + e))
                      return this.sourcesContent[this._sources.indexOf("/" + e)];
                  }
                  if (t) return null;
                  throw new Error('"' + e + '" is not in the SourceMap.');
                }),
                (c.prototype.generatedPositionFor = function (e) {
                  var t = n.getArg(e, "source");
                  if (
                    (null != this.sourceRoot && (t = n.relative(this.sourceRoot, t)),
                    !this._sources.has(t))
                  )
                    return {
                      line: null,
                      column: null,
                      lastColumn: null,
                    };
                  var r = {
                      source: (t = this._sources.indexOf(t)),
                      originalLine: n.getArg(e, "line"),
                      originalColumn: n.getArg(e, "column"),
                    },
                    o = this._findMapping(
                      r,
                      this._originalMappings,
                      "originalLine",
                      "originalColumn",
                      n.compareByOriginalPositions,
                      n.getArg(e, "bias", u.GREATEST_LOWER_BOUND),
                    );
                  if (o >= 0) {
                    var a = this._originalMappings[o];
                    if (a.source === r.source)
                      return {
                        line: n.getArg(a, "generatedLine", null),
                        column: n.getArg(a, "generatedColumn", null),
                        lastColumn: n.getArg(a, "lastGeneratedColumn", null),
                      };
                  }
                  return {
                    line: null,
                    column: null,
                    lastColumn: null,
                  };
                }),
                (t.BasicSourceMapConsumer = c),
                (f.prototype = Object.create(u.prototype)),
                (f.prototype.constructor = u),
                (f.prototype._version = 3),
                Object.defineProperty(f.prototype, "sources", {
                  get: function () {
                    for (var e = [], t = 0; t < this._sections.length; t++)
                      for (var r = 0; r < this._sections[t].consumer.sources.length; r++)
                        e.push(this._sections[t].consumer.sources[r]);
                    return e;
                  },
                }),
                (f.prototype.originalPositionFor = function (e) {
                  var t = {
                      generatedLine: n.getArg(e, "line"),
                      generatedColumn: n.getArg(e, "column"),
                    },
                    r = o.search(t, this._sections, function (e, t) {
                      var r = e.generatedLine - t.generatedOffset.generatedLine;
                      return r || e.generatedColumn - t.generatedOffset.generatedColumn;
                    }),
                    a = this._sections[r];
                  return a
                    ? a.consumer.originalPositionFor({
                        line: t.generatedLine - (a.generatedOffset.generatedLine - 1),
                        column:
                          t.generatedColumn -
                          (a.generatedOffset.generatedLine === t.generatedLine
                            ? a.generatedOffset.generatedColumn - 1
                            : 0),
                        bias: e.bias,
                      })
                    : {
                        source: null,
                        line: null,
                        column: null,
                        name: null,
                      };
                }),
                (f.prototype.hasContentsOfAllSources = function () {
                  return this._sections.every(function (e) {
                    return e.consumer.hasContentsOfAllSources();
                  });
                }),
                (f.prototype.sourceContentFor = function (e, t) {
                  for (var r = 0; r < this._sections.length; r++) {
                    var n = this._sections[r].consumer.sourceContentFor(e, !0);
                    if (n) return n;
                  }
                  if (t) return null;
                  throw new Error('"' + e + '" is not in the SourceMap.');
                }),
                (f.prototype.generatedPositionFor = function (e) {
                  for (var t = 0; t < this._sections.length; t++) {
                    var r = this._sections[t];
                    if (-1 !== r.consumer.sources.indexOf(n.getArg(e, "source"))) {
                      var o = r.consumer.generatedPositionFor(e);
                      if (o)
                        return {
                          line: o.line + (r.generatedOffset.generatedLine - 1),
                          column:
                            o.column +
                            (r.generatedOffset.generatedLine === o.line
                              ? r.generatedOffset.generatedColumn - 1
                              : 0),
                        };
                    }
                  }
                  return {
                    line: null,
                    column: null,
                  };
                }),
                (f.prototype._parseMappings = function (e, t) {
                  (this.__generatedMappings = []), (this.__originalMappings = []);
                  for (var r = 0; r < this._sections.length; r++)
                    for (
                      var o = this._sections[r], a = o.consumer._generatedMappings, i = 0;
                      i < a.length;
                      i++
                    ) {
                      var u = a[i],
                        c = o.consumer._sources.at(u.source);
                      null !== o.consumer.sourceRoot && (c = n.join(o.consumer.sourceRoot, c)),
                        this._sources.add(c),
                        (c = this._sources.indexOf(c));
                      var s = o.consumer._names.at(u.name);
                      this._names.add(s), (s = this._names.indexOf(s));
                      var f = {
                        source: c,
                        generatedLine: u.generatedLine + (o.generatedOffset.generatedLine - 1),
                        generatedColumn:
                          u.generatedColumn +
                          (o.generatedOffset.generatedLine === u.generatedLine
                            ? o.generatedOffset.generatedColumn - 1
                            : 0),
                        originalLine: u.originalLine,
                        originalColumn: u.originalColumn,
                        name: s,
                      };
                      this.__generatedMappings.push(f),
                        "number" == typeof f.originalLine && this.__originalMappings.push(f);
                    }
                  l(this.__generatedMappings, n.compareByGeneratedPositionsDeflated),
                    l(this.__originalMappings, n.compareByOriginalPositions);
                }),
                (t.IndexedSourceMapConsumer = f);
            },
            function (e, t) {
              (t.GREATEST_LOWER_BOUND = 1),
                (t.LEAST_UPPER_BOUND = 2),
                (t.search = function (e, r, n, o) {
                  if (0 === r.length) return -1;
                  var a = (function e(r, n, o, a, i, l) {
                    var u = Math.floor((n - r) / 2) + r,
                      c = i(o, a[u], !0);
                    return 0 === c
                      ? u
                      : c > 0
                      ? n - u > 1
                        ? e(u, n, o, a, i, l)
                        : l == t.LEAST_UPPER_BOUND
                        ? n < a.length
                          ? n
                          : -1
                        : u
                      : u - r > 1
                      ? e(r, u, o, a, i, l)
                      : l == t.LEAST_UPPER_BOUND
                      ? u
                      : r < 0
                      ? -1
                      : r;
                  })(-1, r.length, e, r, n, o || t.GREATEST_LOWER_BOUND);
                  if (a < 0) return -1;
                  for (; a - 1 >= 0 && 0 === n(r[a], r[a - 1], !0); ) --a;
                  return a;
                });
            },
            function (e, t) {
              function r(e, t, r) {
                var n = e[t];
                (e[t] = e[r]), (e[r] = n);
              }
              function n(e, t, o, a) {
                if (o < a) {
                  var i = o - 1;
                  r(e, ((s = o), (f = a), Math.round(s + Math.random() * (f - s))), a);
                  for (var l = e[a], u = o; u < a; u++) t(e[u], l) <= 0 && r(e, (i += 1), u);
                  r(e, i + 1, u);
                  var c = i + 1;
                  n(e, t, o, c - 1), n(e, t, c + 1, a);
                }
                var s, f;
              }
              t.quickSort = function (e, t) {
                n(e, t, 0, e.length - 1);
              };
            },
            function (e, t, r) {
              var n = r(4).SourceMapGenerator,
                o = r(1),
                a = /(\r?\n)/,
                i = "$$$isSourceNode$$$";
              function l(e, t, r, n, o) {
                (this.children = []),
                  (this.sourceContents = {}),
                  (this.line = null == e ? null : e),
                  (this.column = null == t ? null : t),
                  (this.source = null == r ? null : r),
                  (this.name = null == o ? null : o),
                  (this[i] = !0),
                  null != n && this.add(n);
              }
              (l.fromStringWithSourceMap = function (e, t, r) {
                var n = new l(),
                  i = e.split(a),
                  u = 0,
                  c = function () {
                    return e() + (e() || "");
                    function e() {
                      return u < i.length ? i[u++] : void 0;
                    }
                  },
                  s = 1,
                  f = 0,
                  d = null;
                return (
                  t.eachMapping(function (e) {
                    if (null !== d) {
                      if (!(s < e.generatedLine)) {
                        var t = (r = i[u]).substr(0, e.generatedColumn - f);
                        return (
                          (i[u] = r.substr(e.generatedColumn - f)),
                          (f = e.generatedColumn),
                          p(d, t),
                          void (d = e)
                        );
                      }
                      p(d, c()), s++, (f = 0);
                    }
                    for (; s < e.generatedLine; ) n.add(c()), s++;
                    if (f < e.generatedColumn) {
                      var r = i[u];
                      n.add(r.substr(0, e.generatedColumn)),
                        (i[u] = r.substr(e.generatedColumn)),
                        (f = e.generatedColumn);
                    }
                    d = e;
                  }, this),
                  u < i.length && (d && p(d, c()), n.add(i.splice(u).join(""))),
                  t.sources.forEach(function (e) {
                    var a = t.sourceContentFor(e);
                    null != a && (null != r && (e = o.join(r, e)), n.setSourceContent(e, a));
                  }),
                  n
                );
                function p(e, t) {
                  if (null === e || void 0 === e.source) n.add(t);
                  else {
                    var a = r ? o.join(r, e.source) : e.source;
                    n.add(new l(e.originalLine, e.originalColumn, a, t, e.name));
                  }
                }
              }),
                (l.prototype.add = function (e) {
                  if (Array.isArray(e))
                    e.forEach(function (e) {
                      this.add(e);
                    }, this);
                  else {
                    if (!e[i] && "string" != typeof e)
                      throw new TypeError(
                        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                          e,
                      );
                    e && this.children.push(e);
                  }
                  return this;
                }),
                (l.prototype.prepend = function (e) {
                  if (Array.isArray(e)) for (var t = e.length - 1; t >= 0; t--) this.prepend(e[t]);
                  else {
                    if (!e[i] && "string" != typeof e)
                      throw new TypeError(
                        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                          e,
                      );
                    this.children.unshift(e);
                  }
                  return this;
                }),
                (l.prototype.walk = function (e) {
                  for (var t, r = 0, n = this.children.length; r < n; r++)
                    (t = this.children[r])[i]
                      ? t.walk(e)
                      : "" !== t &&
                        e(t, {
                          source: this.source,
                          line: this.line,
                          column: this.column,
                          name: this.name,
                        });
                }),
                (l.prototype.join = function (e) {
                  var t,
                    r,
                    n = this.children.length;
                  if (n > 0) {
                    for (t = [], r = 0; r < n - 1; r++) t.push(this.children[r]), t.push(e);
                    t.push(this.children[r]), (this.children = t);
                  }
                  return this;
                }),
                (l.prototype.replaceRight = function (e, t) {
                  var r = this.children[this.children.length - 1];
                  return (
                    r[i]
                      ? r.replaceRight(e, t)
                      : "string" == typeof r
                      ? (this.children[this.children.length - 1] = r.replace(e, t))
                      : this.children.push("".replace(e, t)),
                    this
                  );
                }),
                (l.prototype.setSourceContent = function (e, t) {
                  this.sourceContents[o.toSetString(e)] = t;
                }),
                (l.prototype.walkSourceContents = function (e) {
                  for (var t = 0, r = this.children.length; t < r; t++)
                    this.children[t][i] && this.children[t].walkSourceContents(e);
                  var n = Object.keys(this.sourceContents);
                  for (t = 0, r = n.length; t < r; t++)
                    e(o.fromSetString(n[t]), this.sourceContents[n[t]]);
                }),
                (l.prototype.toString = function () {
                  var e = "";
                  return (
                    this.walk(function (t) {
                      e += t;
                    }),
                    e
                  );
                }),
                (l.prototype.toStringWithSourceMap = function (e) {
                  var t = {
                      code: "",
                      line: 1,
                      column: 0,
                    },
                    r = new n(e),
                    o = !1,
                    a = null,
                    i = null,
                    l = null,
                    u = null;
                  return (
                    this.walk(function (e, n) {
                      (t.code += e),
                        null !== n.source && null !== n.line && null !== n.column
                          ? ((a === n.source && i === n.line && l === n.column && u === n.name) ||
                              r.addMapping({
                                source: n.source,
                                original: {
                                  line: n.line,
                                  column: n.column,
                                },
                                generated: {
                                  line: t.line,
                                  column: t.column,
                                },
                                name: n.name,
                              }),
                            (a = n.source),
                            (i = n.line),
                            (l = n.column),
                            (u = n.name),
                            (o = !0))
                          : o &&
                            (r.addMapping({
                              generated: {
                                line: t.line,
                                column: t.column,
                              },
                            }),
                            (a = null),
                            (o = !1));
                      for (var c = 0, s = e.length; c < s; c++)
                        10 === e.charCodeAt(c)
                          ? (t.line++,
                            (t.column = 0),
                            c + 1 === s
                              ? ((a = null), (o = !1))
                              : o &&
                                r.addMapping({
                                  source: n.source,
                                  original: {
                                    line: n.line,
                                    column: n.column,
                                  },
                                  generated: {
                                    line: t.line,
                                    column: t.column,
                                  },
                                  name: n.name,
                                }))
                          : t.column++;
                    }),
                    this.walkSourceContents(function (e, t) {
                      r.setSourceContent(e, t);
                    }),
                    {
                      code: t.code,
                      map: r,
                    }
                  );
                }),
                (t.SourceNode = l);
            },
            function (e, t, r) {
              "use strict";
              r.r(t),
                r.d(t, "setEditorHandler", function () {
                  return ue;
                }),
                r.d(t, "reportBuildError", function () {
                  return ce;
                }),
                r.d(t, "reportRuntimeError", function () {
                  return se;
                }),
                r.d(t, "dismissBuildError", function () {
                  return fe;
                }),
                r.d(t, "startReportingRuntimeErrors", function () {
                  return de;
                }),
                r.d(t, "dismissRuntimeErrors", function () {
                  return he;
                }),
                r.d(t, "stopReportingRuntimeErrors", function () {
                  return ge;
                });
              var n = null;
              function o(e, t) {
                if (t.error) {
                  var r = t.error;
                  r instanceof Error ? e(r) : e(new Error(r));
                }
              }
              function a(e, t) {
                null === n && ((n = o.bind(void 0, t)), e.addEventListener("error", n));
              }
              var i = null;
              function l(e, t) {
                if (null == t || null == t.reason) return e(new Error("Unknown"));
                var r = t.reason;
                return r instanceof Error ? e(r) : e(new Error(r));
              }
              function u(e, t) {
                null === i &&
                  ((i = l.bind(void 0, t)), e.addEventListener("unhandledrejection", i));
              }
              var c = !1,
                s = 10,
                f = 50;
              var d = [],
                p = function () {
                  "undefined" != typeof console &&
                    ((console.reactStack = function (e) {
                      return d.push(e);
                    }),
                    (console.reactStackEnd = function (e) {
                      return d.pop();
                    }));
                },
                h = function () {
                  "undefined" != typeof console &&
                    ((console.reactStack = void 0), (console.reactStackEnd = void 0));
                },
                g = function (e, t) {
                  if ("undefined" != typeof console) {
                    var r = console[e];
                    "function" == typeof r &&
                      (console[e] = function () {
                        try {
                          var e = arguments[0];
                          "string" == typeof e && d.length > 0 && t(e, d[d.length - 1]);
                        } catch (e) {
                          setTimeout(function () {
                            throw e;
                          });
                        }
                        return r.apply(this, arguments);
                      });
                  }
                };
              function m(e, t) {
                return (m =
                  Object.setPrototypeOf ||
                  function (e, t) {
                    return (e.__proto__ = t), e;
                  })(e, t);
              }
              function v(e, t, r) {
                return (v = (function () {
                  if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                  if (Reflect.construct.sham) return !1;
                  if ("function" == typeof Proxy) return !0;
                  try {
                    return (
                      Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0
                    );
                  } catch (e) {
                    return !1;
                  }
                })()
                  ? Reflect.construct
                  : function (e, t, r) {
                      var n = [null];
                      n.push.apply(n, t);
                      var o = new (Function.bind.apply(e, n))();
                      return r && m(o, r.prototype), o;
                    }).apply(null, arguments);
              }
              function y(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
                return n;
              }
              function b(e) {
                return (
                  (function (e) {
                    if (Array.isArray(e)) return y(e);
                  })(e) ||
                  (function (e) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e))
                      return Array.from(e);
                  })(e) ||
                  (function (e, t) {
                    if (e) {
                      if ("string" == typeof e) return y(e, t);
                      var r = Object.prototype.toString.call(e).slice(8, -1);
                      return (
                        "Object" === r && e.constructor && (r = e.constructor.name),
                        "Map" === r || "Set" === r
                          ? Array.from(e)
                          : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                          ? y(e, t)
                          : void 0
                      );
                    }
                  })(e) ||
                  (function () {
                    throw new TypeError(
                      "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
                    );
                  })()
                );
              }
              function w(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var n = t[r];
                  (n.enumerable = n.enumerable || !1),
                    (n.configurable = !0),
                    "value" in n && (n.writable = !0),
                    Object.defineProperty(e, n.key, n);
                }
              }
              function k(e, t, r) {
                return t && w(e.prototype, t), r && w(e, r), e;
              }
              function E(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }
              var S = function e(t, r) {
                  var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  E(this, e), (this.lineNumber = t), (this.content = r), (this.highlight = n);
                },
                x = (function () {
                  function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                      r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                      n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                      o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                      a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null,
                      i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
                      l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
                      u = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
                      c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
                      s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
                    E(this, e),
                      t && 0 === t.indexOf("Object.") && (t = t.slice(7)),
                      ("friendlySyntaxErrorLabel" !== t &&
                        "exports.__esModule" !== t &&
                        "<anonymous>" !== t &&
                        t) ||
                        (t = null),
                      (this.functionName = t),
                      (this.fileName = r),
                      (this.lineNumber = n),
                      (this.columnNumber = o),
                      (this._originalFunctionName = i),
                      (this._originalFileName = l),
                      (this._originalLineNumber = u),
                      (this._originalColumnNumber = c),
                      (this._scriptCode = a),
                      (this._originalScriptCode = s);
                  }
                  return (
                    k(e, [
                      {
                        key: "getFunctionName",
                        value: function () {
                          return this.functionName || "(anonymous function)";
                        },
                      },
                      {
                        key: "getSource",
                        value: function () {
                          var e = "";
                          return (
                            null != this.fileName && (e += this.fileName + ":"),
                            null != this.lineNumber && (e += this.lineNumber + ":"),
                            null != this.columnNumber && (e += this.columnNumber + ":"),
                            e.slice(0, -1)
                          );
                        },
                      },
                      {
                        key: "toString",
                        value: function () {
                          var e = this.getFunctionName(),
                            t = this.getSource();
                          return "".concat(e).concat(t ? " (".concat(t, ")") : "");
                        },
                      },
                    ]),
                    e
                  );
                })(),
                _ = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
              function C(e) {
                return _.exec(e)
                  .slice(1)
                  .map(function (e) {
                    var t = Number(e);
                    return isNaN(t) ? e : t;
                  });
              }
              var O = /^\s*(at|in)\s.+(:\d+)/,
                T = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
              function P(e) {
                return e
                  .filter(function (e) {
                    return O.test(e) || T.test(e);
                  })
                  .map(function (e) {
                    if (T.test(e)) {
                      var t = !1;
                      / > (eval|Function)/.test(e) &&
                        ((e = e.replace(
                          / line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g,
                          ":$1",
                        )),
                        (t = !0));
                      var r = e.split(/[@]/g),
                        n = r.pop();
                      return v(x, [r.join("@") || (t ? "eval" : null)].concat(b(C(n))));
                    }
                    -1 !== e.indexOf("(eval ") &&
                      (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")),
                      -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
                    var o = e.trim().split(/\s+/g).slice(1),
                      a = o.pop();
                    return v(x, [o.join(" ") || null].concat(b(C(a))));
                  });
              }
              function L(e) {
                if (null == e) throw new Error("You cannot pass a null object.");
                if ("string" == typeof e) return P(e.split("\n"));
                if (Array.isArray(e)) return P(e);
                if ("string" == typeof e.stack) return P(e.stack.split("\n"));
                throw new Error("The error you provided does not contain a stack trace.");
              }
              var R = r(0),
                A = r.n(R);
              function N(e, t, r, n, o, a, i) {
                try {
                  var l = e[a](i),
                    u = l.value;
                } catch (e) {
                  return void r(e);
                }
                l.done ? t(u) : Promise.resolve(u).then(n, o);
              }
              function j(e) {
                return function () {
                  var t = this,
                    r = arguments;
                  return new Promise(function (n, o) {
                    var a = e.apply(t, r);
                    function i(e) {
                      N(a, n, o, i, l, "next", e);
                    }
                    function l(e) {
                      N(a, n, o, i, l, "throw", e);
                    }
                    i(void 0);
                  });
                };
              }
              var M = r(3),
                I = (function () {
                  function e(t) {
                    E(this, e), (this.__source_map = t);
                  }
                  return (
                    k(e, [
                      {
                        key: "getOriginalPosition",
                        value: function (e, t) {
                          var r = this.__source_map.originalPositionFor({
                            line: e,
                            column: t,
                          });
                          return {
                            line: r.line,
                            column: r.column,
                            source: r.source,
                          };
                        },
                      },
                      {
                        key: "getGeneratedPosition",
                        value: function (e, t, r) {
                          var n = this.__source_map.generatedPositionFor({
                            source: e,
                            line: t,
                            column: r,
                          });
                          return {
                            line: n.line,
                            column: n.column,
                          };
                        },
                      },
                      {
                        key: "getSource",
                        value: function (e) {
                          return this.__source_map.sourceContentFor(e);
                        },
                      },
                      {
                        key: "getSources",
                        value: function () {
                          return this.__source_map.sources;
                        },
                      },
                    ]),
                    e
                  );
                })();
              function D(e, t) {
                for (var r = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, n = null; ; ) {
                  var o = r.exec(t);
                  if (null == o) break;
                  n = o;
                }
                return n && n[1]
                  ? Promise.resolve(n[1].toString())
                  : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
              }
              function z(e, t) {
                return q.apply(this, arguments);
              }
              function q() {
                return (q = j(
                  A.a.mark(function e(t, r) {
                    var n, o, a, i, l, u;
                    return A.a.wrap(function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (e.next = 2), D(t, r);
                          case 2:
                            if (0 !== (n = e.sent).indexOf("data:")) {
                              e.next = 14;
                              break;
                            }
                            if (
                              ((o = /^data:application\/json;([\w=:"-]+;)*base64,/),
                              (a = n.match(o)))
                            ) {
                              e.next = 8;
                              break;
                            }
                            throw new Error(
                              "Sorry, non-base64 inline source-map encoding is not supported.",
                            );
                          case 8:
                            return (
                              (n = n.substring(a[0].length)),
                              (n = window.atob(n)),
                              (n = JSON.parse(n)),
                              e.abrupt("return", new I(new M.SourceMapConsumer(n)))
                            );
                          case 14:
                            return (
                              (i = t.lastIndexOf("/")),
                              (l = t.substring(0, i + 1) + n),
                              (e.next = 18),
                              fetch(l).then(function (e) {
                                return e.json();
                              })
                            );
                          case 18:
                            return (
                              (u = e.sent), e.abrupt("return", new I(new M.SourceMapConsumer(u)))
                            );
                          case 20:
                          case "end":
                            return e.stop();
                        }
                    }, e);
                  }),
                )).apply(this, arguments);
              }
              function F(e, t, r) {
                "string" == typeof r && (r = r.split("\n"));
                for (
                  var n = [], o = Math.max(0, e - 1 - t);
                  o <= Math.min(r.length - 1, e - 1 + t);
                  ++o
                )
                  n.push(new S(o + 1, r[o], o === e - 1));
                return n;
              }
              var U = r(7);
              function B(e) {
                return H.apply(this, arguments);
              }
              function H() {
                return (H = j(
                  A.a.mark(function e(t) {
                    var r,
                      n,
                      o,
                      a = arguments;
                    return A.a.wrap(function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              (r = a.length > 1 && void 0 !== a[1] ? a[1] : 3),
                              (n = {}),
                              (o = []),
                              t.forEach(function (e) {
                                var t = e.fileName;
                                null != t && -1 === o.indexOf(t) && o.push(t);
                              }),
                              (e.next = 6),
                              Object(U.settle)(
                                o.map(
                                  (function () {
                                    var e = j(
                                      A.a.mark(function e(t) {
                                        var r, o, a;
                                        return A.a.wrap(function (e) {
                                          for (;;)
                                            switch ((e.prev = e.next)) {
                                              case 0:
                                                return (
                                                  (r =
                                                    0 === t.indexOf("webpack-internal:")
                                                      ? "/__get-internal-source?fileName=".concat(
                                                          encodeURIComponent(t),
                                                        )
                                                      : t),
                                                  (e.next = 3),
                                                  fetch(r).then(function (e) {
                                                    return e.text();
                                                  })
                                                );
                                              case 3:
                                                return (o = e.sent), (e.next = 6), z(t, o);
                                              case 6:
                                                (a = e.sent),
                                                  (n[t] = {
                                                    fileSource: o,
                                                    map: a,
                                                  });
                                              case 8:
                                              case "end":
                                                return e.stop();
                                            }
                                        }, e);
                                      }),
                                    );
                                    return function (t) {
                                      return e.apply(this, arguments);
                                    };
                                  })(),
                                ),
                              )
                            );
                          case 6:
                            return e.abrupt(
                              "return",
                              t.map(function (e) {
                                var t = e.functionName,
                                  o = e.fileName,
                                  a = e.lineNumber,
                                  i = e.columnNumber,
                                  l = n[o] || {},
                                  u = l.map,
                                  c = l.fileSource;
                                if (null == u || null == a) return e;
                                var s = u.getOriginalPosition(a, i),
                                  f = s.source,
                                  d = s.line,
                                  p = s.column,
                                  h = null == f ? [] : u.getSource(f);
                                return new x(t, o, a, i, F(a, r, c), t, f, d, p, F(d, r, h));
                              }),
                            );
                          case 7:
                          case "end":
                            return e.stop();
                        }
                    }, e);
                  }),
                )).apply(this, arguments);
              }
              var $ = r(2),
                V = r.n($);
              function W(e, t) {
                var r = -1,
                  n = -1;
                do ++r, (n = t.indexOf(e, n + 1));
                while (-1 !== n);
                return r;
              }
              function G(e, t) {
                return Q.apply(this, arguments);
              }
              function Q() {
                return (Q = j(
                  A.a.mark(function e(t, r) {
                    var n,
                      o,
                      a,
                      i,
                      l = arguments;
                    return A.a.wrap(function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            if (
                              ((n = l.length > 2 && void 0 !== l[2] ? l[2] : 3),
                              (o = "object" == typeof t ? t.contents : null),
                              (a = "object" == typeof t ? t.uri : t),
                              null != o)
                            ) {
                              e.next = 7;
                              break;
                            }
                            return (
                              (e.next = 6),
                              fetch(a).then(function (e) {
                                return e.text();
                              })
                            );
                          case 6:
                            o = e.sent;
                          case 7:
                            return (e.next = 9), z(a, o);
                          case 9:
                            return (
                              (i = e.sent),
                              e.abrupt(
                                "return",
                                r.map(function (e) {
                                  var t = e.functionName,
                                    r = e.lineNumber,
                                    l = e.columnNumber;
                                  if (null != e._originalLineNumber) return e;
                                  var u = e.fileName;
                                  if (
                                    (u && (u = V.a.normalize(u.replace(/[\\]+/g, "/"))), null == u)
                                  )
                                    return e;
                                  var c = u,
                                    s = i
                                      .getSources()
                                      .map(function (e) {
                                        return e.replace(/[\\]+/g, "/");
                                      })
                                      .filter(function (e) {
                                        var t = (e = V.a.normalize(e)).lastIndexOf(c);
                                        return -1 !== t && t === e.length - c.length;
                                      })
                                      .map(function (e) {
                                        return {
                                          token: e,
                                          seps: W(V.a.sep, V.a.normalize(e)),
                                          penalties: W("node_modules", e) + W("~", e),
                                        };
                                      })
                                      .sort(function (e, t) {
                                        var r = Math.sign(e.seps - t.seps);
                                        return 0 !== r ? r : Math.sign(e.penalties - t.penalties);
                                      });
                                  if (s.length < 1 || null == r)
                                    return new x(null, null, null, null, null, t, c, r, l, null);
                                  var f = s[0].token,
                                    d = i.getGeneratedPosition(f, r, l),
                                    p = d.line,
                                    h = d.column,
                                    g = i.getSource(f);
                                  return new x(
                                    t,
                                    a,
                                    p,
                                    h || null,
                                    F(p, n, o || []),
                                    t,
                                    c,
                                    r,
                                    l,
                                    F(r, n, g),
                                  );
                                }),
                              )
                            );
                          case 11:
                          case "end":
                            return e.stop();
                        }
                    }, e);
                  }),
                )).apply(this, arguments);
              }
              var Y = function (e) {
                  arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                  var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3,
                    r = L(e);
                  return (e.__unmap_source ? G(e.__unmap_source, r, t) : B(r, t)).then(function (
                    e,
                  ) {
                    return 0 ===
                      e
                        .map(function (e) {
                          return e._originalFileName;
                        })
                        .filter(function (e) {
                          return null != e && -1 === e.indexOf("node_modules");
                        }).length
                      ? null
                      : e.filter(function (e) {
                          var t = e.functionName;
                          return (
                            null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__")
                          );
                        });
                  });
                },
                X = function (e) {
                  return function (t) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    Y(t, r, 3)
                      .then(function (n) {
                        null != n &&
                          e({
                            error: t,
                            unhandledRejection: r,
                            contextSize: 3,
                            stackFrames: n,
                          });
                      })
                      .catch(function (e) {
                        console.log("Could not get the stack frames of error:", e);
                      });
                  };
                };
              function K(e) {
                var t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : "/static/js/bundle.js",
                  r = X(e);
                return (
                  a(window, function (e) {
                    return r(e, !1);
                  }),
                  u(window, function (e) {
                    return r(e, !0);
                  }),
                  (function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f;
                    if (!c)
                      try {
                        (s = Error.stackTraceLimit), (Error.stackTraceLimit = e), (c = !0);
                      } catch (e) {}
                  })(),
                  p(),
                  g("error", function (e, n) {
                    var o = (function (e, t) {
                      for (
                        var r,
                          n,
                          o = (function (e) {
                            return e
                              .split("\n")
                              .filter(function (e) {
                                return !e.match(/^\s*in/);
                              })
                              .join("\n");
                          })(e),
                          a = "",
                          i = 0;
                        i < t.length;
                        ++i
                      ) {
                        var l = t[i],
                          u = l.fileName,
                          c = l.lineNumber;
                        if (
                          null != u &&
                          null != c &&
                          !(
                            u === r &&
                            "number" == typeof c &&
                            "number" == typeof n &&
                            Math.abs(c - n) < 3
                          )
                        ) {
                          (r = u), (n = c);
                          var s = t[i].name;
                          a += "in "
                            .concat((s = s || "(anonymous function)"), " (at ")
                            .concat(u, ":")
                            .concat(c, ")\n");
                        }
                      }
                      return {
                        message: o,
                        stack: a,
                      };
                    })(e, n);
                    r(
                      {
                        message: o.message,
                        stack: o.stack,
                        __unmap_source: t,
                      },
                      !1,
                    );
                  }),
                  function () {
                    var e;
                    !(function () {
                      if (c)
                        try {
                          (Error.stackTraceLimit = s), (c = !1);
                        } catch (e) {}
                    })(),
                      (e = window),
                      null !== i && (e.removeEventListener("unhandledrejection", i), (i = null)),
                      (function (e) {
                        null !== n && (e.removeEventListener("error", n), (n = null));
                      })(window),
                      h();
                  }
                );
              }
              var J = {
                position: "fixed",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                border: "none",
                "z-index": 2147483647,
              };
              var Z =
                  '/*! For license information please see iframe-bundle.js.LICENSE.txt */\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=208)}([function(e,t,r){"use strict";e.exports=r(183)},function(e,t,r){var n=r(8),o=r(35).f,a=r(18),i=r(21),l=r(38),u=r(60),c=r(64);e.exports=function(e,t){var r,s,f,d,p,h=e.target,g=e.global,v=e.stat;if(r=g?n:v?n[h]||l(h,{}):(n[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(r,s))&&p.value:r[s],!c(g?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(r,s,d,e)}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,r){var n=r(2),o=r(66),a=r(26),i=r(7),l=r(45),u=r(69),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var s,f,d,p,h,g,v,m=r&&r.that,y=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),w=!(!r||!r.INTERRUPTED),k=i(t,m,1+y+w),E=function(e){return s&&u(s),new c(!0,e)},x=function(e){return y?(n(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(b)s=e;else{if("function"!=typeof(f=l(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=x(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(g=s.next;!(v=g.call(s)).done;){try{h=x(v.value)}catch(e){throw u(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,r){var n=r(8),o=r(40),a=r(11),i=r(31),l=r(44),u=r(67),c=o("wks"),s=n.Symbol,f=u?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)||(l&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,r){var n=r(5);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||function(){return this}()||Function("return this")()}).call(this,r(34))},function(e,t,r){var n=r(61),o=r(11),a=r(82),i=r(14).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(61),o=r(8),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e])||a(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,r){var n=r(16),o=r(57),a=r(2),i=r(29),l=Object.defineProperty;t.f=n?l:function(e,t,r){if(a(e),t=i(t,!0),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Map.prototype.entries.call(e)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){var n=r(2),o=r(5),a=r(6)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||void 0==(r=n(i)[a])?t:o(r)}},function(e,t,r){var n=r(16),o=r(14),a=r(23);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Set.prototype.values.call(e)}},function(e,t,r){var n=r(56),o=r(37);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(8),o=r(18),a=r(11),i=r(38),l=r(59),u=r(24),c=u.get,s=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,l){var u,c=!!l&&!!l.unsafe,d=!!l&&!!l.enumerable,p=!!l&&!!l.noTargetGet;"function"==typeof r&&("string"!=typeof t||a(r,"name")||o(r,"name",t),(u=s(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:i(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(e,t,r){var n=r(14).f,o=r(11),a=r(6)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n,o,a,i=r(92),l=r(8),u=r(13),c=r(18),s=r(11),f=r(39),d=r(30),p=r(25),h=l.WeakMap;if(i){var g=f.state||(f.state=new h),v=g.get,m=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},o=function(e){return v.call(g,e)||{}},a=function(e){return m.call(g,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,c(e,b,t),t},o=function(e){return s(e,b)?e[b]:{}},a=function(e){return s(e,b)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},function(e,t){e.exports={}},function(e,t,r){var n=r(42),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,r){var n=r(37);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,r){var n=r(40),o=r(31),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)}},function(e,t,r){var n,o=r(2),a=r(99),i=r(43),l=r(25),u=r(100),c=r(58),s=r(30),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=n?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=c("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};l[f]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d.prototype=o(e),r=new d,d.prototype=null,r[f]=e):r=h(),void 0===t?r:a(r,t)}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return n(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,r){return(new e).ansiToHtml(t,r)}},{key:"ansiToJson",value:function(t,r){return(new e).ansiToJson(t,r)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),n(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(o[e][t].color);for(var r=[0,95,135,175,215,255],n=function(e,t,n){return r[e]+", "+r[t]+", "+r[n]},a=0;a<6;++a)for(var i=0;i<6;++i)for(var l=0;l<6;++l)this.PALETTE_COLORS.push(n(a,i,l));for(var u=8,c=0;c<24;++c,u+=10)this.PALETTE_COLORS.push(n(u,u,u))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,r){var n=this,o=e.split(/\\033\\[/),a=o.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=o.map((function(e){return n.processChunk(e,t,r)}));if(t&&t.json){var l=this.processChunkJson("");return l.content=a,l.clearLine=t.clearLine,i.unshift(l),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(a),i.join("")}},{key:"processChunkJson",value:function(e,t,r){var n=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,a=t.key=n?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},l=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!l)return i;i.content=l[4];var u=l[2].split(";");if(""!==l[1]||"m"!==l[3])return i;if(!r)return i;var c=this;for(c.decoration=null;u.length>0;){var s=u.shift(),f=parseInt(s);if(isNaN(f)||0===f)c.fg=c.bg=c.decoration=null;else if(1===f)c.decoration="bold";else if(2===f)c.decoration="dim";else if(3==f)c.decoration="italic";else if(4==f)c.decoration="underline";else if(5==f)c.decoration="blink";else if(7===f)c.decoration="reverse";else if(8===f)c.decoration="hidden";else if(9===f)c.decoration="strikethrough";else if(39==f)c.fg=null;else if(49==f)c.bg=null;else if(f>=30&&f<38)c.fg=o[0][f%10][a];else if(f>=90&&f<98)c.fg=o[1][f%10][a];else if(f>=40&&f<48)c.bg=o[0][f%10][a];else if(f>=100&&f<108)c.bg=o[1][f%10][a];else if(38===f||48===f){var d=38===f;if(u.length>=1){var p=u.shift();if("5"===p&&u.length>=1){var h=parseInt(u.shift());if(h>=0&&h<=255)if(n){var g=h>=16?"ansi-palette-"+h:o[h>7?1:0][h%8].class;d?c.fg=g:c.bg=g}else this.PALETTE_COLORS||c.setupPalette(),d?c.fg=this.PALETTE_COLORS[h]:c.bg=this.PALETTE_COLORS[h]}else if("2"===p&&u.length>=3){var v=parseInt(u.shift()),m=parseInt(u.shift()),y=parseInt(u.shift());if(v>=0&&v<=255&&m>=0&&m<=255&&y>=0&&y<=255){var b=v+", "+m+", "+y;n?d?(c.fg="ansi-truecolor",c.fg_truecolor=b):(c.bg="ansi-truecolor",c.bg_truecolor=b):d?c.fg=b:c.bg=b}}}}}if(null===c.fg&&null===c.bg&&null===c.decoration)return i;return i.fg=c.fg,i.bg=c.bg,i.fg_truecolor=c.fg_truecolor,i.bg_truecolor=c.bg_truecolor,i.decoration=c.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,r){var n=this;t=t||{};var o=this.processChunkJson(e,t,r);if(t.json)return o;if(o.isEmpty())return"";if(!o.was_processed)return o.content;var a=t.use_classes,i=[],l=[],u={},c=function(e){var t=[],r=void 0;for(r in e)e.hasOwnProperty(r)&&t.push("data-"+r+\'="\'+n.escapeForHtml(e[r])+\'"\');return t.length>0?" "+t.join(" "):""};return o.fg&&(a?(l.push(o.fg+"-fg"),null!==o.fg_truecolor&&(u["ansi-truecolor-fg"]=o.fg_truecolor,o.fg_truecolor=null)):i.push("color:rgb("+o.fg+")")),o.bg&&(a?(l.push(o.bg+"-bg"),null!==o.bg_truecolor&&(u["ansi-truecolor-bg"]=o.bg_truecolor,o.bg_truecolor=null)):i.push("background-color:rgb("+o.bg+")")),o.decoration&&(a?l.push("ansi-"+o.decoration):"bold"===o.decoration?i.push("font-weight:bold"):"dim"===o.decoration?i.push("opacity:0.5"):"italic"===o.decoration?i.push("font-style:italic"):"reverse"===o.decoration?i.push("filter:invert(100%)"):"hidden"===o.decoration?i.push("visibility:hidden"):"strikethrough"===o.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+o.decoration)),a?\'<span class="\'+l.join(" ")+\'"\'+c(u)+">"+o.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(u)+">"+o.content+"</span>"}}]),e}();e.exports=a},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(16),o=r(55),a=r(23),i=r(20),l=r(29),u=r(11),c=r(57),s=Object.getOwnPropertyDescriptor;t.f=n?s:function(e,t){if(e=i(e),t=l(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return a(!o.f.call(e,t),e[t])}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,r){var n=r(8),o=r(18);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(8),o=r(38),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},function(e,t,r){var n=r(3),o=r(39);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"\xa9 2021 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){var n=r(62),o=r(43).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,r){var n=r(12);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(68),o=r(27),a=r(6)("iterator");e.exports=function(e){if(void 0!=e)return e[a]||e["@@iterator"]||o[n(e)]}},function(e,t,r){var n={};n[r(6)("toStringTag")]="z",e.exports="[object z]"===String(n)},function(e,t,r){"use strict";var n=r(1),o=r(102),a=r(76),i=r(72),l=r(22),u=r(18),c=r(21),s=r(6),f=r(3),d=r(27),p=r(75),h=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,v=s("iterator"),m="keys",y="values",b="entries",w=function(){return this};e.exports=function(e,t,r,s,p,k,E){o(r,t,s);var x,S,_,T=function(e){if(e===p&&N)return N;if(!g&&e in P)return P[e];switch(e){case m:case y:case b:return function(){return new r(this,e)}}return function(){return new r(this)}},C=t+" Iterator",O=!1,P=e.prototype,R=P[v]||P["@@iterator"]||p&&P[p],N=!g&&R||T(p),L="Array"==t&&P.entries||R;if(L&&(x=a(L.call(new e)),h!==Object.prototype&&x.next&&(f||a(x)===h||(i?i(x,h):"function"!=typeof x[v]&&u(x,v,w)),l(x,C,!0,!0),f&&(d[C]=w))),p==y&&R&&R.name!==y&&(O=!0,N=function(){return R.call(this)}),f&&!E||P[v]===N||u(P,v,N),d[t]=N,p)if(S={values:T(y),keys:k?N:T(m),entries:T(b)},E)for(_ in S)(g||O||!(_ in P))&&c(P,_,S[_]);else n({target:t,proto:!0,forced:g||O},S);return S}},function(e,t,r){var n=r(2),o=r(45);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},function(e,t,r){var n=r(36);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),c=1;c<arguments.length;c++){for(var s in r=Object(arguments[c]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var f=0;f<l.length;f++)a.call(r,l[f])&&(u[l[f]]=r[l[f]])}}return u}},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"===typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){var n=r(191);e.exports=function(e,t){var r;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=n(e))||t&&e&&"number"===typeof e.length){r&&(e=r);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){u=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(u)throw i}}}}},function(e,t,r){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(184)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(64),i=r(21),l=r(65),u=r(4),c=r(70),s=r(13),f=r(12),d=r(71),p=r(22),h=r(97);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),v=-1!==e.indexOf("Weak"),m=g?"set":"add",y=o[e],b=y&&y.prototype,w=y,k={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(a(e,"function"!=typeof y||!(v||b.forEach&&!f((function(){(new y).entries().next()})))))w=r.getConstructor(t,e,g,m),l.REQUIRED=!0;else if(a(e,!0)){var x=new w,S=x[m](v?{}:-0,1)!=x,_=f((function(){x.has(1)})),T=d((function(e){new y(e)})),C=!v&&f((function(){for(var e=new y,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,r){c(t,w,e);var n=h(new y,t,w);return void 0!=r&&u(r,n[m],{that:n,AS_ENTRIES:g}),n}))).prototype=b,b.constructor=w),(_||C)&&(E("delete"),E("has"),g&&E("get")),(C||S)&&E(m),v&&b.clear&&delete b.clear}return k[e]=w,n({global:!0,forced:w!=y},k),p(w,e),v||r.setStrong(w,e,g),w}},function(e,t,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!n.call({1:2},1);t.f=a?function(e){var t=o(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(12),o=r(36),a="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},function(e,t,r){var n=r(16),o=r(12),a=r(58);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(8),o=r(13),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){var n=r(39),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),o=r(93),a=r(35),i=r(14);e.exports=function(e,t){for(var r=o(t),l=i.f,u=a.f,c=0;c<r.length;c++){var s=r[c];n(e,s)||l(e,s,u(t,s))}}},function(e,t,r){var n=r(8);e.exports=n},function(e,t,r){var n=r(11),o=r(20),a=r(94).indexOf,i=r(25);e.exports=function(e,t){var r,l=o(e),u=0,c=[];for(r in l)!n(i,r)&&n(l,r)&&c.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(c,r)||c.push(r));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(12),o=/#|\\.prototype\\./,a=function(e,t){var r=l[i(e)];return r==c||r!=u&&("function"==typeof t?n(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},function(e,t,r){var n=r(25),o=r(13),a=r(11),i=r(14).f,l=r(31),u=r(96),c=l("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return u&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};n[c]=!0},function(e,t,r){var n=r(6),o=r(27),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},function(e,t,r){var n=r(44);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,r){var n=r(46),o=r(36),a=r(6)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},function(e,t,r){var n=r(2);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},function(e,t,r){var n=r(6)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},function(e,t,r){var n=r(2),o=r(98);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,a){return n(r),o(a),t?e.call(r,a):r.__proto__=a,r}}():void 0)},function(e,t,r){"use strict";var n=r(14).f,o=r(32),a=r(101),i=r(7),l=r(70),u=r(4),c=r(47),s=r(104),f=r(16),d=r(65).fastKey,p=r(24),h=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,c){var s=e((function(e,n){l(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=n&&u(n,e[c],{that:e,AS_ENTRIES:r})})),p=g(t),v=function(e,t,r){var n,o,a=p(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=d(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=p(e),o=d(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),f&&n(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,r){var n=t+" Iterator",o=g(t),a=g(n);c(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),s(t)}}},function(e,t,r){var n=r(62),o=r(43);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n,o,a,i=r(12),l=r(76),u=r(18),c=r(11),s=r(6),f=r(3),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(n=o):p=!0);var h=void 0==n||i((function(){var e={};return n[d].call(e)!==e}));h&&(n={}),f&&!h||c(n,d)||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(11),o=r(28),a=r(30),i=r(103),l=a("IE_PROTO"),u=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),n(e,l)?e[l]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(46),o=r(21),a=r(105);n||o(Object.prototype,"toString",a,{unsafe:!0})},function(e,t,r){"use strict";var n=r(107).charAt,o=r(24),a=r(47),i="String Iterator",l=o.set,u=o.getterFor(i);a(String,"String",(function(e){l(this,{type:i,string:String(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e,t=n(this),r=o(t.delete),a=!0,i=0,l=arguments.length;i<l;i++)e=r.call(t,arguments[i]),a=a&&e;return!!a}},function(e,t,r){"use strict";var n=r(5),o=r(7),a=r(4);e.exports=function(e){var t,r,i,l,u=arguments.length,c=u>1?arguments[1]:void 0;return n(this),(t=void 0!==c)&&n(c),void 0==e?new this:(r=[],t?(i=0,l=o(c,u>2?arguments[2]:void 0,2),a(e,(function(e){r.push(l(e,i++))}))):a(e,r.push,{that:r}),new this(r))}},function(e,t,r){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,r){var n=r(6);t.f=n},function(e,t,r){var n=r(13),o=r(49),a=r(6)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){"use strict";var n=r(29),o=r(14),a=r(23);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},function(e,t,r){var n,o,a=r(8),i=r(168),l=a.process,u=l&&l.versions,c=u&&u.v8;c?o=(n=c.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\\/(\\d+)/))&&(o=n[1]),e.exports=o&&+o},function(e,t,r){"use strict";var n=r(178);function o(){}var a=null,i={};function l(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._U=0,this._V=0,this._W=null,this._X=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._V;)e=e._W;if(l._Y&&l._Y(e),0===e._V)return 0===e._U?(e._U=1,void(e._X=t)):1===e._U?(e._U=2,void(e._X=[e._X,t])):void e._X.push(t);!function(e,t){n((function(){var r=1===e._V?t.onFulfilled:t.onRejected;if(null!==r){var n=function(e,t){try{return e(t)}catch(e){return a=e,i}}(r,e._W);n===i?s(t.promise,a):c(t.promise,n)}else 1===e._V?c(t.promise,e._W):s(t.promise,e._W)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var r=function(e){try{return e.then}catch(e){return a=e,i}}(t);if(r===i)return s(e,a);if(r===e.then&&t instanceof l)return e._V=3,e._W=t,void f(e);if("function"===typeof r)return void p(r.bind(t),e)}e._V=1,e._W=t,f(e)}function s(e,t){e._V=2,e._W=t,l._Z&&l._Z(e,t),f(e)}function f(e){if(1===e._U&&(u(e,e._X),e._X=null),2===e._U){for(var t=0;t<e._X.length;t++)u(e,e._X[t]);e._X=null}}function d(e,t,r){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=r}function p(e,t){var r=!1,n=function(e,t,r){try{e(t,r)}catch(e){return a=e,i}}(e,(function(e){r||(r=!0,c(t,e))}),(function(e){r||(r=!0,s(t,e))}));r||n!==i||(r=!0,s(t,a))}e.exports=l,l._Y=null,l._Z=null,l._0=o,l.prototype.then=function(e,t){if(this.constructor!==l)return function(e,t,r){return new e.constructor((function(n,a){var i=new l(o);i.then(n,a),u(e,new d(t,r,i))}))}(this,e,t);var r=new l(o);return u(this,new d(e,t,r)),r}},function(e,t,r){var n=r(204),o={};for(var a in n)n.hasOwnProperty(a)&&(o[n[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var l in i)if(i.hasOwnProperty(l)){if(!("channels"in i[l]))throw new Error("missing channels property: "+l);if(!("labels"in i[l]))throw new Error("missing channel labels property: "+l);if(i[l].labels.length!==i[l].channels)throw new Error("channel and label counts mismatch: "+l);var u=i[l].channels,c=i[l].labels;delete i[l].channels,delete i[l].labels,Object.defineProperty(i[l],"channels",{value:u}),Object.defineProperty(i[l],"labels",{value:c})}i.rgb.hsl=function(e){var t,r,n=e[0]/255,o=e[1]/255,a=e[2]/255,i=Math.min(n,o,a),l=Math.max(n,o,a),u=l-i;return l===i?t=0:n===l?t=(o-a)/u:o===l?t=2+(a-n)/u:a===l&&(t=4+(n-o)/u),(t=Math.min(60*t,360))<0&&(t+=360),r=(i+l)/2,[t,100*(l===i?0:r<=.5?u/(l+i):u/(2-l-i)),100*r]},i.rgb.hsv=function(e){var t,r,n,o,a,i=e[0]/255,l=e[1]/255,u=e[2]/255,c=Math.max(i,l,u),s=c-Math.min(i,l,u),f=function(e){return(c-e)/6/s+.5};return 0===s?o=a=0:(a=s/c,t=f(i),r=f(l),n=f(u),i===c?o=n-r:l===c?o=1/3+t-n:u===c&&(o=2/3+r-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*c]},i.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},i.rgb.cmyk=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-o)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=o[e];if(t)return t;var r,a,i,l=1/0;for(var u in n)if(n.hasOwnProperty(u)){var c=n[u],s=(a=e,i=c,Math.pow(a[0]-i[0],2)+Math.pow(a[1]-i[1],2)+Math.pow(a[2]-i[2],2));s<l&&(l=s,r=u)}return r},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),r=t[0],n=t[1],o=t[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},i.hsl.rgb=function(e){var t,r,n,o,a,i=e[0]/360,l=e[1]/100,u=e[2]/100;if(0===l)return[a=255*u,a,a];t=2*u-(r=u<.5?u*(1+l):u+l-u*l),o=[0,0,0];for(var c=0;c<3;c++)(n=i+1/3*-(c-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,o[c]=255*a;return o},i.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,o=r,a=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=a<=1?a:2-a,[t,100*(0===n?2*o/(a+o):2*r/(n+r)),100*((n+r)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,o=Math.floor(t)%6,a=t-Math.floor(t),i=255*n*(1-r),l=255*n*(1-r*a),u=255*n*(1-r*(1-a));switch(n*=255,o){case 0:return[n,u,i];case 1:return[l,n,i];case 2:return[i,n,u];case 3:return[i,l,n];case 4:return[u,i,n];case 5:return[n,i,l]}},i.hsv.hsl=function(e){var t,r,n,o=e[0],a=e[1]/100,i=e[2]/100,l=Math.max(i,.01);return n=(2-a)*i,r=a*l,[o,100*(r=(r/=(t=(2-a)*l)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,r,n,o,a,i,l,u=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),n=6*u-(t=Math.floor(6*u)),0!==(1&t)&&(n=1-n),o=c+n*((r=1-s)-c),t){default:case 6:case 0:a=r,i=o,l=c;break;case 1:a=o,i=r,l=c;break;case 2:a=c,i=r,l=o;break;case 3:a=c,i=o,l=r;break;case 4:a=o,i=c,l=r;break;case 5:a=r,i=c,l=o}return[255*a,255*i,255*l]},i.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},i.xyz.rgb=function(e){var t,r,n,o=e[0]/100,a=e[1]/100,i=e[2]/100;return r=-.9689*o+1.8758*a+.0415*i,n=.0557*o+-.204*a+1.057*i,t=(t=3.2406*o+-1.5372*a+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,r,n,o=e[0];t=e[1]/500+(r=(o+16)/116),n=r-e[2]/200;var a=Math.pow(r,3),i=Math.pow(t,3),l=Math.pow(n,3);return r=a>.008856?a:(r-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,n=l>.008856?l:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},i.lab.lch=function(e){var t,r=e[0],n=e[1],o=e[2];return(t=360*Math.atan2(o,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+o*o),t]},i.lch.lab=function(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],o=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var a=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map((function(e){return e+e})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255,a=Math.max(Math.max(r,n),o),i=Math.min(Math.min(r,n),o),l=a-i;return t=l<=0?0:a===r?(n-o)/l%6:a===n?2+(o-r)/l:4+(r-n)/l+4,t/=6,[360*(t%=1),100*l,100*(l<1?i/(1-l):0)]},i.hsl.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=1,o=0;return(n=r<.5?2*t*r:2*t*(1-r))<1&&(o=(r-.5*n)/(1-n)),[e[0],100*n,100*o]},i.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var o,a=[0,0,0],i=t%1*6,l=i%1,u=1-l;switch(Math.floor(i)){case 0:a[0]=1,a[1]=l,a[2]=0;break;case 1:a[0]=u,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=l;break;case 3:a[0]=0,a[1]=u,a[2]=1;break;case 4:a[0]=l,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=u}return o=(1-r)*n,[255*(r*a[0]+o),255*(r*a[1]+o),255*(r*a[2]+o)]},i.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},i.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},i.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},i.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(187);t.XmlEntities=n.XmlEntities;var o=r(188);t.Html4Entities=o.Html4Entities;var a=r(189);t.Html5Entities=a.Html5Entities,t.AllHtmlEntities=a.Html5Entities},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!a){a=!0;var i="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(i,"DeprecationWarning");else{var l=new Error(i);l.name="DeprecationWarning",console.warn(new Error(i))}}var u={start:{column:n=Math.max(n,0),line:r}};return c(t,u,o)};var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(190));function o(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=!1;function i(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function u(e,t,r){var n=Object.assign({column:0,line:-1},e.start),o=Object.assign({},n,e.end),a=r||{},i=a.linesAbove,l=void 0===i?2:i,u=a.linesBelow,c=void 0===u?3:u,s=n.line,f=n.column,d=o.line,p=o.column,h=Math.max(s-(l+1),0),g=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(g=t.length);var v=d-s,m={};if(v)for(var y=0;y<=v;y++){var b=y+s;if(f)if(0===y){var w=t[b-1].length;m[b]=[f,w-f+1]}else if(y===v)m[b]=[0,p];else{var k=t[b-y].length;m[b]=[0,k]}else m[b]=!0}else m[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:g,markerLines:m}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(r.highlightCode||r.forceColor)&&(0,n.shouldHighlight)(r),a=(0,n.getChalk)(r),c=i(a),s=function(e,t){return o?e(t):t},f=e.split(l),d=u(t,f,r),p=d.start,h=d.end,g=d.markerLines,v=t.start&&"number"===typeof t.start.column,m=String(h).length,y=o?(0,n.default)(e,r):e,b=y.split(l).slice(p,h).map((function(e,t){var n=p+1+t,o=" ".concat(n).slice(-m),a=" ".concat(o," | "),i=g[n],l=!g[n+1];if(i){var u="";if(Array.isArray(i)){var f=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),d=i[1]||1;u=["\\n ",s(c.gutter,a.replace(/\\d/g," ")),f,s(c.marker,"^").repeat(d)].join(""),l&&r.message&&(u+=" "+s(c.message,r.message))}return[s(c.marker,">"),s(c.gutter,a),e,u].join("")}return" ".concat(s(c.gutter,a)).concat(e)})).join("\\n");return r.message&&!v&&(b="".concat(" ".repeat(m+1)).concat(r.message,"\\n").concat(b)),o?a.reset(b):b}}).call(this,r(51))},function(e,t,r){"use strict";r(91),r(77),r(106),r(78),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(117),r(118),r(119),r(120),r(121),r(122),r(123),r(124),r(125),r(126),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(149),r(181).polyfill()},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(8),o=r(59),a=n.WeakMap;e.exports="function"===typeof a&&/native code/.test(o(a))},function(e,t,r){var n=r(10),o=r(41),a=r(63),i=r(2);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(i(e)),r=a.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(20),o=r(26),a=r(95),i=function(e){return function(t,r,i){var l,u=n(t),c=o(u.length),s=a(i,c);if(e&&r!=r){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,r){var n=r(42),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(13),o=r(72);e.exports=function(e,t,r){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==r&&n(i=a.prototype)&&i!==r.prototype&&o(e,i),e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,r){var n=r(16),o=r(14),a=r(2),i=r(74);e.exports=n?Object.defineProperties:function(e,t){a(e);for(var r,n=i(t),l=n.length,u=0;l>u;)o.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(10);e.exports=n("document","documentElement")},function(e,t,r){var n=r(21);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(75).IteratorPrototype,o=r(32),a=r(23),i=r(22),l=r(27),u=function(){return this};e.exports=function(e,t,r){var c=t+" Iterator";return e.prototype=o(n,{next:a(1,r)}),i(e,c,!1,!0),l[c]=u,e}},function(e,t,r){var n=r(12);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){"use strict";var n=r(10),o=r(14),a=r(6),i=r(16),l=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[l]&&r(t,l,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(46),o=r(68);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(42),o=r(37),a=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),c=l.length;return u<0||u>=c?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===c||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r,o){if(!n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){n(r,e,t)&&d.call(o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Map",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{groupBy:function(e,t){var r=new this;a(t);var n=a(r.has),i=a(r.get),l=a(r.set);return o(e,(function(e){var o=t(e);n.call(r,o)?i.call(r,o).push(e):l.call(r,o,[e])})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(116),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return u(i(a(this)),(function(t,r,n){if(l(r,e))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{keyBy:function(e,t){var r=new this;a(t);var n=a(r.set);return o(e,(function(e){n.call(r,t(e),e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return l(i(a(this)),(function(t,r,n){if(r===e)return n(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,n(r,e,t),r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,e,n(r,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),r=i(t.set),n=0;n<arguments.length;)l(arguments[n++],r,{that:t,AS_ENTRIES:!0});return t}})},function(e,t,r){r(1)({target:"Map",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r,a){n?(n=!1,o=a):o=e(o,a,r,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty map with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5);n({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var r=a(this),n=arguments.length;i(t);var o=r.has(e);if(!o&&n<3)throw TypeError("Updating absent value");var l=o?r.get(e):i(n>2?arguments[2]:void 0)(e,r);return r.set(e,t(l,e,r)),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(127);n({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e=n(this),t=o(e.add),r=0,a=arguments.length;r<a;r++)t.call(e,arguments[r]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete);return c(e,(function(e){n.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r){if(!n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){n(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Set",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),r=new(u(t,a("Set"))),n=l(t.has),o=l(r.add);return c(e,(function(e){n.call(t,e)&&o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!0===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(48),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=u(this),r=i(e),n=r.has;return"function"!=typeof n&&(r=new(a("Set"))(e),n=l(r.has)),!c(t,(function(e,t){if(!1===n.call(r,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!1===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(19),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),r=i(t),n=void 0===e?",":String(e),o=[];return l(r,o.push,{that:o,IS_ITERATOR:!0}),o.join(n)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){d.call(o,n(e,e,t))}),{IS_ITERATOR:!0}),o}})},function(e,t,r){r(1)({target:"Set",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r){n?(n=!1,o=r):o=e(o,r,r,t)}),{IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty set with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete),o=l(r.add);return c(e,(function(e){n.call(r,e)||o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),r=new(u(t,a("Set")))(t);return c(e,l(r.add),{that:r}),r}})},function(e,t,r){var n=r(8),o=r(146),a=r(147),i=r(18),l=r(6),u=l("iterator"),c=l("toStringTag"),s=a.values;for(var f in o){var d=n[f],p=d&&d.prototype;if(p){if(p[u]!==s)try{i(p,u,s)}catch(e){p[u]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){"use strict";var n=r(20),o=r(148),a=r(27),i=r(24),l=r(47),u="Array Iterator",c=i.set,s=i.getterFor(u);e.exports=l(Array,"Array",(function(e,t){c(this,{type:u,target:n(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(e,t,r){var n=r(6),o=r(32),a=r(14),i=n("unscopables"),l=Array.prototype;void 0==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),e.exports=function(e){l[i][e]=!0}},function(e,t,r){"use strict";r(150),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(169),r(172),r(173),r(77),r(78),r(174),r(175),r(176),"undefined"===typeof Promise&&(r(177).enable(),self.Promise=r(179)),"undefined"!==typeof window&&r(180),Object.assign=r(50)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(10),i=r(3),l=r(16),u=r(44),c=r(67),s=r(12),f=r(11),d=r(49),p=r(13),h=r(2),g=r(28),v=r(20),m=r(29),y=r(23),b=r(32),w=r(74),k=r(41),E=r(151),x=r(63),S=r(35),_=r(14),T=r(55),C=r(18),O=r(21),P=r(40),R=r(30),N=r(25),L=r(31),A=r(6),I=r(82),j=r(9),M=r(22),D=r(24),q=r(152).forEach,z=R("hidden"),U="Symbol",F=A("toPrimitive"),B=D.set,V=D.getterFor(U),H=Object.prototype,W=o.Symbol,$=a("JSON","stringify"),G=S.f,Q=_.f,Y=E.f,K=T.f,X=P("symbols"),J=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=l&&s((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=G(H,t);n&&delete H[t],Q(e,t,r),n&&e!==H&&Q(H,t,n)}:Q,ae=function(e,t){var r=X[e]=b(W.prototype);return B(r,{type:U,tag:e,description:t}),l||(r.description=t),r},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},le=function(e,t,r){e===H&&le(J,t,r),h(e);var n=m(t,!0);return h(r),f(X,n)?(r.enumerable?(f(e,z)&&e[z][n]&&(e[z][n]=!1),r=b(r,{enumerable:y(0,!1)})):(f(e,z)||Q(e,z,y(1,{})),e[z][n]=!0),oe(e,n,r)):Q(e,n,r)},ue=function(e,t){h(e);var r=v(t),n=w(r).concat(de(r));return q(n,(function(t){l&&!ce.call(r,t)||le(e,t,r[t])})),e},ce=function(e){var t=m(e,!0),r=K.call(this,t);return!(this===H&&f(X,t)&&!f(J,t))&&(!(r||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||r)},se=function(e,t){var r=v(e),n=m(t,!0);if(r!==H||!f(X,n)||f(J,n)){var o=G(r,n);return!o||!f(X,n)||f(r,z)&&r[z][n]||(o.enumerable=!0),o}},fe=function(e){var t=Y(v(e)),r=[];return q(t,(function(e){f(X,e)||f(N,e)||r.push(e)})),r},de=function(e){var t=e===H,r=Y(t?J:v(e)),n=[];return q(r,(function(e){!f(X,e)||t&&!f(H,e)||n.push(X[e])})),n};(u||(O((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function e(r){this===H&&e.call(J,r),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,y(1,r))};return l&&ne&&oe(H,t,{configurable:!0,set:r}),ae(t,e)}).prototype,"toString",(function(){return V(this).tag})),O(W,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,_.f=le,S.f=se,k.f=E.f=fe,x.f=de,I.f=function(e){return ae(A(e),e)},l&&(Q(W.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),i||O(H,"propertyIsEnumerable",ce,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),q(w(te),(function(e){j(e)})),n({target:U,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:s((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(g(e))}}),$)&&n({target:"JSON",stat:!0,forced:!u||s((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(n=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ie(t))return t}),o[1]=t,$.apply(null,o)}});W.prototype[F]||C(W.prototype,F,W.prototype.valueOf),M(W,U),N[z]=!0},function(e,t,r){var n=r(20),o=r(41).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){var n=r(7),o=r(56),a=r(28),i=r(26),l=r(83),u=[].push,c=function(e){var t=1==e,r=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,g,v,m){for(var y,b,w=a(h),k=o(w),E=n(g,v,3),x=i(k.length),S=0,_=m||l,T=t?_(h,x):r||d?_(h,0):void 0;x>S;S++)if((p||S in k)&&(b=E(y=k[S],S,w),e))if(t)T[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:u.call(T,y)}else switch(e){case 4:return!1;case 7:u.call(T,y)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(e,t,r){"use strict";var n=r(1),o=r(16),a=r(8),i=r(11),l=r(13),u=r(14).f,c=r(60),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,g="Symbol(test)"==String(s("test")),v=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=l(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var r=g?t.slice(7,-1):t.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(e,t,r){r(9)("asyncIterator")},function(e,t,r){r(9)("hasInstance")},function(e,t,r){r(9)("isConcatSpreadable")},function(e,t,r){r(9)("iterator")},function(e,t,r){r(9)("match")},function(e,t,r){r(9)("replace")},function(e,t,r){r(9)("search")},function(e,t,r){r(9)("species")},function(e,t,r){r(9)("split")},function(e,t,r){r(9)("toPrimitive")},function(e,t,r){r(9)("toStringTag")},function(e,t,r){r(9)("unscopables")},function(e,t,r){"use strict";var n=r(1),o=r(12),a=r(49),i=r(13),l=r(28),u=r(26),c=r(84),s=r(83),f=r(167),d=r(6),p=r(85),h=d("isConcatSpreadable"),g=9007199254740991,v="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,o,a,i=l(this),f=s(i,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=u(a.length))>g)throw TypeError(v);for(r=0;r<o;r++,d++)r in a&&c(f,d,a[r])}else{if(d>=g)throw TypeError(v);c(f,d++,a)}return f.length=d,f}})},function(e,t,r){var n=r(12),o=r(6),a=r(85),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){var n=r(10);e.exports=n("navigator","userAgent")||""},function(e,t,r){var n=r(1),o=r(170);n({target:"Array",stat:!0,forced:!r(71)((function(e){Array.from(e)}))},{from:o})},function(e,t,r){"use strict";var n=r(7),o=r(28),a=r(171),i=r(66),l=r(26),u=r(84),c=r(45);e.exports=function(e){var t,r,s,f,d,p,h=o(e),g="function"==typeof this?this:Array,v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m,b=c(h),w=0;if(y&&(m=n(m,v>2?arguments[2]:void 0,2)),void 0==b||g==Array&&i(b))for(r=new g(t=l(h.length));t>w;w++)p=y?m(h[w],w):h[w],u(r,w,p);else for(d=(f=b.call(h)).next,r=new g;!(s=d.call(f)).done;w++)p=y?a(f,m,[s.value,w],!0):s.value,u(r,w,p);return r.length=w,r}},function(e,t,r){var n=r(2),o=r(69);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){throw o(e),t}}},function(e,t,r){var n=r(8);r(22)(n.JSON,"JSON",!0)},function(e,t,r){r(22)(Math,"Math",!0)},function(e,t,r){r(9)("dispose")},function(e,t,r){r(9)("observable")},function(e,t,r){r(9)("patternMatch")},function(e,t,r){"use strict";var n=r(86),o=[ReferenceError,TypeError,RangeError],a=!1;function i(){a=!1,n._Y=null,n._Z=null}function l(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},a&&i();a=!0;var t=0,r=0,u={};function c(t){(e.allRejections||l(u[t].error,e.whitelist||o))&&(u[t].displayId=r++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}n._Y=function(t){2===t._V&&u[t._1]&&(u[t._1].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+u[t].displayId+".")))}(t._1):clearTimeout(u[t._1].timeout),delete u[t._1])},n._Z=function(e,r){0===e._U&&(e._1=t++,u[e._1]={displayId:null,error:r,timeout:setTimeout(c.bind(null,e._1),l(r,o)?100:2e3),logged:!1})}}},function(e,t,r){"use strict";(function(t){function r(e){o.length||(n(),!0),o[o.length]=e}e.exports=r;var n,o=[],a=0;function i(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,r=o.length-a;t<r;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0,!1}var l,u,c,s="undefined"!==typeof t?t:self,f=s.MutationObserver||s.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(n,0),r=setInterval(n,50);function n(){clearTimeout(t),clearInterval(r),e()}}}"function"===typeof f?(l=1,u=new f(i),c=document.createTextNode(""),u.observe(c,{characterData:!0}),n=function(){l=-l,c.data=l}):n=d(i),r.requestFlush=n,r.makeRequestCallFromTimer=d}).call(this,r(34))},function(e,t,r){"use strict";var n=r(86);e.exports=n;var o=s(!0),a=s(!1),i=s(null),l=s(void 0),u=s(0),c=s("");function s(e){var t=new n(n._0);return t._V=1,t._W=e,t}n.resolve=function(e){if(e instanceof n)return e;if(null===e)return i;if(void 0===e)return l;if(!0===e)return o;if(!1===e)return a;if(0===e)return u;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new n(t.bind(e))}catch(e){return new n((function(t,r){r(e)}))}return s(e)};var f=function(e){return"function"===typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};n.all=function(e){var t=f(e);return new n((function(e,r){if(0===t.length)return e([]);var o=t.length;function a(i,l){if(l&&("object"===typeof l||"function"===typeof l)){if(l instanceof n&&l.then===n.prototype.then){for(;3===l._V;)l=l._W;return 1===l._V?a(i,l._W):(2===l._V&&r(l._W),void l.then((function(e){a(i,e)}),r))}var u=l.then;if("function"===typeof u)return void new n(u.bind(l)).then((function(e){a(i,e)}),r)}t[i]=l,0===--o&&e(t)}for(var i=0;i<t.length;i++)a(i,t[i])}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){f(e).forEach((function(e){n.resolve(e).then(t,r)}))}))},n.prototype.catch=function(e){return this.then(null,e)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Headers",(function(){return h})),r.d(t,"Request",(function(){return k})),r.d(t,"Response",(function(){return x})),r.d(t,"DOMException",(function(){return _})),r.d(t,"fetch",(function(){return T}));var n="undefined"!==typeof globalThis&&globalThis||"undefined"!==typeof self&&self||"undefined"!==typeof n&&n,o="URLSearchParams"in n,a="Symbol"in n&&"iterator"in Symbol,i="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(e){return!1}}(),l="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!==typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function g(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function v(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function m(e){var t=new FileReader,r=v(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=g(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=g(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var e,t,r,n=g(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=v(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),p(e)},a&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function k(e,t){if(!(this instanceof k))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof k){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),("GET"===this.method||"HEAD"===this.method)&&("no-store"===t.cache||"no-cache"===t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}k.prototype.clone=function(){return new k(this,{body:this._bodyInit})},b.call(k.prototype),b.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];x.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new x(null,{status:t,headers:{location:e}})};var _=n.DOMException;try{new _}catch(e){(_=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),_.prototype.constructor=_}function T(e,t){return new Promise((function(r,o){var a=new k(e,t);if(a.signal&&a.signal.aborted)return o(new _("Aborted","AbortError"));var l=new XMLHttpRequest;function c(){l.abort()}l.onload=function(){var e,t,n={status:l.status,statusText:l.statusText,headers:(e=l.getAllResponseHeaders()||"",t=new h,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in l?l.responseURL:n.headers.get("X-Request-URL");var o="response"in l?l.response:l.responseText;setTimeout((function(){r(new x(o,n))}),0)},l.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.onabort=function(){setTimeout((function(){o(new _("Aborted","AbortError"))}),0)},l.open(a.method,function(e){try{return""===e&&n.location.href?n.location.href:e}catch(t){return e}}(a.url),!0),"include"===a.credentials?l.withCredentials=!0:"omit"===a.credentials&&(l.withCredentials=!1),"responseType"in l&&(i?l.responseType="blob":u&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(l.responseType="arraybuffer")),!t||"object"!==typeof t.headers||t.headers instanceof h?a.headers.forEach((function(e,t){l.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){l.setRequestHeader(e,d(t.headers[e]))})),a.signal&&(a.signal.addEventListener("abort",c),l.onreadystatechange=function(){4===l.readyState&&a.signal.removeEventListener("abort",c)}),l.send("undefined"===typeof a._bodyInit?null:a._bodyInit)}))}T.polyfill=!0,n.fetch||(n.fetch=T,n.Headers=h,n.Request=k,n.Response=x)},function(e,t,r){(function(t){for(var n=r(182),o="undefined"===typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],u=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],u=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!u){var s=0,f=0,d=[];l=function(e){if(0===d.length){var t=n(),r=Math.max(0,16.666666666666668-(t-s));s=r+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,r(34))},function(e,t,r){(function(t){(function(){var r,n,o,a,i,l;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(r()-i)/1e6},n=t.hrtime,a=(r=function(){var e;return 1e9*(e=n())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(51))},function(e,t,r){"use strict";var n=r(50),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"===typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"===typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function m(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var b=y.prototype=new m;b.constructor=y,n(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,a={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g;function T(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===n?"."+T(u,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),C(i,t,r,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(l=e[c],c);u+=C(l,t,r,s,i)}else if("function"===typeof(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,r,s=n+T(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function N(){var e=R.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error(p(267,e));var a=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return N().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,r){return N().useReducer(e,t,r)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,r){"use strict";var n=r(0),o=r(50),a=r(185);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),d=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},g={};function v(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null===t||"undefined"===typeof t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!p.call(g,e)||!p.call(h,e)&&(d.test(e)?g[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,T=60114,C=60109,O=60110,P=60112,R=60113,N=60120,L=60115,A=60116,I=60121,j=60128,M=60129,D=60130,q=60131;if("function"===typeof Symbol&&Symbol.for){var z=Symbol.for;E=z("react.element"),x=z("react.portal"),S=z("react.fragment"),_=z("react.strict_mode"),T=z("react.profiler"),C=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),R=z("react.suspense"),N=z("react.suspense_list"),L=z("react.memo"),A=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),q=z("react.legacy_hidden")}var U,F="function"===typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\\n( *(at )?)/);U=t&&t[1]||""}return"\\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"===typeof e.stack){for(var o=e.stack.split("\\n"),a=n.stack.split("\\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?V(e):""}function $(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case T:return"Profiler";case _:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return G(e.type);case I:return G(e._render);case A:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof r&&"function"===typeof r.get&&"function"===typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=Y(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Q(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Q(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Q(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Q(r)}}function ce(e,t){var r=Q(t.value),n=Q(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,ve,me=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,r){return null==t||"boolean"===typeof t||""===t?"":r||"number"!==typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=ke(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Pe=null;function Re(e){if(e=eo(e)){if("function"!==typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=ro(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Le(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Ie(e,t,r,n,o){return e(t,r,n,o)}function je(){}var Me=Ae,De=!1,qe=!1;function ze(){null===Oe&&null===Pe||(je(),Le())}function Ue(e,t){var r=e.stateNode;if(null===r)return null;var n=ro(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!==typeof r)throw Error(i(231,t,typeof r));return r}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function Ve(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var He=!1,We=null,$e=!1,Ge=null,Qe={onError:function(e){He=!0,We=e}};function Ye(e,t,r,n,o,a,i,l,u){He=!1,We=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Je(o),e;if(a===n)return Je(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var tt,rt,nt,ot,at=!1,it=[],lt=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function gt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,r,n,o,a),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zn(e.target);if(null!==t){var r=Ke(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Xe(r)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=eo(r))&&rt(t),e.blockedOn=r,!1;t.shift()}return!0}function bt(e,t,r){yt(e)&&r.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&it.shift()}null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),null!==ct&&yt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wt)))}function Et(e){function t(t){return kt(t,e)}if(0<it.length){kt(it[0],e);for(var r=1;r<it.length;r++){var n=it[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==ct&&kt(ct,e),st.forEach(t),ft.forEach(t),r=0;r<dt.length;r++)(n=dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<dt.length&&null===(r=dt[0]).blockedOn;)mt(r),null===r.blockedOn&&dt.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Tt={};function Ct(e){if(_t[e])return _t[e];if(!St[e])return e;var t,r=St[e];for(t in r)if(r.hasOwnProperty(t)&&t in Tt)return _t[e]=r[t];return e}f&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Ct("animationend"),Pt=Ct("animationiteration"),Rt=Ct("animationstart"),Nt=Ct("transitionend"),Lt=new Map,At=new Map,It=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(n,t),Lt.set(n,o),c(o,[n])}}(0,a.unstable_now)();var Mt=8;function Dt(e){if(0!==(1&e))return Mt=15,1;if(0!==(2&e))return Mt=14,2;if(0!==(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!==(32&e)?(Mt=11,32):0!==(t=192&e)?(Mt=10,t):0!==(256&e)?(Mt=9,256):0!==(t=3584&e)?(Mt=8,t):0!==(4096&e)?(Mt=7,4096):0!==(t=4186112&e)?(Mt=6,t):0!==(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!==(134217728&e)?(Mt=3,134217728):0!==(t=805306368&e)?(Mt=2,t):0!==(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function qt(e,t){var r=e.pendingLanes;if(0===r)return Mt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)n=a,o=Mt=15;else if(0!==(a=134217727&r)){var u=a&~i;0!==u?(n=Dt(u),o=Mt):0!==(l&=a)&&(n=Dt(l),o=Mt)}else 0!==(a=r&~i)?(n=Dt(a),o=Mt):0!==l&&(n=Dt(l),o=Mt);if(0===n)return 0;if(n=r&((0>(n=31-Ht(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0===(t&i)){if(Dt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Ht(t)),n|=e[r],t&=~o;return n}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Vt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Ht(t)]=r}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Gt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Yt=!0;function Kt(e,t,r,n){De||je();var o=Jt,a=De;De=!0;try{Ie(o,e,t,r,n)}finally{(De=a)||ze()}}function Xt(e,t,r,n){Qt(Gt,Jt.bind(null,e,t,r,n))}function Jt(e,t,r,n){var o;if(Yt)if((o=0===(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,r,n),it.push(e);else{var a=Zt(e,t,r,n);if(null===a)o&&gt(e,n);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,r,n),void it.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return lt=vt(lt,e,t,r,n,o),!0;case"dragenter":return ut=vt(ut,e,t,r,n,o),!0;case"mouseover":return ct=vt(ct,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,vt(ft.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;gt(e,n)}Ln(e,t,n,null,r)}}}function Zt(e,t,r,n){var o=Te(n);if(null!==(o=Zn(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ln(e,t,n,o,r),null}var er=null,tr=null,rr=null;function nr(){if(rr)return rr;var e,t,r=tr,n=r.length,o="value"in er?er.value:er.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return rr=o.slice(e,1<t?1-t:void 0)}function or(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ar(){return!0}function ir(){return!1}function lr(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ar:ir,this.isPropagationStopped=ir,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ar)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ar)},persist:function(){},isPersistent:ar}),t}var ur,cr,sr,fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dr=lr(fr),pr=o({},fr,{view:0,detail:0}),hr=lr(pr),gr=o({},pr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(ur=e.screenX-sr.screenX,cr=e.screenY-sr.screenY):cr=ur=0,sr=e),ur)},movementY:function(e){return"movementY"in e?e.movementY:cr}}),vr=lr(gr),mr=lr(o({},gr,{dataTransfer:0})),yr=lr(o({},pr,{relatedTarget:0})),br=lr(o({},fr,{animationName:0,elapsedTime:0,pseudoElement:0})),wr=lr(o({},fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kr=lr(o({},fr,{data:0})),Er={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Cr=lr(o({},pr,{key:function(e){if(e.key){var t=Er[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=or(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?or(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?or(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Or=lr(o({},gr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=lr(o({},pr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tr})),Rr=lr(o({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nr=lr(o({},gr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Lr=[9,13,27,32],Ar=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Mr=f&&(!Ar||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),qr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Lr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1;var Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Hr(e,t,r,n){Ne(n),0<(t=In(t,"onChange")).length&&(r=new dr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Wr=null,$r=null;function Gr(e){Tn(e,0)}function Qr(e){if(X(to(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(f){var Xr;if(f){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"===typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Wr&&(Wr.detachEvent("onpropertychange",tn),$r=Wr=null)}function tn(e){if("value"===e.propertyName&&Qr($r)){var t=[];if(Hr(t,$r,e,Te(e)),e=Gr,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,ze()}}}}function rn(e,t,r){"focusin"===e?(en(),$r=r,(Wr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr($r)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},un=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!un.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"===typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,vn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==vn||vn!==J(n)||("selectionStart"in(n=vn)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&cn(yn,n)||(yn=n,0<(n=In(mn,"onSelect")).length&&(t=new dr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var kn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),En=0;En<kn.length;En++)At.set(kn[En],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sn=new Set("cancel close invalid load scroll toggle".split(" ").concat(xn));function _n(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,l,u,c){if(Ye.apply(this,arguments),He){if(!He)throw Error(i(198));var s=We;He=!1,We=null,$e||($e=!0,Ge=s)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!==(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cn(e,t){var r=no(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var On="_reactListening"+Math.random().toString(36).slice(2);function Pn(e){e[On]||(e[On]=!0,l.forEach((function(t){Sn.has(t)||Rn(t,!1,e,null),Rn(t,!0,e,null)})))}function Rn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&Sn.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Nn(a,e,o,t),i.add(l))}function Nn(e,t,r,n){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Xt;break;default:o=Jt}r=o.bind(null,t,r,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Ln(e,t,r,n,o){var a=n;if(0===(1&t)&&0===(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Zn(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}!function(e,t,r){if(qe)return e(t,r);qe=!0;try{Me(e,t,r)}finally{qe=!1,ze()}}((function(){var n=a,o=Te(r),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dr,c=e;switch(e){case"keypress":if(0===or(r))break e;case"keydown":case"keyup":u=Cr;break;case"focusin":c="focus",u=yr;break;case"focusout":c="blur",u=yr;break;case"beforeblur":case"afterblur":u=yr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Ot:case Pt:case Rt:u=br;break;case Nt:u=Rr;break;case"scroll":u=hr;break;case"wheel":u=Nr;break;case"copy":case"cut":case"paste":u=wr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Or}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&(null!=(g=Ue(h,d))&&s.push(An(h,g,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!==(16&t)||!(c=r.relatedTarget||r.fromElement)||!Zn(c)&&!c[Xn])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?Zn(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=vr,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Or,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==c?l:to(c),(l=new s(g,h+"leave",u,r,o)).target=f,l.relatedTarget=p,g=null,Zn(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,g=s),f=g,u&&c)e:{for(d=c,h=0,p=s=u;p;p=jn(p))h++;for(p=0,g=d;g;g=jn(g))p++;for(;0<h-p;)s=jn(s),h--;for(;0<p-h;)d=jn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=jn(s),d=jn(d)}s=null}else s=null;null!==u&&Mn(i,l,u,s,!1),null!==c&&null!==f&&Mn(i,f,c,s,!0)}if("select"===(u=(l=n?to(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yr;else if(Vr(l))if(Kr)v=an;else{v=nn;var m=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Hr(i,v,r,o):(m&&m(e,l,n),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&oe(l,"number",l.value)),m=n?to(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(vn=m,mn=n,yn=null);break;case"focusout":yn=mn=vn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":wn(i,r,o)}var y;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Mr&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fr&&(y=nr()):(tr="value"in(er=o)?er.value:er.textContent,Fr=!0)),0<(m=In(n,b)).length&&(b=new kr(b,e,null,r,o),i.push({event:b,listeners:m}),y?b.data=y:null!==(y=Ur(r))&&(b.data=y))),(y=jr?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(qr=!0,Dr);case"textInput":return(e=t.data)===Dr&&qr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Ar&&zr(e,t)?(e=nr(),rr=tr=er=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))&&(0<(n=In(n,"onBeforeInput")).length&&(o=new kr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=y))}Tn(i,t)}))}function An(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ue(e,r))&&n.unshift(An(e,a,o)),null!=(a=Ue(e,t))&&n.push(An(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ue(r,a))&&i.unshift(An(r,u,l)):o||null!=(u=Ue(r,a))&&i.push(An(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var qn=null,zn=null;function Un(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Bn="function"===typeof setTimeout?setTimeout:void 0,Vn="function"===typeof clearTimeout?clearTimeout:void 0;function Hn(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Gn=0;var Qn=Math.random().toString(36).slice(2),Yn="__reactFiber$"+Qn,Kn="__reactProps$"+Qn,Xn="__reactContainer$"+Qn,Jn="__reactEvents$"+Qn;function Zn(e){var t=e[Yn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Xn]||r[Yn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=$n(e);null!==e;){if(r=e[Yn])return r;e=$n(e)}return t}r=(e=r).parentNode}return null}function eo(e){return!(e=e[Yn]||e[Xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ro(e){return e[Kn]||null}function no(e){var t=e[Jn];return void 0===t&&(t=e[Jn]=new Set),t}var oo=[],ao=-1;function io(e){return{current:e}}function lo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function uo(e,t){ao++,oo[ao]=e.current,e.current=t}var co={},so=io(co),fo=io(!1),po=co;function ho(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!==(e=e.childContextTypes)&&void 0!==e}function vo(){lo(fo),lo(so)}function mo(e,t,r){if(so.current!==co)throw Error(i(168));uo(so,t),uo(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!==typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},r,n)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,po=so.current,uo(so,e),uo(fo,fo.current),!0}function wo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(so),uo(so,e)):lo(fo),uo(fo,r)}var ko=null,Eo=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,To=a.unstable_shouldYield,Co=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Ao=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Mo=void 0!==Co?Co:function(){},Do=null,qo=null,zo=!1,Uo=Oo(),Fo=1e4>Uo?Oo:function(){return Oo()-Uo};function Bo(){switch(Po()){case Ro:return 99;case No:return 98;case Lo:return 97;case Ao:return 96;case Io:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Ro;case 98:return No;case 97:return Lo;case 96:return Ao;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Wo(e,t,r){return e=Vo(e),So(e,t,r)}function $o(){if(null!==qo){var e=qo;qo=null,_o(e)}Go()}function Go(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(Ro,$o),t}finally{zo=!1}}}var Qo=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Ko=io(null),Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Ko.current;lo(Ko),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function fa(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((n&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(u=t,p=r,g.tag){case 1:if("function"===typeof(h=g.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null===(u="function"===typeof(h=g.payload)?h.call(p,d,u):h)||void 0===u)break e;d=o({},d,u);break e;case 2:aa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,ql|=l,e.lanes=l,e.memoizedState=d}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!==typeof o)throw Error(i(191,o));o.call(n)}}}var pa=(new n.Component).refs;function ha(e,t,r,n){r=null===(r=r(n,t=e.memoizedState))||void 0===r?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.tag=1,a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=cu(),n=su(e),o=ua(r,n);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ca(e,o),fu(e,n,r)}};function va(e,t,r,n,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!cn(r,n)||!cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"===typeof a&&null!==a?a=oa(a):(o=go(t)?po:so.current,a=(n=null!==(n=t.contextTypes)&&void 0!==n)?ho(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function ba(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=pa,ia(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=oa(a):(a=go(t)?po:so.current,o.context=ho(e,a)),fa(e,r,o,n),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,r),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),fa(e,r,o,n),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,r){if(null!==(e=r.ref)&&"function"!==typeof e&&"object"!==typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Gu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ka(e,t,r),n.return=e,n):((n=Hu(r.type,r.key,r.props,null,e.mode,n)).ref=ka(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Qu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"===typeof t||"number"===typeof t)return(t=Gu(""+t,e.mode,r)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Hu(t.type,t.key,t.props,null,e.mode,r)).ref=ka(e,null,t),r.return=e,r;case x:return(t=Qu(t,e.mode,r)).return=e,t}if(wa(t)||B(t))return(t=Wu(t,e.mode,r,null)).return=e,t;Ea(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"===typeof r||"number"===typeof r)return null!==o?null:u(e,t,""+r,n);if("object"===typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===S?f(e,t,r.props.children,n,o):c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null}if(wa(r)||B(r))return null!==o?null:f(e,t,r,n,null);Ea(e,r)}return null}function h(e,t,r,n,o){if("string"===typeof n||"number"===typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"===typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===S?f(t,e,n.props.children,o,n.key):c(t,e,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(wa(n)||B(n))return f(t,e=e.get(r)||null,n,o,null);Ea(t,n)}return null}function g(o,i,l,u){for(var c=null,s=null,f=i,g=i=0,v=null;null!==f&&g<l.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,l[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===s?c=m:s.sibling=m,s=m,f=v}if(g===l.length)return r(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=n(o,f);g<l.length;g++)null!==(v=h(f,o,g,l[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=B(u);if("function"!==typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,g=l,v=l=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var b=p(o,g,y.value,c);if(null===b){null===g&&(g=m);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,g=m}if(y.done)return r(o,g),s;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(g=n(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var c="object"===typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var s="object"===typeof a&&null!==a;if(s)switch(a.$$typeof){case E:e:{for(s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===S){r(e,c.sibling),(n=o(c,a.props.children)).return=e,e=n;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(n=o(c,a.props)).ref=ka(e,c,a),n.return=e,e=n;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===S?((n=Wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,n,a),u.return=e,e=u)}return l(e);case x:e:{for(c=a.key;null!==n;){if(n.key===c){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Qu(a,e.mode,u)).return=e,e=n}return l(e)}if("string"===typeof a||"number"===typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Gu(a,e.mode,u)).return=e,e=n),l(e);if(wa(a))return g(e,n,a,u);if(B(a))return v(e,n,a,u);if(s&&Ea(e,a),"undefined"===typeof a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return r(e,n)}}var Sa=xa(!0),_a=xa(!1),Ta={},Ca=io(Ta),Oa=io(Ta),Pa=io(Ta);function Ra(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(uo(Pa,t),uo(Oa,e),uo(Ca,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ca),uo(Ca,t)}function La(){lo(Ca),lo(Oa),lo(Pa)}function Aa(e){Ra(Pa.current);var t=Ra(Ca.current),r=he(t,e.type);t!==r&&(uo(Oa,e),uo(Ca,r))}function Ia(e){Oa.current===e&&(lo(Ca),lo(Oa))}var ja=io(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,qa=null,za=!1;function Ua(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Fa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(za){var t=qa;if(t){var r=t;if(!Fa(e,t)){if(!(t=Wn(r.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ua(Da,r)}Da=e,qa=Wn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fn(t,e.memoizedProps))for(t=qa;t;)Ua(e,t),t=Wn(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){qa=Wn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}qa=null}}else qa=Da?Wn(e.stateNode.nextSibling):null;return!0}function Wa(){qa=Da=null,za=!1}var $a=[];function Ga(){for(var e=0;e<$a.length;e++)$a[e]._workInProgressVersionPrimary=null;$a.length=0}var Qa=k.ReactCurrentDispatcher,Ya=k.ReactCurrentBatchConfig,Ka=0,Xa=null,Ja=null,Za=null,ei=!1,ti=!1;function ri(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function oi(e,t,r,n,o,a){if(Ka=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:Ni,e=r(n,o),ti){a=0;do{if(ti=!1,!(25>a))throw Error(i(301));a+=1,Za=Ja=null,t.updateQueue=null,Qa.current=Li,e=r(n,o)}while(ti)}if(Qa.current=Pi,t=null!==Ja&&null!==Ja.next,Ka=0,Za=Ja=Xa=null,ei=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Za?Xa.memoizedState=Za=e:Za=Za.next=e,Za}function ii(){if(null===Ja){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===Za?Xa.memoizedState:Za.next;if(null!==t)Za=t,Ja=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===Za?Xa.memoizedState=Za=e:Za=Za.next=e}return Za}function li(e,t){return"function"===typeof t?t(e):t}function ui(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Ja,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=n):u=u.next=f,Xa.lanes|=s,ql|=s}c=c.next}while(null!==c&&c!==o);null===u?a=n:u.next=l,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function si(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=n,$a.push(t))),e)return r(t._source);throw $a.push(t),Error(i(350))}function fi(e,t,r,n){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,c=u.useState((function(){return si(o,t,r)})),s=c[1],f=c[0];c=Za;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,g=d.source;d=d.subscribe;var v=Xa;return e.memoizedState={refs:p,source:t,subscribe:n},u.useEffect((function(){p.getSnapshot=r,p.setSnapshot=s;var e=a(t._source);if(!ln(l,e)){e=r(t._source),ln(f,e)||(s(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;n[u]|=e,i&=~c}}}),[r,t,n]),u.useEffect((function(){return n(t._source,(function(){var e=p.getSnapshot,r=p.setSnapshot;try{r(e(t._source));var n=su(v);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(g,t)&&ln(d,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=s=Oi.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,r),c.memoizedState=c.baseState=f),f}function di(e,t,r){return fi(ii(),e,t,r)}function pi(e){var t=ai();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Oi.bind(null,Xa,e),[t.memoizedState,e]}function hi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ai().memoizedState=e}function vi(){return ii().memoizedState}function mi(e,t,r,n){var o=ai();Xa.flags|=e,o.memoizedState=hi(1|t,r,void 0,void 0===n?null:n)}function yi(e,t,r,n){var o=ii();n=void 0===n?null:n;var a=void 0;if(null!==Ja){var i=Ja.memoizedState;if(a=i.destroy,null!==n&&ni(n,i.deps))return void hi(t,r,a,n)}Xa.flags|=e,o.memoizedState=hi(1|t,r,a,n)}function bi(e,t){return mi(516,4,e,t)}function wi(e,t){return yi(516,4,e,t)}function ki(e,t){return yi(4,2,e,t)}function Ei(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,yi(4,2,Ei.bind(null,t,e),r)}function Si(){}function _i(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ci(e,t){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=r}}))}function Oi(e,t,r){var n=cu(),o=su(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)ti=ei=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,r);if(a.eagerReducer=i,a.eagerState=u,ln(u,l))return}catch(e){}fu(e,o,n)}}var Pi={readContext:oa,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Ri={readContext:oa,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:oa,useEffect:bi,useImperativeHandle:function(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,mi(4,2,Ei.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ai();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ai();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Xa,e),[n.memoizedState,e]},useRef:gi,useState:pi,useDebugValue:Si,useDeferredValue:function(e){var t=pi(e),r=t[0],n=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=pi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ai();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},fi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Gn++).toString(36))),Error(i(355))})),r=pi(t)[1];return 0===(2&Xa.mode)&&(Xa.flags|=516,hi(5,(function(){r("r:"+(Gn++).toString(36))}),void 0,null)),t}return pi(t="r:"+(Gn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ui,useRef:vi,useState:function(){return ui(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ui(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(li)[0]},unstable_isNewReconciler:!1},Li={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:vi,useState:function(){return ci(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Ai=k.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?_a(t,null,r,n):Sa(t,e.child,r,n)}function Mi(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!==typeof i||Bu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Hu(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qi(e,t,i,n,o,a))}return i=e.child,0===(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?rl(e,t,a):(t.flags|=1,(e=Vu(i,n)).ref=t.ref,e.return=t,t.child=e)}function qi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0===(a&o))return t.lanes=e.lanes,rl(e,t,a);0!==(16384&e.flags)&&(Ii=!0)}return Fi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0===(4&t.mode))t.memoizedState={baseLanes:0},bu(t,r);else{if(0===(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(t,e),null;t.memoizedState={baseLanes:0},bu(t,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,bu(t,n);return ji(e,t,o,r),t.child}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Fi(e,t,r,n,o){var a=go(r)?po:so.current;return a=ho(t,a),na(t,o),r=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Bi(e,t,r,n,o){if(go(r)){var a=!0;bo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),ba(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;"object"===typeof c&&null!==c?c=oa(c):c=ho(t,c=go(r)?po:so.current);var s=r.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==n||u!==c)&&ya(t,i,n,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,n,i,o),u=t.memoizedState,l!==n||d!==u||fo.current||aa?("function"===typeof s&&(ha(t,r,s,n),u=t.memoizedState),(l=aa||va(t,r,l,n,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4)):("function"===typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"===typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Yo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=r.contextType)&&null!==u?u=oa(u):u=ho(t,u=go(r)?po:so.current);var p=r.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,n,u),aa=!1,d=t.memoizedState,i.state=d,fa(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||fo.current||aa?("function"===typeof p&&(ha(t,r,p,n),h=t.memoizedState),(c=aa||va(t,r,c,n,d,h,u))?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),n=!1)}return Vi(e,t,r,n,a,o)}function Vi(e,t,r,n,o,a){Ui(e,t);var i=0!==(64&t.flags);if(!n&&!i)return o&&wo(t,r,!1),rl(e,t,a);n=t.stateNode,Ai.current=t;var l=i&&"function"!==typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=n.state,o&&wo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var Wi,$i,Gi,Qi={dehydrated:null,retryLane:0};function Yi(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!==(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!==(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(ja,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,e):"number"===typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,t.lanes=33554432,e):((r=$u({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=Ji(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Qi,o):(r=Xi(e,t,o.children,r),t.memoizedState=null,r))}function Ki(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0===(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),r=Wu(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Xi(e,t,r,n){var o=e.child;return e=o.sibling,r=Vu(o,{mode:"visible",children:r}),0===(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function Ji(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:r};return 0===(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=l,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=Vu(i,l),null!==e?n=Vu(e,n):(n=Wu(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}function Zi(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ra(e.return,t)}function el(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function tl(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!==(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!==(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,r);else if(19===e.tag)Zi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(uo(ja,n),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ma(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),el(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}el(t,!0,r,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),ql|=t.lanes,0!==(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Vu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Vu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function nl(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ol(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return La(),lo(fo),lo(so),Ga(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Ra(Pa.current);if(r=t.type,null!==e&&null!=t.stateNode)$i(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),Ha(t)){n=t.stateNode,r=t.type;var l=t.memoizedProps;switch(n[Yn]=t,n[Kn]=l,r){case"dialog":Cn("cancel",n),Cn("close",n);break;case"iframe":case"object":case"embed":Cn("load",n);break;case"video":case"audio":for(e=0;e<xn.length;e++)Cn(xn[e],n);break;case"source":Cn("error",n);break;case"img":case"image":case"link":Cn("error",n),Cn("load",n);break;case"details":Cn("toggle",n);break;case"input":ee(n,l),Cn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Cn("invalid",n);break;case"textarea":ue(n,l),Cn("invalid",n)}for(var c in Se(r,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"===typeof a?n.textContent!==a&&(e=["children",a]):"number"===typeof a&&n.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Cn("scroll",n));switch(r){case"input":K(n),ne(n,l,!0);break;case"textarea":K(n),se(n);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=c.createElement("div")).innerHTML="<script><\\/script>",e=e.removeChild(e.firstChild)):"string"===typeof n.is?e=c.createElement(r,{is:n.is}):(e=c.createElement(r),"select"===r&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,r),e[Yn]=t,e[Kn]=n,Wi(e,t),t.stateNode=e,c=_e(r,n),r){case"dialog":Cn("cancel",e),Cn("close",e),a=n;break;case"iframe":case"object":case"embed":Cn("load",e),a=n;break;case"video":case"audio":for(a=0;a<xn.length;a++)Cn(xn[a],e);a=n;break;case"source":Cn("error",e),a=n;break;case"img":case"image":case"link":Cn("error",e),Cn("load",e),a=n;break;case"details":Cn("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),Cn("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),Cn("invalid",e);break;case"textarea":ue(e,n),a=le(e,n),Cn("invalid",e);break;default:a=n}Se(r,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"===typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"===typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cn("scroll",e):null!=f&&w(e,l,f,c))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Q(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ie(e,!!n.multiple,l,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof a.onClick&&(e.onclick=Dn)}Un(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Gi(0,t,e.memoizedProps,n);else{if("string"!==typeof n&&null===t.stateNode)throw Error(i(166));r=Ra(Pa.current),Ra(Ca.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Yn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Yn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!==(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&ja.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Rl||0===(134217727&ql)&&0===(134217727&zl)||gu(Rl,Ll))),(n||r)&&(t.flags|=4),null);case 4:return La(),null===e&&Pn(t.stateNode.containerInfo),null;case 10:return ta(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(l=0!==(64&t.flags),null===(c=n.rendering))if(l)nl(n,!1);else{if(0!==jl||null!==e&&0!==(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,nl(n,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(l=r).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return uo(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Fo()>Vl&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),nl(n,!0),null===n.tail&&"hidden"===n.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-n.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432);n.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=n.last)?r.sibling=c:t.child=c,n.last=c)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fo(),r.sibling=null,t=ja.current,uo(ja,l?1&t|2:1&t),r):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!==(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),lo(fo),lo(so),Ga(),0!==(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return La(),null;case 10:return ta(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var r="",n=t;do{r+=$(n),n=n.return}while(n);var o=r}catch(e){o="\\nError generating stack: "+e.message+"\\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},$i=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Ra(Ca.current);var i,l=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),l=[];break;case"option":a=ae(e,a),n=ae(e,n),l=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),l=[];break;case"textarea":a=le(e,a),n=le(e,n),l=[];break;default:"function"!==typeof a.onClick&&"function"===typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in n){var s=n[f];if(c=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(r||(r={}),r[i]=s[i])}else r||(l||(l=[]),l.push(f,r)),r=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!==typeof s&&"number"!==typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Cn("scroll",e),l||c===s||(l=[])):"object"===typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}r&&(l=l||[]).push("style",r);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Gi=function(e,t,r,n){r!==n&&(t.flags|=4)};var ul="function"===typeof WeakMap?WeakMap:Map;function cl(e,t,r){(r=ua(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Gl||(Gl=!0,Ql=n),ll(0,t)},r}function sl(e,t,r){(r=ua(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"===typeof n){var o=t.value;r.payload=function(){return ll(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(r.callback=function(){"function"!==typeof n&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var fl="function"===typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function hl(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3===(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!==(4&(o=o.tag))&&0!==(1&o)&&(Iu(r,e),Au(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Un(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Et(r)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function gl(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"===typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,n.style.display=ke("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vl(e,t){if(Eo&&"function"===typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!==(4&n))Iu(t,r);else{n=t;try{o()}catch(e){Du(n,e)}}r=r.next}while(r!==e)}break;case 1:if(dl(t),"function"===typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yl(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?wl(e,r,t):kl(e,r,t)}function wl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!==(r=r._reactRootContainer)&&void 0!==r||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(wl(e,t,r),e=e.sibling;null!==e;)wl(e,t,r),e=e.sibling}function kl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(kl(e,t,r),e=e.sibling;null!==e;)kl(e,t,r),e=e.sibling}function El(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}n?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3===(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Kn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),_e(e,o),t=_e(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(r,u):"dangerouslySetInnerHTML"===l?me(r,u):"children"===l?ye(r,u):w(r,l,u,t)}switch(e){case"input":re(r,n);break;case"textarea":ce(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,Et(r.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),gl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void gl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new fl),t.forEach((function(t){var n=zu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Tl=Math.ceil,Cl=k.ReactCurrentDispatcher,Ol=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,Ll=0,Al=0,Il=io(0),jl=0,Ml=null,Dl=0,ql=0,zl=0,Ul=0,Fl=null,Bl=0,Vl=1/0;function Hl(){Vl=Fo()+500}var Wl,$l=null,Gl=!1,Ql=null,Yl=null,Kl=!1,Xl=null,Jl=90,Zl=[],eu=[],tu=null,ru=0,nu=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function cu(){return 0!==(48&Pl)?Fo():-1!==ou?ou:ou=Fo()}function su(e){if(0===(2&(e=e.mode)))return 1;if(0===(4&e))return 99===Bo()?1:2;if(0===au&&(au=Dl),0!==Qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=au;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!==(4&Pl)&&98===e?e=Ut(12,au):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au),e}function fu(e,t,r){if(50<ru)throw ru=0,nu=null,Error(i(185));if(null===(e=du(e,t)))return null;Vt(e,t,r),e===Rl&&(zl|=t,4===jl&&gu(e,Ll));var n=Bo();1===t?0!==(8&Pl)&&0===(48&Pl)?vu(e):(pu(e,r),0===Pl&&(Hl(),$o())):(0===(4&Pl)||98!==n&&99!==n||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,r)),Fl=e}function du(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pu(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=a[u];if(-1===s){if(0===(c&n)||0!==(c&o)){s=t,Dt(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(n=qt(e,e===Rl?Ll:0),t=Mt,0===n)null!==r&&(r!==jo&&_o(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&_o(r)}15===t?(r=vu.bind(null,e),null===Do?(Do=[r],qo=So(Ro,Go)):Do.push(r),r=jo):14===t?r=Wo(99,vu.bind(null,e)):r=Wo(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),hu.bind(null,e)),e.callbackPriority=t,e.callbackNode=r}}function hu(e){if(ou=-1,iu=au=0,0!==(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var r=qt(e,e===Rl?Ll:0);if(0===r)return null;var n=r,o=Pl;Pl|=16;var a=xu();for(Rl===e&&Ll===n||(Hl(),ku(e,n));;)try{Tu();break}catch(t){Eu(e,t)}if(ea(),Cl.current=a,Pl=o,null!==Nl?n=0:(Rl=null,Ll=0,n=jl),0!==(Dl&zl))ku(e,0);else if(0!==n){if(2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=zt(e))&&(n=Su(e,r))),1===n)throw t=Ml,ku(e,0),gu(e,r),pu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(gu(e,r),(62914560&r)===r&&10<(n=Bl+500-Fo())){if(0!==qt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){cu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Bn(Pu.bind(null,e),n);break}Pu(e);break;case 4:if(gu(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var l=31-Ht(r);a=1<<l,(l=n[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Fo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)){e.timeoutHandle=Bn(Pu.bind(null,e),r);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return pu(e,Fo()),e.callbackNode===t?hu.bind(null,e):null}function gu(e,t){for(t&=~Ul,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ht(t),n=1<<r;e[r]=-1,t&=~n}}function vu(e){if(0!==(48&Pl))throw Error(i(327));if(Lu(),e===Rl&&0!==(e.expiredLanes&Ll)){var t=Ll,r=Su(e,t);0!==(Dl&zl)&&(r=Su(e,t=qt(e,t)))}else r=Su(e,t=qt(e,0));if(0!==e.tag&&2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=zt(e))&&(r=Su(e,t))),1===r)throw r=Ml,ku(e,0),gu(e,t),pu(e,Fo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,Fo()),null}function mu(e,t){var r=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function yu(e,t){var r=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function bu(e,t){uo(Il,Al),Al|=t,Dl|=t}function wu(){Al=Il.current,lo(Il)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Vn(r)),null!==Nl)for(r=Nl.return;null!==r;){var n=r;switch(n.tag){case 1:null!==(n=n.type.childContextTypes)&&void 0!==n&&vo();break;case 3:La(),lo(fo),lo(so),Ga();break;case 5:Ia(n);break;case 4:La();break;case 13:case 19:lo(ja);break;case 10:ta(n);break;case 23:case 24:wu()}r=r.return}Rl=e,Nl=Vu(e.current,null),Ll=Al=Dl=t,jl=0,Ml=null,Ul=zl=ql=0}function Eu(e,t){for(;;){var r=Nl;try{if(ea(),Qa.current=Pi,ei){for(var n=Xa.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ei=!1}if(Ka=0,Za=Ja=Xa=null,ti=!1,Ol.current=null,null===r||null===r.return){jl=1,Ml=t,Nl=null;break}e:{var a=e,i=r.return,l=r,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===typeof u&&"function"===typeof u.then){var c=u;if(0===(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!==(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var g=d.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var m=new Set;m.add(c),d.updateQueue=m}else v.add(c);if(0===(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,ca(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=qu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,cl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0===(64&d.flags)&&("function"===typeof k.getDerivedStateFromError||null!==E&&"function"===typeof E.componentDidCatch&&(null===Yl||!Yl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,sl(d,a,t));break e}}d=d.return}while(null!==d)}Ou(r)}catch(e){t=e,Nl===r&&null!==r&&(Nl=r=r.return);continue}break}}function xu(){var e=Cl.current;return Cl.current=Pi,null===e?Pi:e}function Su(e,t){var r=Pl;Pl|=16;var n=xu();for(Rl===e&&Ll===t||ku(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(ea(),Pl=r,Cl.current=n,null!==Nl)throw Error(i(261));return Rl=null,Ll=0,jl}function _u(){for(;null!==Nl;)Cu(Nl)}function Tu(){for(;null!==Nl&&!To();)Cu(Nl)}function Cu(e){var t=Wl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Ou(e):Nl=t,Ol.current=null}function Ou(e){var t=e;do{var r=t.alternate;if(e=t.return,0===(2048&t.flags)){if(null!==(r=ol(r,t,Al)))return void(Nl=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!==(1073741824&Al)||0===(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0===(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=al(t)))return r.flags&=2047,void(Nl=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===jl&&(jl=5)}function Pu(e){var t=Bo();return Ho(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Lu()}while(null!==Xl);if(0!==(48&Pl))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Ht(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==tu&&0===(24&n)&&tu.has(e)&&tu.delete(e),e===Rl&&(Nl=Rl=null,Ll=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Pl,Pl|=32,Ol.current=null,qn=Yt,hn(l=pn())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,g=0,v=l,m=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)m=v,v=y;for(;;){if(v===l)break t;if(m===u&&++h===a&&(d=f),m===c&&++g===s&&(p=f),null!==(y=v.nextSibling))break;m=(v=m).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zn={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,$l=n;do{try{Nu()}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);lu=null,$l=n;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl($l),$l.flags&=-3;break;case 6:bl($l),$l.flags&=-3,xl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,xl($l.alternate,$l);break;case 4:xl($l.alternate,$l);break;case 8:El(l,u=$l);var E=u.alternate;ml(u),null!==E&&ml(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=zn,w=pn(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==l&&hn(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=fn(b,E),a=fn(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!qn,zn=qn=null,e.current=r,$l=n;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&hl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var _=$l.stateNode;switch($l.tag){case 5:w=_;break;default:w=_}"function"===typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),Pl=o}else e.current=r;if(Kl)Kl=!1,Xl=e,Jl=t;else for($l=n;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(n=e.pendingLanes)&&(Yl=null),1===n?e===nu?ru++:(ru=0,nu=e):ru=0,r=r.stateNode,Eo&&"function"===typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(ko,r,void 0,64===(64&r.current.flags))}catch(e){}if(pu(e,Fo()),Gl)throw Gl=!1,e=Ql,Ql=null,e;return 0!==(8&Pl)||$o(),null}function Nu(){for(;null!==$l;){var e=$l.alternate;uu||null===lu||(0!==(8&$l.flags)?et($l,lu)&&(uu=!0):13===$l.tag&&_l(e,$l)&&et($l,lu)&&(uu=!0));var t=$l.flags;0!==(256&t)&&pl(e,$l),0===(512&t)||Kl||(Kl=!0,Wo(97,(function(){return Lu(),null}))),$l=$l.nextEffect}}function Lu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,ju)}return!1}function Au(e,t){Zl.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!==(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var r=eu;eu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],l=o.destroy;if(o.destroy=void 0,"function"===typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(r=Zl,Zl=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,$o(),!0}function Mu(e,t,r){ca(e,t=cl(0,t=il(r,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Mu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Mu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"===typeof r.type.getDerivedStateFromError||"function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n))){var o=sl(r,e=il(t,e),1);if(ca(r,o),o=cu(),null!==(r=du(r,1)))Vt(r,1,o),pu(r,o);else if("function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function qu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&r,Rl===e&&(Ll&r)===r&&(4===jl||3===jl&&(62914560&Ll)===Ll&&500>Fo()-Bl?ku(e,0):Ul|=r),pu(e,t)}function zu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(0===(2&(t=e.mode))?t=1:0===(4&t)?t=99===Bo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),r=cu(),null!==(e=du(e,t))&&(Vt(e,t,r),pu(e,r))}function Uu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Uu(e,t,r,n)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Hu(e,t,r,n,o,a){var l=2;if(n=e,"function"===typeof e)Bu(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case S:return Wu(r.children,o,a,t);case M:l=8,o|=16;break;case _:l=8,o|=1;break;case T:return(e=Fu(12,r,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case R:return(e=Fu(13,r,t,o)).type=R,e.elementType=R,e.lanes=a,e;case N:return(e=Fu(19,r,t,o)).elementType=N,e.lanes=a,e;case D:return $u(r,o,a,t);case q:return(e=Fu(24,r,t,o)).elementType=q,e.lanes=a,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case P:l=11;break e;case L:l=14;break e;case A:l=16,n=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fu(l,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Wu(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function $u(e,t,r,n){return(e=Fu(23,e,n,t)).elementType=D,e.lanes=r,e}function Gu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function Qu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yu(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Xu(e,t,r,n){var o=t.current,a=cu(),l=su(o);e:if(r){t:{if(Ke(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var c=r.type;if(go(c)){r=yo(r,c,u);break e}}r=u}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),fu(o,l,a),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function ec(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}function tc(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new Yu(e,t,null!=r&&!0===r.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ia(t),e[Xn]=r.current,Pn(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nc(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Ju(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new tc(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Ju(i);u.call(e)}}yu((function(){Xu(t,i,e,o)}))}return Ju(i)}function oc(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(i(200));return Ku(e,t,null,r)}Wl=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Ii=!0;else{if(0===(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Aa(t);break;case 1:go(t.type)&&bo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(r&t.child.childLanes)?Yi(e,t,r):(uo(ja,1&ja.current),null!==(t=rl(e,t,r))?t.sibling:null);uo(ja,1&ja.current);break;case 19:if(n=0!==(r&t.childLanes),0!==(64&e.flags)){if(n)return tl(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return rl(e,t,r)}Ii=0!==(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,so.current),na(t,r),o=oi(null,t,n,e,o,r),t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"===typeof l&&ha(t,n,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,ba(t,n,e,r),t=Vi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"===typeof e)return Bu(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,r);break e;case 1:t=Bi(null,t,o,e,r);break e;case 11:t=Mi(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Fi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Bi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,n,null,r),(n=t.memoizedState.element)===o)Wa(),t=rl(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(qa=Wn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],$a.push(a);for(r=_a(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),Wa();t=t.child}return t;case 5:return Aa(t),null===e&&Ba(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fn(n,o)?l=null:null!==a&&Fn(n,a)&&(t.flags|=16),Ui(e,t),ji(e,t,l,r),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Sa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Mi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(uo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=ln(u,a)?0:0|("function"===typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=rl(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===n&&0!==(s.observedBits&a)){1===u.tag&&((s=ua(-1,r&-r)).tag=2,ca(u,s)),u.lanes|=r,null!==(s=u.alternate)&&(s.lanes|=r),ra(u.return,r),c.lanes|=r;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),n,r);case 15:return qi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,bo(t)):e=!1,na(t,r),ma(t,n,o),ba(t,n,o,r),Vi(null,t,n,!0,e,r);case 19:return tl(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Xn]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},rt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),r=su(e);fu(e,r,t),ec(e,r)}},ot=function(e,t){return t()},Ce=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=ro(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":ce(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ae=mu,Ie=function(e,t,r,n,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Pl=a)&&(Hl(),$o())}},je=function(){0===(49&Pl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Fo())}))}$o()}(),Lu())},Me=function(e,t){var r=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}};var ac={Events:[eo,to,ro,Ne,Le,Lu,{current:!1}]},ic={findFiberByHostInstance:Zn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof{}){var uc={};if(!uc.isDisabled&&uc.supportsFiber)try{ko=uc.inject(lc),Eo=uc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var r=Pl;if(0!==(48&r))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=r,$o()}},t.hydrate=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!0,r)},t.render=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){nc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xn]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!rc(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return nc(e,t,r,!1,n)},t.version="17.0.1"},function(e,t,r){"use strict";e.exports=r(186)},function(e,t,r){"use strict";var n,o,a,i;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"===typeof window||"function"!==typeof MessageChannel){var s=null,f=null,d=function e(){if(null!==s)try{var r=t.unstable_now();s(!0,r),s=null}catch(t){throw setTimeout(e,0),t}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!==typeof console){var g=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!==typeof g&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();w=e+b;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},o=function(e,r){y=p((function(){e(t.unstable_now())}),r)},a=function(){h(y),y=-1}}function x(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>T(i,r))void 0!==u&&0>T(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>T(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var C=[],O=[],P=1,R=null,N=3,L=!1,A=!1,I=!1;function j(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,x(C,t)}t=S(O)}}function M(e){if(I=!1,j(e),!A)if(null!==S(C))A=!0,n(D);else{var t=S(O);null!==t&&o(M,t.startTime-e)}}function D(e,r){A=!1,I&&(I=!1,a()),L=!0;var n=N;try{for(j(r),R=S(C);null!==R&&(!(R.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=R.callback;if("function"===typeof i){R.callback=null,N=R.priorityLevel;var l=i(R.expirationTime<=r);r=t.unstable_now(),"function"===typeof l?R.callback=l:R===S(C)&&_(C),j(r)}else _(C);R=S(C)}if(null!==R)var u=!0;else{var c=S(O);null!==c&&o(M,c.startTime-r),u=!1}return u}finally{R=null,N=n,L=!1}}var q=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||L||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var r=N;N=t;try{return e()}finally{N=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=N;N=e;try{return t()}finally{N=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch("object"===typeof i&&null!==i?i="number"===typeof(i=i.delay)&&0<i?l+i:l:i=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(O,e),null===S(C)&&e===S(O)&&(I?a():I=!0,o(M,i-l))):(e.sortIndex=u,x(C,e),A||L||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var r=N;N=t;try{return e.apply(this,arguments)}finally{N=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},a={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"\'&]/g,(function(e){return a[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];i?(r+="&"+i+";",n++):(r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],a={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],l=o[e];a[r]=String.fromCharCode(l),i[l]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),a=i[o];r+=a?"&"+a+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o={},a={};!function(e,t){var r=n.length;for(;r--;){var o=n[r],a=o[0],i=o[1],l=i[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;if(u&&(c=t[l]=t[l]||{}),i[1]){var s=i[1];e[a]=String.fromCharCode(l)+String.fromCharCode(s),u&&(c[s]=a)}else e[a]=String.fromCharCode(l),u&&(c[""]=a)}}(o,a);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=a[e.charCodeAt(n)];if(o){var i=o[e.charCodeAt(n+1)];if(i?n++:i=o[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];if(i){var l=i[e.charCodeAt(n+1)];if(l?n++:l=i[""],l){r+="&"+l+";",n++;continue}}r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},function(e,t,r){"use strict";var n=r(52),o=r(193);Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=b,t.getChalk=w,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b(t)){var r=w(t),n=f(r);return y(n,e)}return e};var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(195)),l=r(196),u=(a=r(199))&&a.__esModule?a:{default:a};function c(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s=new Set(["as","async","from","get","of","set"]);function f(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}var d,p=/\\r\\n|[\\n\\r\\u2028\\u2029]/,h=/^[()[\\]{}]$/,g=i.matchToToken,v=/^[a-z][\\w-]*$/i,m=function(e,t,r){if("name"===e.type){if((0,l.isKeyword)(e.value)||(0,l.isStrictReservedWord)(e.value,!0)||s.has(e.value))return"keyword";if(v.test(e.value)&&("<"===r[t-1]||"</"==r.substr(t-2,2)))return"jsxIdentifier";if(e.value[0]!==e.value[0].toLowerCase())return"capitalized"}return"punctuator"===e.type&&h.test(e.value)?"bracket":"invalid"!==e.type||"@"!==e.value&&"#"!==e.value?e.type:"punctuator"};function y(e,t){var r,o="",a=n(d(t));try{var i=function(){var t=r.value,n=t.type,a=t.value,i=e[n];o+=i?a.split(p).map((function(e){return i(e)})).join("\\n"):a};for(a.s();!(r=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}return o}function b(e){return u.default.supportsColor||e.forceColor}function w(e){var t=u.default;return e.forceColor&&(t=new u.default.constructor({enabled:!0,level:1})),t}d=o.mark((function e(t){var r,n;return o.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=i.default.exec(t))){e.next=6;break}return n=g(r),e.next=4,{type:m(n,r.index,t),value:n.value};case 4:e.next=0;break;case 6:case"end":return e.stop()}}),e)}))},function(e,t,r){var n=r(192);e.exports=function(e,t){if(e){if("string"===typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},function(e,t,r){e.exports=r(194)},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return R()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var l=_(i,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&n.call(k,a)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,l){var u=s(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a \'throw\' method")}return g}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:R}}function R(){return{value:t,done:!0}}return m.prototype=E.constructor=y,y.constructor=m,m.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(c(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return l.type="throw",l.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return n.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return n.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return n.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var n=r(197),o=r(198)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=s,t.isIdentifierChar=f,t.isIdentifierName=function(e){for(var t=!0,r=0,n=Array.from(e);r<n.length;r++){var o=n[r].codePointAt(0);if(t){if(!s(o))return!1;t=!1}else if(!f(o))return!1}return!t};var n="\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",o="\u200C\u200D\xb7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F",a=new RegExp("["+n+"]"),i=new RegExp("["+n+o+"]");n=o=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){for(var r=65536,n=0,o=t.length;n<o;n+=2){if((r+=t[n])>e)return!1;if((r+=t[n+1])>=e)return!0}return!1}function s(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&a.test(String.fromCharCode(e)):c(e,l)))}function f(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,l)||c(e,u))))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=u,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=s,t.isStrictBindReservedWord=function(e,t){return c(e,t)||s(e)},t.isKeyword=function(e){return a.has(e)};var n=["implements","interface","let","package","private","protected","public","static","yield"],o=["eval","arguments"],a=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(n),l=new Set(o);function u(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return u(e,t)||i.has(e)}function s(e){return l.has(e)}},function(e,t,r){"use strict";(function(t){var n=r(52),o=r(200),a=r(201),i=r(206).stdout,l=r(207),u="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),c=["ansi","ansi","ansi256","ansi16m"],s=new Set(["gray"]),f=Object.create(null);function d(e,t){t=t||{};var r=i?i.level:0;e.level=void 0===t.level?r:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function p(e){if(!this||!(this instanceof p)||this.template){var t={};return d(t,e),t.template=function(){var e=[].slice.call(arguments);return T.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,p.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=p,t.template}d(this,e)}u&&(a.blue.open="\x1b[94m");for(var h=function(){var e=v[g];a[e].closeRe=new RegExp(o(a[e].close),"g"),f[e]={get:function(){var t=a[e];return S.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},g=0,v=Object.keys(a);g<v.length;g++)h();f.visible={get:function(){return S.call(this,this._styles||[],!0,"visible")}},a.color.closeRe=new RegExp(o(a.color.close),"g");for(var m=function(){var e=b[y];if(s.has(e))return"continue";f[e]={get:function(){var t=this.level;return function(){var r=a.color[c[t]][e].apply(null,arguments),n={open:r,close:a.color.close,closeRe:a.color.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},y=0,b=Object.keys(a.color.ansi);y<b.length;y++)m();a.bgColor.closeRe=new RegExp(o(a.bgColor.close),"g");for(var w=function(){var e=E[k];if(s.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);f[t]={get:function(){var t=this.level;return function(){var r=a.bgColor[c[t]][e].apply(null,arguments),n={open:r,close:a.bgColor.close,closeRe:a.bgColor.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},k=0,E=Object.keys(a.bgColor.ansi);k<E.length;k++)w();var x=Object.defineProperties((function(){}),f);function S(e,t,r){var n=function e(){return _.apply(e,arguments)};n._styles=e,n._empty=t;var o=this;return Object.defineProperty(n,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(n,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),n.hasGrey=this.hasGrey||"gray"===r||"grey"===r,n.__proto__=x,n}function _(){var e=arguments,t=e.length,r=String(arguments[0]);if(0===t)return"";if(t>1)for(var o=1;o<t;o++)r+=" "+e[o];if(!this.enabled||this.level<=0||!r)return this._empty?"":r;var i=a.dim.open;u&&this.hasGrey&&(a.dim.open="");var l,c=n(this._styles.slice().reverse());try{for(c.s();!(l=c.n()).done;){var s=l.value;r=(r=s.open+r.replace(s.closeRe,s.open)+s.close).replace(/\\r?\\n/g,"".concat(s.close,"$&").concat(s.open))}}catch(e){c.e(e)}finally{c.f()}return a.dim.open=i,r}function T(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],o=1;o<t.length;o++)n.push(String(r[o-1]).replace(/[{}\\\\]/g,"\\\\$&")),n.push(String(t.raw[o]));return l(e,n.join(""))}Object.defineProperties(p.prototype,f),e.exports=p(),e.exports.supportsColor=i,e.exports.default=e.exports}).call(this,r(51))},function(e,t,r){"use strict";var n=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(n,"\\\\$&")}},function(e,t,r){"use strict";(function(e){var t=r(203),n=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(n+r,"m")}},o=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";5;").concat(n,"m")}},a=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";2;").concat(n[0],";").concat(n[1],";").concat(n[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,r={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};r.color.grey=r.color.gray;for(var i=0,l=Object.keys(r);i<l.length;i++){for(var u=l[i],c=r[u],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];r[d]={open:"\x1b[".concat(p[0],"m"),close:"\x1b[".concat(p[1],"m")},c[d]=r[d],e.set(p[0],p[1])}Object.defineProperty(r,u,{value:c,enumerable:!1}),Object.defineProperty(r,"codes",{value:e,enumerable:!1})}var h=function(e){return e},g=function(e,t,r){return[e,t,r]};r.color.close="\x1b[39m",r.bgColor.close="\x1b[49m",r.color.ansi={ansi:n(h,0)},r.color.ansi256={ansi256:o(h,0)},r.color.ansi16m={rgb:a(g,0)},r.bgColor.ansi={ansi:n(h,10)},r.bgColor.ansi256={ansi256:o(h,10)},r.bgColor.ansi16m={rgb:a(g,10)};for(var v=0,m=Object.keys(t);v<m.length;v++){var y=m[v];if("object"===typeof t[y]){var b=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in b&&(r.color.ansi[y]=n(b.ansi16,0),r.bgColor.ansi[y]=n(b.ansi16,10)),"ansi256"in b&&(r.color.ansi256[y]=o(b.ansi256,0),r.bgColor.ansi256[y]=o(b.ansi256,10)),"rgb"in b&&(r.color.ansi16m[y]=a(b.rgb,0),r.bgColor.ansi16m[y]=a(b.rgb,10))}}return r}})}).call(this,r(202)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(87),o=r(205),a={};Object.keys(n).forEach((function(e){a[e]={},Object.defineProperty(a[e],"channels",{value:n[e].channels}),Object.defineProperty(a[e],"labels",{value:n[e].labels});var t=o(e);Object.keys(t).forEach((function(r){var n=t[r];a[e][r]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"===typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),a[e][r].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))})),e.exports=a},function(e,t,r){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,r){var n=r(87);function o(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,o=0;o<r;o++)e[t[o]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var o=r.pop(),a=Object.keys(n[o]),i=a.length,l=0;l<i;l++){var u=a[l],c=t[u];-1===c.distance&&(c.distance=t[o].distance+1,c.parent=o,r.unshift(u))}return t}function a(e,t){return function(r){return t(e(r))}}function i(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}e.exports=function(e){for(var t=o(e),r={},n=Object.keys(t),a=n.length,l=0;l<a;l++){var u=n[l];null!==t[u].parent&&(r[u]=i(u,t))}return r}},function(e,t,r){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,r){"use strict";var n=r(52),o=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,a=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,i=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,l=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,u=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e","\x1b"],["a","\x07"]]);function c(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):u.get(e)||e}function s(e,t){var r,o,a=[],u=t.trim().split(/\\s*,\\s*/g),s=n(u);try{for(s.s();!(o=s.n()).done;){var f=o.value;if(isNaN(f)){if(!(r=f.match(i)))throw new Error("Invalid Chalk template style argument: ".concat(f," (in style \'").concat(e,"\')"));a.push(r[2].replace(l,(function(e,t,r){return t?c(t):r})))}else a.push(Number(f))}}catch(e){s.e(e)}finally{s.f()}return a}function f(e){a.lastIndex=0;for(var t,r=[];null!==(t=a.exec(e));){var n=t[1];if(t[2]){var o=s(n,t[2]);r.push([n].concat(o))}else r.push([n])}return r}function d(e,t){var r,o={},a=n(t);try{for(a.s();!(r=a.n()).done;){var i,l=r.value,u=n(l.styles);try{for(u.s();!(i=u.n()).done;){var c=i.value;o[c[0]]=l.inverse?null:c.slice(1)}}catch(e){u.e(e)}finally{u.f()}}}catch(e){a.e(e)}finally{a.f()}for(var s=e,f=0,d=Object.keys(o);f<d.length;f++){var p=d[f];if(Array.isArray(o[p])){if(!(p in s))throw new Error("Unknown Chalk style: ".concat(p));s=o[p].length>0?s[p].apply(s,o[p]):s[p]}}return s}e.exports=function(e,t){var r=[],n=[],a=[];if(t.replace(o,(function(t,o,i,l,u,s){if(o)a.push(c(o));else if(l){var p=a.join("");a=[],n.push(0===r.length?p:d(e,r)(p)),r.push({inverse:i,styles:f(l)})}else if(u){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(d(e,r)(a.join(""))),a=[],r.pop()}else a.push(s)})),n.push(a.join("")),r.length>0){var i="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(i)}return n.join("")}},function(e,t,r){"use strict";r.r(t),r.d(t,"ThemeContext",(function(){return me}));r(90);var n=r(0),o=r.n(n),a=r(53),i=r.n(a),l=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},u=null;var c=function(e){var t=Object(n.useContext)(me),r=e.shortcutHandler;return Object(n.useEffect)((function(){var e=function(e){r&&r(e.key)};return window.addEventListener("keydown",e),u&&u.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),u&&u.removeEventListener("keydown",e)}}),[r]),o.a.createElement("div",{style:l(t),ref:function(e){if(e){var t=e.ownerDocument;u=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:s(t)},e.line1,o.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},y={fontFamily:"Consolas, Menlo, monospace"};var b=function(e){var t=e.main,r=e.codeHTML,a=Object(n.useContext)(me),i=v(v({},m),{},{backgroundColor:a.primaryPreBackground,color:a.primaryPreColor}),l=v(v({},m),{},{backgroundColor:a.secondaryPreBackground,color:a.secondaryPreColor}),u=t?i:l,c={__html:r};return o.a.createElement("pre",{style:u},o.a.createElement("code",{style:y,dangerouslySetInnerHTML:c}))},w=r(33),k=r.n(w),E=new(r(88).AllHtmlEntities),x=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},S={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var _=function(e,t){for(var r=(new k.a).ansiToJson(E.encode(e),{use_classes:!0}),n="",o=!1,a=0;a<r.length;++a)for(var i=r[a],l=i.content,u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),e}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){return(D="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){return!t||"object"!==D(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function z(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=M(e);if(t){var o=M(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return q(this,r)}}var U=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var F=function(e){var t=e.close,r=Object(n.useContext)(me);return o.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:U(r)},"\xd7")},B={marginBottom:"0.5rem"},V={marginRight:"1em"},H={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(n.useContext)(me),r=e.currentError,a=e.totalErrors,i=e.previous,l=e.next;return o.a.createElement("div",{style:B},o.a.createElement("span",{style:V},o.a.createElement("button",{onClick:i,style:W(t)},"\u2190"),o.a.createElement("button",{onClick:l,style:$(t)},"\u2192")),"".concat(r," of ").concat(a," errors on the page"))};function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{n||null==l.return||l.return()}finally{if(o)throw a}}return r}}(e,t)||function(e,t){if(e){if("string"===typeof e)return Q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var X=r(89);var J=function(e){var t=Object(n.useContext)(me),r=e.lines,a=e.lineNum,i=e.columnNum,l=e.contextSize,u=e.main,c=[],s=1/0;r.forEach((function(e){var t=e.content,r=t.match(/^\\s*/);""!==t&&(s=r&&r[0]?Math.min(s,r[0].length):0)})),r.forEach((function(e){var t=e.content,r=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[r-1]=t}));var f=Object(X.codeFrameColumns)(c.join("\\n"),{start:{line:a,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:l,linesBelow:l}),d=_(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,r=0;r<t.length;++r){var n=t[r];if("span"===n.tagName.toLowerCase()){var o=n.innerText;null!=o&&"|^"===o.replace(/\\s/g,"")&&(n.style.position="absolute",K(e,n))}}}(p);var h=p.childNodes;e:for(var g=0;g<h.length;++g)for(var v=h[g].childNodes,m=0;m<v.length;++m){var y=v[m].innerText;if(null!=y&&-1!==y.indexOf(" "+a+" |"))break e}return o.a.createElement(b,{main:u,codeHTML:p.innerHTML})};function Z(e,t,r,n,o,a,i){var l;if(!i&&e&&"number"===typeof t){var u=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);l=u&&u[1]?u[1]:e,l+=":"+t,r&&(l+=":"+r)}else n&&"number"===typeof o?(l=n+":"+o,a&&(l+=":"+a)):l="unknown";return l.replace("webpack://",".")}var ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!1),2),a=r[0],i=r[1],l=function(){var t=e.frame,r=t._originalFileName,n=t._originalLineNumber;return r?-1!==r.trim().indexOf(" ")?null:{fileName:r,lineNumber:n||1}:null},u=function(){var t=l();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,g=c.columnNumber,v=c._scriptCode,m=c._originalFileName,y=c._originalLineNumber,b=c._originalColumnNumber,w=c._originalScriptCode,k=c.getFunctionName(),E=Z(m,y,b,p,h,g,a),x=null;d&&(a&&v&&0!==v.length&&null!=h?x={lines:v,lineNum:h,columnNum:g,contextSize:s,main:f}:!a&&w&&0!==w.length&&null!=y&&(x={lines:w,lineNum:y,columnNum:b,contextSize:s,main:f}));var S=null!==l()&&null!==e.editorHandler;return o.a.createElement("div",null,o.a.createElement("div",null,k),o.a.createElement("div",{style:{fontSize:"0.9em",marginBottom:"0.9em"}},o.a.createElement("span",{style:S?ee(t):null,onClick:S?u:null,onKeyDown:S?function(e){"Enter"===e.key&&u()}:null,tabIndex:S?"0":null},E)),x&&o.a.createElement("span",null,o.a.createElement("span",{onClick:S?u:null,style:S?{cursor:"pointer"}:null},o.a.createElement(J,x)),o.a.createElement("button",{style:te(t),onClick:function(){i(!a)}},"View "+(a?"source":"compiled"))))},ne={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"1.5em"})},ae=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"0.6em"})};var ie=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!0),2),a=r[0],i=r[1],l=function(){i(!a)},u=e.children.length;return o.a.createElement("div",null,o.a.createElement("button",{onClick:l,style:a?oe(t):ae(t)},(a?"\u25B6":"\u25BC")+" ".concat(u," stack frames were ")+(a?"collapsed.":"expanded.")),o.a.createElement("div",{style:{display:a?"none":"block"}},e.children,o.a.createElement("button",{onClick:l,style:ae(t)},"\u25B2 ".concat(u," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ue={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},ce=function(e){j(r,e);var t=z(r);function r(){return N(this,r),t.apply(this,arguments)}return A(r,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,r=e.errorName,n=e.contextSize,a=e.editorHandler,i=[],l=!1,u=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(r),h=d&&(p||l);d||(l=!0);var g=o.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:n,critical:0===s,showCode:!h,editorHandler:a}),v=s===t.length-1;h&&u.push(g),h&&!v||(1===u.length?i.push(u[0]):u.length>1&&(c++,i.push(o.a.createElement(ie,{key:"bundle-"+c},u))),u=[]),h||i.push(g)})),i}},{key:"render",value:function(){return o.a.createElement("div",{style:ue},this.renderFrames())}}]),r}(n.Component),se={display:"flex",flexDirection:"column"};var fe=function(e){var t=e.errorRecord,r=e.editorHandler,n=t.error,a=t.unhandledRejection,i=t.contextSize,l=t.stackFrames,u=a?"Unhandled Rejection ("+n.name+")":n.name,c=n.message,s=c.match(/^\\w*:/)||!u?c:u+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),o.a.createElement("div",{style:se},o.a.createElement(p,{headerText:s}),o.a.createElement(ce,{stackFrames:l,errorName:u,contextSize:i,editorHandler:r}))},de=function(e){j(r,e);var t=z(r);function r(){var e;N(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={currentIndex:0},e.previous=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},e.next=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},e.shortcutHandler=function(t){"Escape"===t?e.props.close():"ArrowLeft"===t?e.previous():"ArrowRight"===t&&e.next()},e}return A(r,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,r=e.close,n=t.length;return o.a.createElement(c,{shortcutHandler:this.shortcutHandler},o.a.createElement(F,{close:r}),n>1&&o.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:n,previous:this.previous,next:this.next}),o.a.createElement(fe,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),o.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser\u2019s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),r}(n.PureComponent),pe={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},he={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?he:pe,me=Object(n.createContext)();window.updateContent=function(e){var t,r,n,a,l,u=(r=(t=e).currentBuildError,n=t.currentRuntimeErrorRecords,a=t.dismissRuntimeErrors,l=t.editorHandler,r?o.a.createElement(me.Provider,{value:ve},o.a.createElement(R,{error:r,editorHandler:l})):n.length>0?o.a.createElement(me.Provider,{value:ve},o.a.createElement(de,{errorRecords:n,close:a,editorHandler:l})):null);return null===u?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(u,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var r in e.setAttribute("style",""),t)t.hasOwnProperty(r)&&(e.style[r]=t[r])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);',
                ee = null,
                te = !1,
                re = !1,
                ne = null,
                oe = null,
                ae = [],
                ie = null,
                le = null;
              function ue(e) {
                (ne = e), ee && me();
              }
              function ce(e) {
                (oe = e), me();
              }
              function se(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                (ie = t), X(pe(t))(e);
              }
              function fe() {
                (oe = null), me();
              }
              function de(e) {
                if (null !== le) throw new Error("Already listening");
                e.launchEditorEndpoint &&
                  console.warn(
                    "Warning: `startReportingRuntimeErrors` doesn\u2019t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor ",
                  ),
                  (ie = e),
                  (le = K(pe(e), e.filename));
              }
              var pe = function (e) {
                return function (t) {
                  try {
                    "function" == typeof e.onError && e.onError.call(null);
                  } finally {
                    if (
                      ae.some(function (e) {
                        return e.error === t.error;
                      })
                    )
                      return;
                    (ae = ae.concat([t])), me();
                  }
                };
              };
              function he() {
                (ae = []), me();
              }
              function ge() {
                if (null === le) throw new Error("Not currently listening");
                ie = null;
                try {
                  le();
                } finally {
                  le = null;
                }
              }
              function me() {
                if (!te) {
                  if (re) ve();
                  else {
                    te = !0;
                    var e = window.document.createElement("iframe");
                    !(function (e, t) {
                      for (var r in (e.setAttribute("style", ""), t))
                        t.hasOwnProperty(r) && (e.style[r] = t[r]);
                    })(e, J),
                      (e.onload = function () {
                        var t = e.contentDocument;
                        if (null != t && null != t.body) {
                          ee = e;
                          var r = e.contentWindow.document.createElement("script");
                          (r.type = "text/javascript"), (r.innerHTML = Z), t.body.appendChild(r);
                        }
                      }),
                      window.document.body.appendChild(e);
                  }
                }
              }
              function ve() {
                if (!ie) throw new Error("Expected options to be injected.");
                if (!ee) throw new Error("Iframe has not been created yet.");
                ee.contentWindow.updateContent({
                  currentBuildError: oe,
                  currentRuntimeErrorRecords: ae,
                  dismissRuntimeErrors: he,
                  editorHandler: ne,
                }) || (window.document.body.removeChild(ee), (ee = null), (re = !1));
              }
              (window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ =
                window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}),
                (window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function () {
                  (re = !0), (te = !1), ve();
                });
            },
          ]);
        });
      },
      { d1546958eb39fdcf: "d5jf4" },
    ],
    d5jf4: [
      function (require, module, exports) {
        // shim for using process in browser
        var process = (module.exports = {});
        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function () {
          try {
            if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
            else cachedSetTimeout = defaultSetTimout;
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
            else cachedClearTimeout = defaultClearTimeout;
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout)
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          // if setTimeout wasn't available but was latter defined
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout)
            //normal enviroments in sane situations
            return clearTimeout(marker);
          // if clearTimeout wasn't available but was latter defined
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) return;
          draining = false;
          if (currentQueue.length) queue = currentQueue.concat(queue);
          else queueIndex = -1;
          if (queue.length) drainQueue();
        }
        function drainQueue() {
          if (draining) return;
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) if (currentQueue) currentQueue[queueIndex].run();
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function (fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1)
            for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) runTimeout(drainQueue);
        };
        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function () {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ""; // empty string to avoid regexp issues
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function (name) {
          return [];
        };
        process.binding = function (name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function () {
          return "/";
        };
        process.chdir = function (dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function () {
          return 0;
        };
      },
      {},
    ],
    "8lqZg": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$20e5 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$20e5.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _client = require("react-dom/client");
          var _app = require("./App");
          var _appDefault = parcelHelpers.interopDefault(_app);
          var _indexCss = require("./index.css");
          const container = document.getElementById("root");
          const root = (0, _client.createRoot)(container);
          root.render(
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _reactDefault.default).StrictMode,
              {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _appDefault.default),
                  {},
                  void 0,
                  false,
                  {
                    fileName: "src/index.js",
                    lineNumber: 10,
                    columnNumber: 5,
                  },
                  undefined,
                ),
              },
              void 0,
              false,
              {
                fileName: "src/index.js",
                lineNumber: 9,
                columnNumber: 3,
              },
              undefined,
            ),
          );

          $parcel$ReactRefreshHelpers$20e5.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "react-dom/client": "lOjBx",
        "./App": "2kQhy",
        "./index.css": "irmnC",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    iTorj: [
      function (require, module, exports) {
        "use strict";
        module.exports = require("ee51401569654d91");
      },
      { ee51401569654d91: "48uCM" },
    ],
    "48uCM": [
      function (require, module, exports) {
        /**
         * @license React
         * react-jsx-dev-runtime.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          var React = require("58362d9d82be395f");
          // ATTENTION
          // When adding new symbols to this file,
          // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
          // The Symbol used to tag the ReactElement-like types.
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") return null;
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") return maybeIterator;
            return null;
          }
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
              _key2 < _len2;
              _key2++
            )
              args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
          }
          function printWarning(level, format, args) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            } // eslint-disable-next-line react-internal/safe-string-coercion
            var argsWithFormat = args.map(function (item) {
              return String(item);
            }); // Careful: RN currently depends on this prefix
            argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
          // -----------------------------------------------------------------------------
          var enableScopeAPI = false; // Experimental Create Event Handle API.
          var enableCacheElement = false;
          var enableTransitionTracing = false; // No known bugs, but needs performance testing
          var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
          // stuff. Intended to enable React core members to more easily debug scheduling
          // issues in DEV builds.
          var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
          var REACT_MODULE_REFERENCE;
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") return true;
            // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
            if (
              type === REACT_FRAGMENT_TYPE ||
              type === REACT_PROFILER_TYPE ||
              enableDebugTracing ||
              type === REACT_STRICT_MODE_TYPE ||
              type === REACT_SUSPENSE_TYPE ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              enableLegacyHidden ||
              type === REACT_OFFSCREEN_TYPE ||
              enableScopeAPI ||
              enableCacheElement ||
              enableTransitionTracing
            )
              return true;
            if (typeof type === "object" && type !== null) {
              if (
                type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_PROVIDER_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                // types supported by any Flight configuration anywhere since
                // we don't know which Flight build this will end up being used
                // with.
                type.$$typeof === REACT_MODULE_REFERENCE ||
                type.getModuleId !== undefined
              )
                return true;
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) return displayName;
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          } // Keep in sync with react-reconciler/getComponentNameFromFiber
          function getContextName(type) {
            return type.displayName || "Context";
          } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
          function getComponentNameFromType(type) {
            if (type == null)
              // Host root, text node or just invalid type.
              return null;
            if (typeof type.tag === "number")
              error(
                "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
              );
            if (typeof type === "function") return type.displayName || type.name || null;
            if (typeof type === "string") return type;
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) return outerName;
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
              }
            return null;
          }
          var assign = Object.assign;
          // Helpers to patch console.logs to avoid logging during side-effect free
          // replaying on render function. This currently only patches the object
          // lazily which won't cover if the log function was extracted eagerly.
          // We could also eagerly patch the method.
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            disabledDepth++;
          }
          function reenableLogs() {
            disabledDepth--;
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog,
                }),
                info: assign({}, props, {
                  value: prevInfo,
                }),
                warn: assign({}, props, {
                  value: prevWarn,
                }),
                error: assign({}, props, {
                  value: prevError,
                }),
                group: assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            if (disabledDepth < 0)
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            if (prefix === undefined)
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = (match && match[1]) || "";
              }
            // We use the prefix to ensure our stacks line up with native stack frames.
            return "\n" + prefix + name;
          }
          var reentry = false;
          var componentFrameCache;
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
          function describeNativeComponentFrame(fn, construct) {
            // If something asked for a stack inside a fake render, it should get ignored.
            if (!fn || reentry) return "";
            var frame = componentFrameCache.get(fn);
            if (frame !== undefined) return frame;
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
            Error.prepareStackTrace = undefined;
            var previousDispatcher;
            previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.
            ReactCurrentDispatcher.current = null;
            disableLogs();
            try {
              // This should throw.
              if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function () {
                  throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    // We use a throwing setter instead of frozen or non-writable props
                    // because that won't throw in a non-strict mode function.
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  // We construct a different control for this case to include any extra
                  // frames added by the construct call.
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              // This is inlined manually because closure doesn't do it for us.
              if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
                  // We expect at least one stack frame to be shared.
                  // Typically this will be the root most one. However, stack frames may be
                  // cut off due to maximum stack limits. In this case, one maybe cut off
                  // earlier than the other. We assume that the sample is longer or the same
                  // and there for cut off earlier. So we should find the root most frame in
                  // the sample somewhere in the control.
                  c--;
                for (
                  ;
                  s >= 1 && c >= 0;
                  s--, c-- // Next we find the first one that isn't the same which should be the
                )
                  // frame that called our sample function and the control.
                  if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1)
                      do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                          // but we have a user-provided "displayName"
                          // splice it in to make the stack more readable.
                          if (fn.displayName && _frame.includes("<anonymous>"))
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    break;
                  }
              }
            } finally {
              reentry = false;
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
              Error.prepareStackTrace = previousPrepareStackTrace;
            } // Fallback to just using the name if we couldn't make it throw.
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            return describeNativeComponentFrame(fn, false);
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) return "";
            if (typeof type === "function")
              return describeNativeComponentFrame(type, shouldConstruct(type));
            if (typeof type === "string") return describeBuiltInComponentFrame(type);
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  // Memo may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
              }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null,
              );
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            // $FlowFixMe This is okay but Flow doesn't know it.
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error(
                      (componentName || "React class") +
                        ": " +
                        location +
                        " type `" +
                        typeSpecName +
                        "` is invalid; " +
                        "it must be a function, usually from the `prop-types` package, but received `" +
                        typeof typeSpecs[typeSpecName] +
                        "`." +
                        "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.",
                    );
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",
                  );
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error(
                    "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                    componentName || "React class",
                    location,
                    typeSpecName,
                    typeof error$1,
                  );
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
          }
          var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
          function isArray(a) {
            return isArrayImpl(a);
          }
          /*
           * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
           * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
           *
           * The functions in this module will throw an easier-to-understand,
           * easier-to-debug exception with a clear errors message message explaining the
           * problem. (Instead of a confusing exception thrown inside the implementation
           * of the `value` object).
           */ // $FlowFixMe only called in DEV, so void return is not possible.
          function typeName(value) {
            // toStringTag is needed for namespaced types like Temporal.Instant
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type =
              (hasToStringTag && value[Symbol.toStringTag]) || value.constructor.name || "Object";
            return type;
          } // $FlowFixMe only called in DEV, so void return is not possible.
          function willCoercionThrow(value) {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
          function testStringCoercion(value) {
            // If you ended up here by following an exception call stack, here's what's
            // happened: you supplied an object or symbol value to React (as a prop, key,
            // DOM attribute, CSS property, string ref, etc.) and when React tried to
            // coerce it to a string using `'' + value`, an exception was thrown.
            //
            // The most common types that will cause this exception are `Symbol` instances
            // and Temporal objects like `Temporal.Instant`. But any object that has a
            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
            // exception. (Library authors do this to prevent users from using built-in
            // numeric operators like `+` or comparison operators like `>=` because custom
            // methods are needed to perform accurate arithmetic or comparison.)
            //
            // To fix the problem, coerce this object or symbol value to a string before
            // passing it to React. The most reliable way is usually `String(value)`.
            //
            // To find which value is throwing, check the browser or debugger console.
            // Before this exception was thrown, there should be `console.error` output
            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
            // problem and how that type was used: key, atrribute, input value prop, etc.
            // In most cases, this console output also shows the component and its
            // ancestor components where the exception happened.
            //
            // eslint-disable-next-line react-internal/safe-string-coercion
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            if (willCoercionThrow(value)) {
              error(
                "The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true,
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          didWarnAboutStringRefs = {};
          function hasValidRef(config) {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) return false;
            }
            return config.ref !== undefined;
          }
          function hasValidKey(config) {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) return false;
            }
            return config.key !== undefined;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            if (
              typeof config.ref === "string" &&
              ReactCurrentOwner.current &&
              self &&
              ReactCurrentOwner.current.stateNode !== self
            ) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error(
                  'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                  getComponentNameFromType(ReactCurrentOwner.current.type),
                  config.ref,
                );
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function () {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error(
                  "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                  displayName,
                );
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true,
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function () {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error(
                  "%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                  displayName,
                );
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true,
            });
          }
          /**
           * Factory method to create a new React element. This no longer adheres to
           * the class pattern, so do not use new to call it. Also, instanceof check
           * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
           * if something is a React Element.
           *
           * @param {*} type
           * @param {*} props
           * @param {*} key
           * @param {string|object} ref
           * @param {*} owner
           * @param {*} self A *temporary* helper to detect places where `this` is
           * different from the `owner` when React.createElement is called, so that we
           * can warn. We want to get rid of owner and replace string `ref`s with arrow
           * functions, and as long as `this` and owner are the same, there will be no
           * change in behavior.
           * @param {*} source An annotation object (added by a transpiler or otherwise)
           * indicating filename, line number, and/or other information.
           * @internal
           */ var ReactElement = function (type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type: type,
              key: key,
              ref: ref,
              props: props,
              // Record the component responsible for creating this element.
              _owner: owner,
            };
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            }); // self and source are DEV only properties.
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self,
            }); // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
            return element;
          };
          /**
           * https://github.com/reactjs/rfcs/pull/107
           * @param {*} type
           * @param {object} props
           * @param {string} key
           */ function jsxDEV(type, config, maybeKey, source, self) {
            var propName; // Reserved names are extracted
            var props = {};
            var key = null;
            var ref = null; // Currently, key can be spread in as a prop. This causes a potential
            // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
            // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
            // but as an intermediary step, we will use jsxDEV for everything except
            // <div {...props} key="Hi" />, because we aren't currently able to tell if
            // key is explicitly declared to be undefined or not.
            if (maybeKey !== undefined) {
              checkKeyStringCoercion(maybeKey);
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              checkKeyStringCoercion(config.key);
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self);
            } // Remaining properties are added to a new props object
            for (propName in config)
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName))
                props[propName] = config[propName];
            // Resolve default props
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps)
                if (props[propName] === undefined) props[propName] = defaultProps[propName];
            }
            if (key || ref) {
              var displayName =
                typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) defineKeyPropWarningGetter(props, displayName);
              if (ref) defineRefPropWarningGetter(props, displayName);
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null,
              );
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
          var propTypesMisspellWarningShown;
          propTypesMisspellWarningShown = false;
          /**
           * Verifies the object is a ReactElement.
           * See https://reactjs.org/docs/react-api.html#isvalidelement
           * @param {?object} object
           * @return {boolean} True if `object` is a ReactElement.
           * @final
           */ function isValidElement(object) {
            return (
              typeof object === "object" &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            );
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) return "\n\nCheck the render method of `" + name + "`.";
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== undefined) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          /**
           * Warn if there's no key explicitly set on dynamic arrays of children or
           * object keys are not valid. This allows us to keep track of children between
           * updates.
           */ var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName =
                typeof parentType === "string"
                  ? parentType
                  : parentType.displayName || parentType.name;
              if (parentName)
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
            return info;
          }
          /**
           * Warn if the element doesn't have an explicit key assigned to it.
           * This element is in an array. The array could grow and shrink or be
           * reordered. All children that haven't already been validated are required to
           * have a "key" property assigned to it. Error statuses are cached so a warning
           * will only be shown once.
           *
           * @internal
           * @param {ReactElement} element Element that requires a key.
           * @param {*} parentType element's parent's type.
           */ function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) return;
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
            // property, it may be the creator of the child that's responsible for
            // assigning it a key.
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current)
              // Give the component that originally created this child.
              childOwner =
                " It was passed a child from " +
                getComponentNameFromType(element._owner.type) +
                ".";
            setCurrentlyValidatingElement$1(element);
            error(
              'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
              currentComponentErrorInfo,
              childOwner,
            );
            setCurrentlyValidatingElement$1(null);
          }
          /**
           * Ensure that every element either is passed in a static location, in an
           * array with an explicit keys property defined, or in an object literal
           * with valid key property.
           *
           * @internal
           * @param {ReactNode} node Statically passed child of any type.
           * @param {*} parentType node's parent's type.
           */ function validateChildKeys(node, parentType) {
            if (typeof node !== "object") return;
            if (isArray(node))
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) validateExplicitKey(child, parentType);
              }
            else if (isValidElement(node)) {
              // This element was passed in a valid location.
              if (node._store) node._store.validated = true;
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done)
                    if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
          /**
           * Given an element, validate that its props follow the propTypes definition,
           * provided by the type.
           *
           * @param {ReactElement} element
           */ function validatePropTypes(element) {
            var type = element.type;
            if (type === null || type === undefined || typeof type === "string") return;
            var propTypes;
            if (typeof type === "function") propTypes = type.propTypes;
            else if (
              typeof type === "object" &&
              (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)
            )
              propTypes = type.propTypes;
            else return;
            if (propTypes) {
              // Intentionally inside to avoid triggering lazy initializers:
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
              var _name = getComponentNameFromType(type);
              error(
                "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                _name || "Unknown",
              );
            }
            if (
              typeof type.getDefaultProps === "function" &&
              !type.getDefaultProps.isReactClassApproved
            )
              error(
                "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.",
              );
          }
          /**
           * Given a fragment, validate that it can only be provided with fragment props
           * @param {ReactElement} fragment
           */ function validateFragmentProps(fragment) {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error(
                  "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                  key,
                );
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.
            if (!validType) {
              var info = "";
              if (
                type === undefined ||
                (typeof type === "object" && type !== null && Object.keys(type).length === 0)
              )
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) info += sourceInfo;
              else info += getDeclarationErrorAddendum();
              var typeString;
              if (type === null) typeString = "null";
              else if (isArray(type)) typeString = "array";
              else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else typeString = typeof type;
              error(
                "React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
                typeString,
                info,
              );
            }
            var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.
            if (element == null) return element;
            // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)
            if (validType) {
              var children = props.children;
              if (children !== undefined) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) validateChildKeys(children[i], type);
                    if (Object.freeze) Object.freeze(children);
                  } else
                    error(
                      "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.",
                    );
                } else validateChildKeys(children, type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
            else validatePropTypes(element);
            return element;
          } // These two functions exist to still get child warnings in dev
          var jsxDEV$1 = jsxWithValidation;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsxDEV = jsxDEV$1;
        })();
      },
      { "58362d9d82be395f": "21dqq" },
    ],
    "21dqq": [
      function (require, module, exports) {
        "use strict";
        module.exports = require("a569817e6ea559f6");
      },
      { a569817e6ea559f6: "6YvXz" },
    ],
    "6YvXz": [
      function (require, module, exports) {
        /**
         * @license React
         * react.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          var ReactVersion = "18.2.0";
          // ATTENTION
          // When adding new symbols to this file,
          // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
          // The Symbol used to tag the ReactElement-like types.
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") return null;
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") return maybeIterator;
            return null;
          }
          /**
           * Keeps track of the current dispatcher.
           */ var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */ current: null,
          };
          /**
           * Keeps track of the current batch's configuration such as how long an update
           * should suspend for if it needs to.
           */ var ReactCurrentBatchConfig = {
            transition: null,
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false,
          };
          /**
           * Keeps track of the current owner.
           *
           * The current owner is the component who should own any components that are
           * currently being constructed.
           */ var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */ current: null,
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            currentExtraStackFrame = stack;
          }
          ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
            currentExtraStackFrame = stack;
          }; // Stack implementation injected by the current renderer.
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = ""; // Add an extra top frame while an element is being validated
            if (currentExtraStackFrame) stack += currentExtraStackFrame;
            // Delegate to the injected renderer-specific implementation
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) stack += impl() || "";
            return stack;
          };
          // -----------------------------------------------------------------------------
          var enableScopeAPI = false; // Experimental Create Event Handle API.
          var enableCacheElement = false;
          var enableTransitionTracing = false; // No known bugs, but needs performance testing
          var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
          // stuff. Intended to enable React core members to more easily debug scheduling
          // issues in DEV builds.
          var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
          var ReactSharedInternals = {
            ReactCurrentDispatcher: ReactCurrentDispatcher,
            ReactCurrentBatchConfig: ReactCurrentBatchConfig,
            ReactCurrentOwner: ReactCurrentOwner,
          };
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          // by calls to these methods by a Babel plugin.
          //
          // In PROD (or in packages without access to React internals),
          // they are left as they are instead.
          function warn(format) {
            for (
              var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
              _key < _len;
              _key++
            )
              args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
          }
          function error(format) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
              _key2 < _len2;
              _key2++
            )
              args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
          }
          function printWarning(level, format, args) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            } // eslint-disable-next-line react-internal/safe-string-coercion
            var argsWithFormat = args.map(function (item) {
              return String(item);
            }); // Careful: RN currently depends on this prefix
            argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            var _constructor = publicInstance.constructor;
            var componentName =
              (_constructor && (_constructor.displayName || _constructor.name)) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
            error(
              "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
              callerName,
              componentName,
            );
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
          /**
           * This is the abstract API for an update queue.
           */ var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */ isMounted: function (publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */ enqueueForceUpdate: function (publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */ enqueueReplaceState: function (
              publicInstance,
              completeState,
              callback,
              callerName,
            ) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */ enqueueSetState: function (publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            },
          };
          var assign = Object.assign;
          var emptyObject = {};
          Object.freeze(emptyObject);
          /**
           * Base class helpers for the updating state of a component.
           */ function Component(props, context, updater) {
            this.props = props;
            this.context = context; // If a component has string refs, we will assign a different object later.
            this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          /**
           * Sets a subset of the state. Always use this to mutate
           * state. You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * There is no guarantee that calls to `setState` will run synchronously,
           * as they may eventually be batched together.  You can provide an optional
           * callback that will be executed when the call to setState is actually
           * completed.
           *
           * When a function is provided to setState, it will be called at some point in
           * the future (not synchronously). It will be called with the up to date
           * component arguments (state, props, context). These values can be different
           * from this.* because your function may be called after receiveProps but before
           * shouldComponentUpdate, and this new state, props, and context will not yet be
           * assigned to this.
           *
           * @param {object|function} partialState Next partial state or function to
           *        produce next partial state to be merged with current state.
           * @param {?function} callback Called after state is updated.
           * @final
           * @protected
           */ Component.prototype.setState = function (partialState, callback) {
            if (
              typeof partialState !== "object" &&
              typeof partialState !== "function" &&
              partialState != null
            )
              throw new Error(
                "setState(...): takes an object of state variables to update or a function which returns an object of state variables.",
              );
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {?function} callback Called after update is complete.
           * @final
           * @protected
           */ Component.prototype.forceUpdate = function (callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          var deprecatedAPIs = {
            isMounted: [
              "isMounted",
              "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
            ],
            replaceState: [
              "replaceState",
              "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).",
            ],
          };
          var defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function () {
                warn(
                  "%s(...) is deprecated in plain JavaScript React classes. %s",
                  info[0],
                  info[1],
                );
                return undefined;
              },
            });
          };
          for (var fnName in deprecatedAPIs)
            if (deprecatedAPIs.hasOwnProperty(fnName))
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          function ComponentDummy() {}
          ComponentDummy.prototype = Component.prototype;
          /**
           * Convenience component with default shallow equality check for sCU.
           */ function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context; // If a component has string refs, we will assign a different object later.
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
          pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          // an immutable object with a single mutable value
          function createRef() {
            var refObject = {
              current: null,
            };
            Object.seal(refObject);
            return refObject;
          }
          var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
          function isArray(a) {
            return isArrayImpl(a);
          }
          /*
           * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
           * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
           *
           * The functions in this module will throw an easier-to-understand,
           * easier-to-debug exception with a clear errors message message explaining the
           * problem. (Instead of a confusing exception thrown inside the implementation
           * of the `value` object).
           */ // $FlowFixMe only called in DEV, so void return is not possible.
          function typeName(value) {
            // toStringTag is needed for namespaced types like Temporal.Instant
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type =
              (hasToStringTag && value[Symbol.toStringTag]) || value.constructor.name || "Object";
            return type;
          } // $FlowFixMe only called in DEV, so void return is not possible.
          function willCoercionThrow(value) {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
          function testStringCoercion(value) {
            // If you ended up here by following an exception call stack, here's what's
            // happened: you supplied an object or symbol value to React (as a prop, key,
            // DOM attribute, CSS property, string ref, etc.) and when React tried to
            // coerce it to a string using `'' + value`, an exception was thrown.
            //
            // The most common types that will cause this exception are `Symbol` instances
            // and Temporal objects like `Temporal.Instant`. But any object that has a
            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
            // exception. (Library authors do this to prevent users from using built-in
            // numeric operators like `+` or comparison operators like `>=` because custom
            // methods are needed to perform accurate arithmetic or comparison.)
            //
            // To fix the problem, coerce this object or symbol value to a string before
            // passing it to React. The most reliable way is usually `String(value)`.
            //
            // To find which value is throwing, check the browser or debugger console.
            // Before this exception was thrown, there should be `console.error` output
            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
            // problem and how that type was used: key, atrribute, input value prop, etc.
            // In most cases, this console output also shows the component and its
            // ancestor components where the exception happened.
            //
            // eslint-disable-next-line react-internal/safe-string-coercion
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            if (willCoercionThrow(value)) {
              error(
                "The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) return displayName;
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          } // Keep in sync with react-reconciler/getComponentNameFromFiber
          function getContextName(type) {
            return type.displayName || "Context";
          } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
          function getComponentNameFromType(type) {
            if (type == null)
              // Host root, text node or just invalid type.
              return null;
            if (typeof type.tag === "number")
              error(
                "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
              );
            if (typeof type === "function") return type.displayName || type.name || null;
            if (typeof type === "string") return type;
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) return outerName;
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
              }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true,
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          didWarnAboutStringRefs = {};
          function hasValidRef(config) {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) return false;
            }
            return config.ref !== undefined;
          }
          function hasValidKey(config) {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) return false;
            }
            return config.key !== undefined;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function () {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error(
                  "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                  displayName,
                );
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true,
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function () {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error(
                  "%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                  displayName,
                );
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true,
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            if (
              typeof config.ref === "string" &&
              ReactCurrentOwner.current &&
              config.__self &&
              ReactCurrentOwner.current.stateNode !== config.__self
            ) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error(
                  'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                  componentName,
                  config.ref,
                );
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          /**
           * Factory method to create a new React element. This no longer adheres to
           * the class pattern, so do not use new to call it. Also, instanceof check
           * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
           * if something is a React Element.
           *
           * @param {*} type
           * @param {*} props
           * @param {*} key
           * @param {string|object} ref
           * @param {*} owner
           * @param {*} self A *temporary* helper to detect places where `this` is
           * different from the `owner` when React.createElement is called, so that we
           * can warn. We want to get rid of owner and replace string `ref`s with arrow
           * functions, and as long as `this` and owner are the same, there will be no
           * change in behavior.
           * @param {*} source An annotation object (added by a transpiler or otherwise)
           * indicating filename, line number, and/or other information.
           * @internal
           */ var ReactElement = function (type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type: type,
              key: key,
              ref: ref,
              props: props,
              // Record the component responsible for creating this element.
              _owner: owner,
            };
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            }); // self and source are DEV only properties.
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self,
            }); // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
            return element;
          };
          /**
           * Create and return a new ReactElement of the given type.
           * See https://reactjs.org/docs/react-api.html#createelement
           */ function createElement(type, config, children) {
            var propName; // Reserved names are extracted
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
              }
              if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
              }
              self = config.__self === undefined ? null : config.__self;
              source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
              for (propName in config)
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                )
                  props[propName] = config[propName];
            } // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) props.children = children;
            else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) childArray[i] = arguments[i + 2];
              if (Object.freeze) Object.freeze(childArray);
              props.children = childArray;
            } // Resolve default props
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps)
                if (props[propName] === undefined) props[propName] = defaultProps[propName];
            }
            if (key || ref) {
              var displayName =
                typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) defineKeyPropWarningGetter(props, displayName);
              if (ref) defineRefPropWarningGetter(props, displayName);
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(
              oldElement.type,
              newKey,
              oldElement.ref,
              oldElement._self,
              oldElement._source,
              oldElement._owner,
              oldElement.props,
            );
            return newElement;
          }
          /**
           * Clone and return a new ReactElement using element as the starting point.
           * See https://reactjs.org/docs/react-api.html#cloneelement
           */ function cloneElement(element, config, children) {
            if (element === null || element === undefined)
              throw new Error(
                "React.cloneElement(...): The argument must be a React element, but you passed " +
                  element +
                  ".",
              );
            var propName; // Original props are copied
            var props = assign({}, element.props); // Reserved names are extracted
            var key = element.key;
            var ref = element.ref; // Self is preserved since the owner is preserved.
            var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
            // transpiler, and the original source is probably a better indicator of the
            // true owner.
            var source = element._source; // Owner will be preserved, unless ref is overridden
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
              } // Remaining properties override existing props
              var defaultProps;
              if (element.type && element.type.defaultProps)
                defaultProps = element.type.defaultProps;
              for (propName in config)
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  if (config[propName] === undefined && defaultProps !== undefined)
                    // Resolve default props
                    props[propName] = defaultProps[propName];
                  else props[propName] = config[propName];
                }
            } // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) props.children = children;
            else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) childArray[i] = arguments[i + 2];
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          /**
           * Verifies the object is a ReactElement.
           * See https://reactjs.org/docs/react-api.html#isvalidelement
           * @param {?object} object
           * @return {boolean} True if `object` is a ReactElement.
           * @final
           */ function isValidElement(object) {
            return (
              typeof object === "object" &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            );
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          /**
           * Escape and wrap key so it is safe to use as a reactid
           *
           * @param {string} key to be escaped.
           * @return {string} the escaped key.
           */ function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2",
            };
            var escapedString = key.replace(escapeRegex, function (match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          /**
           * TODO: Test that a single child and an array with one item have the same key
           * pattern.
           */ var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          /**
           * Generate a key string that identifies a element within a set.
           *
           * @param {*} element A element that could contain a manual key.
           * @param {number} index Index that is used if a manual key is not provided.
           * @return {string}
           */ function getElementKey(element, index) {
            // Do some typechecking here since we call this blindly. We want to ensure
            // that we don't block potential future ES APIs.
            if (typeof element === "object" && element !== null && element.key != null) {
              checkKeyStringCoercion(element.key);
              return escape("" + element.key);
            } // Implicit key determined by the index in the set
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean")
              // All of the above are perceived as null.
              children = null;
            var invokeCallback = false;
            if (children === null) invokeCallback = true;
            else
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
              // so that it's consistent if the number of children grows:
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                mapIntoArray(mappedChild, array, escapedChildKey, "", function (c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  // The `if` statement here prevents auto-disabling of the safe
                  // coercion ESLint rule, so we must manually disable it below.
                  // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key))
                    checkKeyStringCoercion(mappedChild.key);
                  mappedChild = cloneAndReplaceKey(
                    mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix +
                      (mappedChild.key && (!_child || _child.key !== mappedChild.key) // eslint-disable-next-line react-internal/safe-string-coercion
                        ? escapeUserProvidedKey("" + mappedChild.key) + "/"
                        : "") +
                      childKey,
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0; // Count of children found in the current subtree.
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children))
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps)
                    warn(
                      "Using Maps as children is not supported. Use an array of keyed ReactElements instead.",
                    );
                  didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error(
                  "Objects are not valid as a React child (found: " +
                    (childrenString === "[object Object]"
                      ? "object with keys {" + Object.keys(children).join(", ") + "}"
                      : childrenString) +
                    "). " +
                    "If you meant to render a collection of children, use an array " +
                    "instead.",
                );
              }
            }
            return subtreeCount;
          }
          /**
           * Maps children that are typically specified as `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#reactchildrenmap
           *
           * The provided mapFunction(child, index) will be called for each
           * leaf child.
           *
           * @param {?*} children Children tree container.
           * @param {function(*, int)} func The map function.
           * @param {*} context Context for mapFunction.
           * @return {object} Object containing the ordered map of results.
           */ function mapChildren(children, func, context) {
            if (children == null) return children;
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function (child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          /**
           * Count the number of children that are typically specified as
           * `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#reactchildrencount
           *
           * @param {?*} children Children tree container.
           * @return {number} The number of children.
           */ function countChildren(children) {
            var n = 0;
            mapChildren(children, function () {
              n++; // Don't return anything
            });
            return n;
          }
          /**
           * Iterates through children that are typically specified as `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
           *
           * The provided forEachFunc(child, index) will be called for each
           * leaf child.
           *
           * @param {?*} children Children tree container.
           * @param {function(*, int)} forEachFunc
           * @param {*} forEachContext Context for forEachContext.
           */ function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function () {
                forEachFunc.apply(this, arguments); // Don't return anything.
              },
              forEachContext,
            );
          }
          /**
           * Flatten a children object (typically specified as `props.children`) and
           * return an array with appropriately re-keyed children.
           *
           * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
           */ function toArray(children) {
            return (
              mapChildren(children, function (child) {
                return child;
              }) || []
            );
          }
          /**
           * Returns the first child in a collection of children and verifies that there
           * is only one child in the collection.
           *
           * See https://reactjs.org/docs/react-api.html#reactchildrenonly
           *
           * The current implementation of this function assumes that a single child gets
           * passed without a wrapper, but the purpose of this helper function is to
           * abstract away the particular structure of children.
           *
           * @param {?object} children Child collection structure.
           * @return {ReactElement} The first and only `ReactElement` contained in the
           * structure.
           */ function onlyChild(children) {
            if (!isValidElement(children))
              throw new Error(
                "React.Children.only expected to receive a single React element child.",
              );
            return children;
          }
          function createContext(defaultValue) {
            // TODO: Second argument used to be an optional `calculateChangedBits`
            // function. Warn to reserve for future use?
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null,
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context,
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
            }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
            Object.defineProperties(Consumer, {
              Provider: {
                get: function () {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error(
                      "Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?",
                    );
                  }
                  return context.Provider;
                },
                set: function (_Provider) {
                  context.Provider = _Provider;
                },
              },
              _currentValue: {
                get: function () {
                  return context._currentValue;
                },
                set: function (_currentValue) {
                  context._currentValue = _currentValue;
                },
              },
              _currentValue2: {
                get: function () {
                  return context._currentValue2;
                },
                set: function (_currentValue2) {
                  context._currentValue2 = _currentValue2;
                },
              },
              _threadCount: {
                get: function () {
                  return context._threadCount;
                },
                set: function (_threadCount) {
                  context._threadCount = _threadCount;
                },
              },
              Consumer: {
                get: function () {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error(
                      "Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?",
                    );
                  }
                  return context.Consumer;
                },
              },
              displayName: {
                get: function () {
                  return context.displayName;
                },
                set: function (displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn(
                      "Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
                      displayName,
                    );
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                },
              },
            }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
            context.Consumer = Consumer;
            context._currentRenderer = null;
            context._currentRenderer2 = null;
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor(); // Transition to the next state.
              // This might throw either because it's missing or throws. If so, we treat it
              // as still uninitialized and try again next time. Which is the same as what
              // happens if the ctor or any wrappers processing the ctor throws. This might
              // end up fixing it if the resolution was a concurrency bug.
              thenable.then(
                function (moduleObject) {
                  if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                  }
                },
                function (error) {
                  if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                  }
                },
              );
              if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              if (moduleObject === undefined)
                error(
                  "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
                  moduleObject,
                );
              if (!("default" in moduleObject))
                error(
                  "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                  moduleObject,
                );
              return moduleObject.default;
            } else throw payload._result;
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor,
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer,
            };
            // In production, this would just set it on the object.
            var defaultProps;
            var propTypes; // $FlowFixMe
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function () {
                  return defaultProps;
                },
                set: function (newDefaultProps) {
                  error(
                    "React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.",
                  );
                  defaultProps = newDefaultProps; // Match production behavior more closely:
                  // $FlowFixMe
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true,
                  });
                },
              },
              propTypes: {
                configurable: true,
                get: function () {
                  return propTypes;
                },
                set: function (newPropTypes) {
                  error(
                    "React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.",
                  );
                  propTypes = newPropTypes; // Match production behavior more closely:
                  // $FlowFixMe
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true,
                  });
                },
              },
            });
            return lazyType;
          }
          function forwardRef(render) {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE)
              error(
                "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).",
              );
            else if (typeof render !== "function")
              error(
                "forwardRef requires a render function but was given %s.",
                render === null ? "null" : typeof render,
              );
            else if (render.length !== 0 && render.length !== 2)
              error(
                "forwardRef render functions accept exactly two parameters: props and ref. %s",
                render.length === 1
                  ? "Did you forget to use the ref parameter?"
                  : "Any additional parameter will be undefined.",
              );
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null)
                error(
                  "forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?",
                );
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render,
            };
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
              },
            });
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") return true;
            // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
            if (
              type === REACT_FRAGMENT_TYPE ||
              type === REACT_PROFILER_TYPE ||
              enableDebugTracing ||
              type === REACT_STRICT_MODE_TYPE ||
              type === REACT_SUSPENSE_TYPE ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              enableLegacyHidden ||
              type === REACT_OFFSCREEN_TYPE ||
              enableScopeAPI ||
              enableCacheElement ||
              enableTransitionTracing
            )
              return true;
            if (typeof type === "object" && type !== null) {
              if (
                type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_PROVIDER_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                // types supported by any Flight configuration anywhere since
                // we don't know which Flight build this will end up being used
                // with.
                type.$$typeof === REACT_MODULE_REFERENCE ||
                type.getModuleId !== undefined
              )
                return true;
            }
            return false;
          }
          function memo(type, compare) {
            if (!isValidElementType(type))
              error(
                "memo: The first argument must be a component. Instead received: %s",
                type === null ? "null" : typeof type,
              );
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type,
              compare: compare === undefined ? null : compare,
            };
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
              },
            });
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (dispatcher === null)
              error(
                "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.",
              );
            // intentionally don't throw our own error because this is in a hot path.
            // Also helps ensure this is inlined.
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            // TODO: add a more generic warning for invalid values.
            if (Context._context !== undefined) {
              var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
              // and nobody should be using this in existing code.
              if (realContext.Consumer === Context)
                error(
                  "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?",
                );
              else if (realContext.Provider === Context)
                error(
                  "Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?",
                );
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          // Helpers to patch console.logs to avoid logging during side-effect free
          // replaying on render function. This currently only patches the object
          // lazily which won't cover if the log function was extracted eagerly.
          // We could also eagerly patch the method.
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            disabledDepth++;
          }
          function reenableLogs() {
            disabledDepth--;
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog,
                }),
                info: assign({}, props, {
                  value: prevInfo,
                }),
                warn: assign({}, props, {
                  value: prevWarn,
                }),
                error: assign({}, props, {
                  value: prevError,
                }),
                group: assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            if (disabledDepth < 0)
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            if (prefix === undefined)
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = (match && match[1]) || "";
              }
            // We use the prefix to ensure our stacks line up with native stack frames.
            return "\n" + prefix + name;
          }
          var reentry = false;
          var componentFrameCache;
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
          function describeNativeComponentFrame(fn, construct) {
            // If something asked for a stack inside a fake render, it should get ignored.
            if (!fn || reentry) return "";
            var frame = componentFrameCache.get(fn);
            if (frame !== undefined) return frame;
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
            Error.prepareStackTrace = undefined;
            var previousDispatcher;
            previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
            try {
              // This should throw.
              if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function () {
                  throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    // We use a throwing setter instead of frozen or non-writable props
                    // because that won't throw in a non-strict mode function.
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  // We construct a different control for this case to include any extra
                  // frames added by the construct call.
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              // This is inlined manually because closure doesn't do it for us.
              if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
                  // We expect at least one stack frame to be shared.
                  // Typically this will be the root most one. However, stack frames may be
                  // cut off due to maximum stack limits. In this case, one maybe cut off
                  // earlier than the other. We assume that the sample is longer or the same
                  // and there for cut off earlier. So we should find the root most frame in
                  // the sample somewhere in the control.
                  c--;
                for (
                  ;
                  s >= 1 && c >= 0;
                  s--, c-- // Next we find the first one that isn't the same which should be the
                )
                  // frame that called our sample function and the control.
                  if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1)
                      do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                          // but we have a user-provided "displayName"
                          // splice it in to make the stack more readable.
                          if (fn.displayName && _frame.includes("<anonymous>"))
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    break;
                  }
              }
            } finally {
              reentry = false;
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
              Error.prepareStackTrace = previousPrepareStackTrace;
            } // Fallback to just using the name if we couldn't make it throw.
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            return describeNativeComponentFrame(fn, false);
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) return "";
            if (typeof type === "function")
              return describeNativeComponentFrame(type, shouldConstruct(type));
            if (typeof type === "string") return describeBuiltInComponentFrame(type);
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  // Memo may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
              }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null,
              );
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            // $FlowFixMe This is okay but Flow doesn't know it.
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error(
                      (componentName || "React class") +
                        ": " +
                        location +
                        " type `" +
                        typeSpecName +
                        "` is invalid; " +
                        "it must be a function, usually from the `prop-types` package, but received `" +
                        typeof typeSpecs[typeSpecName] +
                        "`." +
                        "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.",
                    );
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",
                  );
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error(
                    "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                    componentName || "React class",
                    location,
                    typeSpecName,
                    typeof error$1,
                  );
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
          }
          function setCurrentlyValidatingElement$1(element) {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null,
              );
              setExtraStackFrame(stack);
            } else setExtraStackFrame(null);
          }
          var propTypesMisspellWarningShown;
          propTypesMisspellWarningShown = false;
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) return "\n\nCheck the render method of `" + name + "`.";
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== undefined) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== undefined)
              return getSourceInfoErrorAddendum(elementProps.__source);
            return "";
          }
          /**
           * Warn if there's no key explicitly set on dynamic arrays of children or
           * object keys are not valid. This allows us to keep track of children between
           * updates.
           */ var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName =
                typeof parentType === "string"
                  ? parentType
                  : parentType.displayName || parentType.name;
              if (parentName)
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
            return info;
          }
          /**
           * Warn if the element doesn't have an explicit key assigned to it.
           * This element is in an array. The array could grow and shrink or be
           * reordered. All children that haven't already been validated are required to
           * have a "key" property assigned to it. Error statuses are cached so a warning
           * will only be shown once.
           *
           * @internal
           * @param {ReactElement} element Element that requires a key.
           * @param {*} parentType element's parent's type.
           */ function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) return;
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
            // property, it may be the creator of the child that's responsible for
            // assigning it a key.
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current)
              // Give the component that originally created this child.
              childOwner =
                " It was passed a child from " +
                getComponentNameFromType(element._owner.type) +
                ".";
            setCurrentlyValidatingElement$1(element);
            error(
              'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
              currentComponentErrorInfo,
              childOwner,
            );
            setCurrentlyValidatingElement$1(null);
          }
          /**
           * Ensure that every element either is passed in a static location, in an
           * array with an explicit keys property defined, or in an object literal
           * with valid key property.
           *
           * @internal
           * @param {ReactNode} node Statically passed child of any type.
           * @param {*} parentType node's parent's type.
           */ function validateChildKeys(node, parentType) {
            if (typeof node !== "object") return;
            if (isArray(node))
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) validateExplicitKey(child, parentType);
              }
            else if (isValidElement(node)) {
              // This element was passed in a valid location.
              if (node._store) node._store.validated = true;
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done)
                    if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
          /**
           * Given an element, validate that its props follow the propTypes definition,
           * provided by the type.
           *
           * @param {ReactElement} element
           */ function validatePropTypes(element) {
            var type = element.type;
            if (type === null || type === undefined || typeof type === "string") return;
            var propTypes;
            if (typeof type === "function") propTypes = type.propTypes;
            else if (
              typeof type === "object" &&
              (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)
            )
              propTypes = type.propTypes;
            else return;
            if (propTypes) {
              // Intentionally inside to avoid triggering lazy initializers:
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
              var _name = getComponentNameFromType(type);
              error(
                "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                _name || "Unknown",
              );
            }
            if (
              typeof type.getDefaultProps === "function" &&
              !type.getDefaultProps.isReactClassApproved
            )
              error(
                "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.",
              );
          }
          /**
           * Given a fragment, validate that it can only be provided with fragment props
           * @param {ReactElement} fragment
           */ function validateFragmentProps(fragment) {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error(
                  "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                  key,
                );
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.
            if (!validType) {
              var info = "";
              if (
                type === undefined ||
                (typeof type === "object" && type !== null && Object.keys(type).length === 0)
              )
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) info += sourceInfo;
              else info += getDeclarationErrorAddendum();
              var typeString;
              if (type === null) typeString = "null";
              else if (isArray(type)) typeString = "array";
              else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else typeString = typeof type;
              error(
                "React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
                typeString,
                info,
              );
            }
            var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.
            if (element == null) return element;
            // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)
            if (validType)
              for (var i = 2; i < arguments.length; i++) validateChildKeys(arguments[i], type);
            if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
            else validatePropTypes(element);
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn(
                "React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.",
              );
            } // Legacy hook: remove it
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function () {
                warn(
                  "Factory.type is deprecated. Access the class directly before passing it to createFactory.",
                );
                Object.defineProperty(this, "type", {
                  value: type,
                });
                return type;
              },
            });
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++)
              validateChildKeys(arguments[i], newElement.type);
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition._updatedFibers = new Set();
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10)
                  warn(
                    "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.",
                  );
                currentTransition._updatedFibers.clear();
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null)
              try {
                // read require off the module object to get around the bundlers.
                // we don't want them to detect a require and bundle a Node polyfill.
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
                // version of setImmediate, bypassing fake timers if any.
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                // we're in a browser
                // we can't use regular timers because they may still be faked
                // so we try MessageChannel+postMessage instead
                enqueueTaskImpl = function (callback) {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined")
                      error(
                        "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.",
                      );
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(undefined);
                };
              }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            // `act` calls can be nested, so we track the depth. This represents the
            // number of `act` scopes on the stack.
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null)
              // This is the outermost `act` scope. Initialize the queue. The reconciler
              // will detect the queue and use it instead of Scheduler.
              ReactCurrentActQueue.current = [];
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
              // set to `true` while the given callback is executed, not for updates
              // triggered during an async event, because this is how the legacy
              // implementation of `act` behaved.
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
              // which flushed updates immediately after the scope function exits, even
              // if it's an async function.
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error) {
              popActScope(prevActScopeDepth);
              throw error;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (
              result !== null &&
              typeof result === "object" &&
              typeof result.then === "function"
            ) {
              var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
              // for it to resolve before exiting the current scope.
              var wasAwaited = false;
              var thenable = {
                then: function (resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(
                    function (returnValue) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0)
                        // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      else resolve(returnValue);
                    },
                    function (error) {
                      // The callback threw an error.
                      popActScope(prevActScopeDepth);
                      reject(error);
                    },
                  );
                },
              };
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined")
                // eslint-disable-next-line no-undef
                Promise.resolve()
                  .then(function () {})
                  .then(function () {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error(
                        "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);",
                      );
                    }
                  });
              return thenable;
            } else {
              var returnValue = result; // The callback is not an async function. Exit the current scope
              // immediately, without awaiting.
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                  then: function (resolve, reject) {
                    // Confirm we haven't re-entered another `act` scope, in case
                    // the user does something weird like await the thenable
                    // multiple times.
                    if (ReactCurrentActQueue.current === null) {
                      // Recursively flush the queue until there's no remaining work.
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else resolve(returnValue);
                  },
                };
                return _thenable;
              } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                  then: function (resolve, reject) {
                    resolve(returnValue);
                  },
                };
                return _thenable2;
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            if (prevActScopeDepth !== actScopeDepth - 1)
              error(
                "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ",
              );
            actScopeDepth = prevActScopeDepth;
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null)
              try {
                flushActQueue(queue);
                enqueueTask(function () {
                  if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } // Keep flushing work until there's none left.
                  else recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
              } catch (error) {
                reject(error);
              }
            else resolve(returnValue);
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            if (!isFlushing) {
              // Prevent re-entrance.
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do callback = callback(true);
                  while (callback !== null);
                }
                queue.length = 0;
              } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
              } finally {
                isFlushing = false;
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray,
            only: onlyChild,
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        })();
      },
      {},
    ],
    lOjBx: [
      function (require, module, exports) {
        "use strict";
        var m = require("aaccff5d309d9239");
        var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function (c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function (c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      },
      { aaccff5d309d9239: "j6uA9" },
    ],
    j6uA9: [
      function (require, module, exports) {
        "use strict";
        function checkDCE() {
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ||
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function"
          )
            return;
          var err;
          // This branch is unreachable because this function is only called
          // in production, but the condition is true only in development.
          // Therefore if the branch is still here, dead code elimination wasn't
          // properly applied.
          // Don't change the message. React DevTools relies on it. Also make sure
          // this message doesn't occur elsewhere in this function, or it will cause
          // a false positive.
          throw new Error("^_^");
        }
        module.exports = require("b0f0e6b9e8349dac");
      },
      { b0f0e6b9e8349dac: "3iA9v" },
    ],
    "3iA9v": [
      function (require, module, exports) {
        /**
         * @license React
         * react-dom.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          var React = require("6f0162e9ab224cd4");
          var Scheduler = require("8ad4ca65319d28a7");
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            suppressWarning = newSuppressWarning;
          } // In DEV, calls to console.warn and console.error get replaced
          // by calls to these methods by a Babel plugin.
          //
          // In PROD (or in packages without access to React internals),
          // they are left as they are instead.
          function warn(format) {
            if (!suppressWarning) {
              for (
                var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
                _key < _len;
                _key++
              )
                args[_key - 1] = arguments[_key];
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            if (!suppressWarning) {
              for (
                var _len2 = arguments.length,
                  args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                  _key2 = 1;
                _key2 < _len2;
                _key2++
              )
                args[_key2 - 1] = arguments[_key2];
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            } // eslint-disable-next-line react-internal/safe-string-coercion
            var argsWithFormat = args.map(function (item) {
              return String(item);
            }); // Careful: RN currently depends on this prefix
            argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2; // Before we know whether it is function or class
          var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
          var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          // -----------------------------------------------------------------------------
          var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
          // the react-reconciler package.
          var enableNewReconciler = false; // Support legacy Primer support on internal FB www
          var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
          var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
          var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
          // React DOM Chopping Block
          //
          // Similar to main Chopping Block but only flags related to React DOM. These are
          // grouped because we will likely batch all of them into a single major release.
          // -----------------------------------------------------------------------------
          // Disable support for comment nodes as React DOM containers. Already disabled
          // in open source, but www codebase still relies on it. Need to remove.
          var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
          // and client rendering, mostly to allow JSX attributes to apply to the custom
          // element's object properties instead of only HTML attributes.
          // https://github.com/facebook/react/issues/11347
          var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
          var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
          // Debugging and DevTools
          // -----------------------------------------------------------------------------
          // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
          // for an experimental timeline tool.
          var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
          var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
          var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
          var allNativeEvents = new Set();
          /**
           * Mapping from registration name to event name
           */ var registrationNameDependencies = {};
          /**
           * Mapping from lowercase registration names to the properly cased version,
           * used to warn in the case of missing event handlers. Available
           * only in true.
           * @type {Object}
           */ var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            if (registrationNameDependencies[registrationName])
              error(
                "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
                registrationName,
              );
            registrationNameDependencies[registrationName] = dependencies;
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick")
              possibleRegistrationNames.ondblclick = registrationName;
            for (var i = 0; i < dependencies.length; i++) allNativeEvents.add(dependencies[i]);
          }
          var canUseDOM = !!(
            typeof window !== "undefined" &&
            typeof window.document !== "undefined" &&
            typeof window.document.createElement !== "undefined"
          );
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          /*
           * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
           * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
           *
           * The functions in this module will throw an easier-to-understand,
           * easier-to-debug exception with a clear errors message message explaining the
           * problem. (Instead of a confusing exception thrown inside the implementation
           * of the `value` object).
           */ // $FlowFixMe only called in DEV, so void return is not possible.
          function typeName(value) {
            // toStringTag is needed for namespaced types like Temporal.Instant
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type =
              (hasToStringTag && value[Symbol.toStringTag]) || value.constructor.name || "Object";
            return type;
          } // $FlowFixMe only called in DEV, so void return is not possible.
          function willCoercionThrow(value) {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
          function testStringCoercion(value) {
            // If you ended up here by following an exception call stack, here's what's
            // happened: you supplied an object or symbol value to React (as a prop, key,
            // DOM attribute, CSS property, string ref, etc.) and when React tried to
            // coerce it to a string using `'' + value`, an exception was thrown.
            //
            // The most common types that will cause this exception are `Symbol` instances
            // and Temporal objects like `Temporal.Instant`. But any object that has a
            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
            // exception. (Library authors do this to prevent users from using built-in
            // numeric operators like `+` or comparison operators like `>=` because custom
            // methods are needed to perform accurate arithmetic or comparison.)
            //
            // To fix the problem, coerce this object or symbol value to a string before
            // passing it to React. The most reliable way is usually `String(value)`.
            //
            // To find which value is throwing, check the browser or debugger console.
            // Before this exception was thrown, there should be `console.error` output
            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
            // problem and how that type was used: key, atrribute, input value prop, etc.
            // In most cases, this console output also shows the component and its
            // ancestor components where the exception happened.
            //
            // eslint-disable-next-line react-internal/safe-string-coercion
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            if (willCoercionThrow(value)) {
              error(
                "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.",
                attributeName,
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function checkKeyStringCoercion(value) {
            if (willCoercionThrow(value)) {
              error(
                "The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function checkPropStringCoercion(value, propName) {
            if (willCoercionThrow(value)) {
              error(
                "The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.",
                propName,
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            if (willCoercionThrow(value)) {
              error(
                "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.",
                propName,
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function checkHtmlStringCoercion(value) {
            if (willCoercionThrow(value)) {
              error(
                "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.",
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            if (willCoercionThrow(value)) {
              error(
                "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.",
                typeName(value),
              );
              return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
            }
          }
          // A reserved attribute.
          // It is handled by React separately and shouldn't be written to the DOM.
          var RESERVED = 0; // A simple string attribute.
          // Attributes that aren't in the filter are presumed to have this type.
          var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
          // "enumerated" attributes with "true" and "false" as possible values.
          // When true, it should be set to a "true" string.
          // When false, it should be set to a "false" string.
          var BOOLEANISH_STRING = 2; // A real boolean attribute.
          // When true, it should be present (set either to an empty string or its name).
          // When false, it should be omitted.
          var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
          // When true, it should be present (set either to an empty string or its name).
          // When false, it should be omitted.
          // For any other value, should be present with that value.
          var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
          // When falsy, it should be removed.
          var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
          // When falsy, it should be removed.
          var POSITIVE_NUMERIC = 6;
          /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR =
            ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR =
            ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
            "^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$",
          );
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            error("Invalid attribute name: `%s`", attributeName);
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) return propertyInfo.type === RESERVED;
            if (isCustomComponentTag) return false;
            if (
              name.length > 2 &&
              (name[0] === "o" || name[0] === "O") &&
              (name[1] === "n" || name[1] === "N")
            )
              return true;
            return false;
          }
          function shouldRemoveAttributeWithWarning(
            name,
            value,
            propertyInfo,
            isCustomComponentTag,
          ) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
            switch (typeof value) {
              case "function":
              case "symbol":
                // eslint-disable-line
                return true;
              case "boolean":
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                  var prefix = name.toLowerCase().slice(0, 5);
                  return prefix !== "data-" && prefix !== "aria-";
                }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") return true;
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
              return true;
            if (isCustomComponentTag) return false;
            if (propertyInfo !== null)
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(
            name,
            type,
            mustUseProperty,
            attributeName,
            attributeNamespace,
            sanitizeURL,
            removeEmptyString,
          ) {
            this.acceptsBooleans =
              type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL;
            this.removeEmptyString = removeEmptyString;
          } // When adding attributes to this list, be sure to also add them to
          // the `possibleStandardNames` module to ensure casing and incorrect
          // name warnings.
          var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style",
          ];
          reservedProps.forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false,
            );
          }); // A few React string attributes have a different name.
          // This is a mapping from React prop names to the attribute names.
          [
            ["acceptCharset", "accept-charset"],
            ["className", "class"],
            ["htmlFor", "for"],
            ["httpEquiv", "http-equiv"],
          ].forEach(function (_ref) {
            var name = _ref[0],
              attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false,
            );
          }); // These are "enumerated" HTML attributes that accept "true" and "false".
          // In React, we let users pass `true` and `false` even though technically
          // these aren't boolean attributes (they are coerced to strings).
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false,
            );
          }); // These are "enumerated" SVG attributes that accept "true" and "false".
          // In React, we let users pass `true` and `false` even though technically
          // these aren't boolean attributes (they are coerced to strings).
          // Since these are SVG attributes, their attribute names are case-sensitive.
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(
            function (name) {
              properties[name] = new PropertyInfoRecord(
                name,
                BOOLEANISH_STRING,
                false,
                name,
                null,
                false,
                false,
              );
            },
          ); // These are HTML boolean attributes.
          [
            "allowFullScreen",
            "async",
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope",
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false,
            );
          }); // These are the few React props that we set as DOM properties
          // rather than attributes. These are all booleans.
          [
            "checked",
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false,
            );
          }); // These are HTML attributes that are "overloaded booleans": they behave like
          // booleans, but can also accept a string value.
          [
            "capture",
            "download", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false,
            );
          }); // These are HTML attributes that must be positive numbers.
          [
            "cols",
            "rows",
            "size",
            "span", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false,
            );
          }); // These are HTML attributes that must be numbers.
          ["rowSpan", "start"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false,
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function (token) {
            return token[1].toUpperCase();
          }; // This is a list of all SVG attributes that need special casing, namespacing,
          // or boolean value assignment. Regular attributes that just accept strings
          // and have the same names are omitted, just like in the HTML attribute filter.
          // Some of these attributes can be hard to find. This list was created by
          // scraping the MDN documentation.
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false,
            );
          }); // String SVG attributes with the xlink namespace.
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false,
            );
          }); // String SVG attributes with the xml namespace.
          [
            "xml:base",
            "xml:lang",
            "xml:space", // NOTE: if you add a camelCased prop to this list,
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false,
            );
          }); // These attribute exists both in HTML and SVG.
          // The attribute name is case-sensitive in SVG so we can't just use
          // the React name like we do for attributes that exist only in HTML.
          ["tabIndex", "crossOrigin"].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false,
            );
          }); // These attributes accept URLs. These must not allow javascript: URLS.
          // These will also need to accept Trusted Types object in the future.
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false,
          );
          ["src", "href", "action", "formAction"].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true,
            );
          });
          // and any newline or tab are filtered out as if they're not part of the URL.
          // https://url.spec.whatwg.org/#url-parsing
          // Tab or newline are defined as \r\n\t:
          // https://infra.spec.whatwg.org/#ascii-tab-or-newline
          // A C0 control is a code point in the range \u0000 NULL to \u001F
          // INFORMATION SEPARATOR ONE, inclusive:
          // https://infra.spec.whatwg.org/#c0-control-or-space
          /* eslint-disable max-len */ var isJavaScriptProtocol =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error(
                "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",
                JSON.stringify(url),
              );
            }
          }
          /**
           * Get the value for a property on a node. Only used in DEV for SSR validation.
           * The "expected" argument is used as a hint of what the expected value is.
           * Some properties have multiple equivalent values.
           */ function getValueForProperty(node, name, expected, propertyInfo) {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              checkAttributeStringCoercion(expected, name);
              if (propertyInfo.sanitizeURL)
                // If we haven't fully disabled javascript: URLs, and if
                // the hydration is successful of a javascript: URL, we
                // still want to warn on the client.
                // eslint-disable-next-line react-internal/safe-string-coercion
                sanitizeURL("" + expected);
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") return true;
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                  // eslint-disable-next-line react-internal/safe-string-coercion
                  if (value === "" + expected) return expected;
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false))
                  // We had an attribute but shouldn't have had one, so read it
                  // for the error message.
                  return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN)
                  // If this was a boolean, it doesn't matter what the value is
                  // the fact that we have it is the same as the expected.
                  return expected;
                // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false))
                return stringValue === null
                  ? expected
                  : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
              else if (stringValue === "" + expected) return expected;
              else return stringValue;
            }
          }
          /**
           * Get the value for a attribute on a node. Only used in DEV for SSR validation.
           * The third argument is used as a hint of what the expected value is. Some
           * attributes have multiple equivalent values.
           */ function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            if (!isAttributeNameSafe(name)) return;
            if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
            var value = node.getAttribute(name);
            checkAttributeStringCoercion(expected, name);
            if (value === "" + expected) return expected;
            return value;
          }
          /**
           * Sets the value for a property on a node.
           *
           * @param {DOMElement} node
           * @param {string} name
           * @param {*} value
           */ function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag))
              value = null;
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                  checkAttributeStringCoercion(value, name);
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } // Contrary to `setAttribute`, object properties are properly
              // `toString`ed by IE8/9.
              else node[propertyName] = value;
              return;
            } // The rest are treated as attributes with special cases.
            var attributeName = propertyInfo.attributeName,
              attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) node.removeAttribute(attributeName);
            else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || (_type === OVERLOADED_BOOLEAN && value === true))
                // If attribute type is boolean, we know for sure it won't be an execution sink
                // and we won't require Trusted Type here.
                attributeValue = "";
              else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = "" + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
              }
              if (attributeNamespace)
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              else node.setAttribute(attributeName, attributeValue);
            }
          }
          // ATTENTION
          // When adding new symbols to this file,
          // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
          // The Symbol used to tag the ReactElement-like types.
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") return null;
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") return maybeIterator;
            return null;
          }
          var assign = Object.assign;
          // Helpers to patch console.logs to avoid logging during side-effect free
          // replaying on render function. This currently only patches the object
          // lazily which won't cover if the log function was extracted eagerly.
          // We could also eagerly patch the method.
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            disabledDepth++;
          }
          function reenableLogs() {
            disabledDepth--;
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              }; // $FlowFixMe Flow thinks console is immutable.
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog,
                }),
                info: assign({}, props, {
                  value: prevInfo,
                }),
                warn: assign({}, props, {
                  value: prevWarn,
                }),
                error: assign({}, props, {
                  value: prevError,
                }),
                group: assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd,
                }),
              });
              /* eslint-enable react-internal/no-production-logging */
            }
            if (disabledDepth < 0)
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            if (prefix === undefined)
              // Extract the VM specific prefix used by each line.
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = (match && match[1]) || "";
              }
            // We use the prefix to ensure our stacks line up with native stack frames.
            return "\n" + prefix + name;
          }
          var reentry = false;
          var componentFrameCache;
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
          function describeNativeComponentFrame(fn, construct) {
            // If something asked for a stack inside a fake render, it should get ignored.
            if (!fn || reentry) return "";
            var frame = componentFrameCache.get(fn);
            if (frame !== undefined) return frame;
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
            Error.prepareStackTrace = undefined;
            var previousDispatcher;
            previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.
            ReactCurrentDispatcher.current = null;
            disableLogs();
            try {
              // This should throw.
              if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function () {
                  throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    // We use a throwing setter instead of frozen or non-writable props
                    // because that won't throw in a non-strict mode function.
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  // We construct a different control for this case to include any extra
                  // frames added by the construct call.
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              // This is inlined manually because closure doesn't do it for us.
              if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])
                  // We expect at least one stack frame to be shared.
                  // Typically this will be the root most one. However, stack frames may be
                  // cut off due to maximum stack limits. In this case, one maybe cut off
                  // earlier than the other. We assume that the sample is longer or the same
                  // and there for cut off earlier. So we should find the root most frame in
                  // the sample somewhere in the control.
                  c--;
                for (
                  ;
                  s >= 1 && c >= 0;
                  s--, c-- // Next we find the first one that isn't the same which should be the
                )
                  // frame that called our sample function and the control.
                  if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1)
                      do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                          // but we have a user-provided "displayName"
                          // splice it in to make the stack more readable.
                          if (fn.displayName && _frame.includes("<anonymous>"))
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    break;
                  }
              }
            } finally {
              reentry = false;
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
              Error.prepareStackTrace = previousPrepareStackTrace;
            } // Fallback to just using the name if we couldn't make it throw.
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            return describeNativeComponentFrame(ctor, true);
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            return describeNativeComponentFrame(fn, false);
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) return "";
            if (typeof type === "function")
              return describeNativeComponentFrame(type, shouldConstruct(type));
            if (typeof type === "string") return describeBuiltInComponentFrame(type);
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  // Memo may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {}
              }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress) {
            try {
              var info = "";
              var node = workInProgress;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) return displayName;
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          } // Keep in sync with react-reconciler/getComponentNameFromFiber
          function getContextName(type) {
            return type.displayName || "Context";
          } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
          function getComponentNameFromType(type) {
            if (type == null)
              // Host root, text node or just invalid type.
              return null;
            if (typeof type.tag === "number")
              error(
                "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.",
              );
            if (typeof type === "function") return type.displayName || type.name || null;
            if (typeof type === "string") return type;
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object")
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) return outerName;
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE:
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
              }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return (
              outerType.displayName ||
              (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName)
            );
          } // Keep in sync with shared/getComponentNameFromType
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag,
              type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE)
                  // Don't be less specific than shared/getComponentNameFromType
                  return "StrictMode";
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") return type.displayName || type.name || null;
                if (typeof type === "string") return type;
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            if (current === null) return null;
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined")
              return getComponentNameFromFiber(owner);
            return null;
          }
          function getCurrentFiberStackInDev() {
            if (current === null) return "";
            // Safe because if current fiber exists, we are reconciling,
            // and it is guaranteed to be the work-in-progress version.
            return getStackByFiberInDevAndProd(current);
          }
          function resetCurrentFiber() {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
          function setCurrentFiber(fiber) {
            ReactDebugCurrentFrame.getCurrentStack =
              fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
          function getCurrentFiber() {
            return current;
          }
          function setIsRendering(rendering) {
            isRendering = rendering;
          }
          // Flow does not allow string concatenation of most non-string types. To work
          // around this limitation, we use an opaque type that can only be obtained by
          // passing the value through getToStringValue first.
          function toString(value) {
            // The coercion safety check is performed in getToStringValue().
            // eslint-disable-next-line react-internal/safe-string-coercion
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                checkFormFieldValueStringCoercion(value);
                return value;
              default:
                // function, symbol are assigned as empty strings
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true,
          };
          function checkControlledValueProps(tagName, props) {
            if (
              !(
                hasReadOnlyValue[props.type] ||
                props.onChange ||
                props.onInput ||
                props.readOnly ||
                props.disabled ||
                props.value == null
              )
            )
              error(
                "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.",
              );
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null))
              error(
                "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.",
              );
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return (
              nodeName &&
              nodeName.toLowerCase() === "input" &&
              (type === "checkbox" || type === "radio")
            );
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) return value;
            if (isCheckable(node)) value = node.checked ? "true" : "false";
            else value = node.value;
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(
              node.constructor.prototype,
              valueField,
            );
            checkFormFieldValueStringCoercion(node[valueField]);
            var currentValue = "" + node[valueField]; // if someone has already defined a value or Safari, then bail
            // and don't track value will cause over reporting of changes,
            // but it's better then a hard failure
            // (needed for certain tests that spyOn input values and Safari)
            if (
              node.hasOwnProperty(valueField) ||
              typeof descriptor === "undefined" ||
              typeof descriptor.get !== "function" ||
              typeof descriptor.set !== "function"
            )
              return;
            var get = descriptor.get,
              set = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function () {
                return get.call(this);
              },
              set: function (value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
              },
            }); // We could've passed this the first time
            // but it triggers a bug in IE11 and Edge 14/15.
            // Calling defineProperty() again should be equivalent.
            // https://github.com/facebook/react/issues/11768
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable,
            });
            var tracker = {
              getValue: function () {
                return currentValue;
              },
              setValue: function (value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
              },
              stopTracking: function () {
                detachTracker(node);
                delete node[valueField];
              },
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) return;
            // TODO: Once it's just Fiber we can move this to node._wrapperState
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) return false;
            var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
            // that trying again will succeed
            if (!tracker) return true;
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : undefined);
            if (typeof doc === "undefined") return null;
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          /**
           * Implements an <input> host component that allows setting these optional
           * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
           *
           * If `checked` or `value` are not supplied (or null/undefined), user actions
           * that affect the checked state or value will trigger updates to the element.
           *
           * If they are supplied (and not null/undefined), the rendered element will not
           * trigger updates to the element. Instead, the props must change in order for
           * the rendered element to be updated.
           *
           * The rendered element will be initialized as unchecked (or `defaultChecked`)
           * with an empty value (or `defaultValue`).
           *
           * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
           */ function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: undefined,
              defaultValue: undefined,
              value: undefined,
              checked: checked != null ? checked : node._wrapperState.initialChecked,
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            checkControlledValueProps("input", props);
            if (
              props.checked !== undefined &&
              props.defaultChecked !== undefined &&
              !didWarnCheckedDefaultChecked
            ) {
              error(
                "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                getCurrentFiberOwnerNameInDevOrNull() || "A component",
                props.type,
              );
              didWarnCheckedDefaultChecked = true;
            }
            if (
              props.value !== undefined &&
              props.defaultValue !== undefined &&
              !didWarnValueDefaultValue
            ) {
              error(
                "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                getCurrentFiberOwnerNameInDevOrNull() || "A component",
                props.type,
              );
              didWarnValueDefaultValue = true;
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props),
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) setValueForProperty(node, "checked", checked, false);
          }
          function updateWrapper(element, props) {
            var node = element;
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error(
                "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components",
              );
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error(
                "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components",
              );
              didWarnControlledToUncontrolled = true;
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (
                  (value === 0 && node.value === "") || // We explicitly want to coerce to number here if possible.
                  // eslint-disable-next-line
                  node.value != value
                )
                  node.value = toString(value);
              } else if (node.value !== toString(value)) node.value = toString(value);
            } else if (type === "submit" || type === "reset") {
              // Submit/reset inputs need the attribute removed completely to avoid
              // blank-text buttons.
              node.removeAttribute("value");
              return;
            }
            // When syncing the value attribute, the value comes from a cascade of
            // properties:
            //  1. The value React property
            //  2. The defaultValue React property
            //  3. Otherwise there should be no change
            if (props.hasOwnProperty("value")) setDefaultValue(node, props.type, value);
            else if (props.hasOwnProperty("defaultValue"))
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            // When syncing the checked attribute, it only changes when it needs
            // to be removed, such as transitioning from a checkbox into a text input
            if (props.checked == null && props.defaultChecked != null)
              node.defaultChecked = !!props.defaultChecked;
          }
          function postMountWrapper(element, props, isHydrating) {
            var node = element; // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset"; // Avoid setting value attribute on submit/reset inputs as it overrides the
              // default value provided by the browser. See: #12872
              if (isButton && (props.value === undefined || props.value === null)) return;
              var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
              // from being lost during SSR hydration.
              if (!isHydrating) {
                // When syncing the value attribute, the value property should use
                // the wrapperState._initialValue property. This uses:
                //
                //   1. The value React property when present
                //   2. The defaultValue React property when present
                //   3. An empty string
                if (initialValue !== node.value) node.value = initialValue;
              }
              // Otherwise, the value attribute is synchronized to the property,
              // so we assign defaultValue to the same thing as the value property
              // assignment step above.
              node.defaultValue = initialValue;
            } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
            // this is needed to work around a chrome bug where setting defaultChecked
            // will sometimes influence the value of checked (even after detachment).
            // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
            // We need to temporarily unset name to avoid disrupting radio button groups.
            var name = node.name;
            if (name !== "") node.name = "";
            // When syncing the checked attribute, both the checked property and
            // attribute are assigned at the same time using defaultChecked. This uses:
            //
            //   1. The checked React property when present
            //   2. The defaultChecked React property when present
            //   3. Otherwise, false
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
            if (name !== "") node.name = name;
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) queryRoot = queryRoot.parentNode;
              // If `rootNode.form` was non-null, then we could try `form.elements`,
              checkAttributeStringCoercion(name, "name");
              var group = queryRoot.querySelectorAll(
                "input[name=" + JSON.stringify("" + name) + '][type="radio"]',
              );
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps)
                  throw new Error(
                    "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.",
                  );
                // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
              }
            }
          } // In Chrome, assigning defaultValue to certain input types triggers input validation.
          // For number inputs, the display value loses trailing decimal points. For email inputs,
          // Chrome raises "The specified value <x> is not a valid email address".
          //
          // Here we check to see if the defaultValue has actually changed, avoiding these problems
          // when the user is inputting text
          //
          // https://github.com/facebook/react/issues/7253
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
              else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          /**
           * Implements an <option> host component that warns when `selected` is set.
           */ function validateProps(element, props) {
            // If a value is not provided, then the children must be simple.
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null)
                React.Children.forEach(props.children, function (child) {
                  if (child == null) return;
                  if (typeof child === "string" || typeof child === "number") return;
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error(
                      "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.",
                    );
                  }
                });
              else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error(
                    "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.",
                  );
                }
              }
            } // TODO: Remove support for `selected` in <option>.
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error(
                "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.",
              );
              didWarnSelectedSetOnOption = true;
            }
          }
          function postMountWrapper$1(element, props) {
            // value="" should make a value attribute (#6219)
            if (props.value != null)
              element.setAttribute("value", toString(getToStringValue(props.value)));
          }
          var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          didWarnValueDefaultValue$1 = false;
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) return "\n\nCheck the render method of `" + ownerName + "`.";
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          /**
           * Validation function for `value` and `defaultValue`.
           */ function checkSelectPropTypes(props) {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) continue;
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray)
                error(
                  "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
                  propName,
                  getDeclarationErrorAddendum(),
                );
              else if (!props.multiple && propNameIsArray)
                error(
                  "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
                  propName,
                  getDeclarationErrorAddendum(),
                );
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (
                var i = 0;
                i < selectedValues.length;
                i++ // Prefix to avoid chaos with special keys.
              )
                selectedValue["$" + selectedValues[i]] = true;
              for (var _i = 0; _i < options.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
              }
            } else {
              // Do not set `select.value` as exact behavior isn't consistent across all
              // browsers for all cases.
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options.length; _i2++) {
                if (options[_i2].value === _selectedValue) {
                  options[_i2].selected = true;
                  if (setDefaultSelected) options[_i2].defaultSelected = true;
                  return;
                }
                if (defaultSelected === null && !options[_i2].disabled)
                  defaultSelected = options[_i2];
              }
              if (defaultSelected !== null) defaultSelected.selected = true;
            }
          }
          /**
           * Implements a <select> host component that allows optionally setting the
           * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
           * stringable. If `multiple` is true, the prop must be an array of stringables.
           *
           * If `value` is not supplied (or null/undefined), user actions that change the
           * selected option will trigger updates to the rendered options.
           *
           * If it is supplied (and not null/undefined), the rendered options will not
           * update in response to user actions. Instead, the `value` prop must change in
           * order for the rendered options to update.
           *
           * If `defaultValue` is provided, any options with the supplied values will be
           * selected.
           */ function getHostProps$1(element, props) {
            return assign({}, props, {
              value: undefined,
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            checkSelectPropTypes(props);
            node._wrapperState = {
              wasMultiple: !!props.multiple,
            };
            if (
              props.value !== undefined &&
              props.defaultValue !== undefined &&
              !didWarnValueDefaultValue$1
            ) {
              error(
                "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
              );
              didWarnValueDefaultValue$1 = true;
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) updateOptions(node, !!props.multiple, value, false);
            else if (props.defaultValue != null)
              updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) updateOptions(node, !!props.multiple, value, false);
            else if (wasMultiple !== !!props.multiple) {
              // For simplicity, reapply `defaultValue` if `multiple` is toggled.
              if (props.defaultValue != null)
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              // Revert the select back to its default unselected state.
              else updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) updateOptions(node, !!props.multiple, value, false);
          }
          var didWarnValDefaultVal = false;
          /**
           * Implements a <textarea> host component that allows setting `value`, and
           * `defaultValue`. This differs from the traditional DOM API because value is
           * usually set as PCDATA children.
           *
           * If `value` is not supplied (or null/undefined), user actions that affect the
           * value will trigger updates to the element.
           *
           * If `value` is supplied (and not null/undefined), the rendered element will
           * not trigger updates to the element. Instead, the `value` prop must change in
           * order for the rendered element to be updated.
           *
           * The rendered element will be initialized with an empty value, the prop
           * `defaultValue` if specified, or the children content (deprecated).
           */ function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null)
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            // Always set children to the same thing. In IE9, the selection range will
            // get reset if `textContent` is mutated.  We could add a check in setTextContent
            // to only set the value if/when the value differs from the node value (which would
            // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
            // solution. The value can be a boolean or object so that's why it's forced
            // to be a string.
            var hostProps = assign({}, props, {
              value: undefined,
              defaultValue: undefined,
              children: toString(node._wrapperState.initialValue),
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            checkControlledValueProps("textarea", props);
            if (
              props.value !== undefined &&
              props.defaultValue !== undefined &&
              !didWarnValDefaultVal
            ) {
              error(
                "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                getCurrentFiberOwnerNameInDevOrNull() || "A component",
              );
              didWarnValDefaultVal = true;
            }
            var initialValue = props.value; // Only bother fetching default value if we're going to use it
            if (initialValue == null) {
              var children = props.children,
                defaultValue = props.defaultValue;
              if (children != null) {
                error(
                  "Use the `defaultValue` or `value` props instead of setting children on <textarea>.",
                );
                if (defaultValue != null)
                  throw new Error(
                    "If you supply `defaultValue` on a <textarea>, do not pass children.",
                  );
                if (isArray(children)) {
                  if (children.length > 1)
                    throw new Error("<textarea> can only have at most one child.");
                  children = children[0];
                }
                defaultValue = children;
              }
              if (defaultValue == null) defaultValue = "";
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue),
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              // Cast `value` to a string to ensure the value is set correctly. While
              // browsers typically do this as necessary, jsdom doesn't.
              var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
              if (newValue !== node.value) node.value = newValue;
              if (props.defaultValue == null && node.defaultValue !== newValue)
                node.defaultValue = newValue;
            }
            if (defaultValue != null) node.defaultValue = toString(defaultValue);
          }
          function postMountWrapper$3(element, props) {
            var node = element; // This is in postMount because we need access to the DOM node, which is not
            // available until after the component has mounted.
            var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
            // initial value. In IE10/IE11 there is a bug where the placeholder attribute
            // will populate textContent as well.
            // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) node.value = textContent;
            }
          }
          function restoreControlledState$2(element, props) {
            // DOM component is still mounted; update
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg"; // Assumes there is no parent namespace.
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE)
              // No (or default) parent namespace: potential entry point.
              return getIntrinsicNamespace(type);
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject")
              // We're leaving SVG.
              return HTML_NAMESPACE;
            // By default, pass namespace below.
            return parentNamespace;
          }
          /* globals MSApp */ /**
           * Create a function which has 'unsafe' privileges (required by windows8 apps)
           */ var createMicrosoftUnsafeLocalFunction = function (func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction)
              return function (arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function () {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            else return func;
          };
          var reusableSVGContainer;
          /**
           * Set the innerHTML property of a node
           *
           * @param {DOMElement} node
           * @param {string} html
           * @internal
           */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) node.removeChild(node.firstChild);
                while (svgNode.firstChild) node.appendChild(svgNode.firstChild);
                return;
              }
            }
            node.innerHTML = html;
          });
          /**
           * HTML nodeType values that represent the type of the node
           */ var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          /**
           * Set the textContent property of a node. For text updates, it's faster
           * to set the `nodeValue` of the Text node directly instead of using
           * `.textContent` which will remove the existing node and create a new one.
           *
           * @param {DOMElement} node
           * @param {string} text
           * @internal
           */ var setTextContent = function (node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (
                firstChild &&
                firstChild === node.lastChild &&
                firstChild.nodeType === TEXT_NODE
              ) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          // List derived from Gecko source code:
          // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
          var shorthandToLonghand = {
            animation: [
              "animationDelay",
              "animationDirection",
              "animationDuration",
              "animationFillMode",
              "animationIterationCount",
              "animationName",
              "animationPlayState",
              "animationTimingFunction",
            ],
            background: [
              "backgroundAttachment",
              "backgroundClip",
              "backgroundColor",
              "backgroundImage",
              "backgroundOrigin",
              "backgroundPositionX",
              "backgroundPositionY",
              "backgroundRepeat",
              "backgroundSize",
            ],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: [
              "borderBottomColor",
              "borderBottomStyle",
              "borderBottomWidth",
              "borderImageOutset",
              "borderImageRepeat",
              "borderImageSlice",
              "borderImageSource",
              "borderImageWidth",
              "borderLeftColor",
              "borderLeftStyle",
              "borderLeftWidth",
              "borderRightColor",
              "borderRightStyle",
              "borderRightWidth",
              "borderTopColor",
              "borderTopStyle",
              "borderTopWidth",
            ],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: [
              "borderBlockStartColor",
              "borderBlockStartStyle",
              "borderBlockStartWidth",
            ],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: [
              "borderBottomColor",
              "borderLeftColor",
              "borderRightColor",
              "borderTopColor",
            ],
            borderImage: [
              "borderImageOutset",
              "borderImageRepeat",
              "borderImageSlice",
              "borderImageSource",
              "borderImageWidth",
            ],
            borderInlineEnd: [
              "borderInlineEndColor",
              "borderInlineEndStyle",
              "borderInlineEndWidth",
            ],
            borderInlineStart: [
              "borderInlineStartColor",
              "borderInlineStartStyle",
              "borderInlineStartWidth",
            ],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: [
              "borderBottomLeftRadius",
              "borderBottomRightRadius",
              "borderTopLeftRadius",
              "borderTopRightRadius",
            ],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: [
              "borderBottomStyle",
              "borderLeftStyle",
              "borderRightStyle",
              "borderTopStyle",
            ],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: [
              "borderBottomWidth",
              "borderLeftWidth",
              "borderRightWidth",
              "borderTopWidth",
            ],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: [
              "fontFamily",
              "fontFeatureSettings",
              "fontKerning",
              "fontLanguageOverride",
              "fontSize",
              "fontSizeAdjust",
              "fontStretch",
              "fontStyle",
              "fontVariant",
              "fontVariantAlternates",
              "fontVariantCaps",
              "fontVariantEastAsian",
              "fontVariantLigatures",
              "fontVariantNumeric",
              "fontVariantPosition",
              "fontWeight",
              "lineHeight",
            ],
            fontVariant: [
              "fontVariantAlternates",
              "fontVariantCaps",
              "fontVariantEastAsian",
              "fontVariantLigatures",
              "fontVariantNumeric",
              "fontVariantPosition",
            ],
            gap: ["columnGap", "rowGap"],
            grid: [
              "gridAutoColumns",
              "gridAutoFlow",
              "gridAutoRows",
              "gridTemplateAreas",
              "gridTemplateColumns",
              "gridTemplateRows",
            ],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: [
              "maskClip",
              "maskComposite",
              "maskImage",
              "maskMode",
              "maskOrigin",
              "maskPositionX",
              "maskPositionY",
              "maskRepeat",
              "maskSize",
            ],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: [
              "transitionDelay",
              "transitionDuration",
              "transitionProperty",
              "transitionTimingFunction",
            ],
            wordWrap: ["overflowWrap"],
          };
          /**
           * CSS properties which accept numbers but are not in units of "px".
           */ var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          };
          /**
           * @param {string} prefix vendor-specific prefix, eg: Webkit
           * @param {string} key style name, eg: transitionDuration
           * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
           * WebkitTransitionDuration
           */ function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1);
          }
          /**
           * Support style names that may come passed in prefixed by adding permutations
           * of vendor prefixes.
           */ var prefixes = ["Webkit", "ms", "Moz", "O"]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
          // infinite loop, because it iterates over the newly added props too.
          Object.keys(isUnitlessNumber).forEach(function (prop) {
            prefixes.forEach(function (prefix) {
              isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
            });
          });
          /**
           * Convert a value into the proper css writable value. The style name `name`
           * should be logical (no hyphens), as specified
           * in `CSSProperty.isUnitlessNumber`.
           *
           * @param {string} name CSS property name such as `topMargin`.
           * @param {*} value CSS property value such as `10px`.
           * @return {string} Normalized style value with dimensions applied.
           */ function dangerousStyleValue(name, value, isCustomProperty) {
            // Note that we've removed escapeTextForBrowser() calls here since the
            // whole string will be escaped when the attribute is injected into
            // the markup. If you provide unsafe user data here they can inject
            // arbitrary CSS which may be problematic (I couldn't repro this):
            // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
            // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
            // This is not an XSS hole but instead a potential CSS injection issue
            // which has lead to a greater discussion about how we're going to
            // trust URLs moving forward. See #2115901
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) return "";
            if (
              !isCustomProperty &&
              typeof value === "number" &&
              value !== 0 &&
              !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
            )
              return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
            checkCSSPropertyStringCoercion(value, name);
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          /**
           * Hyphenates a camelcased CSS property name, for example:
           *
           *   > hyphenateStyleName('backgroundColor')
           *   < "background-color"
           *   > hyphenateStyleName('MozTransition')
           *   < "-moz-transition"
           *   > hyphenateStyleName('msTransition')
           *   < "-ms-transition"
           *
           * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
           * is converted to `-ms-`.
           */ function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function () {};
          // 'msTransform' is correct, but the other prefixes should be capitalized
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function (string) {
            return string.replace(hyphenPattern, function (_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-")),
            );
          };
          var warnBadVendoredStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
            warnedStyleNames[name] = true;
            error(
              "Unsupported vendor-prefixed style property %s. Did you mean %s?",
              name,
              name.charAt(0).toUpperCase() + name.slice(1),
            );
          };
          var warnStyleValueWithSemicolon = function (name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
            warnedStyleValues[value] = true;
            error(
              'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',
              name,
              value.replace(badStyleValueWithSemicolonPattern, ""),
            );
          };
          var warnStyleValueIsNaN = function (name, value) {
            if (warnedForNaNValue) return;
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function (name, value) {
            if (warnedForInfinityValue) return;
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function (name, value) {
            if (name.indexOf("-") > -1) warnHyphenatedStyleName(name);
            else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
            else if (badStyleValueWithSemicolonPattern.test(value))
              warnStyleValueWithSemicolon(name, value);
            if (typeof value === "number") {
              if (isNaN(value)) warnStyleValueIsNaN(name, value);
              else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
            }
          };
          var warnValidStyle$1 = warnValidStyle;
          /**
           * Operations for dealing with CSS properties.
           */ /**
           * This creates a string that is expected to be equivalent to the style
           * attribute generated by server-side rendering. It by-passes warnings and
           * security checks so it's not safe to use this value for anything other than
           * comparison. It is only used in DEV for SSR validation.
           */ function createDangerousStringForStyles(styles) {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) continue;
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized +=
                  delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
          /**
           * Sets the value for multiple styles on a node.  If a value is specified as
           * '' (empty string), the corresponding style property will be unset.
           *
           * @param {DOMElement} node
           * @param {object} styles
           */ function setValueForStyles(node, styles) {
            var style = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) continue;
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") styleName = "cssFloat";
              if (isCustomProperty) style.setProperty(styleName, styleValue);
              else style[styleName] = styleValue;
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          /**
           * Given {color: 'red', overflow: 'hidden'} returns {
           *   color: 'color',
           *   overflowX: 'overflow',
           *   overflowY: 'overflow',
           * }. This can be read as "the overflowY property was set by the overflow
           * shorthand". That is, the values are the property that each was derived from.
           */ function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) expanded[longhands[i]] = key;
            }
            return expanded;
          }
          /**
           * When mixing shorthand and longhand property names, we warn during updates if
           * we expect an incorrect result to occur. In particular, we warn for:
           *
           * Updating a shorthand property (longhand gets overwritten):
           *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
           *   becomes .style.font = 'baz'
           * Removing a shorthand property (longhand gets lost too):
           *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
           *   becomes .style.font = ''
           * Removing a longhand property (should revert to shorthand; doesn't):
           *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
           *   becomes .style.fontVariant = ''
           */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            if (!nextStyles) return;
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error(
                  "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                  isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating",
                  originalKey,
                  correctOriginalKey,
                );
              }
            }
          }
          // For HTML, certain tags should omit their close tag. We keep a list for
          // those special-case tags.
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true, // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          // `omittedCloseTags` except that `menuitem` should still have its closing tag.
          var voidElementTags = assign(
            {
              menuitem: true,
            },
            omittedCloseTags,
          );
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) return;
            // Note the use of `==` which checks for null or undefined.
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null)
                throw new Error(
                  tag +
                    " is a void element tag and must neither have `children` nor " +
                    "use `dangerouslySetInnerHTML`.",
                );
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null)
                throw new Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`.",
                );
              if (
                typeof props.dangerouslySetInnerHTML !== "object" ||
                !(HTML in props.dangerouslySetInnerHTML)
              )
                throw new Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.",
                );
            }
            if (
              !props.suppressContentEditableWarning &&
              props.contentEditable &&
              props.children != null
            )
              error(
                "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.",
              );
            if (props.style != null && typeof props.style !== "object")
              throw new Error(
                "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.",
              );
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) return typeof props.is === "string";
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          // When adding attributes to the HTML or SVG allowed attribute list, be sure to
          // also add them to this module to ensure casing and incorrect name
          // warnings.
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan",
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0,
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.
              if (correctName == null) {
                error(
                  "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                  name,
                );
                warnedProperties[name] = true;
                return true;
              } // aria-* attributes should be lowercase; suggest the lowercase version.
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                ? lowerCasedName
                : null; // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              } // aria-* attributes should be lowercase; suggest the lowercase version.
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) invalidProps.push(key);
            }
            var unknownPropString = invalidProps
              .map(function (prop) {
                return "`" + prop + "`";
              })
              .join(", ");
            if (invalidProps.length === 1)
              error(
                "Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                unknownPropString,
                type,
              );
            else if (invalidProps.length > 1)
              error(
                "Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                unknownPropString,
                type,
              );
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) return;
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            if (type !== "input" && type !== "textarea" && type !== "select") return;
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple)
                error(
                  "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
                  type,
                );
              else
                error(
                  "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
                  type,
                );
            }
          }
          var validateProperty$1 = function () {};
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function (tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
              return true;
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error(
                "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.",
              );
              warnedProperties$1[name] = true;
              return true;
            } // We can't rely on the event system being injected on the server.
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies,
                possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) return true;
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName)
                ? possibleRegistrationNames[lowerCasedName]
                : null;
              if (registrationName != null) {
                error(
                  "Invalid event handler property `%s`. Did you mean `%s`?",
                  name,
                  registrationName,
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              // If no event plugins have been injected, we are in a server environment.
              // So we can't tell if the event name is correct for sure, but we can filter
              // out known bad ones like `onclick`. We can't suggest a specific replacement though.
              if (INVALID_EVENT_NAME_REGEX.test(name))
                error(
                  "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
                  name,
                );
              warnedProperties$1[name] = true;
              return true;
            } // Let the ARIA attribute hook validate ARIA attributes
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
            if (lowerCasedName === "innerhtml") {
              error(
                "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.",
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error(
                "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.",
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (
              lowerCasedName === "is" &&
              value !== null &&
              value !== undefined &&
              typeof value !== "string"
            ) {
              error(
                "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
                typeof value,
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error(
                "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
                name,
              );
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              // Unknown attributes should have lowercase casing since that's how they
              // will be cased anyway with server rendering.
              error(
                "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
                name,
                lowerCasedName,
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (
              typeof value === "boolean" &&
              shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
            ) {
              if (value)
                error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                  value,
                  name,
                  name,
                  value,
                  name,
                );
              else
                error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                  value,
                  name,
                  name,
                  value,
                  name,
                  name,
                  name,
                );
              warnedProperties$1[name] = true;
              return true;
            } // Now that we've validated casing, do not validate
            // data types for reserved props
            if (isReserved) return true;
            // Warn when a known attribute is a bad type
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            } // Warn when passing the strings 'false' or 'true' into a boolean prop
            if (
              (value === "false" || value === "true") &&
              propertyInfo !== null &&
              propertyInfo.type === BOOLEAN
            ) {
              error(
                "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                value,
                name,
                value === "false"
                  ? "The browser will interpret it as a truthy value."
                  : 'Although this works, it will not work as expected if you pass the string "false".',
                name,
                value,
              );
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
          var warnUnknownProperties = function (type, props, eventRegistry) {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) unknownProps.push(key);
            }
            var unknownPropString = unknownProps
              .map(function (prop) {
                return "`" + prop + "`";
              })
              .join(", ");
            if (unknownProps.length === 1)
              error(
                "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                unknownPropString,
                type,
              );
            else if (unknownProps.length > 1)
              error(
                "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                unknownPropString,
                type,
              );
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) return;
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 2;
          var IS_CAPTURE_PHASE = 4;
          // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
          // we call willDeferLaterForLegacyFBSupport, thus not bailing out
          // will result in endless cycles like an infinite loop.
          // We also don't want to defer during event replaying.
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =
            IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          // This exists to avoid circular dependency between ReactDOMEventReplaying
          // and DOMPluginEventSystem.
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            if (currentReplayingEvent !== null)
              error(
                "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.",
              );
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            if (currentReplayingEvent === null)
              error(
                "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.",
              );
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          /**
           * Gets the target node from a native browser event by accounting for
           * inconsistencies in browser DOM APIs.
           *
           * @param {object} nativeEvent Native browser event.
           * @return {DOMEventTarget} Target node.
           */ function getEventTarget(nativeEvent) {
            // Fallback to nativeEvent.srcElement for IE9
            // https://github.com/facebook/react/issues/12506
            var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
            if (target.correspondingUseElement) target = target.correspondingUseElement;
            // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
            // @see http://www.quirksmode.org/js/events_properties.html
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            // We perform this translation at the end of the event loop so that we
            // always receive the correct fiber here
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance)
              // Unmounted
              return;
            if (typeof restoreImpl !== "function")
              throw new Error(
                "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.",
              );
            var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) restoreQueue.push(target);
              else restoreQueue = [target];
            } else restoreTarget = target;
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) return;
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets)
              for (var i = 0; i < queuedTargets.length; i++) restoreStateOfTarget(queuedTargets[i]);
          }
          // the renderer. Such as when we're dispatching events or if third party
          // libraries need to call batchedUpdates. Eventually, this API will go away when
          // everything is batched by default. We'll then have a similar API to opt-out of
          // scheduled work and instead do synchronous work.
          // Defaults
          var batchedUpdatesImpl = function (fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function () {};
          var isInsideEventHandler = false;
          function finishEventHandler() {
            // Here we wait until all updates have propagated, which is important
            // when using controlled components within layers:
            // https://github.com/facebook/react/issues/1698
            // Then we restore state of any controlled component.
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              // If a controlled event was fired, we may need to restore the state of
              // the DOM node back to the controlled value. This is necessary when React
              // bails out of the update without touching the DOM.
              // TODO: Restore state in the microtask, after the discrete updates flush,
              // instead of early flushing them here.
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler)
              // If we are currently inside another batch, we need to wait until it
              // fully completes before restoring state.
              return fn(a, b);
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          } // TODO: Replace with flushSync
          function setBatchingImplementation(
            _batchedUpdatesImpl,
            _discreteUpdatesImpl,
            _flushSyncImpl,
          ) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          /**
           * @param {object} inst The instance, which is the source of events.
           * @param {string} registrationName Name of listener (e.g. `onClick`).
           * @return {?function} The stored callback.
           */ function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null)
              // Work in progress (ex: onload events in incremental mode).
              return null;
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null)
              // Work in progress.
              return null;
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
            if (listener && typeof listener !== "function")
              throw new Error(
                "Expected `" +
                  registrationName +
                  "` listener to be a function, instead got a value of `" +
                  typeof listener +
                  "` type.",
              );
            return listener;
          }
          var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
          // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
          if (canUseDOM)
            try {
              var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
              Object.defineProperty(options, "passive", {
                get: function () {
                  passiveBrowserEventsSupported = true;
                },
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error) {
              this.onError(error);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          // In DEV mode, we swap out invokeGuardedCallback for a special version
          // that plays more nicely with the browser's DevTools. The idea is to preserve
          // "Pause on exceptions" behavior. Because React wraps all user-provided
          // functions in invokeGuardedCallback, and the production version of
          // invokeGuardedCallback uses a try-catch, all user exceptions are treated
          // like caught exceptions, and the DevTools won't pause unless the developer
          // takes the extra step of enabling pause on caught exceptions. This is
          // unintuitive, though, because even though React has caught the error, from
          // the developer's perspective, the error is uncaught.
          //
          // To preserve the expected "Pause on exceptions" behavior, we don't use a
          // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
          // DOM node, and call the user-provided callback from inside an event handler
          // for that fake event. If the callback throws, the error is "captured" using
          // a global event handler. But because the error happens in a different
          // event loop context, it does not interrupt the normal program flow.
          // Effectively, this gives us try-catch behavior without actually using
          // try-catch. Neat!
          // Check that the browser supports the APIs we need to implement our special
          // DEV version of invokeGuardedCallback
          if (
            typeof window !== "undefined" &&
            typeof window.dispatchEvent === "function" &&
            typeof document !== "undefined" &&
            typeof document.createEvent === "function"
          ) {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f,
            ) {
              // If document doesn't exist we know for sure we will crash in this method
              // when we call document.createEvent(). However this can cause confusing
              // errors: https://github.com/facebook/create-react-app/issues/3482
              // So we preemptively throw with a better message instead.
              if (typeof document === "undefined" || document === null)
                throw new Error(
                  "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.",
                );
              var evt = document.createEvent("Event");
              var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
              // set this to true at the beginning, then set it to false right after
              // calling the function. If the function errors, `didError` will never be
              // set to false. This strategy works even if the browser is flaky and
              // fails to call our global error handler, because it doesn't rely on
              // the error event at all.
              var didError = true; // Keeps track of the value of window.event so that we can reset it
              // during the callback to let user code access window.event in the
              // browsers that support it.
              var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
              // dispatching: https://github.com/facebook/react/issues/13688
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event"))
                  window.event = windowEvent;
              } // Create an event handler for our fake event. We will synchronously
              // dispatch our fake event using `dispatchEvent`. Inside the handler, we
              // call the user-provided callback.
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              } // Create a global error event handler. We use this to capture the value
              // that was thrown. It's possible that this error handler will fire more
              // than once; for example, if non-React code also calls `dispatchEvent`
              // and a handler for that event throws. We should be resilient to most of
              // those cases. Even if our error event handler fires more than once, the
              // last error event is always used. If the callback actually does error,
              // we know that the last error event is the correct one, because it's not
              // possible for anything else to have happened in between our callback
              // erroring and the code that follows the `dispatchEvent` call below. If
              // the callback doesn't error, but the error event was fired, we know to
              // ignore it because `didError` will be false, as described above.
              var error; // Use this to track whether the error event is ever called.
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0)
                  isCrossOriginError = true;
                if (event.defaultPrevented) {
                  // Some other error handler has prevented default.
                  // Browsers silence the error report if this happens.
                  // We'll remember this to later decide whether to log it or not.
                  if (error != null && typeof error === "object")
                    try {
                      error._suppressLogging = true;
                    } catch (inner) {}
                }
              } // Create a fake event type.
              var evtType = "react-" + (name ? name : "invokeguardedcallback"); // Attach our event handlers
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
              // errors, it will trigger our global error handler.
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor)
                Object.defineProperty(window, "event", windowEventDescriptor);
              if (didCall && didError) {
                if (!didSetError)
                  // The callback errored, but the error event never fired.
                  // eslint-disable-next-line react-internal/prod-error-codes
                  error = new Error(
                    "An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.",
                  );
                else if (isCrossOriginError)
                  // eslint-disable-next-line react-internal/prod-error-codes
                  error = new Error(
                    "A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.",
                  );
                this.onError(error);
              } // Remove our event listeners
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null; // Used by event system to capture/rethrow the first error.
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function (error) {
              hasError = true;
              caughtError = error;
            },
          };
          /**
           * Call a function while guarding against errors that happens within it.
           * Returns an error if it throws, otherwise null.
           *
           * In production, this is implemented using a try-catch. The reason we don't
           * use a try-catch directly is so that we can swap out a different
           * implementation in DEV mode.
           *
           * @param {String} name of the guard to use for logging or debugging
           * @param {Function} func The function to invoke
           * @param {*} context The context to use when calling the function
           * @param {...*} args Arguments for function
           */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          /**
           * Same as invokeGuardedCallback, but instead of returning an error, it stores
           * it in a global so it can be rethrown by `rethrowCaughtError` later.
           * TODO: See if caughtError and rethrowError can be unified.
           *
           * @param {String} name of the guard to use for logging or debugging
           * @param {Function} func The function to invoke
           * @param {*} context The context to use when calling the function
           * @param {...*} args Arguments for function
           */ function invokeGuardedCallbackAndCatchFirstError(
            name,
            func,
            context,
            a,
            b,
            c,
            d,
            e,
            f,
          ) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
              }
            }
          }
          /**
           * During execution of guarded functions we will capture the first error which
           * we will rethrow to be handled by the top level error handler.
           */ function rethrowCaughtError() {
            if (hasRethrowError) {
              var error = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error = caughtError;
              hasError = false;
              caughtError = null;
              return error;
            } else
              throw new Error(
                "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.",
              );
          }
          /**
           * `ReactInstanceMap` maintains a mapping from a public facing stateful
           * instance (key) and the internal representation (value). This allows public
           * methods to accept the user facing instance as an argument and map them back
           * to internal methods.
           *
           * Note that this module is currently shared and assumed to be stateless.
           * If this becomes an actual Map, that will break.
           */ function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== undefined;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          // Don't change these two values. They're used by React Dev Tools.
          var NoFlags = /*                      */ 0;
          var PerformedWork = /*                */ 1; // You can change the rest (and add more).
          var Placement = /*                    */ 2;
          var Update = /*                       */ 4;
          var ChildDeletion = /*                */ 16;
          var ContentReset = /*                 */ 32;
          var Callback = /*                     */ 64;
          var DidCapture = /*                   */ 128;
          var ForceClientRender = /*            */ 256;
          var Ref = /*                          */ 512;
          var Snapshot = /*                     */ 1024;
          var Passive = /*                      */ 2048;
          var Hydrating = /*                    */ 4096;
          var Visibility = /*                   */ 8192;
          var StoreConsistency = /*             */ 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
          var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
          var Incomplete = /*                   */ 32768;
          var ShouldCapture = /*                */ 65536;
          var ForceUpdateForLegacySuspense = /* */ 131072;
          var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
          // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
          // This enables us to defer more work in the unmount case,
          // since we can defer traversing the tree during layout to look for Passive effects,
          // and instead rely on the static flag as a signal that there may be cleanup work.
          var RefStatic = /*                    */ 2097152;
          var LayoutStatic = /*                 */ 4194304;
          var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
          // without traversing the entire tree after every commit for
          // double invoking
          var MountLayoutDev = /*               */ 16777216;
          var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
          // don't contain effects, by checking subtreeFlags.
          var BeforeMutationMask = Update | Snapshot | 0; // flag logic (see #20043)
          var MutationMask =
            Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
          var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
          // This allows certain concepts to persist without recalculating them,
          // e.g. whether a subtree contains passive effects or portals.
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              // If there is no alternate, this might be a new tree that isn't inserted
              // yet. If it is, then it will have a pending insertion effect on it.
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags)
                  // This is an insertion or in-progress hydration. The nearest possible
                  // mounted fiber is the parent but we need to continue to figure out
                  // if that one is still mounted.
                  nearestMounted = node.return;
                nextNode = node.return;
              } while (nextNode);
            } else while (node.return) node = node.return;
            if (node.tag === HostRoot)
              // TODO: Check if this was a nested HostRoot when used with
              // renderContainerIntoSubtree.
              return nearestMounted;
            // If we didn't hit the root, that means that we're in an disconnected tree
            // that has been unmounted.
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
              }
              if (suspenseState !== null) return suspenseState.dehydrated;
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender)
                error(
                  "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
                  getComponentNameFromFiber(ownerFiber) || "A component",
                );
              instance._warnedAboutRefsInRender = true;
            }
            var fiber = get(component);
            if (!fiber) return false;
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber)
              throw new Error("Unable to find node on an unmounted component.");
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              // If there is no alternate, then we only need to check if it is mounted.
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null)
                throw new Error("Unable to find node on an unmounted component.");
              if (nearestMounted !== fiber) return null;
              return fiber;
            } // If we have two possible branches, we'll walk backwards up to the root
            // to see what path the root points to. On the way we may hit one of the
            // special cases and we'll deal with them.
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) break;
              var parentB = parentA.alternate;
              if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                } // If there's no parent, we're at the root.
                break;
              } // If both copies of the parent fiber point to the same child, we can
              // assume that the child is current. This happens when we bailout on low
              // priority: the bailed out fiber's child reuses the current child.
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    // We've determined that A is the current branch.
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    // We've determined that B is the current branch.
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
              } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  // Search parent B's child set
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild)
                    throw new Error(
                      "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.",
                    );
                }
              }
              if (a.alternate !== b)
                throw new Error(
                  "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.",
                );
            } // If the root is not a host container, we're in a disconnected tree. I.e.
            // unmounted.
            if (a.tag !== HostRoot)
              throw new Error("Unable to find node on an unmounted component.");
            if (a.stateNode.current === a)
              // We've determined that A is the current branch.
              return fiber;
            // Otherwise B has to be current branch.
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            // Next we'll drill down this component to find the first HostComponent/Text.
            if (node.tag === HostComponent || node.tag === HostText) return node;
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) return match;
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null
              ? findCurrentHostFiberWithNoPortalsImpl(currentParent)
              : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            // Next we'll drill down this component to find the first HostComponent/Text.
            if (node.tag === HostComponent || node.tag === HostText) return node;
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
              }
              child = child.sibling;
            }
            return null;
          }
          // This module only exists as an ESM wrapper around the external CommonJS
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          // this doesn't actually exist on the scheduler, but it *does*
          // on scheduler/unstable_mock, which we'll need for internal testing
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined")
              // No DevTools
              return false;
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled)
              // This isn't a real property on the hook, but it can be set to opt out
              // of DevTools integration and associated warnings and logs.
              // https://github.com/facebook/react/issues/3877
              return true;
            if (!hook.supportsFiber) {
              error(
                "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools",
              );
              return true;
            }
            try {
              if (enableSchedulingProfiler)
                // Conditionally inject these hooks only if Timeline profiler is supported by this build.
                // This gives DevTools a way to feature detect that isn't tied to version number
                // (since profiling and timeline are controlled by different feature flags).
                internals = assign({}, internals, {
                  getLaneLabelMap: getLaneLabelMap,
                  injectProfilingHooks: injectProfilingHooks,
                });
              rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
              injectedHook = hook;
            } catch (err) {
              error("React instrumentation encountered an error: %s.", err);
            }
            if (hook.checkDCE)
              // This is the real DevTools.
              return true;
            // This is likely a hook installed by Fast Refresh runtime.
            else return false;
          }
          function onScheduleRoot(root, children) {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function")
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
          }
          function onCommitRoot(root, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function")
              try {
                var didError = (root.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
                } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
          }
          function onPostCommitRoot(root) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function")
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function")
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            if (typeof unstable_yieldValue === "function") {
              // We're in a test because Scheduler.unstable_yieldValue only exists
              // in SchedulerMock. To reduce the noise in strict mode tests,
              // suppress warnings and disable scheduler yielding during the double render
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function")
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
          } // Profiler API hooks
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            var map = new Map();
            var lane = 1;
            for (var index = 0; index < TotalLanes; index++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
          function markCommitStarted(lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markCommitStarted === "function"
            )
              injectedProfilingHooks.markCommitStarted(lanes);
          }
          function markCommitStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markCommitStopped === "function"
            )
              injectedProfilingHooks.markCommitStopped();
          }
          function markComponentRenderStarted(fiber) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentRenderStarted === "function"
            )
              injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
          function markComponentRenderStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentRenderStopped === "function"
            )
              injectedProfilingHooks.markComponentRenderStopped();
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function"
            )
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
          function markComponentPassiveEffectMountStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function"
            )
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function"
            )
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
          function markComponentPassiveEffectUnmountStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function"
            )
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function"
            )
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
          function markComponentLayoutEffectMountStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function"
            )
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function"
            )
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
          function markComponentLayoutEffectUnmountStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function"
            )
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentErrored === "function"
            )
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentSuspended === "function"
            )
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
          function markLayoutEffectsStarted(lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markLayoutEffectsStarted === "function"
            )
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
          function markLayoutEffectsStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markLayoutEffectsStopped === "function"
            )
              injectedProfilingHooks.markLayoutEffectsStopped();
          }
          function markPassiveEffectsStarted(lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markPassiveEffectsStarted === "function"
            )
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
          function markPassiveEffectsStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markPassiveEffectsStopped === "function"
            )
              injectedProfilingHooks.markPassiveEffectsStopped();
          }
          function markRenderStarted(lanes) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderStarted === "function"
            )
              injectedProfilingHooks.markRenderStarted(lanes);
          }
          function markRenderYielded() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderYielded === "function"
            )
              injectedProfilingHooks.markRenderYielded();
          }
          function markRenderStopped() {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderStopped === "function"
            )
              injectedProfilingHooks.markRenderStopped();
          }
          function markRenderScheduled(lane) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderScheduled === "function"
            )
              injectedProfilingHooks.markRenderScheduled(lane);
          }
          function markForceUpdateScheduled(fiber, lane) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markForceUpdateScheduled === "function"
            )
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
          function markStateUpdateScheduled(fiber, lane) {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markStateUpdateScheduled === "function"
            )
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
          var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
          var ConcurrentMode = /*                 */ 1;
          var ProfileMode = /*                    */ 2;
          var StrictLegacyMode = /*               */ 8;
          var StrictEffectsMode = /*              */ 16;
          // TODO: This is pretty well supported by browsers. Maybe we can drop it.
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
          // Based on:
          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) return 32;
            return (31 - ((log(asUint) / LN2) | 0)) | 0;
          }
          // If those values are changed that package should be rebuilt and redeployed.
          var TotalLanes = 31;
          var NoLanes = /*                        */ 0;
          var NoLane = /*                          */ 0;
          var SyncLane = /*                        */ 1;
          var InputContinuousHydrationLane = /*    */ 2;
          var InputContinuousLane = /*             */ 4;
          var DefaultHydrationLane = /*            */ 8;
          var DefaultLane = /*                     */ 16;
          var TransitionHydrationLane = /*                */ 32;
          var TransitionLanes = /*                       */ 4194240;
          var TransitionLane1 = /*                        */ 64;
          var TransitionLane2 = /*                        */ 128;
          var TransitionLane3 = /*                        */ 256;
          var TransitionLane4 = /*                        */ 512;
          var TransitionLane5 = /*                        */ 1024;
          var TransitionLane6 = /*                        */ 2048;
          var TransitionLane7 = /*                        */ 4096;
          var TransitionLane8 = /*                        */ 8192;
          var TransitionLane9 = /*                        */ 16384;
          var TransitionLane10 = /*                       */ 32768;
          var TransitionLane11 = /*                       */ 65536;
          var TransitionLane12 = /*                       */ 131072;
          var TransitionLane13 = /*                       */ 262144;
          var TransitionLane14 = /*                       */ 524288;
          var TransitionLane15 = /*                       */ 1048576;
          var TransitionLane16 = /*                       */ 2097152;
          var RetryLanes = /*                            */ 130023424;
          var RetryLane1 = /*                             */ 4194304;
          var RetryLane2 = /*                             */ 8388608;
          var RetryLane3 = /*                             */ 16777216;
          var RetryLane4 = /*                             */ 33554432;
          var RetryLane5 = /*                             */ 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = /*          */ 134217728;
          var NonIdleLanes = /*                          */ 268435455;
          var IdleHydrationLane = /*               */ 268435456;
          var IdleLane = /*                        */ 536870912;
          var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
          // It should be kept in sync with the Lanes values above.
          function getLabelForLane(lane) {
            if (lane & SyncLane) return "Sync";
            if (lane & InputContinuousHydrationLane) return "InputContinuousHydration";
            if (lane & InputContinuousLane) return "InputContinuous";
            if (lane & DefaultHydrationLane) return "DefaultHydration";
            if (lane & DefaultLane) return "Default";
            if (lane & TransitionHydrationLane) return "TransitionHydration";
            if (lane & TransitionLanes) return "Transition";
            if (lane & RetryLanes) return "Retry";
            if (lane & SelectiveHydrationLane) return "SelectiveHydration";
            if (lane & IdleHydrationLane) return "IdleHydration";
            if (lane & IdleLane) return "Idle";
            if (lane & OffscreenLane) return "Offscreen";
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                error("Should have found matching lanes. This is a bug in React.");
                return lanes;
            }
          }
          function getNextLanes(root, wipLanes) {
            // Early bailout if there's no pending work left.
            var pendingLanes = root.pendingLanes;
            if (pendingLanes === NoLanes) return NoLanes;
            var nextLanes = NoLanes;
            var suspendedLanes = root.suspendedLanes;
            var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes)
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes)
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            } else {
              // The only remaining work is Idle.
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
              else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
            }
            if (nextLanes === NoLanes)
              // This should only be reachable if we're suspended
              // TODO: Consider warning in this path if a fallback timer is not scheduled.
              return NoLanes;
            // If we're already in the middle of a render, switching lanes will interrupt
            // it and we'll lose our progress. We should only do this if the new lanes are
            // higher priority.
            if (
              wipLanes !== NoLanes &&
              wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
              // bother waiting until the root is complete.
              (wipLanes & suspendedLanes) === NoLanes
            ) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)
              )
                // Keep working on the existing in-progress tree. Do not interrupt.
                return wipLanes;
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes)
              // When updates are sync by default, we entangle continuous priority updates
              // and default updates, so they render in the same batch. The only reason
              // they use separate lanes is because continuous updates should interrupt
              // transitions, but default updates should not.
              nextLanes |= pendingLanes & DefaultLane;
            // Check for entangled lanes and add them to the batch.
            //
            // A lane is said to be entangled with another when it's not allowed to render
            // in a batch that does not also include the other lane. Typically we do this
            // when multiple updates have the same source, and we only want to respond to
            // the most recent event from that source.
            //
            // Note that we apply entanglements *after* checking for partial work above.
            // This means that if a lane is entangled during an interleaved event while
            // it's already rendering, we won't interrupt it. This is intentional, since
            // entanglement is usually "best effort": we'll try our best to render the
            // lanes in the same batch, but it's not worth throwing out partially
            // completed work in order to do it.
            // TODO: Reconsider this. The counter-argument is that the partial work
            // represents an intermediate state, which we don't want to show to the user.
            // And by spending extra time finishing it, we're increasing the amount of
            // time it takes to show the final state, which is what they are actually
            // waiting for.
            //
            // For those exceptions where entanglement is semantically important, like
            // useMutableSource, we should ensure that there is no partial work at the
            // time we apply the entanglement.
            var entangledLanes = root.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root, lanes) {
            var eventTimes = root.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              var eventTime = eventTimes[index];
              if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5000;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
              default:
                error("Should have found matching lanes. This is a bug in React.");
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root, currentTime) {
            // TODO: This gets called every time we yield. We can optimize by storing
            // the earliest expiration time on the root. Then use that to quickly bail out
            // of this function.
            var pendingLanes = root.pendingLanes;
            var suspendedLanes = root.suspendedLanes;
            var pingedLanes = root.pingedLanes;
            var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
            // expiration time. If so, we'll assume the update is being starved and mark
            // it as expired to force it to finish.
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              var expirationTime = expirationTimes[index];
              if (expirationTime === NoTimestamp) {
                // Found a pending lane with no expiration time. If it's not suspended, or
                // if it's pinged, assume it's CPU-bound. Compute a new expiration time
                // using the current time.
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes)
                  // Assumes timestamps are monotonically increasing.
                  expirationTimes[index] = computeExpirationTime(lane, currentTime);
              } else if (expirationTime <= currentTime)
                // This lane expired
                root.expiredLanes |= lane;
              lanes &= ~lane;
            }
          } // This returns the highest priority pending lanes regardless of whether they
          // are suspended.
          function getHighestPriorityPendingLanes(root) {
            return getHighestPriorityLanes(root.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root) {
            var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
            if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root, lanes) {
            var SyncDefaultLanes =
              InputContinuousHydrationLane |
              InputContinuousLane |
              DefaultHydrationLane |
              DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root, lanes) {
            // This is a separate check from includesBlockingLane because a lane can
            // expire after a render has already started.
            return (lanes & root.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            // Cycle through the lanes, assigning each new transition to the next lane.
            // In most cases, this means every transition gets its own lane, until we
            // run out of lanes and cycle back to the beginning.
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes)
              nextTransitionLane = TransitionLane1;
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            // This wrapper function gets inlined. Only exists so to communicate that it
            // doesn't matter which bit is selected; you can pick any bit without
            // affecting the algorithms where its used. Here I'm using
            // getHighestPriorityLane because it requires the fewest operations.
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set, subset) {
            return (set & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set, subset) {
            return set & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          } // Seems redundant, but it changes the type from a single lane (used for
          // updates) to a group of lanes (used for flushing work).
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            // This works because the bit ranges decrease in priority as you go left.
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            // Intentionally pushing one by one.
            // https://v8.dev/blog/elements-kinds#avoid-creating-holes
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) laneMap.push(initial);
            return laneMap;
          }
          function markRootUpdated(root, updateLane, eventTime) {
            root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
            // could unblock them. Clear the suspended lanes so that we can try rendering
            // them again.
            //
            // TODO: We really only need to unsuspend only lanes that are in the
            // `subtreeLanes` of the updated fiber, or the update lanes of the return
            // path. This would exclude suspended updates in an unrelated sibling tree,
            // since there's no way for this update to unblock it.
            //
            // We don't do this if the incoming update is idle, because we never process
            // idle updates until after all the regular updates have finished; there's no
            // way it could unblock a transition.
            if (updateLane !== IdleLane) {
              root.suspendedLanes = NoLanes;
              root.pingedLanes = NoLanes;
            }
            var eventTimes = root.eventTimes;
            var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
            // recent event, and we assume time is monotonically increasing.
            eventTimes[index] = eventTime;
          }
          function markRootSuspended(root, suspendedLanes) {
            root.suspendedLanes |= suspendedLanes;
            root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
            var expirationTimes = root.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              expirationTimes[index] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root, pingedLanes, eventTime) {
            root.pingedLanes |= root.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root, remainingLanes) {
            var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
            root.pendingLanes = remainingLanes; // Let's try everything again
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
            root.expiredLanes &= remainingLanes;
            root.mutableReadLanes &= remainingLanes;
            root.entangledLanes &= remainingLanes;
            var entanglements = root.entanglements;
            var eventTimes = root.eventTimes;
            var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              entanglements[index] = NoLanes;
              eventTimes[index] = NoTimestamp;
              expirationTimes[index] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root, entangledLanes) {
            // In addition to entangling each of the given lanes with each other, we also
            // have to consider _transitive_ entanglements. For each lane that is already
            // entangled with *any* of the given lanes, that lane is now transitively
            // entangled with *all* the given lanes.
            //
            // Translated: If C is entangled with A, then entangling A with B also
            // entangles C with B.
            //
            // If this is hard to grasp, it might help to intentionally break this
            // function and look at the tests that fail in ReactTransition-test.js. Try
            // commenting out one of the conditions below.
            var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
            var entanglements = root.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index;
              if (
                (lane & entangledLanes) | // Is this lane transitively entangled with the newly entangled lanes?
                (entanglements[index] & entangledLanes)
              )
                entanglements[index] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root, renderLanes) {
            var renderLane = getHighestPriorityLane(renderLanes);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
            } // Check if the lane we chose is suspended. If so, that indicates that we
            // already attempted and failed to hydrate at that level. Also check if we're
            // already rendering that lane, which is rare but could happen.
            if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane)
              // Give up trying to hydrate and fall back to client render.
              return NoLane;
            return lane;
          }
          function addFiberToLanesMap(root, fiber, lanes) {
            if (!isDevToolsPresent) return;
            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index = laneToIndex(lanes);
              var lane = 1 << index;
              var updaters = pendingUpdatersLaneMap[index];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root, lanes) {
            if (!isDevToolsPresent) return;
            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
            var memoizedUpdaters = root.memoizedUpdaters;
            while (lanes > 0) {
              var index = laneToIndex(lanes);
              var lane = 1 << index;
              var updaters = pendingUpdatersLaneMap[index];
              if (updaters.size > 0) {
                updaters.forEach(function (fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate))
                    memoizedUpdaters.add(fiber);
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root, lanes) {
            return null;
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
            if (!isHigherEventPriority(ContinuousEventPriority, lane))
              return ContinuousEventPriority;
            if (includesNonIdleWork(lane)) return DefaultEventPriority;
            return IdleEventPriority;
          }
          // This is imported by the event replaying implementation in React DOM. It's
          // in a separate file to break a circular dependency between the renderer and
          // the reconciler.
          function isRootDehydrated(root) {
            var currentState = root.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          } // TODO: Upgrade this definition once we're on a newer version of Flow that
          // has this definition built-in.
          var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
          var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
          // if the last target was dehydrated.
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit",
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent,
          ) {
            return {
              blockedOn: blockedOn,
              domEventName: domEventName,
              eventSystemFlags: eventSystemFlags,
              nativeEvent: nativeEvent,
              targetContainers: [targetContainer],
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout":
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              case "gotpointercapture":
              case "lostpointercapture":
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(
            existingQueuedEvent,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent,
          ) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent,
              );
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null)
                  // Attempt to increase the priority of this target.
                  attemptContinuousHydration(_fiber2);
              }
              return queuedEvent;
            } // If we have already queued this exact event, then it's because
            // the different event systems have different DOM event listeners.
            // We can accumulate the flags, and the targetContainers, and
            // store a single event to be replayed.
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1)
              targetContainers.push(targetContainer);
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent,
          ) {
            // These set relatedTarget to null because the replayed event will be treated as if we
            // moved from outside the window (no target) onto the target once it hydrates.
            // Instead of mutating we could clone the event.
            switch (domEventName) {
              case "focusin":
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedFocus,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  focusEvent,
                );
                return true;
              case "dragenter":
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedDrag,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  dragEvent,
                );
                return true;
              case "mouseover":
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedMouse,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  mouseEvent,
                );
                return true;
              case "pointerover":
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(
                  pointerId,
                  accumulateOrCreateContinuousQueuedReplayableEvent(
                    queuedPointers.get(pointerId) || null,
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    targetContainer,
                    pointerEvent,
                  ),
                );
                return true;
              case "gotpointercapture":
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(
                  _pointerId2,
                  accumulateOrCreateContinuousQueuedReplayableEvent(
                    queuedPointerCaptures.get(_pointerId2) || null,
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    targetContainer,
                    _pointerEvent,
                  ),
                );
                return true;
            }
            return false;
          } // Check if this target is unblocked. Returns true if it's unblocked.
          function attemptExplicitHydrationTarget(queuedTarget) {
            // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
            // Try to unify them. It's a bit tricky since it would require two return
            // values.
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    // We're blocked on hydrating this boundary.
                    // Increase its priority.
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function () {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root = nearestMounted.stateNode;
                  if (isRootDehydrated(root)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                    // a root other than sync.
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            // TODO: This will read the priority if it's dispatched by the React
            // event system but not native events. Should read window.event.type, like
            // we do for updates (getCurrentEventPriority).
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target: target,
              priority: updatePriority,
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              // Stop once we hit the first target with lower priority than
              if (
                !isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)
              )
                break;
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) return false;
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(
                queuedEvent.domEventName,
                queuedEvent.eventSystemFlags,
                targetContainer,
                queuedEvent.nativeEvent,
              );
              if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              } else {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              } // This target container was successfully dispatched. Try the next.
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus))
              queuedFocus = null;
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag))
              queuedDrag = null;
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse))
              queuedMouse = null;
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(
                  Scheduler.unstable_NormalPriority,
                  replayUnblockedEvents,
                );
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            // Mark anything that was blocked on this as no longer blocked
            // and eligible for a replay.
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
              // worth it because we expect very few discrete events to queue up and once
              // we are actually fully unblocked it will be fast to replay them.
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
              }
            }
            if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            var unblock = function (queuedEvent) {
              return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) break;
              else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null)
                  // We're unblocked.
                  queuedExplicitHydrationTargets.shift();
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
          var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
          // We'd like to remove this but it's not clear if this is safe.
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(
            targetContainer,
            domEventName,
            eventSystemFlags,
          ) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) return;
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent,
            );
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent,
          ) {
            var blockedOn = findInstanceBlockingEvent(
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent,
            );
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer,
              );
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (
              queueIfContinuousEvent(
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent,
              )
            ) {
              nativeEvent.stopPropagation();
              return;
            } // We need to clear only if we didn't queue because
            // queueing is accumulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (
              eventSystemFlags & IS_CAPTURE_PHASE &&
              isDiscreteEventThatRequiresHydration(domEventName)
            ) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  nativeEvent,
                );
                if (nextBlockedOn === null)
                  dispatchEventForPluginEventSystem(
                    domEventName,
                    eventSystemFlags,
                    nativeEvent,
                    return_targetInst,
                    targetContainer,
                  );
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) nativeEvent.stopPropagation();
              return;
            } // This is not replayable so we'll invoke it but without a target,
            // in case the event system needs to trace it.
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              null,
              targetContainer,
            );
          }
          var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
          // The return_targetInst field above is conceptually part of the return value.
          function findInstanceBlockingEvent(
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent,
          ) {
            // TODO: Warn if _enabled is false.
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null)
                // This tree has been unmounted already. Dispatch without a target.
                targetInst = null;
              else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null)
                    // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                  // This shouldn't happen, something went wrong but to avoid blocking
                  // the whole system, dispatch the event without a target.
                  // TODO: Warn.
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root = nearestMounted.stateNode;
                  if (isRootDehydrated(root))
                    // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                  targetInst = null;
                } else if (nearestMounted !== targetInst)
                  // If we get an event (ex: img onload) before committing that
                  // component's mount, ignore it for now (that is, treat it as if it was an
                  // event on a non-React tree). We might also consider queueing events and
                  // dispatching them after the mount.
                  targetInst = null;
              }
            }
            return_targetInst = targetInst; // We're not blocked on anything.
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message":
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive,
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive: passive,
            });
            return listener;
          }
          /**
           * These variables store information about text content of a target node,
           * allowing comparison of content before and after a given event.
           *
           * Identify the node where selection currently begins, then observe
           * both its text content and its current position in the DOM. Since the
           * browser may natively replace the target node during composition, we can
           * use its position to find its replacement.
           *
           *
           */ var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) return fallbackText;
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) break;
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) break;
            }
            var sliceTail = end > 1 ? 1 - end : undefined;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) return root.value;
            return root.textContent;
          }
          /**
           * `charCode` represents the actual "character code" and is safe to use with
           * `String.fromCharCode`. As such, only keys that correspond to printable
           * characters produce a valid `charCode`, the only exception to this is Enter.
           * The Tab-key is considered non-printable and does not have a `charCode`,
           * presumably because it does not produce a tab-character in browsers.
           *
           * @param {object} nativeEvent Native browser event.
           * @return {number} Normalized `charCode` property.
           */ function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
              if (charCode === 0 && keyCode === 13) charCode = 13;
            } // IE8 does not implement `charCode`, but `keyCode` has the correct value.
            else charCode = keyCode;
            // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
            // report Enter as charCode 10 when ctrl is pressed.
            if (charCode === 10) charCode = 13;
            // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
            // Must not discard the (non-)printable Enter-key.
            if (charCode >= 32 || charCode === 13) return charCode;
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          } // This is intentionally a factory so that we have different returned constructors.
          // If we had a single constructor, it would be megamorphic and engines would deopt.
          function createSyntheticEvent(Interface) {
            /**
             * Synthetic events are dispatched by event plugins, typically in response to a
             * top-level event delegation handler.
             *
             * These systems should generally use pooling to reduce the frequency of garbage
             * collection. The system should check `isPersistent` to determine whether the
             * event should be released into the pool after being dispatched. Users that
             * need a persisted event should invoke `persist`.
             *
             * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
             * normalizing browser quirks. Subclasses do not necessarily have to implement a
             * DOM interface; custom application-specific events can also subclass this.
             */ function SyntheticBaseEvent(
              reactName,
              reactEventType,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            ) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
              }
              var defaultPrevented =
                nativeEvent.defaultPrevented != null
                  ? nativeEvent.defaultPrevented
                  : nativeEvent.returnValue === false;
              if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
              else this.isDefaultPrevented = functionThatReturnsFalse;
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function () {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault)
                  event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== "unknown") event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function () {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation)
                  event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== "unknown")
                  // The ChangeEventPlugin registers a "propertychange" event for
                  // IE. This event does not support bubbling or cancelling, and
                  // any references to cancelBubble throw "Member not found".  A
                  // typeof check of "unknown" circumvents this issue (and is also
                  // IE specific).
                  event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */ persist: function () {},
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */ isPersistent: functionThatReturnsTrue,
            });
            return SyntheticBaseEvent;
          }
          /**
           * @interface Event
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function (event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0,
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0,
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          /**
           * @interface MouseEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function (event) {
              if (event.relatedTarget === undefined)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function (event) {
              if ("movementX" in event) return event.movementX;
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function (event) {
              if ("movementY" in event) return event.movementY;
              // Don't need to call updateMouseMovementPolyfillState() here
              // because it's guaranteed to have already run when movementX
              // was copied.
              return lastMovementY;
            },
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          /**
           * @interface DragEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0,
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          /**
           * @interface FocusEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0,
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          /**
           * @interface Event
           * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
           * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
           */ var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0,
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          /**
           * @interface Event
           * @see http://www.w3.org/TR/clipboard-apis/
           */ var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function (event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            },
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          /**
           * @interface Event
           * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
           */ var CompositionEventInterface = assign({}, EventInterface, {
            data: 0,
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          /**
           * @interface Event
           * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
           *      /#events-inputevents
           */ // Happens to share the same list for now.
          var SyntheticInputEvent = SyntheticCompositionEvent;
          /**
           * Normalization of deprecated HTML5 `key` values
           * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
           */ var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified",
          };
          /**
           * Translation from legacy `keyCode` to HTML5 `key`
           * Only special keys supported, all others depend on keyboard layout or browser
           * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
           */ var translateToKey = {
            8: "Backspace",
            9: "Tab",
            12: "Clear",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            45: "Insert",
            46: "Delete",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NumLock",
            145: "ScrollLock",
            224: "Meta",
          };
          /**
           * @param {object} nativeEvent Native browser event.
           * @return {string} Normalized `key` property.
           */ function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              // Normalize inconsistent values reported by browsers due to
              // implementations of a working draft specification.
              // FireFox implements `key` but returns `MozPrintableKey` for all
              // printable characters (normalized to `Unidentified`), ignore it.
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") return key;
            } // Browser does not implement `key`, polyfill as much of it as we can.
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
              // thus be captured by `keypress`, no other non-printable key should.
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup")
              // While user keyboard layout determines the actual meaning of each
              // `keyCode` value, almost all function keys have a universal value.
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            return "";
          }
          /**
           * Translation from modifier key to the associated property in the event.
           * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
           */ var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey",
          }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
          // getModifierState. If getModifierState is not supported, we map it to a set of
          // modifier keys exposed by the event. In this case, Lock-keys are not supported.
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          /**
           * @interface KeyboardEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function (event) {
              // `charCode` is the result of a KeyPress event and represents the value of
              // the actual printable character.
              // KeyPress is deprecated, but its replacement is not yet final and not
              // implemented in any major browser. Only KeyPress has charCode.
              if (event.type === "keypress") return getEventCharCode(event);
              return 0;
            },
            keyCode: function (event) {
              // `keyCode` is the result of a KeyDown/Up event and represents the value of
              // physical keyboard key.
              // The actual meaning of the value depends on the users' keyboard layout
              // which cannot be detected. Assuming that it is a US keyboard layout
              // provides a surprisingly accurate mapping for US and European users.
              // Due to this, it is left to the user to implement at this time.
              if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
              return 0;
            },
            which: function (event) {
              // `which` is an alias for either `keyCode` or `charCode` depending on the
              // type of the event.
              if (event.type === "keypress") return getEventCharCode(event);
              if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
              return 0;
            },
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          /**
           * @interface PointerEvent
           * @see http://www.w3.org/TR/pointerevents/
           */ var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0,
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          /**
           * @interface TouchEvent
           * @see http://www.w3.org/TR/touch-events/
           */ var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState,
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          /**
           * @interface Event
           * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
           * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
           */ var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0,
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          /**
           * @interface WheelEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */ var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function (event) {
              return "deltaX" in event
                ? event.deltaX
                : "wheelDeltaX" in event
                ? -event.wheelDeltaX
                : 0;
            },
            deltaY: function (event) {
              return "deltaY" in event
                ? event.deltaY
                : "wheelDeltaY" in event
                ? -event.wheelDeltaY
                : "wheelDelta" in event
                ? -event.wheelDelta
                : 0;
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0,
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) documentMode = document.documentMode;
          // Webkit offers a very useful `textInput` event that can be used to
          // directly represent `beforeInput`. The IE `textinput` event is not as
          // useful, so we don't use it.
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
          // by the native compositionend event may be incorrect. Japanese ideographic
          // spaces, for instance (\u3000) are not recorded correctly.
          var useFallbackCompositionData =
            canUseDOM &&
            (!canUseCompositionEvent || (documentMode && documentMode > 8 && documentMode <= 11));
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", [
              "compositionend",
              "keypress",
              "textInput",
              "paste",
            ]);
            registerTwoPhaseEvent("onCompositionEnd", [
              "compositionend",
              "focusout",
              "keydown",
              "keypress",
              "keyup",
              "mousedown",
            ]);
            registerTwoPhaseEvent("onCompositionStart", [
              "compositionstart",
              "focusout",
              "keydown",
              "keypress",
              "keyup",
              "mousedown",
            ]);
            registerTwoPhaseEvent("onCompositionUpdate", [
              "compositionupdate",
              "focusout",
              "keydown",
              "keypress",
              "keyup",
              "mousedown",
            ]);
          } // Track whether we've ever handled a keypress on the space key.
          var hasSpaceKeypress = false;
          /**
           * Return whether a native keypress event is assumed to be a command.
           * This is required because Firefox fires `keypress` events for key commands
           * (cut, copy, select-all, etc.) even though no character is inserted.
           */ function isKeypressCommand(nativeEvent) {
            return (
              (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
              !(nativeEvent.ctrlKey && nativeEvent.altKey)
            );
          }
          /**
           * Translate native top level events into event types.
           */ function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          /**
           * Does our fallback best-guess model think this event signifies that
           * composition has begun?
           */ function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          /**
           * Does our fallback mode think that this event is the end of composition?
           */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                // Events are not possible without cancelling IME.
                return true;
              default:
                return false;
            }
          }
          /**
           * Google Input Tools provides composition data via a CustomEvent,
           * with the `data` property populated in the `detail` object. If this
           * is available on the event object, use it. If not, this is a plain
           * composition event and we have nothing special to extract.
           *
           * @param {object} nativeEvent
           * @return {?string}
           */ function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) return detail.data;
            return null;
          }
          /**
           * Check if a composition event was triggered by Korean IME.
           * Our fallback mode does not work well with IE's Korean IME,
           * so just use native composition events when Korean IME is used.
           * Although CompositionEvent.locale property is deprecated,
           * it is available in IE, where our fallback mode is enabled.
           *
           * @param {object} nativeEvent
           * @return {boolean}
           */ function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          } // Track the current IME composition status, if any.
          var isComposing = false;
          /**
           * @return {?object} A SyntheticCompositionEvent.
           */ function extractCompositionEvent(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
          ) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
            else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent))
                eventType = "onCompositionStart";
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent))
              eventType = "onCompositionEnd";
            if (!eventType) return null;
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              // The current composition is stored statically and must not be
              // overwritten while composition continues.
              if (!isComposing && eventType === "onCompositionStart")
                isComposing = initialize(nativeEventTarget);
              else if (eventType === "onCompositionEnd") {
                if (isComposing) fallbackData = getData();
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(
                eventType,
                domEventName,
                null,
                nativeEvent,
                nativeEventTarget,
              );
              dispatchQueue.push({
                event: event,
                listeners: listeners,
              });
              if (fallbackData)
                // Inject data generated from fallback path into the synthetic event.
                // This matches the property of native CompositionEventInterface.
                event.data = fallbackData;
              else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                /**
                 * If native `textInput` events are available, our goal is to make
                 * use of them. However, there is a special case: the spacebar key.
                 * In Webkit, preventing default on a spacebar `textInput` event
                 * cancels character insertion, but it *also* causes the browser
                 * to fall back to its default spacebar behavior of scrolling the
                 * page.
                 *
                 * Tracking at:
                 * https://code.google.com/p/chromium/issues/detail?id=355103
                 *
                 * To avoid this issue, use the keypress event as if no `textInput`
                 * event is available.
                 */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
              default:
                // For other native event types, do nothing.
                return null;
            }
          }
          /**
           * For browsers that do not provide the `textInput` event, extract the
           * appropriate string to use for SyntheticInputEvent.
           */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            // If we are currently composing (IME) and using a fallback to do so,
            // try to extract the composed characters from the fallback object.
            // If composition event is available, we extract a string only at
            // compositionevent, otherwise extract it at fallback events.
            if (isComposing) {
              if (
                domEventName === "compositionend" ||
                (!canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent))
              ) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
              case "keypress":
                /**
                 * As of v27, Firefox may fire keypress events even when no character
                 * will be inserted. A few possibilities:
                 *
                 * - `which` is `0`. Arrow keys, Esc key, etc.
                 *
                 * - `which` is the pressed key code, but no char is available.
                 *   Ex: 'AltGr + d` in Polish. There is no modified character for
                 *   this key combination and no character is inserted into the
                 *   document, but FF fires the keypress for char code `100` anyway.
                 *   No `input` event will occur.
                 *
                 * - `which` is the pressed key code, but a command combination is
                 *   being used. Ex: `Cmd+C`. No character is inserted, and no
                 *   `input` event will occur.
                 */ if (!isKeypressCommand(nativeEvent)) {
                  // IE fires the `keypress` event when a user types an emoji via
                  // Touch keyboard of Windows.  In such a case, the `char` property
                  // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                  // is 2, the property `which` does not represent an emoji correctly.
                  // In such a case, we directly return the `char` property instead of
                  // using `which`.
                  if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                  else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)
                  ? null
                  : nativeEvent.data;
              default:
                return null;
            }
          }
          /**
           * Extract a SyntheticInputEvent for `beforeInput`, based on either native
           * `textInput` or fallback behavior.
           *
           * @return {?object} A SyntheticInputEvent.
           */ function extractBeforeInputEvent(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
          ) {
            var chars;
            if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            // If no characters are being inserted, no BeforeInput event should
            // be fired.
            if (!chars) return null;
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent(
                "onBeforeInput",
                "beforeinput",
                null,
                nativeEvent,
                nativeEventTarget,
              );
              dispatchQueue.push({
                event: event,
                listeners: listeners,
              });
              event.data = chars;
            }
          }
          /**
           * Create an `onBeforeInput` event to match
           * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
           *
           * This event plugin is based on the native `textInput` event
           * available in Chrome, Safari, Opera, and IE. This event fires after
           * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
           *
           * `beforeInput` is spec'd but not implemented in any browsers, and
           * the `input` event does not provide any useful information about what has
           * actually been added, contrary to the spec. Thus, `textInput` is the best
           * available event to identify the characters that have actually been inserted
           * into the target node.
           *
           * This plugin is also responsible for emitting `composition` events, thus
           * allowing us to share composition fallback code for both `beforeInput` and
           * `composition` event types.
           */ function extractEvents(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            extractCompositionEvent(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            );
            extractBeforeInputEvent(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget,
            );
          }
          /**
           * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
           */ var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true,
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") return !!supportedInputTypes[elem.type];
            if (nodeName === "textarea") return true;
            return false;
          }
          /**
           * Checks if an event is supported in the current execution environment.
           *
           * NOTE: This will not work correctly for non-generic events such as `change`,
           * `reset`, `load`, `error`, and `select`.
           *
           * Borrows from Modernizr.
           *
           * @param {string} eventNameSuffix Event name, e.g. "click".
           * @return {boolean} True if the event is supported.
           * @internal
           * @license Modernizr 3.0.0pre (Custom Build) | MIT
           */ function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) return false;
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", [
              "change",
              "click",
              "focusin",
              "focusout",
              "input",
              "keydown",
              "keyup",
              "selectionchange",
            ]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            // Flag this event loop as needing state restore.
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event: event,
                listeners: listeners,
              });
            }
          }
          /**
           * For IE shims
           */ var activeElement = null;
          var activeElementInst = null;
          /**
           * SECTION: handle `change` event
           */ function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || (nodeName === "input" && elem.type === "file");
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(
              dispatchQueue,
              activeElementInst,
              nativeEvent,
              getEventTarget(nativeEvent),
            ); // If change and propertychange bubbled, we'd just bind to it like all the
            // other events and have it go through ReactBrowserEventEmitter. Since it
            // doesn't, we manually listen for the events and so we have to enqueue and
            // process the abstract event manually.
            //
            // Batching is necessary here in order to ensure that all event handlers run
            // before the next rerender (including event handlers attached to ancestor
            // elements instead of directly on the input). Without this, controlled
            // components don't work properly in conjunction with event bubbling because
            // the component is rerendered and the value reverted before all the event
            // handlers can run. See https://github.com/facebook/react/issues/708.
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) return targetInst;
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") return targetInst;
          }
          /**
           * SECTION: handle `input` event
           */ var isInputEventSupported = false;
          if (canUseDOM)
            // IE9 claims to support the input event but fails to trigger it when
            // deleting text, so we ignore its input events.
            isInputEventSupported =
              isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          /**
           * (For IE <=9) Starts tracking propertychange events on the passed-in element
           * and override the value property so that we can distinguish user events from
           * value changes in JS.
           */ function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          /**
           * (For IE <=9) Removes the event listeners from the currently-tracked element,
           * if any exists.
           */ function stopWatchingForValueChange() {
            if (!activeElement) return;
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          /**
           * (For IE <=9) Handles a propertychange event, sending a `change` event if
           * the value of the active element has changed.
           */ function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") return;
            if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              // In IE9, propertychange fires for most input events but is buggy and
              // doesn't fire when text is deleted, but conveniently, selectionchange
              // appears to fire in all of the remaining cases so we catch those and
              // forward the event if the value has changed
              // In either case, we don't want to call the event handler if the value
              // is changed from JS so we redefine a setter for `.value` that updates
              // our activeElementValue variable, allowing us to ignore those changes
              //
              // stopWatching() should be a noop here but we call it just in case we
              // missed a blur event somehow.
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") stopWatchingForValueChange();
          } // For IE8 and IE9.
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (
              domEventName === "selectionchange" ||
              domEventName === "keyup" ||
              domEventName === "keydown"
            )
              // On the selectionchange event, the target is just document which isn't
              // helpful for us so just check activeElement instead.
              //
              // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
              // propertychange on the first input event after setting `value` from a
              // script and fires only keydown, keypress, keyup. Catching keyup usually
              // gets it and catching keydown lets us fire an event for the first
              // keystroke if user does a key repeat (it'll be a little delayed: right
              // before the second keystroke). Other input methods (e.g., paste) seem to
              // fire selectionchange normally.
              return getInstIfValueChanged(activeElementInst);
          }
          /**
           * SECTION: handle `click` event
           */ function shouldUseClickEvent(elem) {
            // Use the `click` event to detect changes to checkbox and radio inputs.
            // This approach works across all browsers, whereas `change` does not fire
            // until `blur` in IE8.
            var nodeName = elem.nodeName;
            return (
              nodeName &&
              nodeName.toLowerCase() === "input" &&
              (elem.type === "checkbox" || elem.type === "radio")
            );
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") return getInstIfValueChanged(targetInst);
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change")
              return getInstIfValueChanged(targetInst);
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") return;
            // If controlled, assign the value attribute to the current value on blur
            setDefaultValue(node, "number", node.value);
          }
          /**
           * This plugin creates an `onChange` event that normalizes change events
           * across form elements. This event fires at a time when it's possible to
           * change the element's value without seeing a flicker.
           *
           * Supported elements are:
           * - input (see `isTextInputElement`)
           * - textarea
           * - select
           */ function extractEvents$1(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
            else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode))
              getTargetInstFunc = getTargetInstForClickEvent;
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
            // When blurring, set the value attribute for number inputs
            if (domEventName === "focusout") handleControlledInputBlur(targetNode);
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          /**
           * For almost every interaction we care about, there will be both a top-level
           * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
           * we do not extract duplicate events. However, moving the mouse into the
           * browser from outside will not fire a `mouseout` event. In this case, we use
           * the `mouseover` top-level event.
           */ function extractEvents$2(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              // If this is an over event with a target, we might have already dispatched
              // the event in the out event of the other target. If this is replayed,
              // then it's because we couldn't dispatch against this target previously
              // so we have to do it now instead.
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
              }
            }
            if (!isOutEvent && !isOverEvent)
              // Must not be a mouse or pointer in or out - ignoring.
              return;
            var win; // TODO: why is this nullable in the types but we read from it?
            if (nativeEventTarget.window === nativeEventTarget)
              // `nativeEventTarget` is probably a window object.
              win = nativeEventTarget;
            else {
              // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
              var doc = nativeEventTarget.ownerDocument;
              if (doc) win = doc.defaultView || doc.parentWindow;
              else win = window;
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || (to.tag !== HostComponent && to.tag !== HostText))
                  to = null;
              }
            } else {
              // Moving to a node from outside the window.
              from = null;
              to = targetInst;
            }
            if (from === to)
              // Nothing pertains to our managed components.
              return;
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(
              leaveEventType,
              eventTypePrefix + "leave",
              from,
              nativeEvent,
              nativeEventTarget,
            );
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null; // We should only process this nativeEvent if we are processing
            // the first ancestor. Next time, we will ignore the event.
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(
                enterEventType,
                eventTypePrefix + "enter",
                to,
                nativeEvent,
                nativeEventTarget,
              );
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */ function is(x, y) {
            return (
              (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare
            );
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          /**
           * Performs equality by iterating through keys on an object and returning false
           * when any key has values which are not strictly equal between the arguments.
           * Returns true when the values of all keys are strictly equal.
           */ function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) return true;
            if (
              typeof objA !== "object" ||
              objA === null ||
              typeof objB !== "object" ||
              objB === null
            )
              return false;
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) return false;
            // Test for A's keys different from B.
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (
                !hasOwnProperty.call(objB, currentKey) ||
                !objectIs(objA[currentKey], objB[currentKey])
              )
                return false;
            }
            return true;
          }
          /**
           * Given any node return the first leaf node without children.
           *
           * @param {DOMElement|DOMTextNode} node
           * @return {DOMElement|DOMTextNode}
           */ function getLeafNode(node) {
            while (node && node.firstChild) node = node.firstChild;
            return node;
          }
          /**
           * Get the next sibling within a container. This will walk up the
           * DOM if a node's siblings have been exhausted.
           *
           * @param {DOMElement|DOMTextNode} node
           * @return {?DOMElement|DOMTextNode}
           */ function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) return node.nextSibling;
              node = node.parentNode;
            }
          }
          /**
           * Get object describing the nodes which contain characters at offset.
           *
           * @param {DOMElement|DOMTextNode} root
           * @param {number} offset
           * @return {?object}
           */ function getNodeForCharacterOffset(root, offset) {
            var node = getLeafNode(root);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset)
                  return {
                    node: node,
                    offset: offset - nodeStart,
                  };
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          /**
           * @param {DOMElement} outerNode
           * @return {?object}
           */ function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = (ownerDocument && ownerDocument.defaultView) || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) return null;
            var anchorNode = selection.anchorNode,
              anchorOffset = selection.anchorOffset,
              focusNode = selection.focusNode,
              focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
            // up/down buttons on an <input type="number">. Anonymous divs do not seem to
            // expose properties, triggering a "Permission denied error" if any of its
            // properties are accessed. The only seemingly possible way to avoid erroring
            // is to access a property that typically works for non-anonymous divs and
            // catch any error that may otherwise arise. See
            // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
            try {
              /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
              focusNode.nodeType;
              /* eslint-enable no-unused-expressions */
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(
              outerNode,
              anchorNode,
              anchorOffset,
              focusNode,
              focusOffset,
            );
          }
          /**
           * Returns {start, end} where `start` is the character/codepoint index of
           * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
           * `end` is the index of (focusNode, focusOffset).
           *
           * Returns null if you pass in garbage input but we should probably just crash.
           *
           * Exported only for testing.
           */ function getModernOffsetsFromPoints(
            outerNode,
            anchorNode,
            anchorOffset,
            focusNode,
            focusOffset,
          ) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE))
                  start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE))
                  end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset)
                  start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
              } // Moving from `node` to its next sibling `next`.
              node = next;
            }
            if (start === -1 || end === -1)
              // This should never happen. (Would happen if the anchor/focus nodes aren't
              // actually inside the passed-in node.)
              return null;
            return {
              start: start,
              end: end,
            };
          }
          /**
           * In modern non-IE browsers, we can support both forward and backward
           * selections.
           *
           * Note: IE10+ supports the Selection object, but it does not support
           * the `extend` method, which means that even in modern IE, it's not possible
           * to programmatically create a backward selection. Thus, for all IE
           * versions, we use the old IE API to create our selections.
           *
           * @param {DOMElement|DOMTextNode} node
           * @param {object} offsets
           */ function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = (doc && doc.defaultView) || window; // Edge fails with "Object expected" in some scenarios.
            // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
            // fails when pasting 100+ items)
            if (!win.getSelection) return;
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
            // Flip backward selections, so we can set with a single range.
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (
                selection.rangeCount === 1 &&
                selection.anchorNode === startMarker.node &&
                selection.anchorOffset === startMarker.offset &&
                selection.focusNode === endMarker.node &&
                selection.focusOffset === endMarker.offset
              )
                return;
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) return false;
            else if (outerNode === innerNode) return true;
            else if (isTextNode(outerNode)) return false;
            else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
            else if ("contains" in outerNode) return outerNode.contains(innerNode);
            else if (outerNode.compareDocumentPosition)
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            else return false;
          }
          function isInDocument(node) {
            return (
              node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node)
            );
          }
          function isSameOriginFrame(iframe) {
            try {
              // Accessing the contentDocument of a HTMLIframeElement can cause the browser
              // to throw, e.g. if it has a cross-origin src attribute.
              // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
              // iframe.contentDocument.defaultView;
              // A safety way is to access one of the cross origin properties: Window or Location
              // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
              // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) win = element.contentWindow;
              else return element;
              element = getActiveElement(win.document);
            }
            return element;
          }
          /**
           * @ReactInputSelection: React input selection module. Based on Selection.js,
           * but modified to be suitable for react and has a couple of bug fixes (doesn't
           * assume buttons have range selections allowed).
           * Input selection module for React.
           */ /**
           * @hasSelectionCapabilities: we get the element types that support selection
           * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
           * and `selectionEnd` rows.
           */ function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return (
              nodeName &&
              ((nodeName === "input" &&
                (elem.type === "text" ||
                  elem.type === "search" ||
                  elem.type === "tel" ||
                  elem.type === "url" ||
                  elem.type === "password")) ||
                nodeName === "textarea" ||
                elem.contentEditable === "true")
            );
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem: focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem)
                ? getSelection(focusedElem)
                : null,
            };
          }
          /**
           * @restoreSelection: If any selection information was potentially lost,
           * restore it. This is useful when performing operations that could remove dom
           * nodes and place them back in, resulting in focus being lost.
           */ function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem))
                setSelection(priorFocusedElem, priorSelectionRange);
              // Focusing a node can change the scroll position, which is undesirable
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while ((ancestor = ancestor.parentNode))
                if (ancestor.nodeType === ELEMENT_NODE)
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop,
                  });
              if (typeof priorFocusedElem.focus === "function") priorFocusedElem.focus();
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          /**
           * @getSelection: Gets the selection bounds of a focused textarea, input or
           * contentEditable node.
           * -@input: Look up selection bounds of this input
           * -@return {start: selectionStart, end: selectionEnd}
           */ function getSelection(input) {
            var selection;
            if ("selectionStart" in input)
              // Modern browser with input or textarea.
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd,
              };
            // Content editable or old IE textarea.
            else selection = getOffsets(input);
            return (
              selection || {
                start: 0,
                end: 0,
              }
            );
          }
          /**
           * @setSelection: Sets the selection bounds of a textarea or input and focuses
           * the input.
           * -@input     Set selection bounds of this input or textarea
           * -@offsets   Object of same form that is returned from get*
           */ function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === undefined) end = start;
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else setOffsets(input, offsets);
          }
          var skipSelectionChangeEvent =
            canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", [
              "focusout",
              "contextmenu",
              "dragend",
              "focusin",
              "keydown",
              "keyup",
              "mousedown",
              "mouseup",
              "selectionchange",
            ]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          /**
           * Get an object which is a unique representation of the current selection.
           *
           * The return value will not be consistent across nodes or browsers, but
           * two identical selections on the same node will return identical objects.
           */ function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node))
              return {
                start: node.selectionStart,
                end: node.selectionEnd,
              };
            else {
              var win = (node.ownerDocument && node.ownerDocument.defaultView) || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset,
              };
            }
          }
          /**
           * Get document associated with the event target.
           */ function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget
              ? eventTarget.document
              : eventTarget.nodeType === DOCUMENT_NODE
              ? eventTarget
              : eventTarget.ownerDocument;
          }
          /**
           * Poll selection to see whether it's changed.
           *
           * @param {object} nativeEvent
           * @param {object} nativeEventTarget
           * @return {?SyntheticEvent}
           */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            // Ensure we have the right element, and that the user is not dragging a
            // selection (this matches native `select` event behavior). In HTML5, select
            // fires only on input and textarea thus if there's no focused element we
            // won't dispatch.
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))
              return;
            // Only fire when selection has actually changed.
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent(
                  "onSelect",
                  "select",
                  null,
                  nativeEvent,
                  nativeEventTarget,
                );
                dispatchQueue.push({
                  event: event,
                  listeners: listeners,
                });
                event.target = activeElement$1;
              }
            }
          }
          /**
           * This plugin creates an `onSelect` event that normalizes select events
           * across form elements.
           *
           * Supported elements are:
           * - input (see `isTextInputElement`)
           * - textarea
           * - contentEditable
           *
           * This differs from native browser implementations in the following ways:
           * - Fires on contentEditable fields as well as inputs.
           * - Fires for collapsed selection.
           * - Fires after user input.
           */ function extractEvents$3(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) break;
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          /**
           * Generate a mapping of standard vendor prefixes using the defined style property and event name.
           *
           * @param {string} styleProp
           * @param {string} eventName
           * @returns {object}
           */ function makePrefixMap(styleProp, eventName) {
            var prefixes = {};
            prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes["Webkit" + styleProp] = "webkit" + eventName;
            prefixes["Moz" + styleProp] = "moz" + eventName;
            return prefixes;
          }
          /**
           * A list of event names to a configurable list of vendor prefixes.
           */ var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd"),
          };
          /**
           * Event names that have already been detected and prefixed (if applicable).
           */ var prefixedEventNames = {};
          /**
           * Element to check for prefixes on.
           */ var style = {};
          /**
           * Bootstrap if a DOM exists.
           */ if (canUseDOM) {
            style = document.createElement("div").style; // On some platforms, in particular some releases of Android 4.x,
            // the un-prefixed "animation" and "transition" properties are defined on the
            // style object but the events that fire will still be prefixed, so we need
            // to check if the un-prefixed events are usable, and if not remove them from the map.
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            } // Same as above
            if (!("TransitionEvent" in window)) delete vendorPrefixes.transitionend.transition;
          }
          /**
           * Attempts to determine the correct vendor prefixed event name.
           *
           * @param {string} eventName
           * @returns {string}
           */ function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
            else if (!vendorPrefixes[eventName]) return eventName;
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
                return (prefixedEventNames[eventName] = prefixMap[styleProp]);
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
          //
          // E.g. it needs "pointerDown", not "pointerdown".
          // This is because we derive both React name ("onPointerDown")
          // and DOM name ("pointerdown") from the same list.
          //
          // Exceptions that don't match this convention are listed separately.
          //
          // prettier-ignore
          var simpleEventPluginEvents = [
        "abort",
        "auxClick",
        "cancel",
        "canPlay",
        "canPlayThrough",
        "click",
        "close",
        "contextMenu",
        "copy",
        "cut",
        "drag",
        "dragEnd",
        "dragEnter",
        "dragExit",
        "dragLeave",
        "dragOver",
        "dragStart",
        "drop",
        "durationChange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "gotPointerCapture",
        "input",
        "invalid",
        "keyDown",
        "keyPress",
        "keyUp",
        "load",
        "loadedData",
        "loadedMetadata",
        "loadStart",
        "lostPointerCapture",
        "mouseDown",
        "mouseMove",
        "mouseOut",
        "mouseOver",
        "mouseUp",
        "paste",
        "pause",
        "play",
        "playing",
        "pointerCancel",
        "pointerDown",
        "pointerMove",
        "pointerOut",
        "pointerOver",
        "pointerUp",
        "progress",
        "rateChange",
        "reset",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "submit",
        "suspend",
        "timeUpdate",
        "touchCancel",
        "touchEnd",
        "touchStart",
        "volumeChange",
        "scroll",
        "toggle",
        "touchMove",
        "waiting",
        "wheel"
    ];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            } // Special cases where event names don't match.
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === undefined) return;
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
              /* falls through */ case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
              /* falls through */ case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              /* falls through */ case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            // Some events don't bubble in the browser.
            // In the past, React has always bubbled them, but this can be surprising.
            // We're going to try aligning closer to the browser behavior by not bubbling
            // them in React either. We'll start by not bubbling onScroll, and then expand.
            var accumulateTargetOnly =
              !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(
              targetInst,
              reactName,
              nativeEvent.type,
              inCapturePhase,
              accumulateTargetOnly,
            );
            if (_listeners.length > 0) {
              // Intentionally create event lazily.
              var _event = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget,
              );
              dispatchQueue.push({
                event: _event,
                listeners: _listeners,
              });
            }
          }
          // TODO: remove top-level side effect.
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer,
          ) {
            // TODO: we should remove the concept of a "SimpleEventPlugin".
            // This is the basic functionality of the event system. All
            // the other plugins are essentially polyfills. So the plugin
            // should probably be inlined somewhere and have its logic
            // be core the to event system. This would potentially allow
            // us to ship builds of React without the polyfilled plugins below.
            extractEvents$4(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget,
              eventSystemFlags,
            );
            var shouldProcessPolyfillPlugins =
              (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
            // event's native "bubble" phase, which means that we're
            // not in the capture phase. That's because we emulate
            // the capture phase here still. This is a trade-off,
            // because in an ideal world we would not emulate and use
            // the phases properly, like we do with the SimpleEvent
            // plugin. However, the plugins below either expect
            // emulation (EnterLeave) or use state localized to that
            // plugin (BeforeInput, Change, Select). The state in
            // these modules complicates things, as you'll essentially
            // get the case where the capture phase event might change
            // state, only for the following bubble event to come in
            // later and not trigger anything as the state now
            // invalidates the heuristics of the event plugin. We
            // could alter all these plugins to work in such ways, but
            // that might cause other unknown side-effects that we
            // can't foresee right now.
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );
              extractEvents$1(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );
              extractEvents$3(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );
              extractEvents(
                dispatchQueue,
                domEventName,
                targetInst,
                nativeEvent,
                nativeEventTarget,
              );
            }
          } // List of events that need to be individually attached to media elements.
          var mediaEventTypes = [
            "abort",
            "canplay",
            "canplaythrough",
            "durationchange",
            "emptied",
            "encrypted",
            "ended",
            "error",
            "loadeddata",
            "loadedmetadata",
            "loadstart",
            "pause",
            "play",
            "playing",
            "progress",
            "ratechange",
            "resize",
            "seeked",
            "seeking",
            "stalled",
            "suspend",
            "timeupdate",
            "volumechange",
            "waiting",
          ]; // We should not delegate these events to the container, but rather
          // set them on the actual target element itself. This is primarily
          // because these events do not consistently bubble in the DOM.
          var nonDelegatedEvents = new Set(
            ["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes),
          );
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase)
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i],
                  instance = _dispatchListeners$i.instance,
                  currentTarget = _dispatchListeners$i.currentTarget,
                  listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) return;
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            else
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i],
                  _instance = _dispatchListeners$_i.instance,
                  _currentTarget = _dispatchListeners$_i.currentTarget,
                  _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) return;
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i],
                event = _dispatchQueue$i.event,
                listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
            } // This would be a good time to rethrow if any of the event handlers threw.
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            targetContainer,
          ) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget,
              eventSystemFlags,
            );
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            if (!nonDelegatedEvents.has(domEventName))
              error(
                'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
                domEventName,
              );
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(
                targetElement,
                domEventName,
                IS_NON_DELEGATED,
                isCapturePhaseListener,
              );
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener)
              error(
                'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
                domEventName,
              );
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          } // This is only used by createEventHandle when the
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function (domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName))
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument =
                rootContainerElement.nodeType === DOCUMENT_NODE
                  ? rootContainerElement
                  : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                // The selectionchange event also needs deduplication
                // but it is attached to the document.
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(
            targetContainer,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener,
            isDeferredListenerForLegacyFBSupport,
          ) {
            var listener = createEventListenerWrapperWithPriority(
              targetContainer,
              domEventName,
              eventSystemFlags,
            ); // If passive option is not supported, then the event will be
            // active and not passive.
            var isPassiveListener = undefined;
            if (passiveBrowserEventsSupported) {
              // Browsers introduced an intervention, making these events
              // passive by default on document. React doesn't bind them
              // to document anymore, but changing this now would undo
              // the performance wins from the change. So we emulate
              // the existing behavior manually on the roots now.
              // https://github.com/facebook/react/issues/19651
              if (
                domEventName === "touchstart" ||
                domEventName === "touchmove" ||
                domEventName === "wheel"
              )
                isPassiveListener = true;
            }
            targetContainer;
            var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
            if (isCapturePhaseListener) {
              if (isPassiveListener !== undefined)
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(
                  targetContainer,
                  domEventName,
                  listener,
                  isPassiveListener,
                );
              else
                unsubscribeListener = addEventCaptureListener(
                  targetContainer,
                  domEventName,
                  listener,
                );
            } else if (isPassiveListener !== undefined)
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(
                targetContainer,
                domEventName,
                listener,
                isPassiveListener,
              );
            else
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return (
              grandContainer === targetContainer ||
              (grandContainer.nodeType === COMMENT_NODE &&
                grandContainer.parentNode === targetContainer)
            );
          }
          function dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            targetContainer,
          ) {
            var ancestorInst = targetInst;
            if (
              (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&
              (eventSystemFlags & IS_NON_DELEGATED) === 0
            ) {
              var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
              if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) return;
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) break;
                    if (nodeTag === HostPortal) {
                      // The target is a portal, but it's not the rootContainer we're looking for.
                      // Normally portals handle their own events all the way down to the root.
                      // So we should be able to stop now. However, we don't know if this portal
                      // was part of *our* root.
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode))
                            // This is the rootContainer we're looking for and we found it as
                            // a parent of the Portal. That means we can ignore it because the
                            // Portal will bubble through to us.
                            return;
                        }
                        grandNode = grandNode.return;
                      }
                    } // Now we need to find it's corresponding host fiber in the other
                    // tree. To do this we can use getClosestInstanceFromNode, but we
                    // need to validate that the fiber is a host instance, otherwise
                    // we need to traverse up through the DOM till we find the correct
                    // node that is from the other tree.
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) return;
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function () {
              return dispatchEventsForPlugins(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                ancestorInst,
              );
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance: instance,
              listener: listener,
              currentTarget: currentTarget,
            };
          }
          function accumulateSinglePhaseListeners(
            targetFiber,
            reactName,
            nativeEventType,
            inCapturePhase,
            accumulateTargetOnly,
            nativeEvent,
          ) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
            while (instance !== null) {
              var _instance2 = instance,
                stateNode = _instance2.stateNode,
                tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null)
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              } // If we are only accumulating events for the target, then we don't
              // continue to propagate through the React fiber tree to find other
              // listeners.
              if (accumulateTargetOnly) break;
              // If we are processing the onBeforeBlur event, then we need to take
              instance = instance.return;
            }
            return listeners;
          } // We should only use this function for:
          // - BeforeInputEventPlugin
          // - ChangeEventPlugin
          // - SelectEventPlugin
          // This is because we only process these plugins
          // in the bubble phase, so we need to accumulate two
          // phase event listeners (via emulation).
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
            while (instance !== null) {
              var _instance3 = instance,
                stateNode = _instance3.stateNode,
                tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null)
                  listeners.unshift(
                    createDispatchListener(instance, captureListener, currentTarget),
                  );
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null)
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) return null;
            do
              inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
            while (inst && inst.tag !== HostComponent);
            if (inst) return inst;
            return null;
          }
          /**
           * Return the lowest common ancestor of A and B, or null if they are in
           * different trees.
           */ function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) depthA++;
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) depthB++;
            // If A is deeper, crawl up.
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            } // If B is deeper, crawl up.
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            } // Walk in lockstep until we find a match.
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || (nodeB !== null && nodeA === nodeB.alternate)) return nodeA;
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(
            dispatchQueue,
            event,
            target,
            common,
            inCapturePhase,
          ) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) break;
              var _instance4 = instance,
                alternate = _instance4.alternate,
                stateNode = _instance4.stateNode,
                tag = _instance4.tag;
              if (alternate !== null && alternate === common) break;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null)
                    listeners.unshift(
                      createDispatchListener(instance, captureListener, currentTarget),
                    );
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null)
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0)
              dispatchQueue.push({
                event: event,
                listeners: listeners,
              });
          } // We should only use this function for:
          // - EnterLeaveEventPlugin
          // This is because we only process this plugin
          // in the bubble phase, so we need to accumulate two
          // phase event listeners.
          function accumulateEnterLeaveTwoPhaseListeners(
            dispatchQueue,
            leaveEvent,
            enterEvent,
            from,
            to,
          ) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null)
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            if (to !== null && enterEvent !== null)
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true,
          };
          validatePropertiesInDevelopment = function (type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies: registrationNameDependencies,
              possibleRegistrationNames: possibleRegistrationNames,
            });
          }; // IE 11 parses & normalizes the style attribute as opposed to other
          // browsers. It adds spaces and sorts the properties in some
          // non-alphabetical order. Handling that would require sorting CSS
          // properties in the client & server versions or applying
          // `expectedStyle` to a temporary DOM node to read its `style` attribute
          // normalized. Since it only affects IE, we're skipping style warnings
          // in that browser completely in favor of doing all that work.
          // See https://github.com/facebook/react/issues/11807
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function (propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) return;
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) return;
            didWarnInvalidHydration = true;
            error(
              "Prop `%s` did not match. Server: %s Client: %s",
              propName,
              JSON.stringify(normalizedServerValue),
              JSON.stringify(normalizedClientValue),
            );
          };
          warnForExtraAttributes = function (attributeNames) {
            if (didWarnInvalidHydration) return;
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function (name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function (registrationName, listener) {
            if (listener === false)
              error(
                "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
                registrationName,
                registrationName,
                registrationName,
              );
            else
              error(
                "Expected `%s` listener to be a function, instead got a value of `%s` type.",
                registrationName,
                typeof listener,
              );
          }; // Parse the HTML and read it back to normalize the HTML string so that it
          // can be used for comparison.
          normalizeHTML = function (parent, html) {
            // We could have created a separate document here to avoid
            // re-initializing custom elements if they exist. But this breaks
            // how <noscript> is being handled. So we use the same document.
            // See the discussion in https://github.com/facebook/react/pull/11157.
            var testElement =
              parent.namespaceURI === HTML_NAMESPACE
                ? parent.ownerDocument.createElement(parent.tagName)
                : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
          // It also can turn \u0000 into \uFFFD inside attributes.
          // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
          // If we have a mismatch, it might be caused by that.
          // We will still patch up in this case but not fire the warning.
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            checkHtmlStringCoercion(markup);
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString
              .replace(NORMALIZE_NEWLINES_REGEX, "\n")
              .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) return;
            if (shouldWarnDev) {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error(
                  'Text content did not match. Server: "%s" Client: "%s"',
                  normalizedServerText,
                  normalizedClientText,
                );
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch)
              // In concurrent roots, we throw when there's a text mismatch and revert to
              // client rendering, up to the nearest Suspense boundary.
              throw new Error("Text content does not match server-rendered HTML.");
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE
              ? rootContainerElement
              : rootContainerElement.ownerDocument;
          }
          function noop() {}
          function trapClickOnNonInteractiveElement(node) {
            // Mobile Safari does not fire properly bubble click events on
            // non-interactive elements, which means delegated click listeners do not
            // fire. The workaround for this bug involves attaching an empty click
            // listener on the target node.
            // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
            // Just set it using the onclick property so that we don't have to manage any
            // bookkeeping for it. Not sure if we need to clear it when the listener is
            // removed.
            // TODO: Only do this for the relevant Safaris maybe?
            node.onclick = noop;
          }
          function setInitialDOMProperties(
            tag,
            domElement,
            rootContainerElement,
            nextProps,
            isCustomComponentTag,
          ) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) continue;
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                if (nextProp)
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  // Avoid setting initial textContent when the text is empty. In IE11 setting
                  // textContent on a <textarea> will cause the placeholder to not
                  // show within the <textarea> until it has been focused and blurred again.
                  // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === "number") setTextContent(domElement, "" + nextProp);
              } else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING
              );
              else if (propKey === AUTOFOCUS);
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function")
                    warnForInvalidEventListener(propKey, nextProp);
                  if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
              } else if (nextProp != null)
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
          function updateDOMProperties(
            domElement,
            updatePayload,
            wasCustomComponentTag,
            isCustomComponentTag,
          ) {
            // TODO: Handle wasCustomComponentTag
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) setValueForStyles(domElement, propValue);
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
              else if (propKey === CHILDREN) setTextContent(domElement, propValue);
              else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
            // tags get no namespace.
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
            if (namespaceURI === HTML_NAMESPACE) {
              isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
              // allow <SVG> or <mATH>.
              if (!isCustomComponentTag && type !== type.toLowerCase())
                error(
                  "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                  type,
                );
              if (type === "script") {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string")
                // $FlowIssue `createElement` should be updated for Web Components
                domElement = ownerDocument.createElement(type, {
                  is: props.is,
                });
              else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) node.multiple = true;
                  else if (props.size)
                    // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
              }
            } else domElement = ownerDocument.createElementNS(namespaceURI, type);
            if (namespaceURI === HTML_NAMESPACE) {
              if (
                !isCustomComponentTag &&
                Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" &&
                !hasOwnProperty.call(warnedUnknownTags, type)
              ) {
                warnedUnknownTags[type] = true;
                error(
                  "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
                  type,
                );
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for (var i = 0; i < mediaEventTypes.length; i++)
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
              case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(
              tag,
              domElement,
              rootContainerElement,
              props,
              isCustomComponentTag,
            );
            switch (tag) {
              case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function")
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement);
                break;
            }
          } // Calculate the diff between the two objects.
          function diffProperties(
            domElement,
            tag,
            lastRawProps,
            nextRawProps,
            rootContainerElement,
          ) {
            validatePropertiesInDevelopment(tag, nextRawProps);
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (
                  typeof lastProps.onClick !== "function" &&
                  typeof nextProps.onClick === "function"
                )
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement);
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (
                nextProps.hasOwnProperty(propKey) ||
                !lastProps.hasOwnProperty(propKey) ||
                lastProps[propKey] == null
              )
                continue;
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle)
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = "";
                  }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN);
              else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING
              );
              else if (propKey === AUTOFOCUS);
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                // This is a special case. If any listener updates we need to ensure
                // that the "current" fiber pointer gets updated so we need a commit
                // to update this element.
                if (!updatePayload) updatePayload = [];
              } // For all other deleted properties we add it to the queue. We use
              // the allowed property list in the commit phase instead.
              else (updatePayload = updatePayload || []).push(propKey, null);
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : undefined;
              if (
                !nextProps.hasOwnProperty(propKey) ||
                nextProp === lastProp ||
                (nextProp == null && lastProp == null)
              )
                continue;
              if (propKey === STYLE) {
                if (nextProp)
                  // Freeze the next style object so that we can assume it won't be
                  // mutated. We have already warned for this in the past.
                  Object.freeze(nextProp);
                if (lastProp) {
                  // Unset styles on `lastProp` but not on `nextProp`.
                  for (styleName in lastProp)
                    if (
                      lastProp.hasOwnProperty(styleName) &&
                      (!nextProp || !nextProp.hasOwnProperty(styleName))
                    ) {
                      if (!styleUpdates) styleUpdates = {};
                      styleUpdates[styleName] = "";
                    }
                  // Update styles that changed since `lastProp`.
                  for (styleName in nextProp)
                    if (
                      nextProp.hasOwnProperty(styleName) &&
                      lastProp[styleName] !== nextProp[styleName]
                    ) {
                      if (!styleUpdates) styleUpdates = {};
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                  // Relies on `updateStylesByID` not mutating `styleUpdates`.
                  if (!styleUpdates) {
                    if (!updatePayload) updatePayload = [];
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml)
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number")
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              } else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING
              );
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  // We eagerly listen to this even though we haven't committed yet.
                  if (typeof nextProp !== "function")
                    warnForInvalidEventListener(propKey, nextProp);
                  if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
                if (!updatePayload && lastProp !== nextProp)
                  // This is a special case. If any listener updates we need to ensure
                  // that the "current" props pointer gets updated so we need a commit
                  // to update this element.
                  updatePayload = [];
              } // For any other property we always add it to the queue and then we
              // filter it out using the allowed property list during the commit.
              else (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
            if (styleUpdates) {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          } // Apply the diff.
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            // Update checked *before* name.
            // In the middle of an update, it is possible to have multiple checked.
            // When a checked radio tries to change name, browser makes another radio's checked false.
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null)
              updateChecked(domElement, nextRawProps);
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
            updateDOMProperties(
              domElement,
              updatePayload,
              wasCustomComponentTag,
              isCustomComponentTag,
            ); // TODO: Ensure that an update gets scheduled if any of the special props
            // changed.
            switch (tag) {
              case "input":
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
            return possibleStandardNames[lowerCasedName] || null;
          }
          function diffHydratedProperties(
            domElement,
            tag,
            rawProps,
            parentNamespace,
            rootContainerElement,
            isConcurrentMode,
            shouldWarnDev,
          ) {
            var isCustomComponentTag;
            var extraAttributeNames;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for (var i = 0; i < mediaEventTypes.length; i++)
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
              case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  // Intentionally use the original name.
                  // See discussion in https://github.com/facebook/react/pull/10676.
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) continue;
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true)
                      checkForUnmatchedText(
                        domElement.textContent,
                        nextProp,
                        isConcurrentMode,
                        shouldWarnDev,
                      );
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true)
                      checkForUnmatchedText(
                        domElement.textContent,
                        nextProp,
                        isConcurrentMode,
                        shouldWarnDev,
                      );
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function")
                    warnForInvalidEventListener(propKey, nextProp);
                  if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
              } else if (
                shouldWarnDev &&
                true && // Convince Flow we've calculated it (it's DEV-only in this method.)
                typeof isCustomComponentTag === "boolean"
              ) {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo =
                  isCustomComponentTag && enableCustomElementPropertySupport
                    ? null
                    : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true);
                else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  propKey === "value" ||
                  propKey === "checked" ||
                  propKey === "selected"
                );
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML)
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                } else if (propKey === STYLE) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue)
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue)
                    warnForPropDifference(propKey, serverValue, nextProp);
                } else if (
                  !shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) &&
                  !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)
                ) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                    if (ownNamespace === HTML_NAMESPACE)
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames.delete(propKey.toLowerCase());
                    else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        // If an SVG prop is supplied with bad casing, it will
                        // be successfully parsed from HTML, but will produce a mismatch
                        // (and would be incorrectly rendered on the client).
                        // However, we already warn about bad casing elsewhere.
                        // So we'll skip the misleading extra mismatch warning in this case.
                        isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(standardName);
                      } // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (
                    !dontWarnCustomElement &&
                    nextProp !== serverValue &&
                    !isMismatchDueToBadCasing
                  )
                    warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true)
                // $FlowFixMe - Should be inferred as not undefined.
                warnForExtraAttributes(extraAttributeNames);
            }
            switch (tag) {
              case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function")
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement);
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            if (didWarnInvalidHydration) return;
            didWarnInvalidHydration = true;
            error(
              "Did not expect server HTML to contain a <%s> in <%s>.",
              child.nodeName.toLowerCase(),
              parentNode.nodeName.toLowerCase(),
            );
          }
          function warnForDeletedHydratableText(parentNode, child) {
            if (didWarnInvalidHydration) return;
            didWarnInvalidHydration = true;
            error(
              'Did not expect server HTML to contain the text node "%s" in <%s>.',
              child.nodeValue,
              parentNode.nodeName.toLowerCase(),
            );
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            if (didWarnInvalidHydration) return;
            didWarnInvalidHydration = true;
            error(
              "Expected server HTML to contain a matching <%s> in <%s>.",
              tag,
              parentNode.nodeName.toLowerCase(),
            );
          }
          function warnForInsertedHydratedText(parentNode, text) {
            if (text === "")
              // We expect to insert empty text nodes since they're not represented in
              // the HTML.
              // TODO: Remove this special case if we can just avoid inserting empty
              // text nodes.
              return;
            if (didWarnInvalidHydration) return;
            didWarnInvalidHydration = true;
            error(
              'Expected server HTML to contain a matching text node for "%s" in <%s>.',
              text,
              parentNode.nodeName.toLowerCase(),
            );
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function () {};
          var updatedAncestorInfo = function () {};
          // This validation code was written based on the HTML5 parsing spec:
          // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
          //
          // Note: this does not catch all invalid nesting, nor does it try to (as it's
          // not clear what practical benefit doing so provides); instead, we warn only
          // for cases where the parser will give a parse tree differing from what React
          // intended. For example, <b><div></div></b> is invalid but we don't warn
          // because it still parses correctly; we do warn for other cases like nested
          // <p> tags where the beginning of the second element implicitly closes the
          // first, causing a confusing mess.
          // https://html.spec.whatwg.org/multipage/syntax.html#special
          var specialTags = [
            "address",
            "applet",
            "area",
            "article",
            "aside",
            "base",
            "basefont",
            "bgsound",
            "blockquote",
            "body",
            "br",
            "button",
            "caption",
            "center",
            "col",
            "colgroup",
            "dd",
            "details",
            "dir",
            "div",
            "dl",
            "dt",
            "embed",
            "fieldset",
            "figcaption",
            "figure",
            "footer",
            "form",
            "frame",
            "frameset",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "head",
            "header",
            "hgroup",
            "hr",
            "html",
            "iframe",
            "img",
            "input",
            "isindex",
            "li",
            "link",
            "listing",
            "main",
            "marquee",
            "menu",
            "menuitem",
            "meta",
            "nav",
            "noembed",
            "noframes",
            "noscript",
            "object",
            "ol",
            "p",
            "param",
            "plaintext",
            "pre",
            "script",
            "section",
            "select",
            "source",
            "style",
            "summary",
            "table",
            "tbody",
            "td",
            "template",
            "textarea",
            "tfoot",
            "th",
            "thead",
            "title",
            "tr",
            "track",
            "ul",
            "wbr",
            "xmp",
          ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title",
          ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
          var buttonScopeTags = inScopeTags.concat(["button"]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null,
          };
          updatedAncestorInfo = function (oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag: tag,
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
            // See rules for 'li', 'dd', 'dt' start tags in
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
            if (
              specialTags.indexOf(tag) !== -1 &&
              tag !== "address" &&
              tag !== "div" &&
              tag !== "p"
            ) {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") ancestorInfo.formTag = info;
            if (tag === "a") ancestorInfo.aTagInScope = info;
            if (tag === "button") ancestorInfo.buttonTagInScope = info;
            if (tag === "nobr") ancestorInfo.nobrTagInScope = info;
            if (tag === "p") ancestorInfo.pTagInButtonScope = info;
            if (tag === "li") ancestorInfo.listItemTagAutoclosing = info;
            if (tag === "dd" || tag === "dt") ancestorInfo.dlItemTagAutoclosing = info;
            return ancestorInfo;
          };
          /**
           * Returns whether
           */ var isTagValidWithParent = function (tag, parentTag) {
            // First, let's check if we're in an unusual parsing mode...
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
              // but
              case "option":
                return tag === "#text";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
              // No special behavior since these rules fall back to "in body" mode for
              // all except special table nodes which cause bad parsing behavior anyway.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
              case "tr":
                return (
                  tag === "th" ||
                  tag === "td" ||
                  tag === "style" ||
                  tag === "script" ||
                  tag === "template"
                );
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
              case "colgroup":
                return tag === "col" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
              case "table":
                return (
                  tag === "caption" ||
                  tag === "colgroup" ||
                  tag === "tbody" ||
                  tag === "tfoot" ||
                  tag === "thead" ||
                  tag === "style" ||
                  tag === "script" ||
                  tag === "template"
                );
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
              case "head":
                return (
                  tag === "base" ||
                  tag === "basefont" ||
                  tag === "bgsound" ||
                  tag === "link" ||
                  tag === "meta" ||
                  tag === "title" ||
                  tag === "noscript" ||
                  tag === "noframes" ||
                  tag === "style" ||
                  tag === "script" ||
                  tag === "template"
                );
              // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            } // Probably in the "in body" parsing mode, so we outlaw only tag combos
            // where the parsing rules cause implicit opens or closes to be added.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return (
                  parentTag !== "h1" &&
                  parentTag !== "h2" &&
                  parentTag !== "h3" &&
                  parentTag !== "h4" &&
                  parentTag !== "h5" &&
                  parentTag !== "h6"
                );
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
            }
            return true;
          };
          /**
           * Returns whether
           */ var findInvalidAncestorForTag = function (tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function (childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null)
                error("validateDOMNesting: when childText is passed, childTag should be null");
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent
              ? null
              : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) return;
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) return;
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) tagDisplayName = "Text nodes";
              else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo =
                  " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else tagDisplayName = "<" + childTag + ">";
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr")
                info +=
                  " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              error(
                "validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s",
                tagDisplayName,
                ancestorTag,
                whitespaceInfo,
                info,
              );
            } else
              error(
                "validateDOMNesting(...): %s cannot appear as a descendant of <%s>.",
                tagDisplayName,
                ancestorTag,
              );
          };
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, "");
                break;
              default:
                var container =
                  nodeType === COMMENT_NODE
                    ? rootContainerInstance.parentNode
                    : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
            }
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace: namespace,
              ancestorInfo: ancestorInfo,
            };
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace: namespace,
              ancestorInfo: ancestorInfo,
            };
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(
            type,
            props,
            rootContainerInstance,
            hostContext,
            internalInstanceHandle,
          ) {
            var parentNamespace;
            // TODO: take namespace into account when validating.
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(
            domElement,
            type,
            props,
            rootContainerInstance,
            hostContext,
          ) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(
            domElement,
            type,
            oldProps,
            newProps,
            rootContainerInstance,
            hostContext,
          ) {
            var hostContextDev = hostContext;
            if (
              typeof newProps.children !== typeof oldProps.children &&
              (typeof newProps.children === "string" || typeof newProps.children === "number")
            ) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return (
              type === "textarea" ||
              type === "noscript" ||
              typeof props.children === "string" ||
              typeof props.children === "number" ||
              (typeof props.dangerouslySetInnerHTML === "object" &&
                props.dangerouslySetInnerHTML !== null &&
                props.dangerouslySetInnerHTML.__html != null)
            );
          }
          function createTextInstance(
            text,
            rootContainerInstance,
            hostContext,
            internalInstanceHandle,
          ) {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === undefined) return DefaultEventPriority;
            return getEventPriority(currentEvent.type);
          }
          // if a component just imports ReactDOM (e.g. for findDOMNode).
          // Some environments might not have setTimeout or clearTimeout.
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : undefined; // -------------------
          var scheduleMicrotask =
            typeof queueMicrotask === "function"
              ? queueMicrotask
              : typeof localPromise !== "undefined"
              ? function (callback) {
                  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
                }
              : scheduleTimeout; // TODO: Determine the best fallback here.
          function handleErrorInNextTick(error) {
            setTimeout(function () {
              throw error;
            });
          } // -------------------
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            // Despite the naming that might imply otherwise, this method only
            // fires if there is an `Update` effect scheduled during mounting.
            // This happens if `finalizeInitialChildren` returns `true` (which it
            // does to implement the `autoFocus` attribute on the client). But
            // there are also other cases when this might happen (such as patching
            // up text content during hydration mismatch). So we'll check this again.
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) domElement.focus();
                return;
              case "img":
                if (newProps.src) domElement.src = newProps.src;
                return;
            }
          }
          function commitUpdate(
            domElement,
            updatePayload,
            type,
            oldProps,
            newProps,
            internalInstanceHandle,
          ) {
            // Apply the diff to the DOM node.
            updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
            // with current event handlers.
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            } // This container might be used for a portal.
            // If something inside a portal is clicked, that click should bubble
            // through the React tree. However, on Mobile Safari the click would
            // never bubble through the *DOM* tree unless an ancestor with onclick
            // event exists. So we wouldn't see it and dispatch it.
            // This is why we ensure that non React root containers have inline onclick
            // defined.
            // https://github.com/facebook/react/issues/11918
            var reactRootContainer = container._reactRootContainer;
            if (
              (reactRootContainer === null || reactRootContainer === undefined) &&
              parentNode.onclick === null
            )
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(parentNode);
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE)
              container.parentNode.insertBefore(child, beforeChild);
            else container.insertBefore(child, beforeChild);
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
            else container.removeChild(child);
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance; // Delete all nodes within this suspense boundary.
            // There might be nested nodes so we need to keep track of how
            // deep we are and only break out when we're back on top.
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else depth--;
                } else if (
                  data === SUSPENSE_START_DATA ||
                  data === SUSPENSE_PENDING_START_DATA ||
                  data === SUSPENSE_FALLBACK_START_DATA
                )
                  depth++;
              }
              node = nextNode;
            } while (node); // TODO: Warn, we didn't find the end comment boundary.
            // Retry if any event replaying was blocked on this.
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE)
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            else if (container.nodeType === ELEMENT_NODE)
              clearSuspenseBoundary(container, suspenseInstance);
            // Retry if any event replaying was blocked on this.
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            // TODO: Does this work for all element types? What about MathML? Should we
            // pass host context to this method?
            instance;
            var style = instance.style;
            if (typeof style.setProperty === "function")
              style.setProperty("display", "none", "important");
            else style.display = "none";
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance;
            var styleProp = props[STYLE$1];
            var display =
              styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display")
                ? styleProp.display
                : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) container.textContent = "";
            else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) container.removeChild(container.documentElement);
            }
          } // -------------------
          function canHydrateInstance(instance, type, props) {
            if (
              instance.nodeType !== ELEMENT_NODE ||
              type.toLowerCase() !== instance.nodeName.toLowerCase()
            )
              return null;
            // This has now been refined to an element node.
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE)
              // Empty strings are not parsed by HTML so there won't be a correct match here.
              return null;
            // This has now been refined to a text node.
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE)
              // Empty strings are not parsed by HTML so there won't be a correct match here.
              return null;
            // This has now been refined to a suspense node.
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              message = dataset.msg;
              stack = dataset.stck;
            }
            return {
              message: message,
              digest: digest,
              stack: stack,
            };
            // const nextSibling = instance.nextSibling;
            // if (nextSibling) {
            //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
            //   value.message = dataset.msg;
            //   value.hash = dataset.hash;
            //   if (true) {
            //     value.stack = dataset.stack;
            //   }
            // }
            // return value;
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            // Skip non-hydratable nodes.
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (
                  nodeData === SUSPENSE_START_DATA ||
                  nodeData === SUSPENSE_FALLBACK_START_DATA ||
                  nodeData === SUSPENSE_PENDING_START_DATA
                )
                  break;
                if (nodeData === SUSPENSE_END_DATA) return null;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(
            instance,
            type,
            props,
            rootContainerInstance,
            hostContext,
            internalInstanceHandle,
            shouldWarnDev,
          ) {
            precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
            // get attached.
            updateFiberProps(instance, props);
            var parentNamespace;
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
            // when the legacy root API is removed.
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(
              instance,
              type,
              props,
              parentNamespace,
              rootContainerInstance,
              isConcurrentMode,
              shouldWarnDev,
            );
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
            // when the legacy root API is removed.
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
            // There might be nested nodes so we need to keep track of how
            // deep we are and only break out when we're back on top.
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) return getNextHydratableSibling(node);
                  else depth--;
                } else if (
                  data === SUSPENSE_START_DATA ||
                  data === SUSPENSE_FALLBACK_START_DATA ||
                  data === SUSPENSE_PENDING_START_DATA
                )
                  depth++;
              }
              node = node.nextSibling;
            } // TODO: Warn, we didn't find the end comment boundary.
            return null;
          } // Returns the SuspenseInstance if this node is a direct child of a
          // SuspenseInstance. I.e. if its previous sibling is a Comment with
          // SUSPENSE_x_START_DATA. Otherwise, null.
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
            // There might be nested nodes so we need to keep track of how
            // deep we are and only break out when we're back on top.
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (
                  data === SUSPENSE_START_DATA ||
                  data === SUSPENSE_FALLBACK_START_DATA ||
                  data === SUSPENSE_PENDING_START_DATA
                ) {
                  if (depth === 0) return node;
                  else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            // Retry if any event replaying was blocked on this.
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            // Retry if any event replaying was blocked on this.
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(
            parentContainer,
            textInstance,
            text,
            isConcurrentMode,
          ) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(
            parentType,
            parentProps,
            parentInstance,
            textInstance,
            text,
            isConcurrentMode,
          ) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            if (instance.nodeType === ELEMENT_NODE)
              warnForDeletedHydratableElement(parentContainer, instance);
            else if (instance.nodeType === COMMENT_NODE);
            else warnForDeletedHydratableText(parentContainer, instance);
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            // $FlowFixMe: Only Element or Document can be parent nodes.
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE)
                warnForDeletedHydratableElement(parentNode, instance);
              else if (instance.nodeType === COMMENT_NODE);
              else warnForDeletedHydratableText(parentNode, instance);
            }
          }
          function didNotHydrateInstance(
            parentType,
            parentProps,
            parentInstance,
            instance,
            isConcurrentMode,
          ) {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE)
                warnForDeletedHydratableElement(parentInstance, instance);
              else if (instance.nodeType === COMMENT_NODE);
              else warnForDeletedHydratableText(parentInstance, instance);
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            warnForInsertedHydratedElement(parentContainer, type);
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            warnForInsertedHydratedText(parentContainer, text);
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            // $FlowFixMe: Only Element or Document can be parent nodes.
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            // $FlowFixMe: Only Element or Document can be parent nodes.
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
          }
          function didNotFindHydratableInstance(
            parentType,
            parentProps,
            parentInstance,
            type,
            props,
            isConcurrentMode,
          ) {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              warnForInsertedHydratedElement(parentInstance, type);
          }
          function didNotFindHydratableTextInstance(
            parentType,
            parentProps,
            parentInstance,
            text,
            isConcurrentMode,
          ) {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              warnForInsertedHydratedText(parentInstance, text);
          }
          function errorHydratingContainer(parentContainer) {
            // TODO: This gets logged by onRecoverableError, too, so we should be
            // able to remove it.
            error(
              "An error occurred during hydration. The server HTML was replaced with client content in <%s>.",
              parentContainer.nodeName.toLowerCase(),
            );
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            // TODO: This function is only called on host components. I don't think all of
            // these fields are relevant.
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
          // If the target node is part of a hydrated or not yet rendered subtree, then
          // this may also return a SuspenseComponent or HostRoot to indicate that.
          // Conceptually the HostRoot fiber is a child of the Container node. So if you
          // pass the Container node as the targetNode, you will not actually get the
          // HostRoot back. To get to the HostRoot, you need to pass a child of it.
          // The same thing applies to Suspense boundaries.
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst)
              // Don't return HostRoot or SuspenseComponent here.
              return targetInst;
            // If the direct event target isn't a React owned DOM node, we need to look
            // to see if one of its parents is a React owned DOM node.
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              // We'll check if this is a container root that could include
              // React nodes in the future. We need to check this first because
              // if we're a child of a dehydrated container, we need to first
              // find that inner container before moving on to finding the parent
              // instance. Note that we don't check this field on  the targetNode
              // itself because the fibers are conceptually between the container
              // node and the first child. It isn't surrounding the container node.
              // If it's not a container, we check if it's an instance.
              targetInst =
                parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || (alternate !== null && alternate.child !== null)) {
                  // Next we need to figure out if the node that skipped past is
                  // nested within a dehydrated boundary and if so, which one.
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    // We found a suspense instance. That means that we haven't
                    // hydrated it yet. Even though we leave the comments in the
                    // DOM after hydrating, and there are boundaries in the DOM
                    // that could already be hydrated, we wouldn't have found them
                    // through this pass since if the target is hydrated it would
                    // have had an internalInstanceKey on it.
                    // Let's get the fiber associated with the SuspenseComponent
                    // as the deepest instance.
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) return targetSuspenseInst;
                    // If we don't find a Fiber on the comment, it might be because
                    // we haven't gotten to hydrate it yet. There might still be a
                    // parent boundary that hasn't above this one so we need to find
                    // the outer most that is known.
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          /**
           * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
           * instance, or null if the node was not rendered by this React.
           */ function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (
                inst.tag === HostComponent ||
                inst.tag === HostText ||
                inst.tag === SuspenseComponent ||
                inst.tag === HostRoot
              )
                return inst;
              else return null;
            }
            return null;
          }
          /**
           * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
           * DOM node.
           */ function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText)
              // In Fiber this, is just the state node right now. We assume it will be
              // a host component or host text.
              return inst.stateNode;
            // Without this first invariant, passing a non-DOM-component triggers the next
            // invariant for a missing parent, which is super confusing.
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === undefined)
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null,
              );
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            // $FlowFixMe This is okay but Flow doesn't know it.
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error(
                      (componentName || "React class") +
                        ": " +
                        location +
                        " type `" +
                        typeSpecName +
                        "` is invalid; " +
                        "it must be a function, usually from the `prop-types` package, but received `" +
                        typeof typeSpecs[typeSpecName] +
                        "`." +
                        "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.",
                    );
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",
                  );
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error(
                    "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                    componentName || "React class",
                    location,
                    typeSpecName,
                    typeof error$1,
                  );
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
          }
          var valueStack = [];
          var fiberStack;
          fiberStack = [];
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue,
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              error("Unexpected pop.");
              return;
            }
            if (fiber !== fiberStack[index]) error("Unexpected Fiber popped.");
            cursor.current = valueStack[index];
            valueStack[index] = null;
            fiberStack[index] = null;
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            fiberStack[index] = fiber;
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          warnedAboutMissingGetChildContext = {};
          var emptyContextObject = {};
          Object.freeze(emptyContextObject);
          var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
          var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
          // We use this to get access to the parent context after we have already
          // pushed the next context provider, and now need to merge their contexts.
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
            if (didPushOwnContextIfProvider && isContextProvider(Component))
              // If the fiber is a context provider itself, when we read its context
              // we may have already pushed its own child context on the stack. A context
              // provider should not "see" its own child context. Therefore we read the
              // previous (parent) context instead for a context provider.
              return previousContext;
            return contextStackCursor.current;
          }
          function cacheContext(workInProgress, unmaskedContext, maskedContext) {
            var instance = workInProgress.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
          function getMaskedContext(workInProgress, unmaskedContext) {
            var type = workInProgress.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) return emptyContextObject;
            // Avoid recreating masked context unless unmasked context has changed.
            // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
            // This may trigger infinite loops if componentWillReceiveProps calls setState.
            var instance = workInProgress.stateNode;
            if (
              instance &&
              instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext
            )
              return instance.__reactInternalMemoizedMaskedChildContext;
            var context = {};
            for (var key in contextTypes) context[key] = unmaskedContext[key];
            var name = getComponentNameFromFiber(workInProgress) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
            // Context is created before the class component is instantiated so check for instance.
            if (instance) cacheContext(workInProgress, unmaskedContext, context);
            return context;
          }
          function hasContextChanged() {
            return didPerformWorkStackCursor.current;
          }
          function isContextProvider(type) {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== undefined;
          }
          function popContext(fiber) {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
          function popTopLevelContextObject(fiber) {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            if (contextStackCursor.current !== emptyContextObject)
              throw new Error(
                "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.",
              );
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
          function processChildContext(fiber, type, parentContext) {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
            // It has only been added in Fiber to match the (unintentional) behavior in Stack.
            if (typeof instance.getChildContext !== "function") {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error(
                  "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",
                  componentName,
                  componentName,
                );
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes))
                throw new Error(
                  (getComponentNameFromFiber(fiber) || "Unknown") +
                    '.getChildContext(): key "' +
                    contextKey +
                    '" is not defined in childContextTypes.',
                );
            }
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
            return assign({}, parentContext, childContext);
          }
          function pushContextProvider(workInProgress) {
            var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
            // If the instance does not exist yet, we will push null at first,
            // and replace it on the stack later when invalidating the context.
            var memoizedMergedChildContext =
              (instance && instance.__reactInternalMemoizedMergedChildContext) ||
              emptyContextObject; // Remember the parent context so we can merge with it later.
            // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
            return true;
          }
          function invalidateContextProvider(workInProgress, type, didChange) {
            var instance = workInProgress.stateNode;
            if (!instance)
              throw new Error(
                "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.",
              );
            if (didChange) {
              // Merge parent and own context.
              // Skip this if we're not updating due to sCU.
              // This avoids unnecessarily recomputing memoized values.
              var mergedContext = processChildContext(workInProgress, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
              // It is important to unwind the context in the reverse order.
              pop(didPerformWorkStackCursor, workInProgress);
              pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
              push(contextStackCursor, mergedContext, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            } else {
              pop(didPerformWorkStackCursor, workInProgress);
              push(didPerformWorkStackCursor, didChange, workInProgress);
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            // Currently this is only used with renderSubtreeIntoContainer; not sure if it
            // makes sense elsewhere
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
              throw new Error(
                "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.",
              );
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent:
                  var Component = node.type;
                  if (isContextProvider(Component))
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  break;
              }
              node = node.return;
            } while (node !== null);
            throw new Error(
              "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.",
            );
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            // Push this callback into an internal queue. We'll flush these either in
            // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
            if (syncQueue === null) syncQueue = [callback];
            // Push onto existing queue. Don't need to schedule a callback because
            // we already scheduled one when we created the queue.
            else syncQueue.push(callback);
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            // Only flushes the queue if there's a legacy sync callback scheduled.
            // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
            // it might make more sense for the queue to be a list of roots instead of a
            // list of generic callbacks. Then we can have two: one for legacy roots, one
            // for concurrent roots. And this method would only flush the legacy ones.
            if (includesLegacySyncCallbacks) flushSyncCallbacks();
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              // Prevent re-entrance.
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do callback = callback(isSync);
                  while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          // TODO: Use the unified fiber stack module instead of this local one?
          // Intentionally not using it yet to derisk the initial implementation, because
          // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
          // rather the ids be wrong than crash the whole reconciler.
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress) {
            warnIfNotHydrating();
            return (workInProgress.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress, totalChildren) {
            // This is called right after we reconcile an array (or iterator) of child
            // fibers, because that's the only place where we know how many children in
            // the whole set without doing extra work later, or storing addtional
            // information on the fiber.
            //
            // That's why this function is separate from pushTreeId — it's called during
            // the render phase of the fork parent, not the child, which is where we push
            // the other context values.
            //
            // In the Fizz implementation this is much simpler because the child is
            // rendered in the same callstack as the parent.
            //
            // It might be better to just add a `forks` field to the Fiber type. It would
            // make this module simpler.
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress, totalChildren, index) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
            // of the id; we use it to account for leading 0s.
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index + 1;
            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
            // consideration the leading 1 we use to mark the end of the sequence.
            if (length > 30) {
              // We overflowed the bitwise-safe range. Fall back to slower algorithm.
              // This branch assumes the length of the base id is greater than 5; it won't
              // work for smaller ids, because you need 5 bits per character.
              //
              // We encode the id in multiple steps: first the base id, then the
              // remaining digits.
              //
              // Each 5 bit sequence corresponds to a single base 32 character. So for
              // example, if the current id is 23 bits long, we can convert 20 of those
              // bits into a string of 4 characters, with 3 bits left over.
              //
              // First calculate how many bits in the base id represent a complete
              // sequence of characters.
              var numberOfOverflowBits = baseLength - (baseLength % 5); // Then create a bitmask that selects only those bits.
              var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
              var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
              // we made more room, this time it won't overflow.
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = (1 << restOfLength) | id;
              treeContextOverflow = overflow;
            } else {
              // Normal path
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = (1 << length) | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress) {
            warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
            // in its children.
            var returnFiber = workInProgress.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress, numberOfForks);
              pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << (getBitLength(id) - 1);
          }
          function popTreeContext(workInProgress) {
            // Restore the previous values.
            // This is a bit more complicated than other context-like modules in Fiber
            // because the same Fiber may appear on the stack multiple times and for
            // different reasons. We have to keep popping until the work-in-progress is
            // no longer at the top of the stack.
            while (workInProgress === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null)
              return {
                id: treeContextId,
                overflow: treeContextOverflow,
              };
            else return null;
          }
          function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress;
          }
          function warnIfNotHydrating() {
            if (!getIsHydrating())
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
          // This may have been an insertion or a hydration.
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
          // due to earlier mismatches or a suspended fiber.
          var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary
          var hydrationErrors = null;
          function warnIfHydrating() {
            if (isHydrating)
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
          function markDidThrowWhileHydratingDEV() {
            didSuspendOrErrorDEV = true;
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            return didSuspendOrErrorDEV;
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(
            fiber,
            suspenseInstance,
            treeContext,
          ) {
            nextHydratableInstance =
              getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  isConcurrentMode,
                );
                break;
              case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            if (didSuspendOrErrorDEV)
              // Inside a boundary that already suspended. We're currently rendering the
              // siblings of a suspended node. The mismatch may be due to the missing
              // data, so it's probably a false positive.
              return;
            switch (returnFiber.tag) {
              case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      isConcurrentMode,
                    );
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      _isConcurrentMode,
                    );
                    break;
                }
                break;
              case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(
                        _parentInstance,
                        _text2,
                      );
                      break;
                  }
                break;
              default:
                return;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = (fiber.flags & ~Hydrating) | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane,
                  };
                  fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                  // This simplifies the code for getHostSibling and deleting nodes,
                  // since it doesn't have to consider all Suspense boundaries and
                  // check if they're dehydrated ones or not.
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                  // it during the first pass. Instead, we'll reenter it later.
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (
              (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags
            );
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error(
              "Hydration failed because the initial UI does not match what was rendered on the server.",
            );
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) return;
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              } // Nothing to hydrate. Make it an insertion.
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              } // If we can't hydrate this instance let's try the next one.
              // We use this as a heuristic. It's based on intuition and not data so it
              // might be flawed or unnecessary.
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              } // We matched the next one, we'll now assume that the first one was
              // superfluous and we'll delete it. Since we can't eagerly delete it
              // we'll have to schedule a deletion. To do that, this node needs a dummy
              // fiber associated with it.
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(
              instance,
              fiber.type,
              fiber.memoizedProps,
              rootContainerInstance,
              hostContext,
              fiber,
              shouldWarnIfMismatchDev,
            ); // TODO: Type this specific to this type of component.
            fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update.
            if (updatePayload !== null) return true;
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              // We assume that prepareToHydrateHostTextInstance is called in a context where the
              // hydration parent is the parent host component of this host text.
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null)
                switch (returnFiber.tag) {
                  case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode,
                    );
                    break;
                  case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2,
                    );
                    break;
                }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance)
              throw new Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.",
              );
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance)
              throw new Error(
                "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.",
              );
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (
              parent !== null &&
              parent.tag !== HostComponent &&
              parent.tag !== HostRoot &&
              parent.tag !== SuspenseComponent
            )
              parent = parent.return;
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber)
              // We're deeper than the current hydration context, inside an inserted
              // tree.
              return false;
            if (!isHydrating) {
              // If we're not currently hydrating but we're in a hydration context, then
              // we were an insertion and now need to pop up reenter hydration of our
              // siblings.
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            } // If we have any remaining hydratable nodes, we need to delete them now.
            // We only do this deeper than head and body since they tend to have random
            // other nodes in them. We also ignore components with pure text content in
            // side of them. We also don't delete anything inside the root container.
            if (
              fiber.tag !== HostRoot &&
              (fiber.tag !== HostComponent ||
                (shouldDeleteUnhydratedTailInstances(fiber.type) &&
                  !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
            ) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent)
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            else
              nextHydratableInstance = hydrationParentFiber
                ? getNextHydratableSibling(fiber.stateNode)
                : null;
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              // Successfully completed a forced client render. The errors that occurred
              // during the hydration attempt are now recovered. We will log them in
              // commit phase, once the entire tree has finished.
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error) {
            if (hydrationErrors === null) hydrationErrors = [error];
            else hydrationErrors.push(error);
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function (fiber, instance) {},
            flushPendingUnsafeLifecycleWarnings: function () {},
            recordLegacyContextWarning: function (fiber, instance) {},
            flushLegacyContextWarning: function () {},
            discardPendingWarnings: function () {},
          };
          var findStrictRoot = function (fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function (set) {
            var array = [];
            set.forEach(function (value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
            // Dedupe strategy: Warn once per component.
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
            if (
              typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true
            )
              pendingComponentWillMountWarnings.push(fiber);
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillMount === "function"
            )
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            if (
              typeof instance.componentWillReceiveProps === "function" &&
              instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
            )
              pendingComponentWillReceivePropsWarnings.push(fiber);
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillReceiveProps === "function"
            )
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            if (
              typeof instance.componentWillUpdate === "function" &&
              instance.componentWillUpdate.__suppressDeprecationWarning !== true
            )
              pendingComponentWillUpdateWarnings.push(fiber);
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillUpdate === "function"
            )
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
            // We do an initial pass to gather component names
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function (fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                UNSAFE_componentWillMountUniqueNames.add(
                  getComponentNameFromFiber(fiber) || "Component",
                );
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                componentWillReceivePropsUniqueNames.add(
                  getComponentNameFromFiber(fiber) || "Component",
                );
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(
                  getComponentNameFromFiber(fiber) || "Component",
                );
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(
                  getComponentNameFromFiber(fiber) || "Component",
                );
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            } // Finally, we flush all the warnings
            // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error(
                "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
                sortedNames,
              );
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error(
                "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",
                _sortedNames,
              );
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error(
                "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
                _sortedNames2,
              );
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn(
                "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
                _sortedNames3,
              );
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn(
                "componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
                _sortedNames4,
              );
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn(
                "componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
                _sortedNames5,
              );
            }
          };
          var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error(
                "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.",
              );
              return;
            } // Dedup strategy: Warn once per component.
            if (didWarnAboutLegacyContext.has(fiber.type)) return;
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (
              fiber.type.contextTypes != null ||
              fiber.type.childContextTypes != null ||
              (instance !== null && typeof instance.getChildContext === "function")
            ) {
              if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
              if (fiberArray.length === 0) return;
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function (fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error(
                  "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",
                  sortedNames,
                );
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              // Resolve default props. Taken from ReactElement
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps)
                if (props[propName] === undefined) props[propName] = defaultProps[propName];
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          // Use this to detect multiple renderers using the same context
          rendererSigil = {};
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            // This is called right before React yields execution, to ensure `readContext`
            // cannot be called outside the render phase.
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            isDisallowedContextReadInDEV = false;
          }
          function enterDisallowedContextReadInDEV() {
            isDisallowedContextReadInDEV = true;
          }
          function exitDisallowedContextReadInDEV() {
            isDisallowedContextReadInDEV = false;
          }
          function pushProvider(providerFiber, context, nextValue) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            if (
              context._currentRenderer !== undefined &&
              context._currentRenderer !== null &&
              context._currentRenderer !== rendererSigil
            )
              error(
                "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.",
              );
            context._currentRenderer = rendererSigil;
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            context._currentValue = currentValue;
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
            // Update the child lanes of all the ancestors, including the alternates.
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null)
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes))
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
              if (node === propagationRoot) break;
              node = node.return;
            }
            if (node !== propagationRoot)
              error(
                "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.",
              );
          }
          function propagateContextChange(workInProgress, context, renderLanes) {
            propagateContextChange_eager(workInProgress, context, renderLanes);
          }
          function propagateContextChange_eager(workInProgress, context, renderLanes) {
            var fiber = workInProgress.child;
            if (fiber !== null)
              // Set the return pointer of the child to the work-in-progress fiber.
              fiber.return = workInProgress;
            while (fiber !== null) {
              var nextFiber = void 0; // Visit this fiber.
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  // Check if the context matches.
                  if (dependency.context === context) {
                    // Match! Schedule an update on this fiber.
                    if (fiber.tag === ClassComponent) {
                      // Schedule a force update on the work-in-progress.
                      var lane = pickArbitraryLane(renderLanes);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                      // update to the current fiber, too, which means it will persist even if
                      // this render is thrown away. Since it's a race condition, not sure it's
                      // worth fixing.
                      // Inlined `enqueueUpdate` to remove interleaved update check
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null);
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null)
                          // This is the first update. Create a circular list.
                          update.next = update;
                        else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                    var alternate = fiber.alternate;
                    if (alternate !== null)
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                    list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider)
                // Don't scan deeper if this is a matching provider
                nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
              else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null)
                  throw new Error(
                    "We just came from a parent so we must have had a parent. This is a bug in React.",
                  );
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null)
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
              } // Traverse down.
              else nextFiber = fiber.child;
              if (nextFiber !== null)
                // Set the return pointer of the child to the work-in-progress fiber.
                nextFiber.return = fiber;
              else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress) {
                    // We're back to the root of this subtree. Exit.
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    // Set the return pointer of the sibling to the work-in-progress fiber.
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  } // No more siblings. Traverse up.
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress, renderLanes) {
            currentlyRenderingFiber = workInProgress;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes))
                  // Context list has a pending update. Mark that this fiber performed work.
                  markWorkInProgressReceivedUpdate();
                // Reset the work-in-progress list
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context) {
            // This warning would fire if you read context inside a Hook like useMemo.
            // Unlike the class check below, it's not enforced in production for perf.
            if (isDisallowedContextReadInDEV)
              error(
                "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().",
              );
            var value = context._currentValue;
            if (lastFullyObservedContext === context);
            else {
              var contextItem = {
                context: context,
                memoizedValue: value,
                next: null,
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null)
                  throw new Error(
                    "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().",
                  );
                // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                };
              } // Append a new context item.
              else lastContextDependency = lastContextDependency.next = contextItem;
            }
            return value;
          }
          // render. When this render exits, either because it finishes or because it is
          // interrupted, the interleaved updates will be transferred onto the main part
          // of the queue.
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) concurrentQueues = [queue];
            else concurrentQueues.push(queue);
          }
          function finishQueueingConcurrentUpdates() {
            // Transfer the interleaved updates onto the main queue. Each queue has a
            // `pending` field and an `interleaved` field. When they are not null, they
            // point to the last node in a circular linked list. We need to append the
            // interleaved list to the end of the pending list by joining them into a
            // single, circular list.
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              // This is the first update. Create a circular list.
              update.next = update; // At the end of the current render, this queue's interleaved updates will
              // be transferred to the pending queue.
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              // This is the first update. Create a circular list.
              update.next = update; // At the end of the current render, this queue's interleaved updates will
              // be transferred to the pending queue.
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              // This is the first update. Create a circular list.
              update.next = update; // At the end of the current render, this queue's interleaved updates will
              // be transferred to the pending queue.
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          } // Calling this function outside this module should only be done for backwards
          // compatibility and should always be accompanied by a warning.
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            // Update the source fiber's lanes
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags)
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              else if ((parent.flags & (Placement | Hydrating)) !== NoFlags)
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root = node.stateNode;
              return root;
            } else return null;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
          // It should only be read right after calling `processUpdateQueue`, via
          // `checkHasForceUpdateAfterProcessing`.
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes,
              },
              effects: null,
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current, workInProgress) {
            // Clone the update queue from current. Unless it's already a clone.
            var queue = workInProgress.updateQueue;
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects,
              };
              workInProgress.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime: eventTime,
              lane: lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null,
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null)
              // Only occurs if the fiber has been unmounted.
              return null;
            var sharedQueue = updateQueue.shared;
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error(
                "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.",
              );
              didWarnUpdateInsideUpdate = true;
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              // This is an unsafe render phase update. Add directly to the update
              // queue so we can process it immediately during the current render.
              var pending = sharedQueue.pending;
              if (pending === null)
                // This is the first update. Create a circular list.
                update.next = update;
              else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
              // this fiber. This is for backwards compatibility in the case where you
              // update a different component during render phase than the one that is
              // currently renderings (a pattern that is accompanied by a warning).
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
          function entangleTransitions(root, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null)
              // Only occurs if the fiber has been unmounted.
              return;
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
              // have finished. We can remove them from the shared queue, which represents
              // a superset of the actually pending lanes. In some cases we may entangle
              // more than we need to, but that's OK. In fact it's worse if we *don't*
              // entangle when we should.
              queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
              // the lane finished since the last time we entangled it. So we need to
              // entangle it again, just to be sure.
              markRootEntangled(root, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
            // Captured updates are updates that are thrown by a child during the render
            // phase. They should be discarded if the render is aborted. Therefore,
            // we should only put them on the work-in-progress queue, not the current one.
            var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
            var current = workInProgress.alternate;
            if (current !== null) {
              var currentQueue = current.updateQueue;
              if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  // Loop through the updates and clone them.
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null,
                    };
                    if (newLast === null) newFirst = newLast = clone;
                    else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null); // Append the captured update the end of the cloned list.
                  if (newLast === null) newFirst = newLast = capturedUpdate;
                  else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } // There are no base updates.
                else newFirst = newLast = capturedUpdate;
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects,
                };
                workInProgress.updateQueue = queue;
                return;
              }
            } // Append the update to the end of the list.
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
            else lastBaseUpdate.next = capturedUpdate;
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(
            workInProgress,
            queue,
            update,
            prevState,
            nextProps,
            instance,
          ) {
            switch (update.tag) {
              case ReplaceState:
                var payload = update.payload;
                if (typeof payload === "function") {
                  enterDisallowedContextReadInDEV();
                  var nextState = payload.call(instance, prevState, nextProps);
                  if (workInProgress.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                  return nextState;
                } // State object
                return payload;
              case CaptureUpdate:
                workInProgress.flags = (workInProgress.flags & ~ShouldCapture) | DidCapture;
              // Intentional fallthrough
              case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  enterDisallowedContextReadInDEV();
                  partialState = _payload.call(instance, prevState, nextProps);
                  if (workInProgress.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                } // Partial state object
                else partialState = _payload;
                if (partialState === null || partialState === undefined)
                  // Null and undefined are treated as no-ops.
                  return prevState;
                // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
              case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress, props, instance, renderLanes) {
            // This is always non-null on a ClassComponent or HostRoot
            var queue = workInProgress.updateQueue;
            hasForceUpdate = false;
            currentlyProcessingQueue = queue.shared;
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
              // and last so that it's non-circular.
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null; // Append pending updates to base queue
              if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
              else lastBaseUpdate.next = firstPendingUpdate;
              lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
              // we need to transfer the updates to that queue, too. Because the base
              // queue is a singly-linked list with no cycles, we can append to both
              // lists and take advantage of structural sharing.
              // TODO: Pass `current` as argument
              var current = workInProgress.alternate;
              if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null)
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  else currentLastBaseUpdate.next = firstPendingUpdate;
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            } // These values may change as we process the queue.
            if (firstBaseUpdate !== null) {
              // Iterate through the list of updates to compute the result.
              var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
              // from the original lanes.
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  // Priority is insufficient. Skip this update. If this is the first
                  // skipped update, the previous update/state is the new base
                  // update/state.
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  // Update the remaining priority in the queue.
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  // This update does have sufficient priority.
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null,
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  } // Process this update.
                  newState = getStateFromUpdate(
                    workInProgress,
                    queue,
                    update,
                    newState,
                    props,
                    instance,
                  );
                  var callback = update.callback;
                  if (
                    callback !== null && // If the update was already committed, we should not queue its
                    // callback again.
                    update.lane !== NoLane
                  ) {
                    workInProgress.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) queue.effects = [update];
                    else effects.push(update);
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) break;
                  else {
                    // An update was scheduled from inside a reducer. Add the new
                    // pending updates to the end of the list and keep processing.
                    var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                    // unravel them when transferring them to the base queue.
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) newBaseState = newState;
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
              // process them during this render, but we do need to track which lanes
              // are remaining.
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null)
                // `queue.lanes` is used for entangling transitions. We can set it back to
                // zero once the queue is empty.
                queue.shared.lanes = NoLanes;
              // Set the remaining expiration time to be whatever is remaining in the queue.
              // This should be fine because the only two other things that contribute to
              // expiration time are props and context. We're already in the middle of the
              // begin phase by the time we start processing the queue, so we've already
              // dealt with the props. Context in components that specify
              // shouldComponentUpdate is tricky; but we'll have to account for
              // that regardless.
              markSkippedUpdateLanes(newLanes);
              workInProgress.lanes = newLanes;
              workInProgress.memoizedState = newState;
            }
            currentlyProcessingQueue = null;
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function")
              throw new Error(
                "Invalid argument passed as callback. Expected a function. Instead " +
                  ("received: " + callback),
              );
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            // Commit the effects
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null)
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
          }
          var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
          // We'll use it to determine whether we need to initialize legacy refs.
          var emptyRefsObject = new React.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function (callback, callerName) {
            if (callback === null || typeof callback === "function") return;
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error(
                "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
                callerName,
                callback,
              );
            }
          };
          warnOnUndefinedDerivedState = function (type, partialState) {
            if (partialState === undefined) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error(
                  "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
                  componentName,
                );
              }
            }
          }; // This is so gross but it's at least non-critical and can be removed if
          // it causes problems. This is meant to give a nicer error message for
          // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
          // ...)) which otherwise throws a "_processChildContext is not a function"
          // exception.
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function () {
              throw new Error(
                "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).",
              );
            },
          });
          Object.freeze(fakeInternalInstance);
          function applyDerivedStateFromProps(
            workInProgress,
            ctor,
            getDerivedStateFromProps,
            nextProps,
          ) {
            var prevState = workInProgress.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            if (workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
            var memoizedState =
              partialState === null || partialState === undefined
                ? prevState
                : assign({}, prevState, partialState);
            workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
            // base state.
            if (workInProgress.lanes === NoLanes) {
              // Queue is always non-null for classes
              var updateQueue = workInProgress.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted: isMounted,
            enqueueSetState: function (inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
                update.callback = callback;
              }
              var root = enqueueUpdate(fiber, update, lane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
              }
              markStateUpdateScheduled(fiber, lane);
            },
            enqueueReplaceState: function (inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "replaceState");
                update.callback = callback;
              }
              var root = enqueueUpdate(fiber, update, lane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
              }
              markStateUpdateScheduled(fiber, lane);
            },
            enqueueForceUpdate: function (inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "forceUpdate");
                update.callback = callback;
              }
              var root = enqueueUpdate(fiber, update, lane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
              }
              markForceUpdateScheduled(fiber, lane);
            },
          };
          function checkShouldComponentUpdate(
            workInProgress,
            ctor,
            oldProps,
            newProps,
            oldState,
            newState,
            nextContext,
          ) {
            var instance = workInProgress.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  // Invoke the function an extra time to help detect side-effects.
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === undefined)
                error(
                  "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
                  getComponentNameFromType(ctor) || "Component",
                );
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent)
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            return true;
          }
          function checkClassInstance(workInProgress, ctor, newProps) {
            var instance = workInProgress.stateNode;
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function")
                error(
                  "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",
                  name,
                );
              else
                error(
                  "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",
                  name,
                );
            }
            if (
              instance.getInitialState &&
              !instance.getInitialState.isReactClassApproved &&
              !instance.state
            )
              error(
                "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
                name,
              );
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved)
              error(
                "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
                name,
              );
            if (instance.propTypes)
              error(
                "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",
                name,
              );
            if (instance.contextType)
              error(
                "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
                name,
              );
            if (instance.contextTypes)
              error(
                "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",
                name,
              );
            if (
              ctor.contextType &&
              ctor.contextTypes &&
              !didWarnAboutContextTypeAndContextTypes.has(ctor)
            ) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error(
                "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",
                name,
              );
            }
            if (typeof instance.componentShouldUpdate === "function")
              error(
                "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
                name,
              );
            if (
              ctor.prototype &&
              ctor.prototype.isPureReactComponent &&
              typeof instance.shouldComponentUpdate !== "undefined"
            )
              error(
                "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
                getComponentNameFromType(ctor) || "A pure component",
              );
            if (typeof instance.componentDidUnmount === "function")
              error(
                "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
                name,
              );
            if (typeof instance.componentDidReceiveProps === "function")
              error(
                "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
                name,
              );
            if (typeof instance.componentWillRecieveProps === "function")
              error(
                "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
                name,
              );
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function")
              error(
                "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
                name,
              );
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== undefined && hasMutatedProps)
              error(
                "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
                name,
                name,
              );
            if (instance.defaultProps)
              error(
                "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
                name,
                name,
              );
            if (
              typeof instance.getSnapshotBeforeUpdate === "function" &&
              typeof instance.componentDidUpdate !== "function" &&
              !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
            ) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error(
                "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
                getComponentNameFromType(ctor),
              );
            }
            if (typeof instance.getDerivedStateFromProps === "function")
              error(
                "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                name,
              );
            if (typeof instance.getDerivedStateFromError === "function")
              error(
                "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                name,
              );
            if (typeof ctor.getSnapshotBeforeUpdate === "function")
              error(
                "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
                name,
              );
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state)))
              error("%s.state: must be set to an object or null", name);
            if (
              typeof instance.getChildContext === "function" &&
              typeof ctor.childContextTypes !== "object"
            )
              error(
                "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
                name,
              );
          }
          function adoptClassInstance(workInProgress, instance) {
            instance.updater = classComponentUpdater;
            workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
            set(instance, workInProgress);
            instance._reactInternalInstance = fakeInternalInstance;
          }
          function constructClassInstance(workInProgress, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            if ("contextType" in ctor) {
              var isValid =
                contextType === null ||
                (contextType !== undefined &&
                  contextType.$$typeof === REACT_CONTEXT_TYPE &&
                  contextType._context === undefined); // Not a <Context.Consumer>
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === undefined)
                  addendum =
                    " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== "object")
                  addendum = " However, it is set to a " + typeof contextType + ".";
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE)
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                else if (contextType._context !== undefined)
                  // <Context.Consumer>
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                else
                  addendum =
                    " However, it is set to an object with keys {" +
                    Object.keys(contextType).join(", ") +
                    "}.";
                error(
                  "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
                  getComponentNameFromType(ctor) || "Component",
                  addendum,
                );
              }
            }
            if (typeof contextType === "object" && contextType !== null)
              context = readContext(contextType);
            else {
              unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
              context = isLegacyContextConsumer
                ? getMaskedContext(workInProgress, unmaskedContext)
                : emptyContextObject;
            }
            var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
            if (workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context); // eslint-disable-line no-new
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            var state = (workInProgress.memoizedState =
              instance.state !== null && instance.state !== undefined ? instance.state : null);
            adoptClassInstance(workInProgress, instance);
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error(
                  "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
                  componentName,
                  instance.state === null ? "null" : "undefined",
                  componentName,
                );
              }
            } // If new component APIs are defined, "unsafe" lifecycles won't be called.
            // Warn about these lifecycles if they are present.
            // Don't warn about react-lifecycles-compat polyfilled methods though.
            if (
              typeof ctor.getDerivedStateFromProps === "function" ||
              typeof instance.getSnapshotBeforeUpdate === "function"
            ) {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (
                typeof instance.componentWillMount === "function" &&
                instance.componentWillMount.__suppressDeprecationWarning !== true
              )
                foundWillMountName = "componentWillMount";
              else if (typeof instance.UNSAFE_componentWillMount === "function")
                foundWillMountName = "UNSAFE_componentWillMount";
              if (
                typeof instance.componentWillReceiveProps === "function" &&
                instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
              )
                foundWillReceivePropsName = "componentWillReceiveProps";
              else if (typeof instance.UNSAFE_componentWillReceiveProps === "function")
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              if (
                typeof instance.componentWillUpdate === "function" &&
                instance.componentWillUpdate.__suppressDeprecationWarning !== true
              )
                foundWillUpdateName = "componentWillUpdate";
              else if (typeof instance.UNSAFE_componentWillUpdate === "function")
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              if (
                foundWillMountName !== null ||
                foundWillReceivePropsName !== null ||
                foundWillUpdateName !== null
              ) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName =
                  typeof ctor.getDerivedStateFromProps === "function"
                    ? "getDerivedStateFromProps()"
                    : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error(
                    "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",
                    _componentName,
                    newApiName,
                    foundWillMountName !== null ? "\n  " + foundWillMountName : "",
                    foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "",
                    foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "",
                  );
                }
              }
            }
            // ReactFiberContext usually updates this cache but can't for newly-created instances.
            if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
            return instance;
          }
          function callComponentWillMount(workInProgress, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") instance.componentWillMount();
            if (typeof instance.UNSAFE_componentWillMount === "function")
              instance.UNSAFE_componentWillMount();
            if (oldState !== instance.state) {
              error(
                "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                getComponentNameFromFiber(workInProgress) || "Component",
              );
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function")
              instance.componentWillReceiveProps(newProps, nextContext);
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function")
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            if (instance.state !== oldState) {
              var componentName = getComponentNameFromFiber(workInProgress) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error(
                  "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                  componentName,
                );
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          } // Invokes the mount life-cycles on a previously never rendered instance.
          function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
            checkClassInstance(workInProgress, ctor, newProps);
            var instance = workInProgress.stateNode;
            instance.props = newProps;
            instance.state = workInProgress.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null)
              instance.context = readContext(contextType);
            else {
              var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
              instance.context = getMaskedContext(workInProgress, unmaskedContext);
            }
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error(
                  "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
                  componentName,
                );
              }
            }
            if (workInProgress.mode & StrictLegacyMode)
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            instance.state = workInProgress.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress.memoizedState;
            } // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (
              typeof ctor.getDerivedStateFromProps !== "function" &&
              typeof instance.getSnapshotBeforeUpdate !== "function" &&
              (typeof instance.UNSAFE_componentWillMount === "function" ||
                typeof instance.componentWillMount === "function")
            ) {
              callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
              // process them now.
              processUpdateQueue(workInProgress, newProps, instance, renderLanes);
              instance.state = workInProgress.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              fiberFlags |= LayoutStatic;
              if ((workInProgress.mode & StrictEffectsMode) !== NoMode)
                fiberFlags |= MountLayoutDev;
              workInProgress.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
            var instance = workInProgress.stateNode;
            var oldProps = workInProgress.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null)
              nextContext = readContext(contextType);
            else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
              nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles =
              typeof getDerivedStateFromProps === "function" ||
              typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
            // ever the previously attempted to render - not the "current". However,
            // during componentDidUpdate we pass the "current" props.
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillReceiveProps === "function" ||
                typeof instance.componentWillReceiveProps === "function")
            ) {
              if (oldProps !== newProps || oldContext !== nextContext)
                callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress.memoizedState;
            var newState = (instance.state = oldState);
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            newState = workInProgress.memoizedState;
            if (
              oldProps === newProps &&
              oldState === newState &&
              !hasContextChanged() &&
              !checkHasForceUpdateAfterProcessing()
            ) {
              // If an update was already in progress, we should schedule an Update
              // effect even though we're bailing out, so that cWU/cDU are called.
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode)
                  fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress.memoizedState;
            }
            var shouldUpdate =
              checkHasForceUpdateAfterProcessing() ||
              checkShouldComponentUpdate(
                workInProgress,
                ctor,
                oldProps,
                newProps,
                oldState,
                newState,
                nextContext,
              );
            if (shouldUpdate) {
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillMount === "function" ||
                  typeof instance.componentWillMount === "function")
              ) {
                if (typeof instance.componentWillMount === "function")
                  instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === "function")
                  instance.UNSAFE_componentWillMount();
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode)
                  _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
              }
            } else {
              // If an update was already in progress, we should schedule an Update
              // effect even though we're bailing out, so that cWU/cDU are called.
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode)
                  _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
              } // If shouldComponentUpdate returned false, we should still update the
              // memoized state to indicate that this work can be reused.
              workInProgress.memoizedProps = newProps;
              workInProgress.memoizedState = newState;
            } // Update the existing instance's state, props, and context pointers even
            // if shouldComponentUpdate returns false.
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          } // Invokes the update life-cycles and returns false if it shouldn't rerender.
          function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
            var instance = workInProgress.stateNode;
            cloneUpdateQueue(current, workInProgress);
            var unresolvedOldProps = workInProgress.memoizedProps;
            var oldProps =
              workInProgress.type === workInProgress.elementType
                ? unresolvedOldProps
                : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null)
              nextContext = readContext(contextType);
            else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
              nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles =
              typeof getDerivedStateFromProps === "function" ||
              typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
            // ever the previously attempted to render - not the "current". However,
            // during componentDidUpdate we pass the "current" props.
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillReceiveProps === "function" ||
                typeof instance.componentWillReceiveProps === "function")
            ) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext)
                callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress.memoizedState;
            var newState = (instance.state = oldState);
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            newState = workInProgress.memoizedState;
            if (
              unresolvedOldProps === unresolvedNewProps &&
              oldState === newState &&
              !hasContextChanged() &&
              !checkHasForceUpdateAfterProcessing() &&
              !enableLazyContextPropagation
            ) {
              // If an update was already in progress, we should schedule an Update
              // effect even though we're bailing out, so that cWU/cDU are called.
              if (typeof instance.componentDidUpdate === "function") {
                if (
                  unresolvedOldProps !== current.memoizedProps ||
                  oldState !== current.memoizedState
                )
                  workInProgress.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (
                  unresolvedOldProps !== current.memoizedProps ||
                  oldState !== current.memoizedState
                )
                  workInProgress.flags |= Snapshot;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress.memoizedState;
            }
            var shouldUpdate =
              checkHasForceUpdateAfterProcessing() ||
              checkShouldComponentUpdate(
                workInProgress,
                ctor,
                oldProps,
                newProps,
                oldState,
                newState,
                nextContext,
              ) || // TODO: In some cases, we'll end up checking if context has changed twice,
              // both before and after `shouldComponentUpdate` has been called. Not ideal,
              // but I'm loath to refactor this function. This only happens for memoized
              // components so it's not that common.
              enableLazyContextPropagation;
            if (shouldUpdate) {
              // In order to support react-lifecycles-compat polyfilled components,
              // Unsafe lifecycles should not be invoked for components using the new APIs.
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillUpdate === "function" ||
                  typeof instance.componentWillUpdate === "function")
              ) {
                if (typeof instance.componentWillUpdate === "function")
                  instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === "function")
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.componentDidUpdate === "function") workInProgress.flags |= Update;
              if (typeof instance.getSnapshotBeforeUpdate === "function")
                workInProgress.flags |= Snapshot;
            } else {
              // If an update was already in progress, we should schedule an Update
              // effect even though we're bailing out, so that cWU/cDU are called.
              if (typeof instance.componentDidUpdate === "function") {
                if (
                  unresolvedOldProps !== current.memoizedProps ||
                  oldState !== current.memoizedState
                )
                  workInProgress.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (
                  unresolvedOldProps !== current.memoizedProps ||
                  oldState !== current.memoizedState
                )
                  workInProgress.flags |= Snapshot;
              } // If shouldComponentUpdate returned false, we should still update the
              // memoized props/state to indicate that this work can be reused.
              workInProgress.memoizedProps = newProps;
              workInProgress.memoizedState = newState;
            } // Update the existing instance's state, props, and context pointers even
            // if shouldComponentUpdate returns false.
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function (child, returnFiber) {};
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          /**
           * Warn if there's no key explicitly set on dynamic arrays of children or
           * object keys are not valid. This allows us to keep track of children between
           * updates.
           */ ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function (child, returnFiber) {
            if (child === null || typeof child !== "object") return;
            if (!child._store || child._store.validated || child.key != null) return;
            if (typeof child._store !== "object")
              throw new Error(
                "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.",
              );
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) return;
            ownerHasKeyUseWarning[componentName] = true;
            error(
              'Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.',
            );
          };
          function coerceRef(returnFiber, current, element) {
            var mixedRef = element.ref;
            if (
              mixedRef !== null &&
              typeof mixedRef !== "function" &&
              typeof mixedRef !== "object"
            ) {
              // TODO: Clean this up once we turn on the string ref warning for
              // everyone, because the strict mode case will no longer be relevant
              if (
                (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)
              ) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  error(
                    'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                    mixedRef,
                  );
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent)
                    throw new Error(
                      "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref",
                    );
                  inst = ownerFiber.stateNode;
                }
                if (!inst)
                  throw new Error(
                    "Missing owner for string ref " +
                      mixedRef +
                      ". This error is likely caused by a " +
                      "bug in React. Please file an issue.",
                  );
                // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, "ref");
                var stringRef = "" + mixedRef; // Check if previous string ref matches new string ref
                if (
                  current !== null &&
                  current.ref !== null &&
                  typeof current.ref === "function" &&
                  current.ref._stringRef === stringRef
                )
                  return current.ref;
                var ref = function (value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject)
                    // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                  if (value === null) delete refs[stringRef];
                  else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string")
                  throw new Error(
                    "Expected ref to be a function, a string, an object returned by React.createRef(), or null.",
                  );
                if (!element._owner)
                  throw new Error(
                    "Element ref was specified as a string (" +
                      mixedRef +
                      ") but no owner was set. This could happen for one of" +
                      " the following reasons:\n" +
                      "1. You may be adding a ref to a function component\n" +
                      "2. You may be adding a ref to a component that was not created inside a component's render method\n" +
                      "3. You have multiple copies of React loaded\n" +
                      "See https://reactjs.org/link/refs-must-have-owner for more information.",
                  );
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error(
              "Objects are not valid as a React child (found: " +
                (childString === "[object Object]"
                  ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
                  : childString) +
                "). " +
                "If you meant to render a collection of children, use an array " +
                "instead.",
            );
          }
          function warnOnFunctionType(returnFiber) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) return;
            ownerHasFunctionTypeWarning[componentName] = true;
            error(
              "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.",
            );
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          } // This wrapper function exists because I expect to clone the code in each path
          // to be able to optimize each path individually by branching early. This needs
          // a compiler or we can do it manually. Helpers that don't need this branching
          // live outside of this function.
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects)
                // Noop.
                return;
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else deletions.push(childToDelete);
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects)
                // Noop.
                return null;
              // TODO: For the shouldClone case, this could be micro-optimized a bit by
              // assuming that after the first child we've already added everything.
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              // Add the remaining children to a temporary map so that we can find them by
              // keys quickly. Implicit (null) keys get added to this set with their index
              // instead.
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null)
                  existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              // We currently set sibling to null and index to 0 here because it is easy
              // to forget to do before returning it. E.g. for the single child case.
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current = newFiber.alternate;
              if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                  // This is a move.
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } // This item can stay in place.
                else return oldIndex;
              } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              // This is simpler for the single child case. We only need to do a
              // placement for inserting new children.
              if (shouldTrackSideEffects && newFiber.alternate === null)
                newFiber.flags |= Placement;
              return newFiber;
            }
            function updateTextNode(returnFiber, current, textContent, lanes) {
              if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE)
                return updateFragment(
                  returnFiber,
                  current,
                  element.props.children,
                  lanes,
                  element.key,
                );
              if (current !== null) {
                if (
                  current.elementType === elementType ||
                  isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  (typeof elementType === "object" &&
                    elementType !== null &&
                    elementType.$$typeof === REACT_LAZY_TYPE &&
                    resolveLazy(elementType) === current.type)
                ) {
                  // Move based on index
                  var existing = useFiber(current, element.props);
                  existing.ref = coerceRef(returnFiber, current, element);
                  existing.return = returnFiber;
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                  return existing;
                }
              } // Insert
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current, portal, lanes) {
              if (
                current === null ||
                current.tag !== HostPortal ||
                current.stateNode.containerInfo !== portal.containerInfo ||
                current.stateNode.implementation !== portal.implementation
              ) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment(returnFiber, current, fragment, lanes, key) {
              if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (
                (typeof newChild === "string" && newChild !== "") ||
                typeof newChild === "number"
              ) {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  case REACT_PORTAL_TYPE:
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "function") warnOnFunctionType(returnFiber);
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              // Update the fiber if the keys match, otherwise return null.
              var key = oldFiber !== null ? oldFiber.key : null;
              if (
                (typeof newChild === "string" && newChild !== "") ||
                typeof newChild === "number"
              ) {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    if (newChild.key === key)
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    else return null;
                  case REACT_PORTAL_TYPE:
                    if (newChild.key === key)
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    else return null;
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) return null;
                  return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "function") warnOnFunctionType(returnFiber);
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (
                (typeof newChild === "string" && newChild !== "") ||
                typeof newChild === "number"
              ) {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var _matchedFiber =
                      existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  case REACT_PORTAL_TYPE:
                    var _matchedFiber2 =
                      existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(
                      existingChildren,
                      returnFiber,
                      newIdx,
                      init(payload),
                      lanes,
                    );
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "function") warnOnFunctionType(returnFiber);
              return null;
            }
            /**
             * Warns if there is a duplicate or missing key
             */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
              if (typeof child !== "object" || child === null) return knownKeys;
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") break;
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error(
                    "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
                    key,
                  );
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              // First, validate keys.
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  // TODO: This breaks on empty slots like null children. That's
                  // unfortunate because it triggers the slow path all the time. We need
                  // a better way to communicate whether this was a miss or null,
                  // boolean, undefined, etc.
                  if (oldFiber === null) oldFiber = nextOldFiber;
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null)
                    // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null)
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = newFiber;
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                else previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) continue;
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null)
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                  else previousNewFiber.sibling = _newFiber;
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              } // Add all children to a key map for quick lookups.
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChildren[newIdx],
                  lanes,
                );
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null)
                      // The new fiber is a work in progress, but if there exists a
                      // current, that means that we reused the fiber. We need to delete
                      // it from the child list so that we don't add it to the deletion
                      // list.
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                  else previousNewFiber.sibling = _newFiber2;
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects)
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function (child) {
                  return deleteChild(returnFiber, child);
                });
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChildrenIterable,
              lanes,
            ) {
              // This is the same implementation as reconcileChildrenArray(),
              // but using the iterator instead.
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function")
                throw new Error(
                  "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.",
                );
              // We don't support rendering Generators because it's a mutation.
              // See https://github.com/facebook/react/issues/12995
              if (
                typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator"
              ) {
                if (!didWarnAboutGenerators)
                  error(
                    "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.",
                  );
                didWarnAboutGenerators = true;
              } // Warn about using Maps as children
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps)
                  error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead.",
                  );
                didWarnAboutMaps = true;
              } // First, validate keys.
              // We'll get a different iterator later for the main pass.
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) throw new Error("An iterable object provided no iterator.");
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  // TODO: This breaks on empty slots like null children. That's
                  // unfortunate because it triggers the slow path all the time. We need
                  // a better way to communicate whether this was a miss or null,
                  // boolean, undefined, etc.
                  if (oldFiber === null) oldFiber = nextOldFiber;
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null)
                    // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null)
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = newFiber;
                // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                else previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) continue;
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null)
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                  else previousNewFiber.sibling = _newFiber3;
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              } // Add all children to a key map for quick lookups.
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  step.value,
                  lanes,
                );
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null)
                      // The new fiber is a work in progress, but if there exists a
                      // current, that means that we reused the fiber. We need to delete
                      // it from the child list so that we don't add it to the deletion
                      // list.
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                  else previousNewFiber.sibling = _newFiber4;
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects)
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function (child) {
                  return deleteChild(returnFiber, child);
                });
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              // There's no need to check for keys on text nodes since we don't have a
              // way to define them.
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              } // The existing first child is not a text node so we need to create one
              // and delete the existing ones.
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                      return existing;
                    }
                  } else if (
                    child.elementType === elementType ||
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    (typeof elementType === "object" &&
                      elementType !== null &&
                      elementType.$$typeof === REACT_LAZY_TYPE &&
                      resolveLazy(elementType) === child.type)
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                    return _existing;
                  }
                  // Didn't match.
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(
                  element.props.children,
                  returnFiber.mode,
                  lanes,
                  element.key,
                );
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                  if (
                    child.tag === HostPortal &&
                    child.stateNode.containerInfo === portal.containerInfo &&
                    child.stateNode.implementation === portal.implementation
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } // This API will tag the children with the side-effect of the reconciliation
            // itself. They will be added to the side-effect list as we pass through the
            // children and the parent.
            function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
              // This function is not recursive.
              // If the top level item is an array, we treat it as a set of children,
              // not as a fragment. Nested arrays on the other hand will be treated as
              // fragment nodes. Recursion happens at the normal flow.
              // Handle top level unkeyed fragments as if they were arrays.
              // This leads to an ambiguity between <>{[...]}</> and <>...</>.
              // We treat the ambiguous cases above the same.
              var isUnkeyedTopLevelFragment =
                typeof newChild === "object" &&
                newChild !== null &&
                newChild.type === REACT_FRAGMENT_TYPE &&
                newChild.key === null;
              if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
              // Handle object types
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(
                      reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes),
                    );
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(
                      reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes),
                    );
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                    return reconcileChildFibers(
                      returnFiber,
                      currentFirstChild,
                      init(payload),
                      lanes,
                    );
                }
                if (isArray(newChild))
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild))
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if ((typeof newChild === "string" && newChild !== "") || typeof newChild === "number")
                return placeSingleChild(
                  reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes),
                );
              if (typeof newChild === "function") warnOnFunctionType(returnFiber);
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current, workInProgress) {
            if (current !== null && workInProgress.child !== current.child)
              throw new Error("Resuming work not yet implemented.");
            if (workInProgress.child === null) return;
            var currentChild = workInProgress.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress.child = newChild;
            newChild.return = workInProgress;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(
                currentChild,
                currentChild.pendingProps,
              );
              newChild.return = workInProgress;
            }
            newChild.sibling = null;
          } // Reset a workInProgress child set to prepare it for a second pass.
          function resetChildFibers(workInProgress, lanes) {
            var child = workInProgress.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT)
              throw new Error(
                "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.",
              );
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            // Push current root instance onto the stack;
            // This allows us to reset root when portals are popped.
            push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
            // This enables us to pop only Fibers that provide unique contexts.
            push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
            // However, we can't just call getRootHostContext() and push it because
            // we'd have a different number of entries on the stack depending on
            // whether getRootHostContext() throws somewhere in renderer code or not.
            // So we push an empty value first. This lets us safely unwind on errors.
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
            if (context === nextContext) return;
            // Track the context and the Fiber that provided it.
            // This enables us to pop only Fibers that provide unique contexts.
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            // Do not pop unless this Fiber provided the current context.
            // pushHostContext() only pushes Fibers that provide unique contexts.
            if (contextFiberStackCursor.current !== fiber) return;
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
          // inherited deeply down the subtree. The upper bits only affect
          // this immediate suspense boundary and gets reset each new
          // boundary or suspense list.
          var SubtreeSuspenseContextMask = 1; // Subtree Flags:
          // InvisibleParentSuspenseContext indicates that one of our parent Suspense
          // boundaries is not currently showing visible main content.
          // Either because it is already showing a fallback or is not mounted at all.
          // We can use this to determine if it is desirable to trigger a fallback at
          // the parent. If not, then we might need to trigger undesirable boundaries
          // and/or suspend the commit to avoid hiding the parent content.
          var InvisibleParentSuspenseContext = 1; // Shallow Flags:
          // ForceSuspenseFallback can be used by SuspenseList to force newly added
          // items into their fallback state during one of the render passes.
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return (parentContext & SubtreeSuspenseContextMask) | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
            // If it was the primary children that just suspended, capture and render the
            // fallback. Otherwise, don't capture and bubble to the next boundary.
            var nextState = workInProgress.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null)
                // A dehydrated boundary always captures.
                return true;
              return false;
            }
            var props = workInProgress.memoizedProps; // Regular boundaries always capture.
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (
                    dehydrated === null ||
                    isSuspenseInstancePending(dehydrated) ||
                    isSuspenseInstanceFallback(dehydrated)
                  )
                    return node;
                }
              } else if (
                node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
                // keep track of whether it suspended or not.
                node.memoizedProps.revealOrder !== undefined
              ) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) return null;
              while (node.sibling === null) {
                if (node.return === null || node.return === row) return null;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
          var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
          var Insertion = /*  */ 2;
          var Layout = /*    */ 4;
          var Passive$1 = /*   */ 8;
          // and should be reset before starting a new render.
          // This tracks which mutable sources need to be reset after a render.
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              mutableSource._workInProgressVersionPrimary = null;
            }
            workInProgressSources.length = 0;
          }
          // This ensures that the version used for server rendering matches the one
          // that is eventually read during hydration.
          // If they don't match there's a potential tear and a full deopt render is required.
          function registerMutableSourceForHydration(root, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
            // Retaining it forever may interfere with GC.
            if (root.mutableSourceEagerHydrationData == null)
              root.mutableSourceEagerHydrationData = [mutableSource, version];
            else root.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          didWarnAboutMismatchedHooksForComponent = new Set();
          // These are set right before calling the component.
          var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
          // the work-in-progress hook.
          var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
          // current hook list is the list that belongs to the current fiber. The
          // work-in-progress hook list is a new list that will be added to the
          // work-in-progress fiber.
          var currentHook = null;
          var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
          // does not get reset if we do another render pass; only when we're completely
          // finished evaluating this component. This is an optimization so we know
          // whether we need to clear render phase updates after a throw.
          var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
          // gets reset after each attempt.
          // TODO: Maybe there's some way to consolidate this with
          // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
          var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
          var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
          // hydration). This counter is global, so client ids are not stable across
          // render attempts.
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
          var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
          // The list stores the order of hooks used during the initial render (mount).
          // Subsequent renders (updates) reference this list.
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
          // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
          // When true, such Hooks will always be "remounted". Only used during hot reload.
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) hookTypesDev = [hookName];
            else hookTypesDev.push(hookName);
          }
          function updateHookTypesDev() {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
                warnOnHookMismatchInDev(hookName);
            }
          }
          function checkDepsAreArrayDev(deps) {
            if (deps !== undefined && deps !== null && !isArray(deps))
              // Verify deps, but only on mount to avoid extra checks.
              // It's unlikely their type would change as usually you define them inline.
              error(
                "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
                currentHookNameInDev,
                typeof deps,
              );
          }
          function warnOnHookMismatchInDev(currentHookName) {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                  // lol @ IE not supporting String#repeat
                  while (row.length < secondColumnStart) row += " ";
                  row += newHookName + "\n";
                  table += row;
                }
                error(
                  "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
                  componentName,
                  table,
                );
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error(
              "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.",
            );
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (ignorePreviousDependencies)
              // Only true when this component is being hot reloaded.
              return false;
            if (prevDeps === null) {
              error(
                "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
                currentHookNameInDev,
              );
              return false;
            }
            // Don't bother comparing lengths in prod because these arrays should be
            // passed inline.
            if (nextDeps.length !== prevDeps.length)
              error(
                "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
                currentHookNameInDev,
                "[" + prevDeps.join(", ") + "]",
                "[" + nextDeps.join(", ") + "]",
              );
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) continue;
              return false;
            }
            return true;
          }
          function renderWithHooks(
            current,
            workInProgress,
            Component,
            props,
            secondArg,
            nextRenderLanes,
          ) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress;
            hookTypesDev = current !== null ? current._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1; // Used for hot reloading:
            ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.lanes = NoLanes; // The following should have already been reset
            if (current !== null && current.memoizedState !== null)
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            else if (hookTypesDev !== null)
              // This dispatcher handles an edge case where a component is updating,
              // but no stateful hooks have been used.
              // We want to match the production code behavior (which will use HooksDispatcherOnMount),
              // but with the extra DEV validation to ensure hooks ordering hasn't changed.
              // This dispatcher does that.
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            var children = Component(props, secondArg); // Check if there was a render phase update
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              // Keep rendering in a loop for as long as render phase updates continue to
              // be scheduled. Use a counter to prevent infinite loops.
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT)
                  throw new Error(
                    "Too many re-renders. React limits the number of renders to prevent an infinite loop.",
                  );
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            } // We can assume the previous dispatcher is always this one, since we set it
            // at the beginning of the render phase and there's no re-entrance.
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            workInProgress._debugHookTypes = hookTypesDev;
            // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
            // render. If this fires, it suggests that we incorrectly reset the static
            // flags in some other part of the codebase. This has happened before, for
            // example, in the SuspenseList implementation.
            if (
              current !== null &&
              (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current.mode & ConcurrentMode) !== NoMode
            )
              error(
                "Internal React error: Expected static flag was missing. Please notify the React team.",
              );
            didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
            // localIdCounter = 0;
            if (didRenderTooFewHooks)
              throw new Error(
                "Rendered fewer hooks than expected. This may be caused by an accidental early return statement.",
              );
            return children;
          }
          function checkDidRenderIdHook() {
            // This should be called immediately after every renderWithHooks call.
            // Conceptually, it's part of the return value of renderWithHooks; it's only a
            // separate function to avoid using an array tuple.
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current, workInProgress, lanes) {
            workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
            // complete phase (bubbleProperties).
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode)
              workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            else workInProgress.flags &= ~(Passive | Update);
            current.lanes = removeLanes(current.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            // We can assume the previous dispatcher is always this one, since we set it
            // at the beginning of the render phase and there's no re-entrance.
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              // There were render phase updates. These are only valid for this render
              // phase, which we are now aborting. Remove the updates from the queues so
              // they do not persist to the next render. Do not remove updates from hooks
              // that weren't processed.
              //
              // Only reset the updates from the queue if it has a clone. If it does
              // not have a clone, that means it wasn't processed, and the updates were
              // scheduled before we entered the render phase.
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null,
            };
            if (workInProgressHook === null)
              // This is the first hook in the list
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            // Append to the end of the list
            else workInProgressHook = workInProgressHook.next = hook;
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            // This function is used both for updates and for re-renders triggered by a
            // render phase update. It assumes there is either a current hook we can
            // clone, or a work-in-progress hook from a previous render pass that we can
            // use as a base. When we reach the end of the base list, we must switch to
            // the dispatcher used for mounts.
            var nextCurrentHook;
            if (currentHook === null) {
              var current = currentlyRenderingFiber$1.alternate;
              if (current !== null) nextCurrentHook = current.memoizedState;
              else nextCurrentHook = null;
            } else nextCurrentHook = currentHook.next;
            var nextWorkInProgressHook;
            if (workInProgressHook === null)
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            else nextWorkInProgressHook = workInProgressHook.next;
            if (nextWorkInProgressHook !== null) {
              // There's already a work-in-progress. Reuse it.
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              // Clone from the current hook.
              if (nextCurrentHook === null)
                throw new Error("Rendered more hooks than during the previous render.");
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null,
              };
              if (workInProgressHook === null)
                // This is the first hook in the list.
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              // Append to the end of the list.
              else workInProgressHook = workInProgressHook.next = newHook;
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null,
            };
          }
          function basicStateReducer(state, action) {
            // $FlowFixMe: Flow doesn't like mixed types
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== undefined) initialState = init(initialArg);
            else initialState = initialArg;
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState,
            };
            hook.queue = queue;
            var dispatch = (queue.dispatch = dispatchReducerAction.bind(
              null,
              currentlyRenderingFiber$1,
              queue,
            ));
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null)
              throw new Error(
                "Should have a queue. This is likely a bug in React. Please file an issue.",
              );
            queue.lastRenderedReducer = reducer;
            var current = currentHook; // The last rebase update that is NOT part of the base state.
            var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              // We have new updates that haven't been processed yet.
              // We'll add them to the base queue.
              if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              if (current.baseQueue !== baseQueue)
                // Internal invariant that should never happen, but feasibly could in
                // the future if we implement resuming, or some form of that.
                error(
                  "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.",
                );
              current.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              // We have a queue to process.
              var first = baseQueue.next;
              var newState = current.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  // Priority is insufficient. Skip this update. If this is the first
                  // skipped update, the previous update/state is the new base
                  // update/state.
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null,
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else newBaseQueueLast = newBaseQueueLast.next = clone;
                  // Update the remaining priority in the queue.
                  // TODO: Don't need to accumulate this. Instead, we can remove
                  // renderLanes from the original lanes.
                  currentlyRenderingFiber$1.lanes = mergeLanes(
                    currentlyRenderingFiber$1.lanes,
                    updateLane,
                  );
                  markSkippedUpdateLanes(updateLane);
                } else {
                  // This update does have sufficient priority.
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null,
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  } // Process this update.
                  if (update.hasEagerState)
                    // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                  else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) newBaseState = newState;
              else newBaseQueueLast.next = newBaseQueueFirst;
              // Mark that the fiber performed work, but only if the new state is
              // different from the current state.
              if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            } // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(
                  currentlyRenderingFiber$1.lanes,
                  interleavedLane,
                );
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null)
              // `queue.lanes` is used for entangling transitions. We can set it back to
              // zero once the queue is empty.
              queue.lanes = NoLanes;
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null)
              throw new Error(
                "Should have a queue. This is likely a bug in React. Please file an issue.",
              );
            queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
            // work-in-progress hook.
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              // The queue doesn't persist past this render pass.
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
              // different from the current state.
              if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
              hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
              // the base state unless the queue is empty.
              // TODO: Not sure if this is the desired semantics, but it's what we
              // do for gDSFP. I can't remember why.
              if (hook.baseQueue === null) hook.baseState = newState;
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            return undefined;
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            return undefined;
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating = getIsHydrating();
            if (isHydrating) {
              if (getServerSnapshot === undefined)
                throw new Error(
                  "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.",
                );
              nextSnapshot = getServerSnapshot();
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error(
                    "The result of getServerSnapshot should be cached to avoid an infinite loop",
                  );
                  didWarnUncachedGetSnapshot = true;
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
              // Right before committing, we will walk the tree and check if any of the
              // stores were mutated.
              //
              // We won't do this if we're hydrating server-rendered content, because if
              // the content is stale, it's already visible anyway. Instead we'll patch
              // it up in a passive effect.
              var root = getWorkInProgressRoot();
              if (root === null)
                throw new Error(
                  "Expected a work-in-progress root. This is a bug in React. Please file an issue.",
                );
              if (!includesBlockingLane(root, renderLanes))
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            } // Read the current snapshot from the store on every render. This breaks the
            // normal rules of React, and only works because store updates are
            // always synchronous.
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot: getSnapshot,
            };
            hook.queue = inst; // Schedule an effect to subscribe to the store.
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
            // this whenever subscribe, getSnapshot, or value changes. Because there's no
            // clean-up function, and we track the deps correctly, we can call pushEffect
            // directly, without storing any additional state. For the same reason, we
            // don't need to set a static flag, either.
            // TODO: We can move this to the passive phase once we add a pre-commit
            // consistency check. See the next comment.
            fiber.flags |= Passive;
            pushEffect(
              HasEffect | Passive$1,
              updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),
              undefined,
              null,
            );
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
            // normal rules of React, and only works because store updates are
            // always synchronous.
            var nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
            // commit phase if there was an interleaved mutation. In concurrent mode
            // this can happen all the time, but even in synchronous mode, an earlier
            // effect may have mutated the store.
            if (
              inst.getSnapshot !== getSnapshot ||
              snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
              // checking whether we scheduled a subscription effect above.
              (workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect)
            ) {
              fiber.flags |= Passive;
              pushEffect(
                HasEffect | Passive$1,
                updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),
                undefined,
                null,
              ); // Unless we're rendering a blocking lane, schedule a consistency check.
              // Right before committing, we will walk the tree and check if any of the
              // stores were mutated.
              var root = getWorkInProgressRoot();
              if (root === null)
                throw new Error(
                  "Expected a work-in-progress root. This is a bug in React. Please file an issue.",
                );
              if (!includesBlockingLane(root, renderLanes))
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot: getSnapshot,
              value: renderedSnapshot,
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) componentUpdateQueue.stores = [check];
              else stores.push(check);
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            // These are updated in the passive phase
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
            // have been in an event that fired before the passive effects, or it could
            // have been in a layout effect. In that case, we would have used the old
            // snapsho and getSnapshot values to bail out. We need to check one more time.
            if (checkIfSnapshotChanged(inst))
              // Force a re-render.
              forceStoreRerender(fiber);
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function () {
              // The store changed. Check if the snapshot changed since the last time we
              // read from the store.
              if (checkIfSnapshotChanged(inst))
                // Force a re-render.
                forceStoreRerender(fiber);
            }; // Subscribe to the store and return a clean-up function.
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function")
              // $FlowFixMe: Flow doesn't like mixed types
              initialState = initialState();
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState,
            };
            hook.queue = queue;
            var dispatch = (queue.dispatch = dispatchSetState.bind(
              null,
              currentlyRenderingFiber$1,
              queue,
            ));
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag: tag,
              create: create,
              destroy: destroy,
              deps: deps,
              // Circular
              next: null,
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
              else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var _ref2 = {
              current: initialValue,
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var destroy = undefined;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
              return mountEffectImpl(
                MountPassiveDev | Passive | PassiveStatic,
                Passive$1,
                create,
                deps,
              );
            else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
              fiberFlags |= MountLayoutDev;
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function () {
                refCallback(null);
              };
            } else if (ref !== null && ref !== undefined) {
              var refObject = ref;
              if (!refObject.hasOwnProperty("current"))
                error(
                  "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
                  "an object with keys {" + Object.keys(refObject).join(", ") + "}",
                );
              var _inst2 = create();
              refObject.current = _inst2;
              return function () {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            if (typeof create !== "function")
              error(
                "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
                create !== null ? typeof create : "null",
              );
            var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode)
              fiberFlags |= MountLayoutDev;
            return mountEffectImpl(
              fiberFlags,
              Layout,
              imperativeHandleEffect.bind(null, create, ref),
              effectDeps,
            );
          }
          function updateImperativeHandle(ref, create, deps) {
            if (typeof create !== "function")
              error(
                "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
                create !== null ? typeof create : "null",
              );
            var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
            return updateEffectImpl(
              Update,
              Layout,
              imperativeHandleEffect.bind(null, create, ref),
              effectDeps,
            );
          }
          function mountDebugValue(value, formatterFn) {
            // The react-debug-hooks package injects its own implementation
            // so that e.g. DevTools can display custom hook values.
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === undefined ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              // Assume these are defined. If they're not, areHookInputsEqual will warn.
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              // This is a rerender during a mount.
              hook.memoizedState = value;
              return value;
            } else {
              // This is a rerender during an update.
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              // This is an urgent update. If the value has changed, keep using the
              // previous value and spawn a deferred render to update it later.
              if (!objectIs(value, prevValue)) {
                // Schedule a deferred render
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(
                  currentlyRenderingFiber$1.lanes,
                  deferredLane,
                );
                markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
                // from the latest value. The name "baseState" doesn't really match how we
                // use it because we're reusing a state hook field instead of creating a
                // new one.
                hook.baseState = true;
              } // Reuse the previous value
              return prevValue;
            } else {
              // This is not an urgent update, so we can use the latest value regardless
              // of what it is. No need to defer it.
              // However, if we're currently inside a spawned render, then we need to mark
              // this as an update to prevent the fiber from bailing out.
              //
              // `baseState` is true when the current value is different from the rendered
              // value. The name doesn't really match how we use it because we're reusing
              // a state hook field instead of creating a new one.
              if (hook.baseState) {
                // Flip this back to false.
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(
              higherEventPriority(previousPriority, ContinuousEventPriority),
            );
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10)
                  warn(
                    "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.",
                  );
                currentTransition._updatedFibers.clear();
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false),
              isPending = _mountState[0],
              setPending = _mountState[1]; // The `start` method never changes.
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(),
              isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(),
              isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            return isUpdatingOpaqueValueInRenderPhase;
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
            // should do this in Fiber, too? Deferring this decision for now because
            // there's no other place to store the prefix except for an internal field on
            // the public createRoot object, which the fiber tree does not currently have
            // a reference to.
            var identifierPrefix = root.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
              id = ":" + identifierPrefix + "R" + treeId; // Unless this is the first id at this level, append a number at the end
              // that represents the position of this useId hook among all the useId
              // hooks for this fiber.
              var localId = localIdCounter++;
              if (localId > 0) id += "H" + localId.toString(32);
              id += ":";
            } else {
              // Use a lowercase r prefix for client-generated ids.
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            if (typeof arguments[3] === "function")
              error(
                "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().",
              );
            var lane = requestUpdateLane(fiber);
            var update = {
              lane: lane,
              action: action,
              hasEagerState: false,
              eagerState: null,
              next: null,
            };
            if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
            else {
              var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            if (typeof arguments[3] === "function")
              error(
                "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().",
              );
            var lane = requestUpdateLane(fiber);
            var update = {
              lane: lane,
              action: action,
              hasEagerState: false,
              eagerState: null,
              next: null,
            };
            if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
            else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                    // it, on the update object. If the reducer hasn't changed by the
                    // time we enter the render phase, then the eager state can be used
                    // without calling the reducer again.
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      // Fast path. We can bail out without scheduling React to re-render.
                      // It's still possible that we'll need to rebase this update later,
                      // if the component re-renders for a different reason and by that
                      // time the reducer has changed.
                      // TODO: Do we still need to entangle transitions in this case?
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error) {
                  } finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
              var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return (
              fiber === currentlyRenderingFiber$1 ||
              (alternate !== null && alternate === currentlyRenderingFiber$1)
            );
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null)
              // This is the first update. Create a circular list.
              update.next = update;
            else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          } // TODO: Move to ReactFiberConcurrentUpdates?
          function entangleTransitionUpdate(root, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
              // must have finished. We can remove them from the shared queue, which
              // represents a superset of the actually pending lanes. In some cases we
              // may entangle more than we need to, but that's OK. In fact it's worse if
              // we *don't* entangle when we should.
              queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
              // the lane finished since the last time we entangled it. So we need to
              // entangle it again, just to be sure.
              markRootEntangled(root, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            markStateUpdateScheduled(fiber, lane);
          }
          var ContextOnlyDispatcher = {
            readContext: readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler,
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          var warnInvalidContextAccess = function () {
            error(
              "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().",
            );
          };
          var warnInvalidHookAccess = function () {
            error(
              "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks",
            );
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function (create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function (create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          /**
           * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
           *
           * The overall sequence is:
           *   1. render
           *   2. commit (and call `onRender`, `onCommit`)
           *   3. check for nested updates
           *   4. flush passive effects (and call `onPostCommit`)
           *
           * Nested updates are identified in step 3 above,
           * but step 4 still applies to the work that was just committed.
           * We use two flags to track nested updates then:
           * one tracks whether the upcoming update is a nested update,
           * and the other tracks whether the current update was a nested update.
           * The first value gets synced to the second at the start of the render phase.
           */ var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            nestedUpdateScheduled = true;
          }
          function resetNestedUpdateFlag() {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
          function syncNestedUpdateFlag() {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
              // Or the root (for the DevTools Profiler to read)
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root = parentFiber.stateNode;
                    root.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
              // Or the root (for the DevTools Profiler to read)
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root = parentFiber.stateNode;
                    if (root !== null) root.passiveEffectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null)
                      // Detached fibers have their state node cleared out.
                      // In this case, the return pointer is also cleared out,
                      // so we won't be able to report the time spent in this Profiler's subtree.
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            // Transfer time spent rendering these children so we don't lose it
            // after we rerender. This is used as a helper in special cases
            // where we should count the work of multiple passes.
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            // If the value is an error, call this function immediately after it is thrown
            // so the stack is accurate.
            return {
              value: value,
              source: source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null,
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value: value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null,
            };
          }
          // This module is forked in different environments.
          // By default, return `true` to log errors to the console.
          // Forks can return `false` if this isn't desirable.
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
              // This enables renderers like ReactNative to better manage redbox behavior.
              if (logError === false) return;
              var error = errorInfo.value;
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : ""; // Browsers support silencing uncaught errors by calling
              // `preventDefault()` in window `error` handler.
              // We record this information as an expando on the error.
              if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent)
                  // The error is recoverable and was silenced.
                  // Ignore it and don't print the stack addendum.
                  // This is handy for testing error boundaries without noise.
                  return;
                // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console["error"](error); // Don't transform to our wrapper
                // For a more detailed description of this block, see:
                // https://github.com/facebook/react/pull/13384
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName
                ? "The above error occurred in the <" + componentName + "> component:"
                : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot)
                errorBoundaryMessage =
                  "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage =
                  "React will try to recreate this component tree from scratch " +
                  ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage =
                componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
              // We don't include the original error message and JS stack because the browser
              // has already printed it. Even if the application swallows the error, it is still
              // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
              console["error"](combinedMessage); // Don't transform to our wrapper
            } catch (e) {
              // This method must not throw, or React internal state will get messed up.
              // If console.error is overridden, or logCapturedError() shows a dialog that throws,
              // we want to report this error outside of the normal stack as a last resort.
              // https://github.com/facebook/react/issues/13188
              setTimeout(function () {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
            update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
            // being called "element".
            update.payload = {
              element: null,
            };
            var error = errorInfo.value;
            update.callback = function () {
              onUncaughtError(error);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function () {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function () {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function")
              update.callback = function callback() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function")
                  // To preserve the preexisting retry behavior of error boundaries,
                  // we keep track of which ones already failed during this batch.
                  // This gets reset before we yield back to the browser.
                  // TODO: Warn in strict mode if getDerivedStateFromError is
                  // not defined.
                  markLegacyErrorBoundaryAsFailed(this);
                var error$1 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$1, {
                  componentStack: stack !== null ? stack : "",
                });
                if (typeof getDerivedStateFromError !== "function") {
                  // If componentDidCatch is the only error boundary method defined,
                  // then it needs to call setState to recover from errors.
                  // If no state update is scheduled then the boundary will swallow the error.
                  if (!includesSomeLane(fiber.lanes, SyncLane))
                    error(
                      "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
                      getComponentNameFromFiber(fiber) || "Unknown",
                    );
                }
              };
            return update;
          }
          function attachPingListener(root, wakeable, lanes) {
            // Attach a ping listener
            //
            // The data might resolve before we have a chance to commit the fallback. Or,
            // in the case of a refresh, we'll never commit a fallback. So we need to
            // attach a listener now. When it resolves ("pings"), we can decide whether to
            // try rendering the tree again.
            //
            // Only attach a listener if one does not already exist for the lanes
            // we're currently rendering (which acts like a "thread ID" here).
            //
            // We only need to do this in concurrent mode. Legacy Suspense always
            // commits fallbacks synchronously, so there are no pings.
            var pingCache = root.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              // Memoize using the thread ID to prevent redundant listeners.
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
              if (isDevToolsPresent)
                // If we have pending work still, restore the original updaters
                restorePendingUpdaters(root, lanes);
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
            // Retry listener
            //
            // If the fallback does commit, we need to attach a different type of
            // listener. This one schedules an update on the Suspense boundary to turn
            // the fallback state off.
            //
            // Stash the wakeable on the boundary fiber so we can access it in the
            // commit phase.
            //
            // When the wakeable resolves, we'll attempt to render the boundary
            // again ("retry").
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else wakeables.add(wakeable);
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            // A legacy mode Suspense quirk, only relevant to hook components.
            var tag = sourceFiber.tag;
            if (
              (sourceFiber.mode & ConcurrentMode) === NoMode &&
              (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)
            ) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
              // This boundary already captured during this render. Continue to the next
              // boundary.
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(
            suspenseBoundary,
            returnFiber,
            sourceFiber,
            root,
            rootRenderLanes,
          ) {
            // This marks a Suspense boundary so that when we're unwinding the stack,
            // it captures the suspended "exception" and does a second (fallback) pass.
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              // Legacy Mode Suspense
              //
              // If the boundary is in legacy mode, we should *not*
              // suspend the commit. Pretend as if the suspended component rendered
              // null and keep rendering. When the Suspense boundary completes,
              // we'll do a second pass to render the fallback.
              if (suspenseBoundary === returnFiber)
                // Special case where we suspended while reconciling the children of
                // a Suspense boundary's inner Offscreen wrapper fiber. This happens
                // when a React.lazy component is a direct child of a
                // Suspense boundary.
                //
                // Suspense boundaries are implemented as multiple fibers, but they
                // are a single conceptual unit. The legacy mode behavior where we
                // pretend the suspended fiber committed as `null` won't work,
                // because in this case the "suspended" fiber is the inner
                // Offscreen wrapper.
                //
                // Because the contents of the boundary haven't started rendering
                // yet (i.e. nothing in the tree has partially rendered) we can
                // switch to the regular, concurrent mode behavior: mark the
                // boundary with ShouldCapture and enter the unwind phase.
                suspenseBoundary.flags |= ShouldCapture;
              else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null)
                    // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                  else {
                    // When we try rendering again, we should not reuse the current fiber,
                    // since it's known to be in an inconsistent state. Use a force update to
                    // prevent a bail out.
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            } // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.
            //
            // After this we'll use a set of heuristics to determine whether this
            // render pass will run to completion or restart or "suspend" the commit.
            // The actual logic for this is spread out in different places.
            //
            // This first principle is that if we're going to suspend when we complete
            // a root, then we should also restart if we get an update or ping that
            // might unsuspend it, and vice versa. The only reason to suspend is
            // because you think you might want to restart before committing. However,
            // it doesn't make sense to restart only while in the period we're suspended.
            //
            // Restarting too aggressively is also not good because it starves out any
            // intermediate loading state. So we use heuristics to determine when.
            // Suspense Heuristics
            //
            // If nothing threw a Promise or all the same fallbacks are already showing,
            // then don't suspend/restart.
            //
            // If this is an initial render of a new tree of Suspense boundaries and
            // those trigger a fallback, then don't suspend/restart. We want to ensure
            // that we can show the initial loading state as quickly as possible.
            //
            // If we hit a "Delayed" case, such as when we'd switch from content back into
            // a fallback, then we should always suspend/restart. Transitions apply
            // to this case. If none is defined, JND is used instead.
            //
            // If we're already showing a fallback and it gets "retried", allowing us to show
            // another level, but there's still an inner boundary that would show a fallback,
            // then we suspend/restart for 500ms since the last time we showed a fallback
            // anywhere in the tree. This effectively throttles progressive loading into a
            // consistent train of commits. This also gives us an opportunity to restart to
            // get to the completed state slightly earlier.
            //
            // If there's ambiguity due to batching it's resolved in preference of:
            // 1) "delayed", 2) "initial render", 3) "retry".
            //
            // We want to ensure that a "busy" state doesn't get force committed. We want to
            // ensure that new initial loading states can commit as soon as possible.
            suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
            // the begin phase to prevent an early bailout.
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
            // The source fiber did not complete.
            sourceFiber.flags |= Incomplete;
            if (isDevToolsPresent)
              // If we have pending work still, restore the original updaters
              restorePendingUpdaters(root, rootRenderLanes);
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              // This is a wakeable. The component suspended.
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode)
                markDidThrowWhileHydratingDEV();
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(
                  suspenseBoundary,
                  returnFiber,
                  sourceFiber,
                  root,
                  rootRenderLanes,
                ); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode)
                  attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
              } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                  // This is not a sync update. Suspend. Since we're not activating a
                  // Suspense boundary, this will unwind all the way to the root without
                  // performing a second pass to render a fallback. (This is arguably how
                  // refresh transitions should work, too, since we're not going to commit
                  // the fallbacks anyway.)
                  //
                  // This case also applies to initial hydration.
                  attachPingListener(root, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error(
                  "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.",
                ); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
              }
            } // This is a regular error, not a Suspense wakeable.
            else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
              // discarding the dehydrated content and switching to a client render.
              // Instead of surfacing the error, find the nearest Suspense boundary
              // and render it again without hydration.
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags)
                  // Set a flag to indicate that we should try rendering the normal
                  // children again, not the fallback.
                  _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(
                  _suspenseBoundary,
                  returnFiber,
                  sourceFiber,
                  root,
                  rootRenderLanes,
                ); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
            // over and traverse parent path again, this time treating the exception
            // as an error.
            var workInProgress = returnFiber;
            do {
              switch (workInProgress.tag) {
                case HostRoot:
                  var _errorInfo = value;
                  workInProgress.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress, update);
                  return;
                case ClassComponent:
                  // Capture and retry
                  var errorInfo = value;
                  var ctor = workInProgress.type;
                  var instance = workInProgress.stateNode;
                  if (
                    (workInProgress.flags & DidCapture) === NoFlags &&
                    (typeof ctor.getDerivedStateFromError === "function" ||
                      (instance !== null &&
                        typeof instance.componentDidCatch === "function" &&
                        !isAlreadyFailedLegacyErrorBoundary(instance)))
                  ) {
                    workInProgress.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                    var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                  }
                  break;
              }
              workInProgress = workInProgress.return;
            } while (workInProgress !== null);
          }
          function getSuspendedCache() {
            return null;
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
            if (current === null)
              // If this is a fresh new component that hasn't been rendered yet, we
              // won't update its child set by applying minimal side-effects. Instead,
              // we will add them all to the child before it gets rendered. That means
              // we can optimize this reconciliation pass by not tracking side-effects.
              workInProgress.child = mountChildFibers(
                workInProgress,
                null,
                nextChildren,
                renderLanes,
              );
            // If the current child is the same as the work in progress, it means that
            // we haven't yet started any work on these children. Therefore, we use
            // the clone algorithm to create a copy of all the current children.
            // If we had any progressed work already, that is invalid at this point so
            // let's throw it out.
            else
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                current.child,
                nextChildren,
                renderLanes,
              );
          }
          function forceUnmountCurrentAndReconcile(
            current,
            workInProgress,
            nextChildren,
            renderLanes,
          ) {
            // This function is fork of reconcileChildren. It's used in cases where we
            // want to reconcile without matching against the existing set. This has the
            // effect of all current children being unmounted; even if the type and key
            // are the same, the old child is unmounted and a new child is created.
            //
            // To do this, we're going to go through the reconcile algorithm twice. In
            // the first pass, we schedule a deletion for all the current children by
            // passing null.
            workInProgress.child = reconcileChildFibers(
              workInProgress,
              current.child,
              null,
              renderLanes,
            ); // In the second pass, we mount the new children. The trick here is that we
            // pass null in place of where we usually pass the current child set. This has
            // the effect of remounting all children regardless of whether their
            // identities match.
            workInProgress.child = reconcileChildFibers(
              workInProgress,
              null,
              nextChildren,
              renderLanes,
            );
          }
          function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes)
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component),
                );
            }
            var render = Component.render;
            var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress, renderLanes);
            markComponentRenderStarted(workInProgress);
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(
              current,
              workInProgress,
              render,
              nextProps,
              ref,
              renderLanes,
            );
            hasId = checkDidRenderIdHook();
            if (workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(
                  current,
                  workInProgress,
                  render,
                  nextProps,
                  ref,
                  renderLanes,
                );
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
            markComponentRenderStopped();
            if (current !== null && !didReceiveUpdate) {
              bailoutHooks(current, workInProgress, renderLanes);
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            // React DevTools reads this flag.
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
            if (current === null) {
              var type = Component.type;
              if (
                isSimpleFunctionComponent(type) &&
                Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
                Component.defaultProps === undefined
              ) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(
                  current,
                  workInProgress,
                  resolvedType,
                  nextProps,
                  renderLanes,
                );
              }
              var innerPropTypes = type.propTypes;
              if (innerPropTypes)
                // Inner memo component props aren't currently validated in createElement.
                // We could move it there, but we'd still need this for lazy code path.
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              var child = createFiberFromTypeAndProps(
                Component.type,
                null,
                nextProps,
                workInProgress,
                workInProgress.mode,
                renderLanes,
              );
              child.ref = workInProgress.ref;
              child.return = workInProgress;
              workInProgress.child = child;
              return child;
            }
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes)
              // Inner memo component props aren't currently validated in createElement.
              // We could move it there, but we'd still need this for lazy code path.
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            var currentChild = current.child; // This is always exactly one child
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
            if (!hasScheduledUpdateOrContext) {
              // This will be the props with resolved defaultProps,
              // unlike current.memoizedProps which will be the unresolved ones.
              var prevProps = currentChild.memoizedProps; // Default to shallow comparison
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current.ref === workInProgress.ref)
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } // React DevTools reads this flag.
            workInProgress.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress.ref;
            newChild.return = workInProgress;
            workInProgress.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(
            current,
            workInProgress,
            Component,
            nextProps,
            renderLanes,
          ) {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var outerMemoType = workInProgress.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes)
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(outerMemoType),
                  );
              }
            }
            if (current !== null) {
              var prevProps = current.memoizedProps;
              if (
                shallowEqual(prevProps, nextProps) &&
                current.ref === workInProgress.ref &&
                workInProgress.type === current.type
              ) {
                didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
                // would during a normal fiber bailout.
                //
                // We don't have strong guarantees that the props object is referentially
                // equal during updates where we can't bail out anyway — like if the props
                // are shallowly equal, but there's a local state or context update in the
                // same batch.
                //
                // However, as a principle, we should aim to make the behavior consistent
                // across different ways of memoizing a component. For example, React.memo
                // has a different internal Fiber layout if you pass a normal function
                // component (SimpleMemoComponent) versus if you pass a different type
                // like forwardRef (MemoComponent). But this is an implementation detail.
                // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
                // affect whether the props object is reused during a bailout.
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                  // The pending lanes were cleared at the beginning of beginWork. We're
                  // about to bail out, but there might be other lanes that weren't
                  // included in the current render. Usually, the priority level of the
                  // remaining updates is accumulated during the evaluation of the
                  // component (i.e. when processing the update queue). But since since
                  // we're bailing out early *without* evaluating the component, we need
                  // to account for it here, too. Reset to the value of the current fiber.
                  // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                  // because a MemoComponent fiber does not have hooks or an update queue;
                  // rather, it wraps around an inner component, which may or may not
                  // contains hooks.
                  // TODO: Move the reset at in beginWork out of the common path so that
                  // this is no longer necessary.
                  workInProgress.lanes = current.lanes;
                  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags)
                  // This is a special case that only exists for legacy mode.
                  // See https://github.com/facebook/react/pull/19216.
                  didReceiveUpdate = true;
              }
            }
            return updateFunctionComponent(
              current,
              workInProgress,
              Component,
              nextProps,
              renderLanes,
            );
          }
          function updateOffscreenComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current !== null ? current.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              // Rendering a hidden tree.
              if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Consider how Offscreen should work with transitions in the future
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null,
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
              } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null,
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
              } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null,
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
              }
            } else {
              // Rendering a visible tree.
              var _subtreeRenderLanes;
              if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
              } // We weren't previously hidden, and we still aren't, so there's nothing
              // special to do. Need to push to the stack regardless, though, to avoid
              // a push/pop misalignment.
              else _subtreeRenderLanes = renderLanes;
              pushRenderLanes(workInProgress, _subtreeRenderLanes);
            }
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          } // Note: These happen to have identical begin phases, for now. We shouldn't hold
          function updateFragment(current, workInProgress, renderLanes) {
            var nextChildren = workInProgress.pendingProps;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateMode(current, workInProgress, renderLanes) {
            var nextChildren = workInProgress.pendingProps.children;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateProfiler(current, workInProgress, renderLanes) {
            workInProgress.flags |= Update;
            // Reset effect durations for the next eventual effect phase.
            // These are reset during render to allow the DevTools commit hook a chance to read them,
            var stateNode = workInProgress.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function markRef(current, workInProgress) {
            var ref = workInProgress.ref;
            if ((current === null && ref !== null) || (current !== null && current.ref !== ref)) {
              // Schedule a Ref effect
              workInProgress.flags |= Ref;
              workInProgress.flags |= RefStatic;
            }
          }
          function updateFunctionComponent(
            current,
            workInProgress,
            Component,
            nextProps,
            renderLanes,
          ) {
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes)
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component),
                );
            }
            var context;
            var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
            context = getMaskedContext(workInProgress, unmaskedContext);
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress, renderLanes);
            markComponentRenderStarted(workInProgress);
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            nextChildren = renderWithHooks(
              current,
              workInProgress,
              Component,
              nextProps,
              context,
              renderLanes,
            );
            hasId = checkDidRenderIdHook();
            if (workInProgress.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(
                  current,
                  workInProgress,
                  Component,
                  nextProps,
                  context,
                  renderLanes,
                );
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
            markComponentRenderStopped();
            if (current !== null && !didReceiveUpdate) {
              bailoutHooks(current, workInProgress, renderLanes);
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            // React DevTools reads this flag.
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateClassComponent(
            current,
            workInProgress,
            Component,
            nextProps,
            renderLanes,
          ) {
            // This is used by DevTools to force a boundary to error.
            switch (shouldError(workInProgress)) {
              case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(
                  workInProgress,
                  createCapturedValueAtFiber(error$1, workInProgress),
                  lane,
                );
                enqueueCapturedUpdate(workInProgress, update);
                break;
            }
            if (workInProgress.type !== workInProgress.elementType) {
              // Lazy component props can't be validated in createElement
              // because they're only guaranteed to be resolved here.
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes)
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component),
                );
            }
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress);
            } else hasContext = false;
            prepareToReadContext(workInProgress, renderLanes);
            var instance = workInProgress.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.
              constructClassInstance(workInProgress, Component, nextProps);
              mountClassInstance(workInProgress, Component, nextProps, renderLanes);
              shouldUpdate = true;
            } else if (current === null)
              // In a resume, we'll already have an instance we can reuse.
              shouldUpdate = resumeMountClassInstance(
                workInProgress,
                Component,
                nextProps,
                renderLanes,
              );
            else
              shouldUpdate = updateClassInstance(
                current,
                workInProgress,
                Component,
                nextProps,
                renderLanes,
              );
            var nextUnitOfWork = finishClassComponent(
              current,
              workInProgress,
              Component,
              shouldUpdate,
              hasContext,
              renderLanes,
            );
            var inst = workInProgress.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps)
                error(
                  "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
                  getComponentNameFromFiber(workInProgress) || "a component",
                );
              didWarnAboutReassigningProps = true;
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(
            current,
            workInProgress,
            Component,
            shouldUpdate,
            hasContext,
            renderLanes,
          ) {
            // Refs should update even if shouldComponentUpdate returns false
            markRef(current, workInProgress);
            var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              // Context providers should defer to sCU for rendering
              if (hasContext) invalidateContextProvider(workInProgress, Component, false);
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
            var instance = workInProgress.stateNode; // Rerender
            ReactCurrentOwner$1.current = workInProgress;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              // If we captured an error, but getDerivedStateFromError is not defined,
              // unmount all the children. componentDidCatch will schedule an update to
              // re-render a fallback. This is temporary until we migrate everyone to
              // the new API.
              // TODO: Warn in a future release.
              nextChildren = null;
              stopProfilerTimerIfRunning();
            } else {
              markComponentRenderStarted(workInProgress);
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
              markComponentRenderStopped();
            } // React DevTools reads this flag.
            workInProgress.flags |= PerformedWork;
            if (current !== null && didCaptureError)
              // If we're recovering from an error, reconcile without reusing any of
              // the existing children. Conceptually, the normal children and the children
              // that are shown on error are two different sets, so we shouldn't reuse
              // normal children even if their identities match.
              forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
            else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            // Memoize state using the values we just used to render.
            // TODO: Restructure so we never read values from the instance.
            workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
            if (hasContext) invalidateContextProvider(workInProgress, Component, true);
            return workInProgress.child;
          }
          function pushHostRootContext(workInProgress) {
            var root = workInProgress.stateNode;
            if (root.pendingContext)
              pushTopLevelContextObject(
                workInProgress,
                root.pendingContext,
                root.pendingContext !== root.context,
              );
            else if (root.context)
              // Should always be set
              pushTopLevelContextObject(workInProgress, root.context, false);
            pushHostContainer(workInProgress, root.containerInfo);
          }
          function updateHostRoot(current, workInProgress, renderLanes) {
            pushHostRootContext(workInProgress);
            if (current === null)
              throw new Error("Should have a current fiber. This is a bug in React.");
            var nextProps = workInProgress.pendingProps;
            var prevState = workInProgress.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
            var nextState = workInProgress.memoizedState;
            var root = workInProgress.stateNode;
            // being called "element".
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              // This is a hydration root whose shell has not yet hydrated. We should
              // attempt to hydrate.
              // Flip isDehydrated to false to indicate that when this render
              // finishes, the root will no longer be dehydrated.
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions,
              };
              var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
              // have reducer functions so it doesn't need rebasing.
              updateQueue.baseState = overrideState;
              workInProgress.memoizedState = overrideState;
              if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = createCapturedValueAtFiber(
                  new Error(
                    "There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.",
                  ),
                  workInProgress,
                );
                return mountHostRootWithoutHydrating(
                  current,
                  workInProgress,
                  nextChildren,
                  renderLanes,
                  recoverableError,
                );
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(
                  new Error(
                    "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.",
                  ),
                  workInProgress,
                );
                return mountHostRootWithoutHydrating(
                  current,
                  workInProgress,
                  nextChildren,
                  renderLanes,
                  _recoverableError,
                );
              } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while (node) {
                  // Mark each child as hydrating. This is a fast path to know whether this
                  // tree is part of a hydrating tree. This is used to determine if a child
                  // node has fully mounted yet, and for scheduling event replaying.
                  // Conceptually this is similar to Placement in that a new subtree is
                  // inserted into the React tree here. It just happens to not need DOM
                  // mutations because it already exists.
                  node.flags = (node.flags & ~Placement) | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              // Root is not dehydrated. Either this is a client-only root, or it
              // already hydrated.
              resetHydrationState();
              if (nextChildren === prevChildren)
                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            }
            return workInProgress.child;
          }
          function mountHostRootWithoutHydrating(
            current,
            workInProgress,
            nextChildren,
            renderLanes,
            recoverableError,
          ) {
            // Revert to client rendering.
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress.flags |= ForceClientRender;
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateHostComponent(current, workInProgress, renderLanes) {
            pushHostContext(workInProgress);
            if (current === null) tryToClaimNextHydratableInstance(workInProgress);
            var type = workInProgress.type;
            var nextProps = workInProgress.pendingProps;
            var prevProps = current !== null ? current.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild)
              // We special case a direct text child of a host node. This is a common
              // case. We won't handle it as a reified child. We will instead handle
              // this in the host environment that also has access to this prop. That
              // avoids allocating another HostText fiber and traversing it.
              nextChildren = null;
            else if (prevProps !== null && shouldSetTextContent(type, prevProps))
              // If we're switching from a direct text child to a normal child, or to
              // empty, we need to schedule the text content to be reset.
              workInProgress.flags |= ContentReset;
            markRef(current, workInProgress);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          function updateHostText(current, workInProgress) {
            if (current === null) tryToClaimNextHydratableInstance(workInProgress);
            // Nothing to do here. This is terminal. We'll do the completion step
            // immediately after.
            return null;
          }
          function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
            var props = workInProgress.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload); // Store the unwrapped component in the type.
            workInProgress.type = Component;
            var resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(
                  null,
                  workInProgress,
                  Component,
                  resolvedProps,
                  renderLanes,
                );
                return child;
              case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(
                  null,
                  workInProgress,
                  Component,
                  resolvedProps,
                  renderLanes,
                );
                return child;
              case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(
                  null,
                  workInProgress,
                  Component,
                  resolvedProps,
                  renderLanes,
                );
                return child;
              case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes)
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      "prop",
                      getComponentNameFromType(Component),
                    );
                }
                child = updateMemoComponent(
                  null,
                  workInProgress,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  renderLanes,
                );
                return child;
            }
            var hint = "";
            if (
              Component !== null &&
              typeof Component === "object" &&
              Component.$$typeof === REACT_LAZY_TYPE
            )
              hint = " Did you wrap a component in React.lazy() more than once?";
            // because the fact that it's a separate type of work is an
            // implementation detail.
            throw new Error(
              "Element type is invalid. Received a promise that resolves to: " +
                Component +
                ". " +
                ("Lazy element type must resolve to a class or function." + hint),
            );
          }
          function mountIncompleteClassComponent(
            _current,
            workInProgress,
            Component,
            nextProps,
            renderLanes,
          ) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.
            workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
            // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress);
            } else hasContext = false;
            prepareToReadContext(workInProgress, renderLanes);
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            return finishClassComponent(
              null,
              workInProgress,
              Component,
              true,
              hasContext,
              renderLanes,
            );
          }
          function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
            var props = workInProgress.pendingProps;
            var context;
            var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
            context = getMaskedContext(workInProgress, unmaskedContext);
            prepareToReadContext(workInProgress, renderLanes);
            var value;
            var hasId;
            markComponentRenderStarted(workInProgress);
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error(
                  "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
                  componentName,
                  componentName,
                );
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress.mode & StrictLegacyMode)
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress;
            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
            markComponentRenderStopped();
            workInProgress.flags |= PerformedWork;
            // Support for module components is deprecated and is removed behind a flag.
            // Whether or not it would crash later, we want to show a good message in DEV first.
            if (
              typeof value === "object" &&
              value !== null &&
              typeof value.render === "function" &&
              value.$$typeof === undefined
            ) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error(
                  "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                  _componentName,
                  _componentName,
                  _componentName,
                );
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            if (
              // Eventually we'll delete this branch altogether.
              typeof value === "object" &&
              value !== null &&
              typeof value.render === "function" &&
              value.$$typeof === undefined
            ) {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error(
                  "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                  _componentName2,
                  _componentName2,
                  _componentName2,
                );
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
              workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
              workInProgress.memoizedState = null;
              workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
              } else hasContext = false;
              workInProgress.memoizedState =
                value.state !== null && value.state !== undefined ? value.state : null;
              initializeUpdateQueue(workInProgress);
              adoptClassInstance(workInProgress, value);
              mountClassInstance(workInProgress, Component, props, renderLanes);
              return finishClassComponent(
                null,
                workInProgress,
                Component,
                true,
                hasContext,
                renderLanes,
              );
            } else {
              // Proceed under the assumption that this is a function component
              workInProgress.tag = FunctionComponent;
              if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(
                    null,
                    workInProgress,
                    Component,
                    props,
                    context,
                    renderLanes,
                  );
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
              reconcileChildren(null, workInProgress, value, renderLanes);
              validateFunctionComponentInDev(workInProgress, Component);
              return workInProgress.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress, Component) {
            if (Component) {
              if (Component.childContextTypes)
                error(
                  "%s(...): childContextTypes cannot be defined on a function component.",
                  Component.displayName || Component.name || "Component",
                );
            }
            if (workInProgress.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
              var warningKey = ownerName || "";
              var debugSource = workInProgress._debugSource;
              if (debugSource) warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error(
                  "Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",
                  info,
                );
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error(
                  "%s: Function components do not support getDerivedStateFromProps.",
                  _componentName3,
                );
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane,
          };
          function mountSuspenseOffscreenState(renderLanes) {
            return {
              baseLanes: renderLanes,
              cachePool: getSuspendedCache(),
              transitions: null,
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
              cachePool: cachePool,
              transitions: prevOffscreenState.transitions,
            };
          } // TODO: Probably should inline this back
          function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
            // If we're already showing a fallback, there are cases where we need to
            // remain on that fallback regardless of whether the content has resolved.
            // For example, SuspenseList coordinates when nested content appears.
            if (current !== null) {
              var suspenseState = current.memoizedState;
              if (suspenseState === null)
                // Currently showing content. Don't hide it, even if ForceSuspenseFallback
                // is true. More precise name might be "ForceRemainSuspenseFallback".
                // Note: This is a factoring smell. Can't remain on a fallback if there's
                // no fallback to remain on.
                return false;
            } // Not currently showing content. Consult the Suspense context.
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current, renderLanes) {
            // TODO: Should not remove render lanes that were pinged during this render
            return removeLanes(current.childLanes, renderLanes);
          }
          function updateSuspenseComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
            if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
              // Something in this boundary's subtree already suspended. Switch to
              // rendering the fallback children.
              showFallback = true;
              workInProgress.flags &= ~DidCapture;
            } // Attempting the main content
            else if (current === null || current.memoizedState !== null)
              suspenseContext = addSubtreeSuspenseContext(
                suspenseContext,
                InvisibleParentSuspenseContext,
              );
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
            // boundary's children. This involves some custom reconciliation logic. Two
            // main reasons this is so complicated.
            //
            // First, Legacy Mode has different semantics for backwards compatibility. The
            // primary tree will commit in an inconsistent state, so when we do the
            // second pass to render the fallback, we do some exceedingly, uh, clever
            // hacks to make that not totally break. Like transferring effects and
            // deletions from hidden tree. In Concurrent Mode, it's much simpler,
            // because we bailout on the primary tree completely and leave it in its old
            // state, no effects. Same as what we do for Offscreen (except that
            // Offscreen doesn't have the first render pass).
            //
            // Second is hydration. During hydration, the Suspense fiber has a slightly
            // different layout, where the child points to a dehydrated fragment, which
            // contains the DOM rendered by the server.
            //
            // Third, even if you set all that aside, Suspense is like error boundaries in
            // that we first we try to render one tree, and if that fails, we render again
            // and switch to a different tree. Like a try/catch block. So we have to track
            // which branch we're currently rendering. Ideally we would model this using
            // a stack.
            if (current === null) {
              // Initial mount
              // Special path for hydration
              // If we're currently hydrating, try to hydrate this boundary.
              tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
              var suspenseState = workInProgress.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null)
                  return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(
                  workInProgress,
                  nextPrimaryChildren,
                  nextFallbackChildren,
                  renderLanes,
                );
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
            } else {
              // This is an update.
              // Special path for hydration
              var prevState = current.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null)
                  return updateDehydratedSuspenseComponent(
                    current,
                    workInProgress,
                    didSuspend,
                    nextProps,
                    _dehydrated,
                    prevState,
                    renderLanes,
                  );
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(
                  current,
                  workInProgress,
                  _nextPrimaryChildren,
                  _nextFallbackChildren,
                  renderLanes,
                );
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState =
                  prevOffscreenState === null
                    ? mountSuspenseOffscreenState(renderLanes)
                    : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(
                  current,
                  renderLanes,
                );
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(
                  current,
                  workInProgress,
                  _nextPrimaryChildren2,
                  renderLanes,
                );
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
            var mode = workInProgress.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren,
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress;
            workInProgress.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(
            workInProgress,
            primaryChildren,
            fallbackChildren,
            renderLanes,
          ) {
            var mode = workInProgress.mode;
            var progressedPrimaryFragment = workInProgress.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren,
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(
                fallbackChildren,
                mode,
                renderLanes,
                null,
              );
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(
                fallbackChildren,
                mode,
                renderLanes,
                null,
              );
            }
            primaryChildFragment.return = workInProgress;
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
            // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
            // this wrapper function to constrain it.
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
            // The props argument to `createWorkInProgress` is `any` typed, so we use this
            // wrapper function to constrain it.
            return createWorkInProgress(current, offscreenProps);
          }
          function updateSuspensePrimaryChildren(
            current,
            workInProgress,
            primaryChildren,
            renderLanes,
          ) {
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(
              currentPrimaryChildFragment,
              {
                mode: "visible",
                children: primaryChildren,
              },
            );
            if ((workInProgress.mode & ConcurrentMode) === NoMode)
              primaryChildFragment.lanes = renderLanes;
            primaryChildFragment.return = workInProgress;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              // Delete the fallback child fragment
              var deletions = workInProgress.deletions;
              if (deletions === null) {
                workInProgress.deletions = [currentFallbackChildFragment];
                workInProgress.flags |= ChildDeletion;
              } else deletions.push(currentFallbackChildFragment);
            }
            workInProgress.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(
            current,
            workInProgress,
            primaryChildren,
            fallbackChildren,
            renderLanes,
          ) {
            var mode = workInProgress.mode;
            var currentPrimaryChildFragment = current.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren,
            };
            var primaryChildFragment;
            if (
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration =
                  currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration =
                  currentPrimaryChildFragment.treeBaseDuration;
              } // The fallback fiber was added as a deletion during the first pass.
              // However, since we're going to remain on the fallback, we no longer want
              // to delete it.
              workInProgress.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(
                currentPrimaryChildFragment,
                primaryChildProps,
              ); // Since we're reusing a current tree, we need to reuse the flags, too.
              // (We don't do this in legacy mode, because in legacy mode we don't re-use
              // the current tree; see previous branch.)
              primaryChildFragment.subtreeFlags =
                currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null)
              fallbackChildFragment = createWorkInProgress(
                currentFallbackChildFragment,
                fallbackChildren,
              );
            else {
              fallbackChildFragment = createFiberFromFragment(
                fallbackChildren,
                mode,
                renderLanes,
                null,
              ); // Needs a placement effect because the parent (the Suspense boundary) already
              // mounted but this is a new fiber.
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes,
            recoverableError,
          ) {
            // Falling back to client rendering. Because this has performance
            // implications, it's considered a recoverable error, even though the user
            // likely won't observe anything wrong with the UI.
            //
            // The error is passed in as an argument to enforce that every caller provide
            // a custom message, or explicitly opt out (currently the only path that opts
            // out is legacy mode; every concurrent path provides an error).
            if (recoverableError !== null) queueHydrationError(recoverableError);
            // This will add the old fiber to the deletion list
            reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
            var nextProps = workInProgress.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(
              workInProgress,
              primaryChildren,
            ); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            primaryChildFragment.flags |= Placement;
            workInProgress.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(
            current,
            workInProgress,
            primaryChildren,
            fallbackChildren,
            renderLanes,
          ) {
            var fiberMode = workInProgress.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren,
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(
              primaryChildProps,
              fiberMode,
            );
            var fallbackChildFragment = createFiberFromFragment(
              fallbackChildren,
              fiberMode,
              renderLanes,
              null,
            ); // Needs a placement effect because the parent (the Suspense
            // boundary) already mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress;
            fallbackChildFragment.return = workInProgress;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress.child = primaryChildFragment;
            if ((workInProgress.mode & ConcurrentMode) !== NoMode)
              // We will have dropped the effect list which contains the
              // deletion. We need to reconcile to delete the current child.
              reconcileChildFibers(workInProgress, current.child, null, renderLanes);
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
            // During the first pass, we'll bail out and not drill into the children.
            // Instead, we'll leave the content in place and try to hydrate it later.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
              error(
                "Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.",
              );
              workInProgress.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance))
              // This is a client-only boundary. Since we won't get any content from the server
              // for this, we need to schedule that at a higher priority based on when it would
              // have timed out. In theory we could render it in this pass but it would have the
              // wrong priority associated with it and will prevent hydration of parent path.
              // Instead, we'll leave work left on it to render it in a separate commit.
              // TODO This time should be the time at which the server rendered response that is
              // a parent to this boundary was displayed. However, since we currently don't have
              // a protocol to transfer that time, we'll just estimate it by using the current
              // time. This will mean that Suspense timeouts are slightly shifted to later than
              // they should be.
              // Schedule a normal pri update to render this content.
              workInProgress.lanes = laneToLanes(DefaultHydrationLane);
            // We'll continue hydrating the rest at offscreen priority since we'll already
            // be showing the right content coming from the server, it is no rush.
            else workInProgress.lanes = laneToLanes(OffscreenLane);
            return null;
          }
          function updateDehydratedSuspenseComponent(
            current,
            workInProgress,
            didSuspend,
            nextProps,
            suspenseInstance,
            suspenseState,
            renderLanes,
          ) {
            if (!didSuspend) {
              // This is the first render pass. Attempt to hydrate.
              // We should never be hydrating at this point because it is the first pass,
              // but after we've already committed once.
              warnIfHydrating();
              if ((workInProgress.mode & ConcurrentMode) === NoMode)
                return retrySuspenseComponentWithoutHydrating(
                  current,
                  workInProgress,
                  renderLanes, // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null,
                );
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                var digest, message, stack;
                var _getSuspenseInstanceF =
                  getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message)
                  // eslint-disable-next-line react-internal/prod-error-codes
                  error = new Error(message);
                else
                  error = new Error(
                    "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.",
                  );
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(
                  current,
                  workInProgress,
                  renderLanes,
                  capturedValue,
                );
              }
              // any context has changed, we need to treat is as if the input might have changed.
              var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
              if (didReceiveUpdate || hasContextChanged) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using a higher priority lane.
                var root = getWorkInProgressRoot();
                if (root !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                  if (
                    attemptHydrationAtLane !== NoLane &&
                    attemptHydrationAtLane !== suspenseState.retryLane
                  ) {
                    // Intentionally mutating since this render will get interrupted. This
                    // is one of the very rare times where we mutate the current tree
                    // during the render phase.
                    suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                  }
                } // If we have scheduled higher pri work above, this will probably just abort the render
                // since we now have higher priority work, but in case it doesn't, we need to prepare to
                // render something, if we time out. Even if that requires us to delete everything and
                // skip hydration.
                // Delay having to do this as long as the suspense timeout allows us.
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(
                  new Error(
                    "This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition.",
                  ),
                );
                return retrySuspenseComponentWithoutHydrating(
                  current,
                  workInProgress,
                  renderLanes,
                  _capturedValue,
                );
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(
                  workInProgress,
                  suspenseInstance,
                  suspenseState.treeContext,
                );
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(
                  workInProgress,
                  primaryChildren,
                ); // Mark the children as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              // This is the second render pass. We already attempted to hydrated, but
              // something either suspended or errored.
              if (workInProgress.flags & ForceClientRender) {
                // Something errored during hydration. Try again without hydrating.
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(
                  new Error(
                    "There was an error while hydrating this Suspense boundary. Switched to client rendering.",
                  ),
                );
                return retrySuspenseComponentWithoutHydrating(
                  current,
                  workInProgress,
                  renderLanes,
                  _capturedValue2,
                );
              } else if (workInProgress.memoizedState !== null) {
                // Something suspended and we should still be in dehydrated mode.
                // Leave the existing child in place.
                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                // but the normal suspense pass doesn't.
                workInProgress.flags |= DidCapture;
                return null;
              } else {
                // Suspended but we should no longer be in dehydrated mode.
                // Therefore we now have to render the fallback.
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(
                  current,
                  workInProgress,
                  nextPrimaryChildren,
                  nextFallbackChildren,
                  renderLanes,
                );
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
            scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
            // Mark any Suspense boundaries with fallbacks as having work to do.
            // If they were previously forced into fallbacks, they may now be able
            // to unblock.
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
              } else if (node.tag === SuspenseListComponent)
                // If the tail is hidden there might not be an Suspense boundaries
                // to schedule work on. In this case we have to schedule it on the
                // list itself.
                // We don't have to traverse to the children of the list since
                // the list will propagate the change when it rerenders.
                scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress) return;
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            // This is going to find the last row among these children that is already
            // showing content on the screen, as opposed to being in fallback state or
            // new. If a row has multiple Suspense boundaries, any of them being in the
            // fallback state, counts as the whole row being in a fallback state.
            // Note that the "rows" will be workInProgress, but any nested children
            // will still be current since we haven't rendered them yet. The mounted
            // order may not be the same as the new order. We use the new order.
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate; // New rows can't be content rows.
              if (currentRow !== null && findFirstSuspended(currentRow) === null)
                lastContentRow = row;
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            if (
              revealOrder !== undefined &&
              revealOrder !== "forwards" &&
              revealOrder !== "backwards" &&
              revealOrder !== "together" &&
              !didWarnAboutRevealOrder[revealOrder]
            ) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string")
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards":
                    error(
                      '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                      revealOrder,
                      revealOrder.toLowerCase(),
                    );
                    break;
                  case "forward":
                  case "backward":
                    error(
                      '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                      revealOrder,
                      revealOrder.toLowerCase(),
                    );
                    break;
                  default:
                    error(
                      '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                      revealOrder,
                    );
                    break;
                }
              else
                error(
                  '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                  revealOrder,
                );
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error(
                  '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
                  tailMode,
                );
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error(
                  '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
                  tailMode,
                );
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index) {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error(
                "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
                type,
                index,
                type,
              );
              return false;
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            if (
              (revealOrder === "forwards" || revealOrder === "backwards") &&
              children !== undefined &&
              children !== null &&
              children !== false
            ) {
              if (isArray(children))
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) return;
                }
              else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) return;
                      _i++;
                    }
                  }
                } else
                  error(
                    'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                    revealOrder,
                  );
              }
            }
          }
          function initSuspenseListRenderState(
            workInProgress,
            isBackwards,
            tail,
            lastContentRow,
            tailMode,
          ) {
            var renderState = workInProgress.memoizedState;
            if (renderState === null)
              workInProgress.memoizedState = {
                isBackwards: isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail: tail,
                tailMode: tailMode,
              };
            else {
              // We can reuse the existing object from previous renders.
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          } // This can end up rendering this component multiple passes.
          // The first pass splits the children fibers into two sets. A head and tail.
          // We first render the head. If anything is in fallback state, we do another
          // pass through beginWork to rerender all children (including the tail) with
          // the force suspend context. If the first render didn't have anything in
          // in fallback state. Then we render each row in the tail one-by-one.
          // That happens in the completeWork phase without going back to beginWork.
          function updateSuspenseListComponent(current, workInProgress, renderLanes) {
            var nextProps = workInProgress.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress.flags |= DidCapture;
            } else {
              var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore)
                // If we previously forced a fallback, we need to schedule work
                // on any nested boundaries to let them know to try to render
                // again. This is the same as context updating.
                propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress, suspenseContext);
            if ((workInProgress.mode & ConcurrentMode) === NoMode)
              // In legacy mode, SuspenseList doesn't work so we just
              // use make it a noop by treating it as the default revealOrder.
              workInProgress.memoizedState = null;
            else
              switch (revealOrder) {
                case "forwards":
                  var lastContentRow = findLastContentRow(workInProgress.child);
                  var tail;
                  if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                  } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress,
                    false,
                    tail,
                    lastContentRow,
                    tailMode,
                  );
                  break;
                case "backwards":
                  // We're going to find the first row that has existing content.
                  // At the same time we're going to reverse the list of everything
                  // we pass in the meantime. That's going to be our tail in reverse
                  // order.
                  var _tail = null;
                  var row = workInProgress.child;
                  workInProgress.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      // This is the beginning of the main content.
                      workInProgress.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                  initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                  break;
                case "together":
                  initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                  break;
                default:
                  // The default reveal order is the same as not having
                  // a boundary.
                  workInProgress.memoizedState = null;
              }
            return workInProgress.child;
          }
          function updatePortalComponent(current, workInProgress, renderLanes) {
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            var nextChildren = workInProgress.pendingProps;
            if (current === null)
              // Portals are special because we don't append the children during mount
              // but at commit. Therefore we need to track insertions which the normal
              // flow doesn't do during mount. This doesn't happen at the root because
              // the root always starts with a "current" with a null child.
              // TODO: Consider unifying this with how the root works.
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                null,
                nextChildren,
                renderLanes,
              );
            else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
            return workInProgress.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current, workInProgress, renderLanes) {
            var providerType = workInProgress.type;
            var context = providerType._context;
            var newProps = workInProgress.pendingProps;
            var oldProps = workInProgress.memoizedProps;
            var newValue = newProps.value;
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error(
                  "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?",
                );
              }
            }
            var providerPropTypes = workInProgress.type.propTypes;
            if (providerPropTypes)
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            pushProvider(workInProgress, context, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged())
                  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
              } // The context value changed. Search for matching consumers and schedule
              // them to update.
              else propagateContextChange(workInProgress, context, renderLanes);
            }
            var newChildren = newProps.children;
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            return workInProgress.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current, workInProgress, renderLanes) {
            var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
            if (context._context === undefined) {
              // This may be because it's a Context (rather than a Consumer).
              // Or it may be because it's older React where they're the same thing.
              // We only want to warn if we're sure it's a new React.
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error(
                    "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?",
                  );
                }
              }
            } else context = context._context;
            var newProps = workInProgress.pendingProps;
            var render = newProps.children;
            if (typeof render !== "function")
              error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.",
              );
            prepareToReadContext(workInProgress, renderLanes);
            var newValue = readContext(context);
            markComponentRenderStarted(workInProgress);
            var newChildren;
            ReactCurrentOwner$1.current = workInProgress;
            setIsRendering(true);
            newChildren = render(newValue);
            setIsRendering(false);
            markComponentRenderStopped();
            workInProgress.flags |= PerformedWork;
            reconcileChildren(current, workInProgress, newChildren, renderLanes);
            return workInProgress.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
              if (current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
            if (current !== null)
              // Reuse previous dependencies
              workInProgress.dependencies = current.dependencies;
            // Don't update "base" render times for bailouts.
            stopProfilerTimerIfRunning();
            markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
            if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current, workInProgress);
            return workInProgress.child;
          }
          function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null)
              // eslint-disable-next-line react-internal/prod-error-codes
              throw new Error("Cannot swap the root fiber.");
            // Disconnect from the old current.
            // It will get deleted.
            current.alternate = null;
            oldWorkInProgress.alternate = null; // Connect to the new tree.
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
            if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
            else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null)
                // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error("Expected parent to have a child.");
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null)
                  // eslint-disable-next-line react-internal/prod-error-codes
                  throw new Error("Expected to find the previous sibling.");
              }
              prevSibling.sibling = newWorkInProgress;
            } // Delete the old fiber and place the new one.
            // Since the old fiber is disconnected, we have to schedule it manually.
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current];
              returnFiber.flags |= ChildDeletion;
            } else deletions.push(current);
            newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
            return newWorkInProgress;
          }
          function checkScheduledUpdateOrContext(current, renderLanes) {
            // Before performing an early bailout, we must check if there are pending
            // updates or context.
            var updateLanes = current.lanes;
            if (includesSomeLane(updateLanes, renderLanes)) return true;
            // No pending update, but because context is propagated lazily, we need
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
            // This fiber does not have any pending work. Bailout without entering
            // the begin phase. There's still some bookkeeping we that needs to be done
            // in this optimized path, mostly pushing stuff onto the stack.
            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress);
                break;
              case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
              case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
              case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
              case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(
                      workInProgress,
                      setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                    ); // We know that this component will suspend again because if it has
                    // been unsuspended it has committed as a resolved Suspense component.
                    // If it needs to be retried, it should have work scheduled on it.
                    workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                    // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                    return null;
                  } // If this boundary is currently timed out, we need to decide
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  // child fragment.
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes, primaryChildLanes))
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                  else {
                    // The primary child fragment does not have pending work marked
                    // on it
                    pushSuspenseContext(
                      workInProgress,
                      setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                    ); // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    if (child !== null)
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    // Note: We can return `null` here because we already checked
                    // whether there were nested context consumers, via the call to
                    // `bailoutOnAlreadyFinishedWork` above.
                    else return null;
                  }
                } else
                  pushSuspenseContext(
                    workInProgress,
                    setDefaultShallowSuspenseContext(suspenseStackCursor.current),
                  );
                break;
              case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork)
                    // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                  // Reset to the "together" mode in case we've started a different
                  // update in the past but didn't complete it.
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                else return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
            }
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }
          function beginWork(current, workInProgress, renderLanes) {
            if (workInProgress._debugNeedsRemount && current !== null)
              // This will restart the begin phase with a new fiber.
              return remountFiber(
                current,
                workInProgress,
                createFiberFromTypeAndProps(
                  workInProgress.type,
                  workInProgress.key,
                  workInProgress.pendingProps,
                  workInProgress._debugOwner || null,
                  workInProgress.mode,
                  workInProgress.lanes,
                ),
              );
            if (current !== null) {
              var oldProps = current.memoizedProps;
              var newProps = workInProgress.pendingProps;
              if (
                oldProps !== newProps ||
                hasContextChanged() ||
                workInProgress.type !== current.type
              )
                // If props or context changed, mark the fiber as having performed work.
                // This may be unset if the props are determined to be equal later (memo).
                didReceiveUpdate = true;
              else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(
                  current,
                  renderLanes,
                );
                if (
                  !hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                  // may not be work scheduled on `current`, so we check for this flag.
                  (workInProgress.flags & DidCapture) === NoFlags
                ) {
                  // No pending updates or context. Bail out now.
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(
                    current,
                    workInProgress,
                    renderLanes,
                  );
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags)
                  // This is a special case that only exists for legacy mode.
                  // See https://github.com/facebook/react/pull/19216.
                  didReceiveUpdate = true;
                // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                else didReceiveUpdate = false;
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
              }
            } // Before entering the begin phase, clear pending update priority.
            // TODO: This assumes that we're about to evaluate the component and process
            // the update queue. However, there's an exception: SimpleMemoComponent
            // sometimes bails out later in the begin phase. This indicates that we should
            // move this assignment out of the common path and into each branch.
            workInProgress.lanes = NoLanes;
            switch (workInProgress.tag) {
              case IndeterminateComponent:
                return mountIndeterminateComponent(
                  current,
                  workInProgress,
                  workInProgress.type,
                  renderLanes,
                );
              case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
              case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps =
                  workInProgress.elementType === Component
                    ? unresolvedProps
                    : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(
                  current,
                  workInProgress,
                  Component,
                  resolvedProps,
                  renderLanes,
                );
              case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps =
                  workInProgress.elementType === _Component
                    ? _unresolvedProps
                    : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(
                  current,
                  workInProgress,
                  _Component,
                  _resolvedProps,
                  renderLanes,
                );
              case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
              case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
              case HostText:
                return updateHostText(current, workInProgress);
              case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
              case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
              case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 =
                  workInProgress.elementType === type
                    ? _unresolvedProps2
                    : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(
                  current,
                  workInProgress,
                  type,
                  _resolvedProps2,
                  renderLanes,
                );
              case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
              case Mode:
                return updateMode(current, workInProgress, renderLanes);
              case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
              case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
              case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
              case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes)
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      "prop",
                      getComponentNameFromType(_type2),
                    );
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(
                  current,
                  workInProgress,
                  _type2,
                  _resolvedProps3,
                  renderLanes,
                );
              case SimpleMemoComponent:
                return updateSimpleMemoComponent(
                  current,
                  workInProgress,
                  workInProgress.type,
                  workInProgress.pendingProps,
                  renderLanes,
                );
              case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 =
                  workInProgress.elementType === _Component2
                    ? _unresolvedProps4
                    : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(
                  current,
                  workInProgress,
                  _Component2,
                  _resolvedProps4,
                  renderLanes,
                );
              case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
              case ScopeComponent:
                break;
              case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
            }
            throw new Error(
              "Unknown unit of work tag (" +
                workInProgress.tag +
                "). This error is likely caused by a bug in " +
                "React. Please file an issue.",
            );
          }
          function markUpdate(workInProgress) {
            // Tag the fiber with an update effect. This turns a Placement into
            // a PlacementAndUpdate.
            workInProgress.flags |= Update;
          }
          function markRef$1(workInProgress) {
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          // Mutation mode
          appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText)
                appendInitialChild(parent, node.stateNode);
              else if (node.tag === HostPortal);
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress) return;
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function (current, workInProgress) {};
          updateHostComponent$1 = function (
            current,
            workInProgress,
            type,
            newProps,
            rootContainerInstance,
          ) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            if (oldProps === newProps)
              // In mutation mode, this is sufficient for a bailout because
              // we won't touch this node even if children changed.
              return;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.
            var updatePayload = prepareUpdate(
              instance,
              type,
              oldProps,
              newProps,
              rootContainerInstance,
              currentHostContext,
            ); // TODO: Type this specific to this type of component.
            workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.
            if (updatePayload) markUpdate(workInProgress);
          };
          updateHostText$1 = function (current, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) markUpdate(workInProgress);
          };
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating())
              // If we're hydrating, we should consume as many items as we can
              // so we don't leave any behind.
              return;
            switch (renderState.tailMode) {
              case "hidden":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) lastTailNode = tailNode;
                  tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null)
                  // All remaining items in the tail are insertions.
                  renderState.tail = null;
                // Detach the insertion after the last node that was already
                // inserted.
                else lastTailNode.sibling = null;
                break;
              case "collapsed":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                  _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                  // All remaining items in the tail are insertions.
                  if (!hasRenderedATailFallback && renderState.tail !== null)
                    // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                  else renderState.tail = null;
                } // Detach the insertion after the last node that was already
                // inserted.
                else _lastTailNode.sibling = null;
                break;
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout =
              completedWork.alternate !== null &&
              completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              // Bubble up the earliest expiration time.
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(
                    newChildLanes,
                    mergeLanes(child.lanes, child.childLanes),
                  );
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                  // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                  // When work is done, it should bubble to the parent's actualDuration. If
                  // the fiber has not been cloned though, (meaning no work was done), then
                  // this value will reflect the amount of time spent working on a previous
                  // render. In that case it should not bubble. We determine whether it was
                  // cloned by comparing the child pointer.
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(
                    newChildLanes,
                    mergeLanes(_child.lanes, _child.childLanes),
                  );
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                  // smell because it assumes the commit phase is never concurrent with
                  // the render phase. Will address during refactor to alternate model.
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              // Bubble up the earliest expiration time.
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(
                    newChildLanes,
                    mergeLanes(_child2.lanes, _child2.childLanes),
                  ); // "Static" flags share the lifetime of the fiber/hook they belong to,
                  // so we should bubble those up even during a bailout. All the other
                  // flags have a lifetime only of a single render + commit, so we should
                  // ignore them.
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(
                    newChildLanes,
                    mergeLanes(_child3.lanes, _child3.childLanes),
                  ); // "Static" flags share the lifetime of the fiber/hook they belong to,
                  // so we should bubble those up even during a bailout. All the other
                  // flags have a lifetime only of a single render + commit, so we should
                  // ignore them.
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                  // smell because it assumes the commit phase is never concurrent with
                  // the render phase. Will address during refactor to alternate model.
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
            if (
              hasUnhydratedTailNodes() &&
              (workInProgress.mode & ConcurrentMode) !== NoMode &&
              (workInProgress.flags & DidCapture) === NoFlags
            ) {
              warnIfUnhydratedTailNodes(workInProgress);
              resetHydrationState();
              workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress);
            if (nextState !== null && nextState.dehydrated !== null) {
              // We might be inside a hydration state the first time we're picking up this
              // Suspense boundary, and also after we've reentered it for further hydration.
              if (current === null) {
                if (!wasHydrated)
                  throw new Error(
                    "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.",
                  );
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                    var primaryChildFragment = workInProgress.child;
                    if (primaryChildFragment !== null)
                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                      workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
                return false;
              } else {
                // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags)
                  // This boundary did not suspend so it's now hydrated and unsuspended.
                  workInProgress.memoizedState = null;
                // If nothing suspended, we need to schedule an effect to mark this boundary
                // as having hydrated so events know that they're free to be invoked.
                // It's also a signal to replay events and the suspense callback.
                // If something suspended, schedule an effect to attach retry listeners.
                // So we might as well always mark this.
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                    var _primaryChildFragment = workInProgress.child;
                    if (_primaryChildFragment !== null)
                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                      workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
                return false;
              }
            } else {
              // Successfully completed this tree. If this was a forced client render,
              // there may have been recoverable errors during first hydration
              // attempt. If so, add them to a queue so we can log them in the
              // commit phase.
              upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path
              return true;
            }
          }
          function completeWork(current, workInProgress, renderLanes) {
            var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
            // to the current tree provider fiber is just as fast and less error-prone.
            // Ideally we would have a special version of the work loop only
            // for hydration.
            popTreeContext(workInProgress);
            switch (workInProgress.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
              case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
              case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                  // If we hydrated, pop so that we can delete any remaining children
                  // that weren't hydrated.
                  var wasHydrated = popHydrationState(workInProgress);
                  if (wasHydrated)
                    // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                  else if (current !== null) {
                    var prevState = current.memoizedState;
                    if (
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress.flags & ForceClientRender) !== NoFlags
                    ) {
                      // Schedule an effect to clear this container at the start of the
                      // next commit. This handles the case of React rendering into a
                      // container with previous children. It's also safe to do for
                      // updates too, because current.child would only be null if the
                      // previous render was null (so the container would already
                      // be empty).
                      workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                      // recoverable errors during first hydration attempt. If so, add
                      // them to a queue so we can log them in the commit phase.
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
              case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                  updateHostComponent$1(
                    current,
                    workInProgress,
                    type,
                    newProps,
                    rootContainerInstance,
                  );
                  if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                  if (!newProps) {
                    if (workInProgress.stateNode === null)
                      throw new Error(
                        "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.",
                      );
                    // This can happen when we abort work.
                    bubbleProperties(workInProgress);
                    return null;
                  }
                  var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                  // "stack" as the parent. Then append children as we go in beginWork
                  // or completeWork depending on whether we want to add them top->down or
                  // bottom->up. Top->down is faster in IE11.
                  var _wasHydrated = popHydrationState(workInProgress);
                  if (_wasHydrated) {
                    // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    if (
                      prepareToHydrateHostInstance(
                        workInProgress,
                        rootContainerInstance,
                        currentHostContext,
                      )
                    )
                      // If changes to the hydrated node need to be applied at the
                      // commit-phase we mark this as such.
                      markUpdate(workInProgress);
                  } else {
                    var instance = createInstance(
                      type,
                      newProps,
                      rootContainerInstance,
                      currentHostContext,
                      workInProgress,
                    );
                    appendAllChildren(instance, workInProgress, false, false);
                    workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                    // (eg DOM renderer supports auto-focus for certain elements).
                    // Make sure such renderers get scheduled for later work.
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance))
                      markUpdate(workInProgress);
                  }
                  if (workInProgress.ref !== null)
                    // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
              case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                  // to schedule a side-effect to do the updates.
                  updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress.stateNode === null)
                      throw new Error(
                        "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.",
                      );
                    // This can happen when we abort work.
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress))
                      markUpdate(workInProgress);
                  } else
                    workInProgress.stateNode = createTextInstance(
                      newText,
                      _rootContainerInstance,
                      _currentHostContext,
                      workInProgress,
                    );
                }
                bubbleProperties(workInProgress);
                return null;
              case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
                // to its own fiber type so that we can add other kinds of hydration
                // boundaries that aren't associated with a Suspense tree. In anticipation
                // of such a refactor, all the hydration logic is contained in
                // this branch.
                if (
                  current === null ||
                  (current.memoizedState !== null && current.memoizedState.dehydrated !== null)
                ) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(
                    current,
                    workInProgress,
                    nextState,
                  );
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress.flags & ShouldCapture)
                      // Special case. There were remaining unhydrated nodes. We treat
                      // this as a mismatch. Revert to client rendering.
                      return workInProgress;
                    // Did not finish hydrating, either because this is the initial
                    // render or because something suspended.
                    else return null;
                  } // Continue with the normal Suspense path.
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                  // Something suspended. Re-render with the fallback children.
                  workInProgress.lanes = renderLanes; // Do not reset the effect list.
                  if ((workInProgress.mode & ProfileMode) !== NoMode)
                    transferActualDuration(workInProgress);
                  // Don't bubble properties in this case.
                  return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                // a passive effect, which is when we process the transitions
                if (nextDidTimeout !== prevDidTimeout) {
                  // an effect to toggle the subtree's visibility. When we switch from
                  // fallback -> primary, the inner Offscreen fiber schedules this effect
                  // as part of its normal complete phase. But when we switch from
                  // primary -> fallback, the inner Offscreen fiber does not have a complete
                  // phase. So we need to schedule its effect here.
                  //
                  // We also use this flag to connect/disconnect the effects, but the same
                  // logic applies: when re-connecting, the Offscreen fiber's complete
                  // phase will handle scheduling the effect. It's only when the fallback
                  // is active that we have to do anything special.
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress.child;
                    _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                    // in the concurrent tree already suspended during this render.
                    // This is a known bug.
                    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                      // TODO: Move this back to throwException because this is too late
                      // if this is a large tree which is common for initial loads. We
                      // don't know if we should restart a render or not until we get
                      // this marker, and this is too late.
                      // If this render already had a ping or lower pri updates,
                      // and this is the first time we know we're going to suspend we
                      // should be able to immediately restart from within throwException.
                      var hasInvisibleChildContext =
                        current === null &&
                        (workInProgress.memoizedProps.unstable_avoidThisFallback !== true ||
                          !enableSuspenseAvoidThisFallback);
                      if (
                        hasInvisibleChildContext ||
                        hasSuspenseContext(
                          suspenseStackCursor.current,
                          InvisibleParentSuspenseContext,
                        )
                      )
                        // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                      // Otherwise, we're going to have to hide content so we should
                      // suspend for longer if possible.
                      else renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null)
                  // Schedule an effect to attach a retry listener to the promise.
                  // TODO: Move to passive phase
                  workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                    var primaryChildFragment = workInProgress.child;
                    if (primaryChildFragment !== null)
                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                      workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
                return null;
              case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
              case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
              case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
              case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                  // We're running in the default, "independent" mode.
                  // We don't do anything in this mode.
                  bubbleProperties(workInProgress);
                  return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  // We just rendered the head.
                  if (!didSuspendAlready) {
                    // This is the first pass. We need to figure out if anything is still
                    // suspended in the rendered set.
                    // If new content unsuspended, but there's still some content that
                    // didn't. Then we need to do a second pass that forces everything
                    // to keep showing their fallbacks.
                    // We might be suspended if something in this render pass suspended, or
                    // something in the previous committed pass suspended. Otherwise,
                    // there's no chance so we can skip the expensive call to
                    // findFirstSuspended.
                    var cannotBeSuspended =
                      renderHasNotSuspendedYet() &&
                      (current === null || (current.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                          // part of the second pass. In that case nothing will subscribe to
                          // its thenables. Instead, we'll transfer its thenables to the
                          // SuspenseList so that it can retry if they resolve.
                          // There might be multiple of these in the list but since we're
                          // going to wait for all of them anyway, it doesn't really matter
                          // which ones gets to ping. In theory we could get clever and keep
                          // track of how many dependencies remain but it gets tricky because
                          // in the meantime, we can add/remove/change items and dependencies.
                          // We might bail out of the loop before finding any but that
                          // doesn't matter since that means that the other boundaries that
                          // we did find already has their listeners attached.
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress.updateQueue = newThenables;
                            workInProgress.flags |= Update;
                          } // Rerender the whole list, but this time, we'll force fallbacks
                          // to stay in place.
                          // Reset the effect flags before doing the second pass since that's now invalid.
                          // Reset the child fibers to their original state.
                          workInProgress.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                          // rerender the children.
                          pushSuspenseContext(
                            workInProgress,
                            setShallowSuspenseContext(
                              suspenseStackCursor.current,
                              ForceSuspenseFallback,
                            ),
                          ); // Don't bubble properties in this case.
                          return workInProgress.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      // We have already passed our CPU deadline but we still have rows
                      // left in the tail. We'll just give up further attempts to render
                      // the main content and only render fallbacks.
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                      // to get it started back up to attempt the next item. While in terms
                      // of priority this work has the same priority as this current render,
                      // it's not part of the same transition once the transition has
                      // committed. If it's sync, we still want to yield so that it can be
                      // painted. Conceptually, this is really the same as pinging.
                      // We can use any RetryLane even if it's the one currently rendering
                      // since we're leaving it behind on this node.
                      workInProgress.lanes = SomeRetryLane;
                    }
                  } else cutOffTailIfNeeded(renderState, false);
                  // Next we're going to render the tail.
                } else {
                  // Append the rendered row to the child list.
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                      // get lost if this row ends up dropped during a second pass.
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress.updateQueue = _newThenables;
                        workInProgress.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true); // This might have been modified.
                      if (
                        renderState.tail === null &&
                        renderState.tailMode === "hidden" &&
                        !renderedTail.alternate &&
                        !getIsHydrating() // We don't cut it if we're hydrating.
                      ) {
                        // We're done.
                        bubbleProperties(workInProgress);
                        return null;
                      }
                    } else if (
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() &&
                      renderLanes !== OffscreenLane
                    ) {
                      // We have now passed our CPU deadline and we'll just give up further
                      // attempts to render the main content and only render fallbacks.
                      // The assumption is that this is usually faster.
                      workInProgress.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                      // to get it started back up to attempt the next item. While in terms
                      // of priority this work has the same priority as this current render,
                      // it's not part of the same transition once the transition has
                      // committed. If it's sync, we still want to yield so that it can be
                      // painted. Conceptually, this is really the same as pinging.
                      // We can use any RetryLane even if it's the one currently rendering
                      // since we're leaving it behind on this node.
                      workInProgress.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    // The effect list of the backwards tail will have been added
                    // to the end. This breaks the guarantee that life-cycles fire in
                    // sibling order but that isn't a strong guarantee promised by React.
                    // Especially since these might also just pop in during future commits.
                    // Append to the beginning of the list.
                    renderedTail.sibling = workInProgress.child;
                    workInProgress.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) previousSibling.sibling = renderedTail;
                    else workInProgress.child = renderedTail;
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  // We still have tail rows to render.
                  // Pop a row.
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null; // Restore the context.
                  // TODO: We can probably just avoid popping it instead and only
                  // setting it the first time we go from not suspended to suspended.
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready)
                    suspenseContext = setShallowSuspenseContext(
                      suspenseContext,
                      ForceSuspenseFallback,
                    );
                  else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                  // Don't bubble properties in this case.
                  return next;
                }
                bubbleProperties(workInProgress);
                return null;
              case ScopeComponent:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                  var _prevState = current.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden)
                    workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode)
                  bubbleProperties(workInProgress);
                // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                else if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress);
                  // Check if there was an insertion or update in the hidden subtree.
                  // If so, we need to hide those nodes in the commit phase, so
                  // schedule a visibility effect.
                  if (workInProgress.subtreeFlags & (Placement | Update))
                    workInProgress.flags |= Visibility;
                }
                return null;
              case CacheComponent:
                return null;
              case TracingMarkerComponent:
                return null;
            }
            throw new Error(
              "Unknown unit of work tag (" +
                workInProgress.tag +
                "). This error is likely caused by a bug in " +
                "React. Please file an issue.",
            );
          }
          function unwindWork(current, workInProgress, renderLanes) {
            // Note: This intentionally doesn't check if we're hydrating because comparing
            // to the current tree provider fiber is just as fast and less error-prone.
            // Ideally we would have a special version of the work loop only
            // for hydration.
            popTreeContext(workInProgress);
            switch (workInProgress.tag) {
              case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                  workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
                  if ((workInProgress.mode & ProfileMode) !== NoMode)
                    transferActualDuration(workInProgress);
                  return workInProgress;
                }
                return null;
              case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  // There was an error during render that wasn't captured by a suspense
                  // boundary. Do a second pass on the root to unmount the children.
                  workInProgress.flags = (_flags & ~ShouldCapture) | DidCapture;
                  return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
              case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
              case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress.alternate === null)
                    throw new Error(
                      "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.",
                    );
                  resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress.flags = (_flags2 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.
                  if ((workInProgress.mode & ProfileMode) !== NoMode)
                    transferActualDuration(workInProgress);
                  return workInProgress;
                }
                return null;
              case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
              case HostPortal:
                popHostContainer(workInProgress);
                return null;
              case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current, interruptedWork, renderLanes) {
            // Note: This intentionally doesn't check if we're hydrating because comparing
            // to the current tree provider fiber is just as fast and less error-prone.
            // Ideally we would have a special version of the work loop only
            // for hydration.
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined)
                  popContext(interruptedWork);
                break;
              case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              case HostComponent:
                popHostContext(interruptedWork);
                break;
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
          // Only used when enableSuspenseLayoutEffectSemantics is enabled.
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null; // Used for Profiling builds to track updaters.
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error) {
            invokeGuardedCallback(null, function () {
              throw error;
            });
            clearCaughtError();
          }
          var callComponentWillUnmountWithTimer = function (current, instance) {
            instance.props = current.memoizedProps;
            instance.state = current.memoizedState;
            if (current.mode & ProfileMode)
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current);
              }
            else instance.componentWillUnmount();
          }; // Capture errors so they don't interrupt mounting.
          function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current);
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
          } // Capture errors so they don't interrupt unmounting.
          function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current, instance);
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
          } // Capture errors so they don't interrupt mounting.
          function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
          } // Capture errors so they don't interrupt mounting.
          function safelyAttachRef(current, nearestMountedAncestor) {
            try {
              commitAttachRef(current);
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
          }
          function safelyDetachRef(current, nearestMountedAncestor) {
            var ref = current.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (
                    enableProfilerTimer &&
                    enableProfilerCommitHooks &&
                    current.mode & ProfileMode
                  )
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current);
                    }
                  else retVal = ref(null);
                } catch (error) {
                  captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === "function")
                  error(
                    "Unexpected return value from a callback ref in %s. A callback ref should not return a function.",
                    getComponentNameFromFiber(current),
                  );
              } else ref.current = null;
            }
          }
          function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root, firstChild) {
            focusedInstanceHandle = prepareForCommit(root.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else commitBeforeMutationEffects_complete();
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  break;
                case ClassComponent:
                  if (current !== null) {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    var instance = finishedWork.stateNode; // We could update instance props and state here,
                    if (
                      finishedWork.type === finishedWork.elementType &&
                      !didWarnAboutReassigningProps
                    ) {
                      if (instance.props !== finishedWork.memoizedProps)
                        error(
                          "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                          getComponentNameFromFiber(finishedWork) || "instance",
                        );
                      if (instance.state !== finishedWork.memoizedState)
                        error(
                          "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                          getComponentNameFromFiber(finishedWork) || "instance",
                        );
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(
                      finishedWork.elementType === finishedWork.type
                        ? prevProps
                        : resolveDefaultProps(finishedWork.type, prevProps),
                      prevState,
                    );
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error(
                        "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
                        getComponentNameFromFiber(finishedWork),
                      );
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                case HostRoot:
                  var root = finishedWork.stateNode;
                  clearContainer(root.containerInfo);
                  break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default:
                  throw new Error(
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.",
                  );
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  // Unmount
                  var destroy = effect.destroy;
                  effect.destroy = undefined;
                  if (destroy !== undefined) {
                    if ((flags & Passive$1) !== NoFlags$1)
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1)
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1)
                      markComponentPassiveEffectUnmountStopped();
                    else if ((flags & Layout) !== NoFlags$1)
                      markComponentLayoutEffectUnmountStopped();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  if ((flags & Passive$1) !== NoFlags$1)
                    markComponentPassiveEffectMountStarted(finishedWork);
                  else if ((flags & Layout) !== NoFlags$1)
                    markComponentLayoutEffectMountStarted(finishedWork);
                  var create = effect.create;
                  if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                  effect.destroy = create();
                  if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                  if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                  else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                  var destroy = effect.destroy;
                  if (destroy !== undefined && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) hookName = "useLayoutEffect";
                    else if ((effect.tag & Insertion) !== NoFlags) hookName = "useInsertionEffect";
                    else hookName = "useEffect";
                    var addendum = void 0;
                    if (destroy === null)
                      addendum =
                        " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    else if (typeof destroy.then === "function")
                      addendum =
                        "\n\nIt looks like you wrote " +
                        hookName +
                        "(async () => ...) or returned a Promise. " +
                        "Instead, write the async function inside your effect " +
                        "and call it immediately:\n\n" +
                        hookName +
                        "(() => {\n" +
                        "  async function fetchData() {\n" +
                        "    // You can await here\n" +
                        "    const response = await MyAPI.getData(someId);\n" +
                        "    // ...\n" +
                        "  }\n" +
                        "  fetchData();\n" +
                        "}, [someId]); // Or [] if effect doesn't need props or state\n\n" +
                        "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    else addendum = " You returned: " + destroy;
                    error(
                      "%s must not return anything besides a function, which is used for clean-up.%s",
                      hookName,
                      addendum,
                    );
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            // Only Profilers with work in their subtree will have an Update effect scheduled.
            if ((finishedWork.flags & Update) !== NoFlags)
              switch (finishedWork.tag) {
                case Profiler:
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps,
                    id = _finishedWork$memoize.id,
                    onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                  // It does not get reset until the start of the next commit phase.
                  var commitTime = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  if (isCurrentUpdateNested()) phase = "nested-update";
                  if (typeof onPostCommit === "function")
                    onPostCommit(id, phase, passiveEffectDuration, commitTime);
                  // Bubble times to the next nearest ancestor Profiler.
                  // After we process that Profiler, we'll bubble further up.
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root = parentFiber.stateNode;
                        root.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
              }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags)
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode)
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                  break;
                case ClassComponent:
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current === null) {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          if (instance.props !== finishedWork.memoizedProps)
                            error(
                              "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                              getComponentNameFromFiber(finishedWork) || "instance",
                            );
                          if (instance.state !== finishedWork.memoizedState)
                            error(
                              "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                              getComponentNameFromFiber(finishedWork) || "instance",
                            );
                        }
                        if (finishedWork.mode & ProfileMode)
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        else instance.componentDidMount();
                      } else {
                        var prevProps =
                          finishedWork.elementType === finishedWork.type
                            ? current.memoizedProps
                            : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                        var prevState = current.memoizedState; // We could update instance props and state here,
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          if (instance.props !== finishedWork.memoizedProps)
                            error(
                              "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                              getComponentNameFromFiber(finishedWork) || "instance",
                            );
                          if (instance.state !== finishedWork.memoizedState)
                            error(
                              "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                              getComponentNameFromFiber(finishedWork) || "instance",
                            );
                        }
                        if (finishedWork.mode & ProfileMode)
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(
                              prevProps,
                              prevState,
                              instance.__reactInternalSnapshotBeforeUpdate,
                            );
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        else
                          instance.componentDidUpdate(
                            prevProps,
                            prevState,
                            instance.__reactInternalSnapshotBeforeUpdate,
                          );
                      }
                    }
                  } // TODO: I think this is now always non-null by the time it reaches the
                  // commit phase. Consider removing the type check.
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    if (
                      finishedWork.type === finishedWork.elementType &&
                      !didWarnAboutReassigningProps
                    ) {
                      if (instance.props !== finishedWork.memoizedProps)
                        error(
                          "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                          getComponentNameFromFiber(finishedWork) || "instance",
                        );
                      if (instance.state !== finishedWork.memoizedState)
                        error(
                          "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                          getComponentNameFromFiber(finishedWork) || "instance",
                        );
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                case HostRoot:
                  // TODO: I think this is now always non-null by the time it reaches the
                  // commit phase. Consider removing the type check.
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null)
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                case HostComponent:
                  var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                  // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                  // These effects should only be committed when components are first mounted,
                  // aka when there is no current/alternate.
                  if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                case HostText:
                  break;
                case HostPortal:
                  break;
                case Profiler:
                  var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime = getCommitTime();
                  var phase = current === null ? "mount" : "update";
                  if (isCurrentUpdateNested()) phase = "nested-update";
                  if (typeof onRender === "function")
                    onRender(
                      finishedWork.memoizedProps.id,
                      phase,
                      finishedWork.actualDuration,
                      finishedWork.treeBaseDuration,
                      finishedWork.actualStartTime,
                      commitTime,
                    );
                  if (typeof onCommit === "function")
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                  // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                  // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                  // because the effect is also where times bubble to parent Profilers.
                  enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                  // Do not reset these values until the next render so DevTools has a chance to read them first.
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                case SuspenseComponent:
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent:
                  break;
                default:
                  throw new Error(
                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.",
                  );
              }
            if (!offscreenSubtreeWasHidden) {
              if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            // Turn on layout effects in a tree that previously disappeared.
            // TODO (Offscreen) Check: flags & LayoutStatic
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                if (node.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
              case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function")
                  safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
              case HostComponent:
                safelyAttachRef(node, node.return);
                break;
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            // Only hide or unhide the top-most host nodes.
            var hostSubtreeRoot = null;
            // We only have the top Fiber that was inserted but we need to recurse down its
            // children to find all the terminal nodes.
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) hideInstance(instance);
                    else unhideInstance(node.stateNode, node.memoizedProps);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null)
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  }
              } else if (
                (node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) &&
                node.memoizedState !== null &&
                node !== finishedWork
              );
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) return;
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
              }
              if (hostSubtreeRoot === node) hostSubtreeRoot = null;
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              } // Moved outside to ensure DCE works with this flag
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                else retVal = ref(instanceToUse);
                if (typeof retVal === "function")
                  error(
                    "Unexpected return value from a callback ref in %s. A callback ref should not return a function.",
                    getComponentNameFromFiber(finishedWork),
                  );
              } else {
                if (!ref.hasOwnProperty("current"))
                  error(
                    "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
                    getComponentNameFromFiber(finishedWork),
                  );
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            // Cut off the return pointer to disconnect it from the tree.
            // This enables us to detect and warn against state updates on an unmounted component.
            // It also prevents events from bubbling from within disconnected components.
            //
            // Ideally, we should also clear the child pointer of the parent alternate to let this
            // get GC:ed but we don't know which for sure which parent is the current
            // one so we'll settle for GC:ing the subtree of this child.
            // This child itself will be GC:ed when the parent updates the next time.
            //
            // Note that we can't clear child or sibling pointers yet.
            // They're needed for passive effects and for findDOMNode.
            // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
            //
            // Don't reset the alternate yet, either. We need that so we can detach the
            // alternate's fields in the passive phase. Clearing the return pointer is
            // sufficient for findDOMNode semantics.
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.return = null;
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            } // Note: Defensively using negation instead of < in case
            // Clear cyclical Fiber fields. This level alone is designed to roughly
            // approximate the planned Fiber refactor. In that world, `setState` will be
            // bound to a special "instance" object instead of a Fiber. The Instance
            // object will not have any of these fields. It will only be connected to
            // the fiber tree via a single link at the root. So if this level alone is
            // sufficient to fix memory issues, that bodes well for our plans.
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
            // tree, which has its own pointers to children, parents, and siblings.
            // The other host nodes also point back to fibers, so we should detach that
            // one, too.
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) detachDeletedInstance(hostInstance);
            }
            fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
            fiber._debugOwner = null;
            // Theoretically, nothing in here should be necessary, because we already
            // disconnected the fiber from the tree. So even if something leaks this
            // particular fiber, it won't leak anything else
            //
            // The purpose of this branch is to be super aggressive so we can measure
            // if there's any difference in memory impact. If there is, that could
            // indicate a React leak we don't know about.
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
            fiber.updateQueue = null;
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) return parent;
              parent = parent.return;
            }
            throw new Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.",
            );
          }
          function isHostParent(fiber) {
            return (
              fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal
            );
          }
          function getHostSibling(fiber) {
            // We're going to search forward into the tree until we find a sibling host
            // node. Unfortunately, if multiple insertions are done in a row we have to
            // search past them. This leads to exponential search for the next sibling.
            // TODO: Find a more efficient way to do this.
            var node = fiber;
            siblings: while (true) {
              // If we didn't find anything, let's try the next sibling.
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return))
                  // If we pop out of the root or hit the parent the fiber we are the
                  // last sibling.
                  return null;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (
                node.tag !== HostComponent &&
                node.tag !== HostText &&
                node.tag !== DehydratedFragment
              ) {
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                  node.child.return = node;
                  node = node.child;
                }
              } // Check if this host node is stable or about to be placed.
              if (!(node.flags & Placement))
                // Found it!
                return node.stateNode;
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
            switch (parentFiber.tag) {
              case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  // Reset the text content of the parent before doing any insertions
                  resetTextContent(parent); // Clear ContentReset from the effect tag
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              case HostRoot:
              case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error(
                  "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.",
                );
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) insertInContainerBefore(parent, stateNode, before);
              else appendChildToContainer(parent, stateNode);
            } else if (tag === HostPortal);
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) insertBefore(parent, stateNode, before);
              else appendChild(parent, stateNode);
            } else if (tag === HostPortal);
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          } // These are tracked on the stack as we recursively traverse a
          // deleted subtree.
          // TODO: Update these during the whole mutation phase, not just during
          // a deletion.
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root, returnFiber, deletedFiber) {
            // We only have the top Fiber that was deleted but we need to recurse down its
            // children to find all the terminal nodes.
            // Recursively delete all host nodes from the parent, detach refs, clean
            // up mounted layout effects, and call componentWillUnmount.
            // We only need to remove the topmost host child in each branch. But then we
            // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
            // could split this into two separate traversals functions, where the second
            // one doesn't include any removeChild logic. This is maybe the same
            // function as "disappearLayoutEffects" (or whatever that turns into after
            // the layout phase is refactored to use recursion).
            // Before starting, find the nearest host parent on the stack so we know
            // which instance/container to remove the children from.
            // TODO: Instead of searching up the fiber return path on every deletion, we
            // can track the nearest host component on the JS stack as we traverse the
            // tree during the commit phase. This would make insertions faster, too.
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                case HostRoot:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                case HostPortal:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
              }
              parent = parent.return;
            }
            if (hostParent === null)
              throw new Error(
                "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.",
              );
            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            parent,
          ) {
            // TODO: Use a static flag to skip trees that don't have unmount effects
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber,
          ) {
            onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
            // into their subtree. There are simpler cases in the inner switch
            // that don't modify the stack.
            switch (deletedFiber.tag) {
              case HostComponent:
                if (!offscreenSubtreeWasHidden)
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
              // Intentional fallthrough to next branch
              // eslint-disable-next-line-no-fallthrough
              case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  // Now that all the child effects have unmounted, we can remove the
                  // node from the tree.
                  if (hostParentIsContainer)
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
              case DehydratedFragment:
                if (hostParent !== null) {
                  if (hostParentIsContainer)
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
              case HostPortal:
                // When we go into a portal, it becomes the parent to remove from.
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect,
                          destroy = _effect.destroy,
                          tag = _effect.tag;
                        if (destroy !== undefined) {
                          if ((tag & Insertion) !== NoFlags$1)
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          else if ((tag & Layout) !== NoFlags$1) {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                return;
              case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function")
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                return;
              case ScopeComponent:
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                return;
              case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                  // If this offscreen component is hidden, we already unmounted it. Before
                  // deleting the children, track that it's already unmounted so that we
                  // don't attempt to unmount the effects again.
                  // TODO: If the tree is hidden, in most cases we should be able to skip
                  // over the nested children entirely. An exception is we haven't yet found
                  // the topmost host node to delete, which we already track on the stack.
                  // But the other case is portals, which need to be detached no matter how
                  // deeply they are nested. We should use a subtree flag to track whether a
                  // subtree includes a nested portal.
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden =
                    prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber,
                  );
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else
                  recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber,
                  );
                break;
              default:
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber,
                );
                return;
            }
          }
          function commitSuspenseCallback(finishedWork) {
            // TODO: Move this to passive phase
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current = finishedWork.alternate;
              if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            // If this boundary just timed out, then it will have a set of wakeables.
            // For each wakeable, attach a listener so that when it resolves, React
            // attempts to re-render the boundary in the primary (pre-timeout) state.
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              wakeables.forEach(function (wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null)
                      // If we have pending work still, associate the original updaters with it.
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    else
                      throw Error(
                        "Expected finished root and lanes to be set. This is a bug in React.",
                      );
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          } // This function detects when a Suspense boundary goes from visible to hidden.
          function commitMutationEffects(root, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
            // Deletions effects can be scheduled on any fiber type. They need to happen
            // before the children effects hae fired.
            var deletions = parentFiber.deletions;
            if (deletions !== null)
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root, parentFiber, childToDelete);
                } catch (error) {
                  captureCommitPhaseError(childToDelete, parentFiber, error);
                }
              }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
            var current = finishedWork.alternate;
            var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
            // because the fiber tag is more specific. An exception is any flag related
            // to reconcilation, because those can be set on all fiber types.
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(
                      Insertion | HasEffect,
                      finishedWork,
                      finishedWork.return,
                    );
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  } // Layout effects are destroyed during the mutation phase so that all
                  // destroy functions for all fibers are called before any create functions.
                  // This prevents sibling component effects from interfering with each other,
                  // e.g. a destroy function in one component should never override a ref set
                  // by a create function in another component during the same commit.
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(
                        Layout | HasEffect,
                        finishedWork,
                        finishedWork.return,
                      );
                    } catch (error) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else
                    try {
                      commitHookEffectListUnmount(
                        Layout | HasEffect,
                        finishedWork,
                        finishedWork.return,
                      );
                    } catch (error) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
              case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
              case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current !== null) safelyDetachRef(current, current.return);
                }
                // TODO: ContentReset gets cleared by the children during the commit
                // phase. This is a refactor hazard because it means we must read
                // flags the flags after `commitReconciliationEffects` has already run;
                // the order matters. We should refactor so that ContentReset does not
                // rely on mutating the flag during commit. Like by setting a flag
                // during the render phase instead.
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current !== null ? current.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null)
                      try {
                        commitUpdate(
                          _instance4,
                          updatePayload,
                          type,
                          oldProps,
                          newProps,
                          finishedWork,
                        );
                      } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                      }
                  }
                }
                return;
              case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  if (finishedWork.stateNode === null)
                    throw new Error(
                      "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.",
                    );
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                  // as the newProps. The updatePayload will contain the real change in
                  // this case.
                  var oldText = current !== null ? current.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  }
                }
                return;
              case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  if (current !== null) {
                    var prevRootState = current.memoizedState;
                    if (prevRootState.isDehydrated)
                      try {
                        commitHydratedContainer(root.containerInfo);
                      } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                      }
                  }
                }
                return;
              case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
                  // read it during an event
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden =
                      offscreenFiber.alternate !== null &&
                      offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden)
                      // TODO: Move to passive phase
                      markCommitTimeOfFallback();
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  // Before committing the children, track on the stack whether this
                  // offscreen subtree was already hidden, so that we don't unmount the
                  // effects again.
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
                  // read it during an event
                  _offscreenInstance.isHidden = _isHidden;
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                  // TODO: This needs to run whenever there's an insertion or update
                  // inside a hidden Offscreen tree.
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
              case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
              case ScopeComponent:
                return;
              default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            }
          }
          function commitReconciliationEffects(finishedWork) {
            // Placement effects (insertions, reorders) can be scheduled on any fiber
            // type. They needs to happen after the children effects have fired, but
            // before the effects on this fiber have fired.
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              } // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted does
              // and isMounted is deprecated anyway so we should be able to kill this.
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
          }
          function commitLayoutEffects(finishedWork, root, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
            // Suspense layout effects semantics don't change for legacy roots.
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  // The Offscreen tree is hidden. Skip over its layout effects.
                  commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                  continue;
                } else {
                  // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                  var current = fiber.alternate;
                  var wasHidden = current !== null && current.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    // This is the root of a reappearing boundary. Turn its layout effects
                    // back on.
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(child, root, committedLanes);
                    child = child.sibling;
                  } // Restore Offscreen state and resume in our-progress traversal.
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                  if (fiber.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  break;
                case ClassComponent:
                  // TODO (Offscreen) Check: flags & RefStatic
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function")
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  break;
                case HostComponent:
                  safelyDetachRef(fiber, fiber.return);
                  break;
                case OffscreenComponent:
                  // Check if this is a
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    // Nested Offscreen tree is already hidden. Don't disappear
                    // its effects.
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
              } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else disappearLayoutEffects_complete(subtreeRoot);
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
              if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else reappearLayoutEffects_complete(subtreeRoot);
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(
            root,
            finishedWork,
            committedLanes,
            committedTransitions,
          ) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(
              finishedWork,
              root,
              committedLanes,
              committedTransitions,
            );
          }
          function commitPassiveMountEffects_begin(
            subtreeRoot,
            root,
            committedLanes,
            committedTransitions,
          ) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else
                commitPassiveMountEffects_complete(
                  subtreeRoot,
                  root,
                  committedLanes,
                  committedTransitions,
                );
            }
          }
          function commitPassiveMountEffects_complete(
            subtreeRoot,
            root,
            committedLanes,
            committedTransitions,
          ) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(
            finishedRoot,
            finishedWork,
            committedLanes,
            committedTransitions,
          ) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  // A fiber was deleted from this parent fiber, but it's still part of
                  // the previous (alternate) parent fiber's list of children. Because
                  // children are a linked list, an earlier sibling that's still alive
                  // will be connected to the deleted fiber via its `alternate`:
                  //
                  //   live fiber
                  //   --alternate--> previous live fiber
                  //   --sibling--> deleted fiber
                  //
                  // We can't disconnect `alternate` on nodes that haven't been deleted
                  // yet, but we can disconnect the `sibling` and `child` pointers.
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else commitPassiveUnmountEffects_complete();
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(
                    Passive$1 | HasEffect,
                    finishedWork,
                    finishedWork.return,
                  );
                  recordPassiveEffectDuration(finishedWork);
                } else
                  commitHookEffectListUnmount(
                    Passive$1 | HasEffect,
                    finishedWork,
                    finishedWork.return,
                  );
                break;
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
            deletedSubtreeRoot,
            nearestMountedAncestor,
          ) {
            while (nextEffect !== null) {
              var fiber = nextEffect; // Deletion effects fire in parent -> child order
              // TODO: Check if fiber has a PassiveStatic flag
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
              // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              // Recursively traverse the entire deleted tree and clean up fiber fields.
              // This is more aggressive than ideal, and the long term goal is to only
              // have to detach the deleted tree at the root.
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
            switch (current.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                  recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
            }
          } // TODO: Reuse reappearLayoutEffects traversal here?
          function invokeLayoutEffectMountInDEV(fiber) {
            // We don't need to re-check StrictEffectsMode here.
            // This function is only called if that check has already passed.
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
              case ClassComponent:
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            // We don't need to re-check StrictEffectsMode here.
            // This function is only called if that check has already passed.
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            // We don't need to re-check StrictEffectsMode here.
            // This function is only called if that check has already passed.
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
              case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function")
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            // We don't need to re-check StrictEffectsMode here.
            // This function is only called if that check has already passed.
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                  captureCommitPhaseError(fiber, fiber.return, error);
                }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            commitHooks.forEach(function (commitHook) {
              return commitHook();
            });
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            // Legacy mode. We preserve the behavior of React 17's act. It assumes an
            // act environment whenever `jest` is defined, but you can still turn off
            // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
            // to false.
            var isReactActEnvironmentGlobal =
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined"
                ? IS_REACT_ACT_ENVIRONMENT
                : undefined; // $FlowExpectedError - Flow doesn't know about jest
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
          function isConcurrentActEnvironment() {
            var isReactActEnvironmentGlobal =
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined"
                ? IS_REACT_ACT_ENVIRONMENT
                : undefined;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null)
              // TODO: Include link to relevant documentation page.
              error("The current testing environment is not configured to support act(...)");
            return isReactActEnvironmentGlobal;
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
            ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
            ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = /*             */ 0;
          var BatchedContext = /*               */ 1;
          var RenderContext = /*                */ 2;
          var CommitContext = /*                */ 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6; // Describes where we are in the React execution stack
          var executionContext = NoContext; // The root we're working on
          var workInProgressRoot = null; // The fiber we're working on
          var workInProgress = null; // The lanes we're rendering
          var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
          // This is a superset of the lanes we started working on at the root. The only
          // case where it's different from `workInProgressRootRenderLanes` is when we
          // enter a subtree that is hidden and needs to be unhidden: Suspense and
          // Offscreen component.
          //
          // Most things in the work loop should deal with workInProgressRootRenderLanes.
          // Most things in begin/complete phases should deal with subtreeRenderLanes.
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
          var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
          var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
          // slightly different than `renderLanes` because `renderLanes` can change as you
          // enter and exit an Offscreen tree. This value is the combination of all render
          // lanes for the entire render phase.
          var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
          // includes unprocessed updates, not work in bailed out children.
          var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
          var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
          var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
          var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
          // We will log them once the tree commits.
          var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
          // model where we don't commit new loading states in too quick succession.
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
          // more and prefer CPU suspense heuristics instead.
          var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
          // suspense heuristics and opt out of rendering more content.
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
          // event times as simultaneous, even if the actual clock time has advanced
          // between the first and second call.
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              // We're inside React, so it's fine to read the actual time.
              return now();
            // We're not inside React, so we may be in the middle of a browser event.
            if (currentEventTime !== NoTimestamp)
              // Use the same start time for all updates until we enter React again.
              return currentEventTime;
            // This is the first update since React yielded. Compute a new start time.
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            // Special cases
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) return SyncLane;
            else if (
              (executionContext & RenderContext) !== NoContext &&
              workInProgressRootRenderLanes !== NoLanes
            )
              // This is a render phase update. These are not officially supported. The
              // old behavior is to give this the same "thread" (lanes) as
              // whatever is currently rendering. So if you call `setState` on a component
              // that happens later in the same render, it will flush. Ideally, we want to
              // remove the special case and treat them as if they came from an
              // interleaved event. Regardless, this pattern is not officially supported.
              // This behavior is only a fallback. The flag only exists until we can roll
              // out the setState warning, since existing code might accidentally rely on
              // the current behavior.
              return pickArbitraryLane(workInProgressRootRenderLanes);
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
              } // The algorithm for assigning an update to a lane should be stable for all
              // updates at the same priority within the same event. To do this, the
              // inputs to the algorithm must be the same.
              //
              // The trick we use is to cache the first of each of these inputs within an
              // event. Then reset the cached values once we can be sure the event is
              // over. Our heuristic for that is whenever we enter a concurrent work loop.
              if (currentEventTransitionLane === NoLane)
                // All transitions within the same event are assigned the same lane.
                currentEventTransitionLane = claimNextTransitionLane();
              return currentEventTransitionLane;
            } // Updates originating inside certain React methods, like flushSync, have
            // their priority set by tracking it with a context variable.
            //
            // The opaque type returned by the host config is internally a lane, so we can
            // use that directly.
            // TODO: Move this type conversion to the event priority module.
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) return updateLane;
            // This update originated outside React. Ask the host environment for an
            // appropriate priority, based on the type of event.
            //
            // The opaque type returned by the host config is internally a lane, so we can
            // use that directly.
            // TODO: Move this type conversion to the event priority module.
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            // This is a fork of `requestUpdateLane` designed specifically for Suspense
            // "retries" — a special update that attempts to flip a Suspense boundary
            // from its placeholder state to its primary/resolved state.
            // Special cases
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) return SyncLane;
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
            checkForNestedUpdates();
            if (isRunningInsertionEffect) error("useInsertionEffect must not schedule updates.");
            if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
            markRootUpdated(root, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot)
              // This update was dispatched during the render phase. This is a mistake
              // if the update originates from user space (with the exception of local
              // hook updates, which are handled differently and don't reach this
              // function), but there are some internal React features that use this as
              // an implementation detail, like selective hydration.
              warnAboutRenderPhaseUpdatesInDEV(
                fiber,
              ); // Track lanes that were updated during the render phase
            else {
              if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext)
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(
                    workInProgressRootInterleavedUpdatedLanes,
                    lane,
                  );
                if (workInProgressRootExitStatus === RootSuspendedWithDelay)
                  // The root already suspended with a delay, which means this render
                  // definitely won't finish. Since we have a new update, let's mark it as
                  // suspended now, right before marking the incoming update. This has the
                  // effect of interrupting the current render and switching to the update.
                  // TODO: Make sure this doesn't override pings that happen while we've
                  // already started rendering.
                  markRootSuspended$1(root, workInProgressRootRenderLanes);
              }
              ensureRootIsScheduled(root, eventTime);
              if (
                lane === SyncLane &&
                executionContext === NoContext &&
                (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
                !ReactCurrentActQueue$1.isBatchingLegacy
              ) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
            // This is a special fork of scheduleUpdateOnFiber that is only used to
            // schedule the initial hydration of a root that has just been created. Most
            // of the stuff in scheduleUpdateOnFiber can be skipped.
            //
            // The main reason for this separate path, though, is to distinguish the
            // initial children from subsequent updates. In fully client-rendered roots
            // (createRoot instead of hydrateRoot), all top-level renders are modeled as
            // updates, but hydration roots are special because the initial render must
            // match what was rendered on the server.
            var current = root.current;
            current.lanes = lane;
            markRootUpdated(root, lane, eventTime);
            ensureRootIsScheduled(root, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            // Check if this is a render phase update. Only called by class components,
            // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
            return (
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          } // Use this function to schedule a task for a root. There's only one task per
          // root; if a task was already scheduled, we'll check to make sure the priority
          // of the existing task is the same as the priority of the next level that the
          // root has work on. This function is called on every update, and right before
          // exiting a task.
          function ensureRootIsScheduled(root, currentTime) {
            var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
            // expired so we know to work on those next.
            markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
            var nextLanes = getNextLanes(
              root,
              root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,
            );
            if (nextLanes === NoLanes) {
              // Special case: There's nothing to work on.
              if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
              root.callbackNode = null;
              root.callbackPriority = NoLane;
              return;
            } // We use the highest priority lane to represent the priority of the callback.
            var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
            var existingCallbackPriority = root.callbackPriority;
            if (
              existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
              // Scheduler task, rather than an `act` task, cancel it and re-scheduled
              // on the `act` queue.
              !(
                ReactCurrentActQueue$1.current !== null &&
                existingCallbackNode !== fakeActCallbackNode
              )
            ) {
              // If we're going to re-use an existing task, it needs to exist.
              // Assume that discrete update microtasks are non-cancellable and null.
              // TODO: Temporary until we confirm this warning is not fired.
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane)
                error(
                  "Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.",
                );
              return;
            }
            if (existingCallbackNode != null)
              // Cancel the existing callback. We'll schedule a new one below.
              cancelCallback$1(existingCallbackNode);
            // Schedule a new callback.
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              // Special case: Sync React callbacks are scheduled on a special
              // internal queue
              if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null)
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
              } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
              // Flush the queue in a microtask.
              if (ReactCurrentActQueue$1.current !== null)
                // Inside `act`, use our internal `act` queue so that these get flushed
                // at the end of the current scope even when using the sync version
                // of `act`.
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              else
                scheduleMicrotask(function () {
                  // In Safari, appending an iframe forces microtasks to run.
                  // https://github.com/facebook/react/issues/22459
                  // We don't support running callbacks in the middle of render
                  // or commit so we need to check against that.
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext)
                    // Note that this would still prematurely flush the callbacks
                    // if this happens outside render or commit phase (e.g. in an event).
                    flushSyncCallbacks();
                });
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(
                schedulerPriorityLevel,
                performConcurrentWorkOnRoot.bind(null, root),
              );
            }
            root.callbackPriority = newCallbackPriority;
            root.callbackNode = newCallbackNode;
          } // This is the entry point for every concurrent task, i.e. anything that
          // goes through Scheduler.
          function performConcurrentWorkOnRoot(root, didTimeout) {
            resetNestedUpdateFlag();
            // event time. The next update will compute a new event time.
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw new Error("Should not already be working.");
            // Flush any pending passive effects before deciding which lanes to work on,
            // in case they schedule additional work.
            var originalCallbackNode = root.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              // Something in the passive effect phase may have canceled the current task.
              // Check if the task node for this root was changed.
              if (root.callbackNode !== originalCallbackNode)
                // The current task was canceled. Exit. We don't need to call
                // `ensureRootIsScheduled` because the check above implies either that
                // there's a new task, or that there's no remaining work on this root.
                return null;
            } // Determine the next lanes to work on, using the fields stored
            // on the root.
            var lanes = getNextLanes(
              root,
              root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,
            );
            if (lanes === NoLanes)
              // Defensive coding. This is never expected to happen.
              return null;
            // We disable time-slicing in some cases: if the work has been CPU-bound
            // for too long ("expired" work, to prevent starvation), or we're in
            // sync-updates-by-default mode.
            // TODO: We only check `didTimeout` defensively, to account for a Scheduler
            // bug we're still investigating. Once the bug in Scheduler is fixed,
            // we can remove this, since we track expiration ourselves.
            var shouldTimeSlice =
              !includesBlockingLane(root, lanes) &&
              !includesExpiredLane(root, lanes) &&
              !didTimeout;
            var exitStatus = shouldTimeSlice
              ? renderRootConcurrent(root, lanes)
              : renderRootSync(root, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete)
                // The render unwound without completing the tree. This happens in special
                // cases where need to exit the current render without producing a
                // consistent tree or committing.
                //
                // This should only happen during a concurrent render, not a discrete or
                // synchronous update. We should have already checked for this when we
                // unwound the stack.
                markRootSuspended$1(root, lanes);
              else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  // A store was mutated in an interleaved event. Render again,
                  // synchronously, to block further mutations.
                  exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                      // concurrent events.
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root, NoLanes);
                    markRootSuspended$1(root, lanes);
                    ensureRootIsScheduled(root, now());
                    throw _fatalError;
                  }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root, now());
            if (root.callbackNode === originalCallbackNode)
              // The task node scheduled for this root is the same one that's
              // currently executed. Need to return a continuation.
              return performConcurrentWorkOnRoot.bind(null, root);
            return null;
          }
          function recoverFromConcurrentError(root, errorRetryLanes) {
            // If an error occurred during hydration, discard server response and fall
            // back to client side render.
            // Before rendering again, save the errors from the previous attempt.
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root)) {
              // The shell failed to hydrate. Set a flag to force a client rendering
              // during the next attempt. To do this, we call prepareFreshStack now
              // to create the root work-in-progress fiber. This is a bit weird in terms
              // of factoring, because it relies on renderRootSync not calling
              // prepareFreshStack again in the call below, which happens because the
              // root and lanes haven't changed.
              //
              // TODO: I think what we should do is set ForceClientRender inside
              // throwException, like we do for nested Suspense boundaries. The reason
              // it's here instead is so we can switch to the synchronous work loop, too.
              // Something to consider for a future refactor.
              var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              errorHydratingContainer(root.containerInfo);
            }
            var exitStatus = renderRootSync(root, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              // Successfully finished rendering on retry
              // The errors from the failed first attempt have been recovered. Add
              // them to the collection of recoverable errors. We'll log them in the
              // commit phase.
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
              // from the first attempt, to preserve the causal sequence.
              if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null)
              workInProgressRootRecoverableErrors = errors;
            else
              workInProgressRootRecoverableErrors.push.apply(
                workInProgressRootRecoverableErrors,
                errors,
              );
          }
          function finishConcurrentRender(root, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored:
                throw new Error("Root did not complete. This is a bug in React.");
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (
                  includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                  !shouldForceFlushFallbacksInDEV()
                ) {
                  // This render only included retries, no updates. Throttle committing
                  // retries so that we don't show too many loading states too quickly.
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root, NoLanes);
                    if (nextLanes !== NoLanes) break;
                    var suspendedLanes = root.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      // We should prefer to render the fallback of at the last
                      // suspended level. Ping the last suspended level to try
                      // rendering it again.
                      // FIXME: What if the suspended lanes are Idle? Should not restart.
                      var eventTime = requestEventTime();
                      markRootPinged(root, suspendedLanes);
                      break;
                    } // The render is suspended, it hasn't timed out, and there's no
                    // lower priority work to do. Instead of committing the fallback
                    // immediately, wait for more data to arrive.
                    root.timeoutHandle = scheduleTimeout(
                      commitRoot.bind(
                        null,
                        root,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                      ),
                      msUntilTimeout,
                    );
                    break;
                  }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                  // This is not a transition, but we did trigger an avoided state.
                  // Schedule a placeholder to display after a short delay, using the Just
                  // Noticeable Difference.
                  // TODO: Is the JND optimization worth the added complexity? If this is
                  // the only reason we track the event time, then probably not.
                  // Consider removing.
                  var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                  if (_msUntilTimeout > 10) {
                    // Instead of committing the fallback immediately, wait for more data
                    // to arrive.
                    root.timeoutHandle = scheduleTimeout(
                      commitRoot.bind(
                        null,
                        root,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                      ),
                      _msUntilTimeout,
                    );
                    break;
                  }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              default:
                throw new Error("Unknown root exit status.");
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            // Search the rendered tree for external store reads, and check whether the
            // stores were mutated in a concurrent event. Intentionally using an iterative
            // loop instead of recursion so we can exit early.
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null)
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue))
                          // Found an inconsistent store.
                          return false;
                      } catch (error) {
                        // If `getSnapshot` throws, return `false`. This will schedule
                        // a re-render, and the error will be rethrown during render.
                        return false;
                      }
                    }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) return true;
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            } // Flow doesn't know this is unreachable, but eslint does
            // eslint-disable-next-line no-unreachable
            return true;
          }
          function markRootSuspended$1(root, suspendedLanes) {
            // When suspending, we should always exclude lanes that were pinged or (more
            // rarely, since we try to avoid it) updated during the render phase.
            // TODO: Lol maybe there's a better way to factor this besides this
            // obnoxiously named function :)
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root, suspendedLanes);
          } // This is the entry point for synchronous tasks that don't go
          // through Scheduler
          function performSyncWorkOnRoot(root) {
            syncNestedUpdateFlag();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw new Error("Should not already be working.");
            flushPassiveEffects();
            var lanes = getNextLanes(root, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              // There's no remaining sync work left.
              ensureRootIsScheduled(root, now());
              return null;
            }
            var exitStatus = renderRootSync(root, lanes);
            if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
              // If something threw an error, try rendering one more time. We'll render
              // synchronously to block concurrent data mutations, and we'll includes
              // all pending updates are included. If it still fails after the second
              // attempt, we'll give up and commit the resulting tree.
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root, NoLanes);
              markRootSuspended$1(root, lanes);
              ensureRootIsScheduled(root, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete)
              throw new Error("Root did not complete. This is a bug in React.");
            // We now have a consistent tree. Because this is a sync render, we
            // will commit it even if something suspended.
            var finishedWork = root.current.alternate;
            root.finishedWork = finishedWork;
            root.finishedLanes = lanes;
            commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
            // pending level.
            ensureRootIsScheduled(root, now());
            return null;
          }
          function flushRoot(root, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
              // most batchedUpdates-like method.
              if (
                executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
                !ReactCurrentActQueue$1.isBatchingLegacy
              ) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) resetRenderTimer();
            }
          } // Overload the definition to the two valid signatures.
          // Warning, this opts-out of checking the function body.
          // eslint-disable-next-line no-redeclare
          function flushSync(fn) {
            // In legacy mode, we flush pending passive effects at the beginning of the
            // next event, not at the end of the previous one.
            if (
              rootWithPendingPassiveEffects !== null &&
              rootWithPendingPassiveEffects.tag === LegacyRoot &&
              (executionContext & (RenderContext | CommitContext)) === NoContext
            )
              flushPassiveEffects();
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) return fn();
              else return undefined;
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
              // Note that this will happen even if batchedUpdates is higher up
              // the stack.
              if ((executionContext & (RenderContext | CommitContext)) === NoContext)
                flushSyncCallbacks();
            }
          }
          function isAlreadyRendering() {
            // Used by the renderer to print a warning if certain APIs are called from
            // the wrong context.
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root, lanes) {
            root.finishedWork = null;
            root.finishedLanes = NoLanes;
            var timeoutHandle = root.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              // The root previous suspended and scheduled a timeout to commit a fallback
              // state. Now that we have additional work, cancel the timeout.
              root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root;
            var rootWorkInProgress = createWorkInProgress(root.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes =
              subtreeRenderLanes =
              workInProgressRootIncludedLanes =
                lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            ReactStrictModeWarnings.discardPendingWarnings();
            return rootWorkInProgress;
          }
          function handleError(root, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  // Expected to be working on a non-root fiber. This is a fatal error
                  // because there's no ancestor that can handle it; the root is
                  // supposed to capture all errors that weren't caught by an error
                  // boundary.
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                  // sibling, or the parent if there are no siblings. But since the root
                  // has no siblings nor a parent, we set it to null. Usually this is
                  // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                  // intentionally not calling those, we need set it here.
                  // TODO: Consider calling `unwindWork` to pop the contexts.
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode)
                  // Record the time spent rendering before an error was thrown. This
                  // avoids inaccurate Profiler durations in the case of a
                  // suspended render.
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (
                    thrownValue !== null &&
                    typeof thrownValue === "object" &&
                    typeof thrownValue.then === "function"
                  ) {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(
                  root,
                  erroredWork.return,
                  erroredWork,
                  thrownValue,
                  workInProgressRootRenderLanes,
                );
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  // If this boundary has already errored, then we had trouble processing
                  // the error. Bubble it to the next boundary.
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
              } // Return to the normal work loop.
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null)
              // The React isomorphic package does not include a default dispatcher.
              // Instead the first renderer will lazily attach one, in order to give
              // nicer error messages.
              return ContextOnlyDispatcher;
            else return prevDispatcher;
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress)
              workInProgressRootExitStatus = RootSuspended;
          }
          function renderDidSuspendDelayIfPossible() {
            if (
              workInProgressRootExitStatus === RootInProgress ||
              workInProgressRootExitStatus === RootSuspended ||
              workInProgressRootExitStatus === RootErrored
            )
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            // Check if there are updates that we skipped tree that might have unblocked
            // this render.
            if (
              workInProgressRoot !== null &&
              (includesNonIdleWork(workInProgressRootSkippedLanes) ||
                includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))
            )
              // Mark the current render as suspended so that we switch to working on
              // the updates that were skipped. Usually we only suspend at the end of
              // the render phase.
              // TODO: We should probably always mark the root as suspended immediately
              // (inside this function), since by suspending at the end of the render
              // phase introduces a potential mistake where we suspend lanes that were
              // pinged or updated while we were rendering.
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
          function renderDidError(error) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay)
              workInProgressRootExitStatus = RootErrored;
            if (workInProgressRootConcurrentErrors === null)
              workInProgressRootConcurrentErrors = [error];
            else workInProgressRootConcurrentErrors.push(error);
          } // Called during render to determine if anything has suspended.
          // Returns false if we're not sure.
          function renderHasNotSuspendedYet() {
            // If something errored or completed, we can't really be sure,
            // so those are false.
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
            // and prepare a fresh one. Otherwise we'll continue where we left off.
            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root, lanes);
            }
            markRenderStarted(lanes);
            for (;;)
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null)
              // This is a sync render, so we should have finished the whole tree.
              throw new Error(
                "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.",
              );
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          } // The work loop is an extremely hot path. Tell Closure not to inline it.
          /** @noinline */ function workLoopSync() {
            // Already timed out, so perform work without checking if we need to yield.
            while (workInProgress !== null) performUnitOfWork(workInProgress);
          }
          function renderRootConcurrent(root, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
            // and prepare a fresh one. Otherwise we'll continue where we left off.
            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root, lanes);
            }
            markRenderStarted(lanes);
            for (;;)
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root, thrownValue);
              }
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              markRenderYielded();
              return RootInProgress;
            } else {
              markRenderStopped();
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
              return workInProgressRootExitStatus;
            }
          }
          /** @noinline */ function workLoopConcurrent() {
            // Perform work until Scheduler asks us to yield
            while (workInProgress !== null && !shouldYield()) performUnitOfWork(workInProgress);
          }
          function performUnitOfWork(unitOfWork) {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null)
              // If this doesn't spawn new work, complete the current work.
              completeUnitOfWork(unitOfWork);
            else workInProgress = next;
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            // Attempt to complete the current unit of work, then move to the next
            // sibling. If there are no more siblings, return to the parent fiber.
            var completedWork = unitOfWork;
            do {
              // The current, flushed, state of this fiber is the alternate. Ideally
              // nothing should rely on this, but relying on it here means that we don't
              // need an additional field on the work in progress.
              var current = completedWork.alternate;
              var returnFiber = completedWork.return; // Check if the work completed or if something threw.
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode)
                  next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  // Completing this fiber spawned new work. Work on that next.
                  workInProgress = next;
                  return;
                }
              } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                  // If completing this work spawned new work, do that next. We'll come
                  // back here again.
                  // Since we're restarting, remove anything that is not a host effect
                  // from the effect tag.
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  // Record the render duration for the fiber that errored.
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  // Mark the parent fiber as incomplete and clear its subtree flags.
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  // We've unwound all the way to the root.
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
              } // Otherwise, return to the parent
              completedWork = returnFiber; // Update the next thing we're working on in case something throws.
              workInProgress = completedWork;
            } while (completedWork !== null); // We've reached the root.
            if (workInProgressRootExitStatus === RootInProgress)
              workInProgressRootExitStatus = RootCompleted;
          }
          function commitRoot(root, recoverableErrors, transitions) {
            // TODO: This no longer makes any sense. We already wrap the mutation and
            // layout phases. Should be able to remove.
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
            do
              // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
              // means `flushPassiveEffects` will sometimes result in additional
              // passive effects. So we need to keep flushing in a loop until there are
              // no more pending effects.
              // TODO: Might be better if `flushPassiveEffects` did not automatically
              // flush synchronous work at the end, to avoid factoring hazards like this.
              flushPassiveEffects();
            while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw new Error("Should not already be working.");
            var finishedWork = root.finishedWork;
            var lanes = root.finishedLanes;
            markCommitStarted(lanes);
            if (finishedWork === null) {
              markCommitStopped();
              return null;
            } else if (lanes === NoLanes)
              error(
                "root.finishedLanes should not be empty during a commit. This is a bug in React.",
              );
            root.finishedWork = null;
            root.finishedLanes = NoLanes;
            if (finishedWork === root.current)
              throw new Error(
                "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.",
              );
            // commitRoot never returns a continuation; it always finishes synchronously.
            // So we can clear these now to allow a new callback to be scheduled.
            root.callbackNode = null;
            root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
            // pending time is whatever is left on the root fiber.
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root, remainingLanes);
            if (root === workInProgressRoot) {
              // We can reset these now that they are finished.
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            } // If there are pending passive effects, schedule a callback to process them.
            // Do this as early as possible, so it is queued before anything else that
            // might get scheduled in the commit phase. (See #16714.)
            // TODO: Delete all other places that schedule the passive effect callback
            // They're redundant.
            if (
              (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||
              (finishedWork.flags & PassiveMask) !== NoFlags
            ) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                // to store it in pendingPassiveTransitions until they get processed
                // We need to pass this through as an argument to commitRoot
                // because workInProgressTransitions might have changed between
                // the previous render and commit if we throttle the commit
                // with setTimeout
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function () {
                  flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                  // *after* passive effects fire to avoid freeing a cache pool that may
                  // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                  return null;
                });
              }
            } // Check if there are any effects in the whole tree.
            // TODO: This is left over from the effect list implementation, where we had
            // to check for the existence of `firstEffect` to satisfy Flow. I think the
            // only other reason this optimization exists is because it affects profiling.
            // Reconsider whether this is necessary.
            var subtreeHasEffects =
              (finishedWork.subtreeFlags &
                (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==
              NoFlags;
            var rootHasEffect =
              (finishedWork.flags &
                (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==
              NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext; // Reset this to null before calling lifecycles
              ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
              // of the effect list for each phase: all mutation effects come before all
              // layout effects, and so on.
              // The first phase a "before mutation" phase. We use this phase to read the
              // state of the host tree right before we mutate it. This is where
              // getSnapshotBeforeUpdate is called.
              var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(
                root,
                finishedWork,
              );
              // Mark the current commit time to be shared by all Profilers in this
              // batch. This enables them to be grouped later.
              recordCommitTime();
              commitMutationEffects(root, finishedWork, lanes);
              resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
              // the mutation phase, so that the previous tree is still current during
              // componentWillUnmount, but before the layout phase, so that the finished
              // work is current during componentDidMount/Update.
              root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
              markLayoutEffectsStarted(lanes);
              commitLayoutEffects(finishedWork, root, lanes);
              markLayoutEffectsStopped();
              // opportunity to paint.
              requestPaint();
              executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              // No effects.
              root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
              recordCommitTime();
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              // This commit has passive effects. Stash a reference to them. But don't
              // schedule a callback until after flushing layout work.
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root;
              pendingPassiveEffectsLanes = lanes;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            } // Read this again, since an effect might have updated it
            remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
            // TODO: This is part of the `componentDidCatch` implementation. Its purpose
            // is to detect whether something might have called setState inside
            // `componentDidCatch`. The mechanism is known to be flawed because `setState`
            // inside `componentDidCatch` is itself flawed — that's why we recommend
            // `getDerivedStateFromError` instead. However, it could be improved by
            // checking if remainingLanes includes Sync work, instead of whether there's
            // any work remaining at all (which would also include stuff like Suspense
            // retries or transitions). It's been like this for a while, though, so fixing
            // it probably isn't that urgent.
            if (remainingLanes === NoLanes)
              // If there's no remaining work, we can clear the set of already failed
              // error boundaries.
              legacyErrorBoundariesThatAlreadyFailed = null;
            if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            if (isDevToolsPresent) root.memoizedUpdaters.clear();
            onCommitRoot$1();
            // additional work on this root is scheduled.
            ensureRootIsScheduled(root, now());
            if (recoverableErrors !== null) {
              // There were errors during this render, but recovered from them without
              // needing to surface it to the UI. We log them here.
              var onRecoverableError = root.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack: componentStack,
                  digest: digest,
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            } // If the passive effects are the result of a discrete render, flush them
            // synchronously at the end of the current task so that the result is
            // immediately observable. Otherwise, we assume that they are not
            // order-dependent and do not need to be observed by external systems, so we
            // can wait until after paint.
            // TODO: We can optimize this by not scheduling the callback earlier. Since we
            // currently schedule the callback in multiple places, will wait until those
            // are consolidated.
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot)
              flushPassiveEffects();
            // Read this again, since a passive effect might have updated it
            remainingLanes = root.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              markNestedUpdateScheduled();
              // finishing. If there are too many, it indicates an infinite update loop.
              if (root === rootWithNestedUpdates) nestedUpdateCount++;
              else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
              }
            } else nestedUpdateCount = 0;
            // If layout work was scheduled, flush it now.
            flushSyncCallbacks();
            markCommitStopped();
            return null;
          }
          function flushPassiveEffects() {
            // Returns whether passive effects were flushed.
            // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
            // probably just combine the two functions. I believe they were only separate
            // in the first place because we used to wrap it with
            // `Scheduler.runWithPriority`, which accepts a function. But now we track the
            // priority within React itself, so we can mutate the variable directly.
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) return false;
            // Cache and clear the transitions flag
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
            // Figure out why and fix it. It's not causing any known issues (probably
            // because it's only used for profiling), but it's a refactor hazard.
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
              throw new Error("Cannot flush passive effects while already rendering.");
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
            markPassiveEffectsStarted(lanes);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root.current);
            commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root, _fiber);
            }
            markPassiveEffectsStopped();
            commitDoubleInvokeEffectsInDEV(root.current, true);
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            // If additional passive effects were scheduled, increment a counter. If this
            // exceeds the limit, we'll fire a warning.
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
              else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
              }
            } else nestedPassiveUpdateCount = 0;
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
            onPostCommitRoot(root);
            var stateNode = root.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return (
              legacyErrorBoundariesThatAlreadyFailed !== null &&
              legacyErrorBoundariesThatAlreadyFailed.has(instance)
            );
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null)
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            else legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
          function prepareToThrowUncaughtError(error) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
            var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root !== null) {
              markRootUpdated(root, SyncLane, eventTime);
              ensureRootIsScheduled(root, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
            if (sourceFiber.tag === HostRoot) {
              // Error was thrown at the root. There is no parent, so the root
              // itself should capture it.
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            fiber = nearestMountedAncestor;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (
                  typeof ctor.getDerivedStateFromError === "function" ||
                  (typeof instance.componentDidCatch === "function" &&
                    !isAlreadyFailedLegacyErrorBoundary(instance))
                ) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root !== null) {
                    markRootUpdated(root, SyncLane, eventTime);
                    ensureRootIsScheduled(root, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
            // will fire for errors that are thrown by destroy functions inside deleted
            // trees. What it should instead do is propagate the error to the parent of
            // the deleted tree. In the meantime, do not add this warning to the
            // allowlist; this is only for our internal use.
            error(
              "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
              error$1,
            );
          }
          function pingSuspendedRoot(root, wakeable, pingedLanes) {
            var pingCache = root.pingCache;
            if (pingCache !== null)
              // The wakeable resolved, so we no longer need to memoize, because it will
              // never be thrown again.
              pingCache.delete(wakeable);
            var eventTime = requestEventTime();
            markRootPinged(root, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root);
            if (
              workInProgressRoot === root &&
              isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)
            ) {
              // Received a ping at the same priority level at which we're currently
              // rendering. We might want to restart this render. This should mirror
              // the logic of whether or not a root suspends once it completes.
              // TODO: If we're rendering sync either due to Sync, Batched or expired,
              // we should probably never restart.
              // If we're suspended with delay, or if it's a retry, we'll always suspend
              // so we can always restart.
              if (
                workInProgressRootExitStatus === RootSuspendedWithDelay ||
                (workInProgressRootExitStatus === RootSuspended &&
                  includesOnlyRetries(workInProgressRootRenderLanes) &&
                  now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
              )
                // Restart from the root.
                prepareFreshStack(root, NoLanes);
              // Even though we can't restart right now, we might get an
              // opportunity later. So we mark this render as having a ping.
              else
                workInProgressRootPingedLanes = mergeLanes(
                  workInProgressRootPingedLanes,
                  pingedLanes,
                );
            }
            ensureRootIsScheduled(root, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            // The boundary fiber (a Suspense component or SuspenseList component)
            // previously was rendered in its fallback state. One of the promises that
            // suspended it has resolved, which means at least part of the tree was
            // likely unblocked. Try rendering again, at a new lanes.
            if (retryLane === NoLane)
              // TODO: Assign this to `suspenseState.retryLane`? to avoid
              // unnecessary entanglement?
              retryLane = requestRetryLane(boundaryFiber);
            // TODO: Special case idle priority?
            var eventTime = requestEventTime();
            var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root !== null) {
              markRootUpdated(root, retryLane, eventTime);
              ensureRootIsScheduled(root, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) retryLane = suspenseState.retryLane;
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane; // Default
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error(
                  "Pinged unknown suspense boundary type. This is probably a bug in React.",
                );
            }
            if (retryCache !== null)
              // The wakeable resolved, so we no longer need to memoize, because it will
              // never be thrown again.
              retryCache.delete(wakeable);
            retryTimedOutBoundary(boundaryFiber, retryLane);
          } // Computes the next Just Noticeable Difference (JND) boundary.
          // The theory is that a person can't tell the difference between small differences in time.
          // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
          // difference in the experience. However, waiting for longer might mean that we can avoid
          // showing an intermediate loading state. The longer we have already waited, the harder it
          // is to tell small differences in time. Therefore, the longer we've already waited,
          // the longer we can wait additionally. At some point we have to give up though.
          // We pick a train model where the next boundary commits at a consistent schedule.
          // These particular numbers are vague estimates. We expect to adjust them based on research.
          function jnd(timeElapsed) {
            return timeElapsed < 120
              ? 120
              : timeElapsed < 480
              ? 480
              : timeElapsed < 1080
              ? 1080
              : timeElapsed < 1920
              ? 1920
              : timeElapsed < 3000
              ? 3000
              : timeElapsed < 4320
              ? 4320
              : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error(
                "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.",
              );
            }
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error(
                "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.",
              );
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
            // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
            // Maybe not a big deal since this is DEV only behavior.
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects)
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects)
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            resetCurrentFiber();
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            // We don't need to re-check StrictEffectsMode here.
            // This function is only called if that check has already passed.
            var current = firstChild;
            var subtreeRoot = null;
            while (current !== null) {
              var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
              if (
                current !== subtreeRoot &&
                current.child !== null &&
                primarySubtreeFlag !== NoFlags
              )
                current = current.child;
              else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            if ((executionContext & RenderContext) !== NoContext)
              // We let the other warning about render phase updates deal with this one.
              return;
            if (!(fiber.mode & ConcurrentMode)) return;
            var tag = fiber.tag;
            if (
              tag !== IndeterminateComponent &&
              tag !== HostRoot &&
              tag !== ClassComponent &&
              tag !== FunctionComponent &&
              tag !== ForwardRef &&
              tag !== MemoComponent &&
              tag !== SimpleMemoComponent
            )
              // Only warn for user-defined components, not internal ones like Suspense.
              return;
            // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error(
                "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.",
              );
            } finally {
              if (previousFiber) setCurrentFiber(fiber);
              else resetCurrentFiber();
            }
          }
          var beginWork$1;
          var dummyFiber = null;
          beginWork$1 = function (current, unitOfWork, lanes) {
            // If a component throws an error, we replay it again in a synchronously
            // dispatched event, so that the debugger will treat it as an uncaught
            // error See ReactErrorUtils for more information.
            // Before entering the begin phase, copy the work-in-progress onto a dummy
            // fiber. If beginWork throws, we'll use this to reset the state.
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current, unitOfWork, lanes);
            } catch (originalError) {
              if (
                didSuspendOrErrorWhileHydratingDEV() ||
                (originalError !== null &&
                  typeof originalError === "object" &&
                  typeof originalError.then === "function")
              )
                // Don't replay promises.
                // Don't replay errors if we are hydrating and have already suspended or handled an error
                throw originalError;
              // Keep this code in sync with handleError; any changes here must have
              // corresponding changes there.
              resetContextDependencies();
              resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
              // same fiber again.
              // Unwind the failed stack frame
              unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode)
                // Reset the profiler timer.
                startProfilerTimer(unitOfWork);
              // Run beginWork again.
              invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (
                  typeof replayError === "object" &&
                  replayError !== null &&
                  replayError._suppressLogging &&
                  typeof originalError === "object" &&
                  originalError !== null &&
                  !originalError._suppressLogging
                )
                  // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                  originalError._suppressLogging = true;
              } // We always throw the original error in case the second render pass is not idempotent.
              // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
              throw originalError;
            }
          };
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  var renderingComponentName =
                    (workInProgress && getComponentNameFromFiber(workInProgress)) || "Unknown"; // Dedupe by the rendering component because it's the one that needs to be fixed.
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error(
                      "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render",
                      setStateComponentName,
                      renderingComponentName,
                      renderingComponentName,
                    );
                  }
                  break;
                case ClassComponent:
                  if (!didWarnAboutUpdateInRender) {
                    error(
                      "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",
                    );
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
              }
          }
          function restorePendingUpdaters(root, lanes) {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root.memoizedUpdaters;
              memoizedUpdaters.forEach(function (schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
              }); // This function intentionally does not clear memoized updaters.
              // Those may still be relevant to the current commit
              // and a future one (e.g. Suspense).
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            // If we're currently inside an `act` scope, bypass Scheduler and push to
            // the `act` queue instead.
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else return scheduleCallback(priorityLevel, callback);
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) return;
            // In production, always call Scheduler. This function will be stripped out.
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            // Never force flush in production. This function should get stripped out.
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment())
                // Not in an act environment. No need to warn.
                return;
            } else {
              // Legacy mode has additional cases where we suppress a warning.
              if (!isLegacyActEnvironment())
                // Not in an act environment. No need to warn.
                return;
              if (executionContext !== NoContext)
                // Legacy mode doesn't warn if the update is batched, i.e.
                // batchedUpdates or flushSync.
                return;
              if (
                fiber.tag !== FunctionComponent &&
                fiber.tag !== ForwardRef &&
                fiber.tag !== SimpleMemoComponent
              )
                // For backwards compatibility with pre-hooks code, legacy mode only
                // warns for updates that originate from a hook.
                return;
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error(
                  "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
                  getComponentNameFromFiber(fiber),
                );
              } finally {
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
            if (
              root.tag !== LegacyRoot &&
              isConcurrentActEnvironment() &&
              ReactCurrentActQueue$1.current === null
            )
              error(
                "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
              );
          }
          function setIsRunningInsertionEffect(isRunning) {
            isRunningInsertionEffect = isRunning;
          }
          /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
          var failedBoundaries = null;
          var setRefreshHandler = function (handler) {
            resolveFamily = handler;
          };
          function resolveFunctionForHotReloading(type) {
            if (resolveFamily === null)
              // Hot reloading is disabled.
              return type;
            var family = resolveFamily(type);
            if (family === undefined) return type;
            // Use the latest known implementation.
            return family.current;
          }
          function resolveClassForHotReloading(type) {
            // No implementation differences.
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            if (resolveFamily === null)
              // Hot reloading is disabled.
              return type;
            var family = resolveFamily(type);
            if (family === undefined) {
              // Check if we're dealing with a real forwardRef. Don't want to crash early.
              if (type !== null && type !== undefined && typeof type.render === "function") {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender,
                  };
                  if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                  return syntheticType;
                }
              }
              return type;
            } // Use the latest known implementation.
            return family.current;
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            if (resolveFamily === null)
              // Hot reloading is disabled.
              return false;
            var prevType = fiber.elementType;
            var nextType = element.type; // If we got here, we know types aren't === equal.
            var needsCompareFamilies = false;
            var $$typeofNextType =
              typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                break;
              case FunctionComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE)
                  // We don't know the inner type yet.
                  // We're going to assume that the lazy inner type is stable,
                  // and so it is sufficient to avoid reconciling it away.
                  // We're not going to unwrap or actually use the new lazy type.
                  needsCompareFamilies = true;
                break;
              case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
              case MemoComponent:
              case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE)
                  // TODO: if it was but can no longer be simple,
                  // we shouldn't set this.
                  needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
              default:
                return false;
            } // Check if both types have a family and it's the same one.
            if (needsCompareFamilies) {
              // Note: memo() and forwardRef() we'll compare outer rather than inner type.
              // This means both of them need to be registered to preserve state.
              // If we unwrapped and compared the inner types for wrappers instead,
              // then we would risk falsely saying two separate memo(Foo)
              // calls are equivalent because they wrap the same Foo function.
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
            }
            return false;
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            if (resolveFamily === null)
              // Hot reloading is disabled.
              return;
            if (typeof WeakSet !== "function") return;
            if (failedBoundaries === null) failedBoundaries = new WeakSet();
            failedBoundaries.add(fiber);
          }
          var scheduleRefresh = function (root, update) {
            if (resolveFamily === null)
              // Hot reloading is disabled.
              return;
            var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function () {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          };
          var scheduleRoot = function (root, element) {
            if (root.context !== emptyContextObject)
              // Super edge case: root has a legacy _renderSubtree context
              // but we don't know the parentComponent so we can't pass it.
              // Just ignore. We'll delete this with _renderSubtree code path later.
              return;
            flushPassiveEffects();
            flushSync(function () {
              updateContainer(element, root, null, null);
            });
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null)
              throw new Error("Expected resolveFamily to be set during hot reload.");
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) needsRemount = true;
                  else needsRender = true;
                }
              }
            }
            if (failedBoundaries !== null) {
              if (
                failedBoundaries.has(fiber) ||
                (alternate !== null && failedBoundaries.has(alternate))
              )
                needsRemount = true;
            }
            if (needsRemount) fiber._debugNeedsRemount = true;
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount)
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            if (sibling !== null)
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
          var findHostInstancesForRefresh = function (root, families) {
            var hostInstances = new Set();
            var types = new Set(
              families.map(function (family) {
                return family.current;
              }),
            );
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) didMatch = true;
            }
            if (didMatch)
              // We have a match. This only drills down to the closest host components.
              // There's no need to search deeper because for the purpose of giving
              // visual feedback, "flashing" outermost parent rectangles is sufficient.
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            // If there's no match, maybe there will be one further down in the child tree.
            else if (child !== null)
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            if (sibling !== null)
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) return;
            // If we didn't find any host children, fallback to closest host parent.
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) throw new Error("Expected to reach root first.");
              node = node.return;
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) return foundHostInstances;
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return false;
          }
          var hasBadMapPolyfill;
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* eslint-disable no-new */ new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
            /* eslint-enable no-new */
          } catch (e) {
            // TODO: Consider warning about bad polyfills
            hasBadMapPolyfill = true;
          }
          function FiberNode(tag, pendingProps, key, mode) {
            // Instance
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null; // Fiber
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode; // Effects
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            // Note: The following is done to avoid a v8 performance cliff.
            //
            // Initializing the fields below to smis and later updating them with
            // double values will cause Fibers to end up having separate shapes.
            // This behavior/bug has something to do with Object.preventExtension().
            // Fortunately this only impacts DEV builds.
            // Unfortunately it makes React unusably slow for some applications.
            // To work around this, initialize the fields below with doubles.
            //
            // Learn more about this here:
            // https://github.com/facebook/react/issues/14365
            // https://bugs.chromium.org/p/v8/issues/detail?id=8538
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
            // This won't trigger the performance cliff mentioned above,
            // and it simplifies other profiler code (including DevTools).
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
            // This isn't directly used but is handy for debugging internals:
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function")
              Object.preventExtensions(this);
          } // This is a constructor function, rather than a POJO constructor, still
          // please ensure we do the following:
          // 1) Nobody should add any instance methods on this. Instance methods can be
          //    more difficult to predict when they get optimized and they are almost
          //    never inlined properly in static compilers.
          // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
          //    always know when it is a fiber.
          // 3) We might want to experiment with using numeric keys since they are easier
          //    to optimize in a non-JIT environment.
          // 4) We can easily go from a constructor to a createFiber object literal if that
          //    is faster.
          // 5) It should be easy to port this to a C struct and keep a C implementation
          //    compatible.
          var createFiber = function (tag, pendingProps, key, mode) {
            // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return (
              typeof type === "function" &&
              !shouldConstruct$1(type) &&
              type.defaultProps === undefined
            );
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function")
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            else if (Component !== undefined && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
              if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
            }
            return IndeterminateComponent;
          } // This is used to create an alternate fiber to do work on.
          function createWorkInProgress(current, pendingProps) {
            var workInProgress = current.alternate;
            if (workInProgress === null) {
              // We use a double buffering pooling technique because we know that we'll
              // only ever need at most two versions of a tree. We pool the "other" unused
              // node that we're free to reuse. This is lazily created to avoid allocating
              // extra objects for things that are never updated. It also allow us to
              // reclaim the extra memory if needed.
              workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
              workInProgress.elementType = current.elementType;
              workInProgress.type = current.type;
              workInProgress.stateNode = current.stateNode;
              // DEV-only fields
              workInProgress._debugSource = current._debugSource;
              workInProgress._debugOwner = current._debugOwner;
              workInProgress._debugHookTypes = current._debugHookTypes;
              workInProgress.alternate = current;
              current.alternate = workInProgress;
            } else {
              workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
              workInProgress.type = current.type; // We already have an alternate.
              // Reset the effect tag.
              workInProgress.flags = NoFlags; // The effects are no longer valid.
              workInProgress.subtreeFlags = NoFlags;
              workInProgress.deletions = null;
              // We intentionally reset, rather than copy, actualDuration & actualStartTime.
              // This prevents time from endlessly accumulating in new commits.
              // This has the downside of resetting values for different priority renders,
              // But works for yielding (the common case) and should support resuming.
              workInProgress.actualDuration = 0;
              workInProgress.actualStartTime = -1;
            } // Reset all effects except static ones.
            // Static effects are not specific to a render.
            workInProgress.flags = current.flags & StaticMask;
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies =
              currentDependencies === null
                ? null
                : {
                    lanes: currentDependencies.lanes,
                    firstContext: currentDependencies.firstContext,
                  }; // These will be overridden during the parent's reconciliation
            workInProgress.sibling = current.sibling;
            workInProgress.index = current.index;
            workInProgress.ref = current.ref;
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
            workInProgress._debugNeedsRemount = current._debugNeedsRemount;
            switch (workInProgress.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
              case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
              case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
            }
            return workInProgress;
          } // Used to reuse a Fiber for a second pass.
          function resetWorkInProgress(workInProgress, renderLanes) {
            // This resets the Fiber to what createFiber or createWorkInProgress would
            // have set the values to before during the first pass. Ideally this wouldn't
            // be necessary but unfortunately many code paths reads from the workInProgress
            // when they should be reading from current and writing to workInProgress.
            // We assume pendingProps, index, key, ref, return are still untouched to
            // avoid doing another reconciliation.
            // Reset the effect flags but keep any Placement tags, since that's something
            // that child fiber is setting, not the reconciliation.
            workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
            var current = workInProgress.alternate;
            if (current === null) {
              // Reset to createFiber's initial values.
              workInProgress.childLanes = NoLanes;
              workInProgress.lanes = renderLanes;
              workInProgress.child = null;
              workInProgress.subtreeFlags = NoFlags;
              workInProgress.memoizedProps = null;
              workInProgress.memoizedState = null;
              workInProgress.updateQueue = null;
              workInProgress.dependencies = null;
              workInProgress.stateNode = null;
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = 0;
              workInProgress.treeBaseDuration = 0;
            } else {
              // Reset to the cloned values that createWorkInProgress would've.
              workInProgress.childLanes = current.childLanes;
              workInProgress.lanes = current.lanes;
              workInProgress.child = current.child;
              workInProgress.subtreeFlags = NoFlags;
              workInProgress.deletions = null;
              workInProgress.memoizedProps = current.memoizedProps;
              workInProgress.memoizedState = current.memoizedState;
              workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
              workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
              // it cannot be shared with the current fiber.
              var currentDependencies = current.dependencies;
              workInProgress.dependencies =
                currentDependencies === null
                  ? null
                  : {
                      lanes: currentDependencies.lanes,
                      firstContext: currentDependencies.firstContext,
                    };
              // Note: We don't reset the actualTime counts. It's useful to accumulate
              // actual time across multiple render passes.
              workInProgress.selfBaseDuration = current.selfBaseDuration;
              workInProgress.treeBaseDuration = current.treeBaseDuration;
            }
            return workInProgress;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
              }
            } else mode = NoMode;
            if (isDevToolsPresent)
              // Always collect profile timings when DevTools are present.
              // This enables DevTools to start capturing timing at any point–
              // Without some nodes in the tree having empty base times.
              mode |= ProfileMode;
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
              } else resolvedType = resolveFunctionForHotReloading(resolvedType);
            } else if (typeof type === "string") fiberTag = HostComponent;
            else
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode)
                    // Strict effects should never run on legacy roots
                    mode |= StrictEffectsMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default:
                  if (typeof type === "object" && type !== null)
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  var info = "";
                  if (
                    type === undefined ||
                    (typeof type === "object" && type !== null && Object.keys(type).length === 0)
                  )
                    info +=
                      " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
                  throw new Error(
                    "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " +
                      ("but got: " + (type == null ? type : typeof type) + "." + info),
                  );
              }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            fiber._debugOwner = owner;
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            owner = element._owner;
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            if (typeof pendingProps.id !== "string")
              error(
                'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                typeof pendingProps.id,
              );
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0,
            };
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false,
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation,
            };
            return fiber;
          } // Used for stashing WIP properties to replay failed work in DEV.
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null)
              // This Fiber's initial properties will always be overwritten.
              // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            // This is intentionally written as a list of all properties.
            // We tried to use Object.assign() instead but this is called in
            // the hottest path, and Object.assign() was too slow:
            // https://github.com/facebook/react/issues/12502
            // This code is DEV-only so size is not a concern.
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(
            containerInfo,
            tag,
            hydrate,
            identifierPrefix,
            onRecoverableError,
          ) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            this.mutableSourceEagerHydrationData = null;
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
            this.memoizedUpdaters = new Set();
            var pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);
            for (var _i = 0; _i < TotalLanes; _i++) pendingUpdatersLaneMap.push(new Set());
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate ? "hydrate()" : "render()";
                break;
            }
          }
          function createFiberRoot(
            containerInfo,
            tag,
            hydrate,
            initialChildren,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
            // them through the root constructor. Perhaps we should put them all into a
            // single type, like a DynamicHostConfig that is defined by the renderer.
            identifierPrefix,
            onRecoverableError,
            transitionCallbacks,
          ) {
            var root = new FiberRootNode(
              containerInfo,
              tag,
              hydrate,
              identifierPrefix,
              onRecoverableError,
            );
            // stateNode is any.
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root.current = uninitializedFiber;
            uninitializedFiber.stateNode = root;
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null,
            };
            uninitializedFiber.memoizedState = _initialState;
            initializeUpdateQueue(uninitializedFiber);
            return root;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            checkKeyStringCoercion(key);
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children,
              containerInfo: containerInfo,
              implementation: implementation,
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) return emptyContextObject;
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component))
                return processChildContext(fiber, Component, parentContext);
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            var fiber = get(component);
            if (fiber === undefined) {
              if (typeof component.render === "function")
                throw new Error("Unable to find node on an unmounted component.");
              else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) return null;
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode)
                    error(
                      "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",
                      methodName,
                      methodName,
                      componentName,
                    );
                  else
                    error(
                      "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",
                      methodName,
                      methodName,
                      componentName,
                    );
                } finally {
                  // Ideally this should reset to previous but this shouldn't be called in
                  // render and there's another warning for that anyway.
                  if (previousFiber) setCurrentFiber(previousFiber);
                  else resetCurrentFiber();
                }
              }
            }
            return hostFiber.stateNode;
          }
          function createContainer(
            containerInfo,
            tag,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError,
            transitionCallbacks,
          ) {
            var hydrate = false;
            var initialChildren = null;
            return createFiberRoot(
              containerInfo,
              tag,
              hydrate,
              initialChildren,
              hydrationCallbacks,
              isStrictMode,
              concurrentUpdatesByDefaultOverride,
              identifierPrefix,
              onRecoverableError,
            );
          }
          function createHydrationContainer(
            initialChildren,
            callback,
            containerInfo,
            tag,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError,
            transitionCallbacks,
          ) {
            var hydrate = true;
            var root = createFiberRoot(
              containerInfo,
              tag,
              hydrate,
              initialChildren,
              hydrationCallbacks,
              isStrictMode,
              concurrentUpdatesByDefaultOverride,
              identifierPrefix,
              onRecoverableError,
            ); // TODO: Move this to FiberRoot constructor
            root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
            // a regular update because the initial render must match was was rendered
            // on the server.
            // NOTE: This update intentionally doesn't have a payload. We're only using
            // the update to schedule work on the root fiber (and, for legacy roots, to
            // enqueue the callback if one is provided).
            var current = root.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== undefined && callback !== null ? callback : null;
            enqueueUpdate(current, update, lane);
            scheduleInitialHydrationOnRoot(root, lane, eventTime);
            return root;
          }
          function updateContainer(element, container, parentComponent, callback) {
            onScheduleRoot(container, element);
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            markRenderScheduled(lane);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) container.context = context;
            else container.pendingContext = context;
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error(
                "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
                getComponentNameFromFiber(current) || "Unknown",
              );
            }
            var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
            // being called "element".
            update.payload = {
              element: element,
            };
            callback = callback === undefined ? null : callback;
            if (callback !== null) {
              if (typeof callback !== "function")
                error(
                  "render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
                  callback,
                );
              update.callback = callback;
            }
            var root = enqueueUpdate(current$1, update, lane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, current$1, lane, eventTime);
              entangleTransitions(root, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) return null;
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                  // Flush the first scheduled "update".
                  var lanes = getHighestPriorityPendingLanes(root);
                  flushRoot(root, lanes);
                }
                break;
              case SuspenseComponent:
                flushSync(function () {
                  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                  }
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null)
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          } // Increases the priority of thenables when they resolve within this boundary.
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) markRetryLaneImpl(alternate, retryLane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent)
              // We ignore HostRoots here because we can't increase
              // their priority and they should not suspend on I/O,
              // since you have to wrap anything that might suspend in
              // Suspense.
              return;
            var lane = SelectiveHydrationLane;
            var root = enqueueConcurrentRenderForLane(fiber, lane);
            if (root !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent)
              // We ignore HostRoots here because we can't increase
              // their priority other than synchronously flush it.
              return;
            var lane = requestUpdateLane(fiber);
            var root = enqueueConcurrentRenderForLane(fiber, lane);
            if (root !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) return null;
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function (fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function (fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          var copyWithDeleteImpl = function (obj, path, index) {
            var key = path[index];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index + 1 === path.length) {
              if (isArray(updated)) updated.splice(key, 1);
              else delete updated[key];
              return updated;
            } // $FlowFixMe number or string is fine here
            updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
            return updated;
          };
          var copyWithDelete = function (obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
            var oldKey = oldPath[index];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index + 1 === oldPath.length) {
              var newKey = newPath[index]; // $FlowFixMe number or string is fine here
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) updated.splice(oldKey, 1);
              else delete updated[oldKey];
            } // $FlowFixMe number or string is fine here
            else updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
            return updated;
          };
          var copyWithRename = function (obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++)
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function (obj, path, index, value) {
            if (index >= path.length) return value;
            var key = path[index];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
            updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
            return updated;
          };
          var copyWithSet = function (obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function (fiber, id) {
            // For now, the "id" of stateful hooks is just the stateful hook index.
            // This may change in the future with e.g. nested hooks.
            var currentHook = fiber.memoizedState;
            while (currentHook !== null && id > 0) {
              currentHook = currentHook.next;
              id--;
            }
            return currentHook;
          }; // Support DevTools editable values for useState and useReducer.
          overrideHookState = function (fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function (fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState; // We aren't actually adding an update to the queue,
              // because there is no update we can add for useReducer hooks that won't trigger an error.
              // (There's no appropriate action type for DevTools overrides.)
              // As a result though, React will see the scheduled update as a noop and bailout.
              // Shallow cloning props works as a workaround for now to bypass the bailout check.
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
          overrideProps = function (fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function (fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function (fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function (fiber) {
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          };
          setErrorHandler = function (newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function (newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) return null;
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState: overrideHookState,
              overrideHookStateDeletePath: overrideHookStateDeletePath,
              overrideHookStateRenamePath: overrideHookStateRenamePath,
              overrideProps: overrideProps,
              overridePropsDeletePath: overridePropsDeletePath,
              overridePropsRenamePath: overridePropsRenamePath,
              setErrorHandler: setErrorHandler,
              setSuspenseHandler: setSuspenseHandler,
              scheduleUpdate: scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher,
              findHostInstanceByFiber: findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh: findHostInstancesForRefresh,
              scheduleRefresh: scheduleRefresh,
              scheduleRoot: scheduleRoot,
              setRefreshHandler: setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion,
            });
          }
          /* global reportError */ var defaultOnRecoverableError =
            typeof reportError === "function" // emulating an uncaught JavaScript error.
              ? reportError
              : function (error) {
                  // In older browsers and test environments, fallback to console.error.
                  // eslint-disable-next-line react-internal/no-production-logging
                  console["error"](error);
                };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (
            children,
          ) {
            var root = this._internalRoot;
            if (root === null) throw new Error("Cannot update an unmounted root.");
            if (typeof arguments[1] === "function")
              error(
                "render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().",
              );
            else if (isValidContainer(arguments[1]))
              error(
                "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.",
              );
            else if (typeof arguments[1] !== "undefined")
              error(
                "You passed a second argument to root.render(...) but it only accepts one argument.",
              );
            var container = root.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container)
                  error(
                    "render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.",
                  );
              }
            }
            updateContainer(children, root, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
            if (typeof arguments[0] === "function")
              error(
                "unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().",
              );
            var root = this._internalRoot;
            if (root !== null) {
              this._internalRoot = null;
              var container = root.containerInfo;
              if (isAlreadyRendering())
                error(
                  "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.",
                );
              flushSync(function () {
                updateContainer(null, root, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options) {
            if (!isValidContainer(container))
              throw new Error("createRoot(...): Target container is not a DOM element.");
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options !== null && options !== undefined) {
              if (options.hydrate)
                warn(
                  "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.",
                );
              else if (
                typeof options === "object" &&
                options !== null &&
                options.$$typeof === REACT_ELEMENT_TYPE
              )
                error(
                  "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);",
                );
              if (options.unstable_strictMode === true) isStrictMode = true;
              if (options.identifierPrefix !== undefined)
                identifierPrefix = options.identifierPrefix;
              if (options.onRecoverableError !== undefined)
                onRecoverableError = options.onRecoverableError;
              if (options.transitionCallbacks !== undefined)
                transitionCallbacks = options.transitionCallbacks;
            }
            var root = createContainer(
              container,
              ConcurrentRoot,
              null,
              isStrictMode,
              concurrentUpdatesByDefaultOverride,
              identifierPrefix,
              onRecoverableError,
            );
            markContainerAsRoot(root.current, container);
            var rootContainerElement =
              container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) queueExplicitHydrationTarget(target);
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options) {
            if (!isValidContainer(container))
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            warnIfReactDOMContainerInDEV(container);
            if (initialChildren === undefined)
              error(
                "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)",
              );
            // the hydration callbacks.
            var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
            var mutableSources = (options != null && options.hydratedSources) || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options !== null && options !== undefined) {
              if (options.unstable_strictMode === true) isStrictMode = true;
              if (options.identifierPrefix !== undefined)
                identifierPrefix = options.identifierPrefix;
              if (options.onRecoverableError !== undefined)
                onRecoverableError = options.onRecoverableError;
            }
            var root = createHydrationContainer(
              initialChildren,
              null,
              container,
              ConcurrentRoot,
              hydrationCallbacks,
              isStrictMode,
              concurrentUpdatesByDefaultOverride,
              identifierPrefix,
              onRecoverableError,
            );
            markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
            listenToAllSupportedEvents(container);
            if (mutableSources)
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root, mutableSource);
              }
            return new ReactDOMHydrationRoot(root);
          }
          function isValidContainer(node) {
            return !!(
              node &&
              (node.nodeType === ELEMENT_NODE ||
                node.nodeType === DOCUMENT_NODE ||
                node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                !disableCommentsAsDOMContainers)
            );
          } // TODO: Remove this function which also includes comment nodes.
          // We only use it in places that are currently more relaxed.
          function isValidContainerLegacy(node) {
            return !!(
              node &&
              (node.nodeType === ELEMENT_NODE ||
                node.nodeType === DOCUMENT_NODE ||
                node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                (node.nodeType === COMMENT_NODE &&
                  node.nodeValue === " react-mount-point-unstable "))
            );
          }
          function warnIfReactDOMContainerInDEV(container) {
            if (
              container.nodeType === ELEMENT_NODE &&
              container.tagName &&
              container.tagName.toUpperCase() === "BODY"
            )
              error(
                "createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.",
              );
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer)
                error(
                  "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.",
                );
              else
                error(
                  "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.",
                );
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          topLevelUpdateWarnings = function (container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(
                container._reactRootContainer.current,
              );
              if (hostInstance) {
                if (hostInstance.parentNode !== container)
                  error(
                    "render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.",
                  );
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact)
              error(
                "render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.",
              );
            if (
              container.nodeType === ELEMENT_NODE &&
              container.tagName &&
              container.tagName.toUpperCase() === "BODY"
            )
              error(
                "render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.",
              );
          };
          function getReactRootElementInContainer(container) {
            if (!container) return null;
            if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
            else return container.firstChild;
          }
          function noopOnRecoverableError() {
            // legacy API.
          }
          function legacyCreateRootFromDOMContainer(
            container,
            initialChildren,
            parentComponent,
            callback,
            isHydrationContainer,
          ) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function () {
                  var instance = getPublicRootInstance(root);
                  originalCallback.call(instance);
                };
              }
              var root = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError,
              );
              container._reactRootContainer = root;
              markContainerAsRoot(root.current, container);
              var rootContainerElement =
                container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root;
            } else {
              // First clear any existing content.
              var rootSibling;
              while ((rootSibling = container.lastChild)) container.removeChild(rootSibling);
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function () {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError,
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement =
                container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
              flushSync(function () {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            if (callback !== null && typeof callback !== "function")
              error(
                "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
                callerName,
                callback,
              );
          }
          function legacyRenderSubtreeIntoContainer(
            parentComponent,
            children,
            container,
            forceHydrate,
            callback,
          ) {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
            var maybeRoot = container._reactRootContainer;
            var root;
            if (!maybeRoot)
              // Initial mount
              root = legacyCreateRootFromDOMContainer(
                container,
                children,
                parentComponent,
                callback,
                forceHydrate,
              );
            else {
              root = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function () {
                  var instance = getPublicRootInstance(root);
                  originalCallback.call(instance);
                };
              } // Update
              updateContainer(children, root, parentComponent, callback);
            }
            return getPublicRootInstance(root);
          }
          function findDOMNode(componentOrElement) {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender)
                error(
                  "%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
                  getComponentNameFromType(owner.type) || "A component",
                );
              owner.stateNode._warnedAboutRefsInRender = true;
            }
            if (componentOrElement == null) return null;
            if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
          function hydrate(element, container, callback) {
            error(
              "ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot",
            );
            if (!isValidContainerLegacy(container))
              throw new Error("Target container is not a DOM element.");
            var isModernRoot =
              isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
            if (isModernRoot)
              error(
                "You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?",
              );
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            error(
              "ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot",
            );
            if (!isValidContainerLegacy(container))
              throw new Error("Target container is not a DOM element.");
            var isModernRoot =
              isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
            if (isModernRoot)
              error(
                "You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?",
              );
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(
            parentComponent,
            element,
            containerNode,
            callback,
          ) {
            error(
              "ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot",
            );
            if (!isValidContainerLegacy(containerNode))
              throw new Error("Target container is not a DOM element.");
            if (parentComponent == null || !has(parentComponent))
              throw new Error("parentComponent must be a valid React Component");
            return legacyRenderSubtreeIntoContainer(
              parentComponent,
              element,
              containerNode,
              false,
              callback,
            );
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container))
              throw new Error(
                "unmountComponentAtNode(...): Target container is not a DOM element.",
              );
            var isModernRoot =
              isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
            if (isModernRoot)
              error(
                "You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?",
              );
            if (container._reactRootContainer) {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact)
                error(
                  "unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.",
                );
              flushSync(function () {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                  // $FlowFixMe This should probably use `delete container._reactRootContainer`
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              }); // If you call unmountComponentAtNode twice in quick succession, you'll
              // get `true` twice. That's probably fine?
              return true;
            } else {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
              var isContainerReactRoot =
                container.nodeType === ELEMENT_NODE &&
                isValidContainerLegacy(container.parentNode) &&
                !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild)
                error(
                  "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",
                  isContainerReactRoot
                    ? "You may have accidentally passed in a React root node instead of its container."
                    : "Instead, have the parent component update its state and rerender in order to remove this component.",
                );
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          if (
            typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null ||
            typeof Map.prototype.forEach !== "function" ||
            typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null ||
            typeof Set.prototype.clear !== "function" ||
            typeof Set.prototype.forEach !== "function"
          )
            error(
              "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills",
            );
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            if (!isValidContainer(container))
              throw new Error("Target container is not a DOM element.");
            // TODO: pass ReactDOM portal implementation as third argument
            // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(
              parentComponent,
              element,
              containerNode,
              callback,
            );
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              batchedUpdates$1,
            ],
          };
          function createRoot$1(container, options) {
            if (!Internals.usingClientEntryPoint && true)
              error(
                'You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".',
              );
            return createRoot(container, options);
          }
          function hydrateRoot$1(container, initialChildren, options) {
            if (!Internals.usingClientEntryPoint && true)
              error(
                'You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".',
              );
            return hydrateRoot(container, initialChildren, options);
          } // Overload the definition to the two valid signatures.
          // Warning, this opts-out of checking the function body.
          // eslint-disable-next-line no-redeclare
          function flushSync$1(fn) {
            if (isAlreadyRendering())
              error(
                "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.",
              );
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom",
          });
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            // If we're in Chrome or Firefox, provide a download link if not installed.
            if (
              (navigator.userAgent.indexOf("Chrome") > -1 &&
                navigator.userAgent.indexOf("Edge") === -1) ||
              navigator.userAgent.indexOf("Firefox") > -1
            ) {
              var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
              if (/^(https?|file):$/.test(protocol))
                // eslint-disable-next-line react-internal/no-production-logging
                console.info(
                  "%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" +
                    (protocol === "file:"
                      ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq"
                      : ""),
                  "font-weight:bold",
                );
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        })();
      },
      { "6f0162e9ab224cd4": "21dqq", "8ad4ca65319d28a7": "juvHo" },
    ],
    juvHo: [
      function (require, module, exports) {
        "use strict";
        module.exports = require("ef03b89c8fe2794e");
      },
      { ef03b89c8fe2794e: "RqdIf" },
    ],
    RqdIf: [
      function (require, module, exports) {
        /**
         * @license React
         * scheduler.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) return null;
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = (index - 1) >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } // The parent is smaller. Exit.
              else return;
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } // Neither child is smaller. Exit.
              else return;
            }
          }
          function compare(a, b) {
            // Compare sort index first, then task id.
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          // TODO: Use symbols?
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {}
          /* eslint-disable no-var */ var hasPerformanceNow =
            typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function () {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function () {
              return localDate.now() - initialTime;
            };
          } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
          // Math.pow(2, 30) - 1
          // 0b111111111111111111111111111111
          var maxSigned31BitInt = 1073741823; // Times out immediately
          var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5000;
          var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
          var taskQueue = [];
          var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
          var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
          var currentTask = null;
          var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null; // IE and Node.js + jsdom
          var isInputPending =
            typeof navigator !== "undefined" &&
            navigator.scheduling !== undefined &&
            navigator.scheduling.isInputPending !== undefined
              ? navigator.scheduling.isInputPending.bind(navigator.scheduling)
              : null;
          function advanceTimers(currentTime) {
            // Check for tasks that are no longer delayed and add them to the queue.
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null)
                // Timer was cancelled.
                pop(timerQueue);
              else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } // Remaining timers are pending.
              else return;
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null)
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              // We scheduled a timeout but it's no longer needed. Cancel it.
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling)
                try {
                  return workLoop(hasTimeRemaining, initialTime);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              // No catch in prod code path.
              else return workLoop(hasTimeRemaining, initialTime);
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime) {
            var currentTime = initialTime;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (
                currentTask.expirationTime > currentTime &&
                (!hasTimeRemaining || shouldYieldToHost())
              )
                break;
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function")
                  currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
              } else pop(taskQueue);
              currentTask = peek(taskQueue);
            } // Return whether there's additional work
            if (currentTask !== null) return true;
            else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null)
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
              default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function () {
              // This is a fork of runWithPriority, inlined for performance.
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) startTime = currentTime + delay;
              else startTime = currentTime;
            } else startTime = currentTime;
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback: callback,
              priorityLevel: priorityLevel,
              startTime: startTime,
              expirationTime: expirationTime,
              sortIndex: -1,
            };
            if (startTime > currentTime) {
              // This is a delayed task.
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled)
                  // Cancel an existing timeout.
                  cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              // wait until the next time we yield.
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {}
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            // remove from the queue because you can't remove arbitrary nodes from an
            // array based heap, only the first one.)
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
          // thread, like user events. By default, it yields multiple times per frame.
          // It does not attempt to align with frame boundaries, since most tasks don't
          // need to be frame aligned; for those that do, use requestAnimationFrame.
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval)
              // The main thread has only been blocked for a really short amount of time;
              // smaller than a single frame. Don't yield yet.
              return false;
            // The main thread has been blocked for a non-negligible amount of time. We
            return true;
          }
          function requestPaint() {}
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              // Using console['error'] to evade Babel and ESLint
              console["error"](
                "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported",
              );
              return;
            }
            if (fps > 0) frameInterval = Math.floor(1000 / fps);
            // reset the framerate
            else frameInterval = frameYieldMs;
          }
          var performWorkUntilDeadline = function () {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
              // has been blocked.
              startTime = currentTime;
              var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
              // error can be observed.
              //
              // Intentionally not using a try-catch, since that makes some debugging
              // techniques harder. Instead, if `scheduledHostCallback` errors, then
              // `hasMoreWork` will remain true, and we'll continue the work loop.
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork)
                  // If there's more work, schedule the next message event at the end
                  // of the preceding one.
                  schedulePerformWorkUntilDeadline();
                else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else isMessageLoopRunning = false;
            // Yielding to the browser will give it a chance to paint, so we can
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function")
            // Node.js and old IE.
            // There's a few reasons for why we prefer setImmediate.
            //
            // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
            // (Even though this is a DOM fork of the Scheduler, you could get here
            // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
            // https://github.com/facebook/react/issues/20756
            //
            // But also, it runs earlier which is the semantic we want.
            // If other browsers ever implement it, it's better to use it.
            // Although both of these would be inferior to native scheduling.
            schedulePerformWorkUntilDeadline = function () {
              localSetImmediate(performWorkUntilDeadline);
            };
          else if (typeof MessageChannel !== "undefined") {
            // DOM and Worker environments.
            // We prefer MessageChannel because of the 4ms setTimeout clamping.
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function () {
              port.postMessage(null);
            };
          } // We should only fallback here in non-browser environments.
          else
            schedulePerformWorkUntilDeadline = function () {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function () {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function"
          )
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        })();
      },
      {},
    ],
    "2kQhy": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$f00f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$f00f.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _rowGroupPage = require("pages/RowGroupPage");
          var _reactRouterDom = require("react-router-dom");
          var _blockPage = require("./pages/BlockPage");
          var _editorPage = require("./pages/EditorPage");
          var _expanderPage = require("./pages/ExpanderPage");
          var _listPage = require("./pages/ListPage");
          var _pagesCss = require("./pages/pages.css");
          var _tablePage = require("./pages/TablePage");
          var _windowPage = require("./pages/WindowPage");
          var _currentPage = require("./pages/CurrentPage");
          const activeClass = ({ isActive }) => (isActive ? "active" : "inactive");
          function App() {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _reactRouterDom.BrowserRouter),
              {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  "div",
                  {
                    children: [
                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "nav",
                        {
                          children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "ul",
                            {
                              children: [
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/",
                                        className: activeClass,
                                        children: "Current",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 21,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 20,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/block",
                                        className: activeClass,
                                        children: "TiFo block",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 29,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 28,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/list",
                                        className: activeClass,
                                        children: "Lists",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 37,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 36,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/rowgroup",
                                        className: activeClass,
                                        children: "RowGroups",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 45,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 44,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/table",
                                        className: activeClass,
                                        children: "Table",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 53,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 52,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/editor",
                                        className: activeClass,
                                        children: "Editor",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 61,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 60,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/expander",
                                        className: activeClass,
                                        children: "Expander",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 69,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 68,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "li",
                                  {
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _reactRouterDom.NavLink),
                                      {
                                        to: "/internalcomponents/window",
                                        className: activeClass,
                                        children: "Window",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 77,
                                        columnNumber: 15,
                                      },
                                      this,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 76,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                              ],
                            },
                            void 0,
                            true,
                            {
                              fileName: "src/App.js",
                              lineNumber: 19,
                              columnNumber: 11,
                            },
                            this,
                          ),
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/App.js",
                          lineNumber: 18,
                          columnNumber: 9,
                        },
                        this,
                      ),
                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _reactRouterDom.Routes),
                        {
                          children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _reactRouterDom.Navigate),
                                  {
                                    replace: true,
                                    to: "/internalcomponents/",
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 91,
                                    columnNumber: 15,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 88,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _currentPage.CurrentPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 99,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 97,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/block",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _blockPage.BlockPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 103,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 101,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/editor",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _editorPage.EditorPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 107,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 105,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/expander",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _expanderPage.ExpanderPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 111,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 109,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/list",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _listPage.ListPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 115,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 113,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/rowgroup",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _rowGroupPage.RowGroupPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 119,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 117,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/table",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _tablePage.TablePage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 123,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 121,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "/internalcomponents/window",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _windowPage.WindowPage),
                                  {},
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 127,
                                    columnNumber: 22,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 125,
                                columnNumber: 11,
                              },
                              this,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _reactRouterDom.Route),
                              {
                                path: "*",
                                element: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "main",
                                  {
                                    style: {
                                      padding: "1rem",
                                    },
                                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "p",
                                      {
                                        children: "There's nothing here!",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/App.js",
                                        lineNumber: 133,
                                        columnNumber: 17,
                                      },
                                      void 0,
                                    ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/App.js",
                                    lineNumber: 132,
                                    columnNumber: 15,
                                  },
                                  void 0,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/App.js",
                                lineNumber: 129,
                                columnNumber: 11,
                              },
                              this,
                            ),
                          ],
                        },
                        void 0,
                        true,
                        {
                          fileName: "src/App.js",
                          lineNumber: 87,
                          columnNumber: 9,
                        },
                        this,
                      ),
                    ],
                  },
                  void 0,
                  true,
                  {
                    fileName: "src/App.js",
                    lineNumber: 17,
                    columnNumber: 7,
                  },
                  this,
                ),
              },
              void 0,
              false,
              {
                fileName: "src/App.js",
                lineNumber: 16,
                columnNumber: 5,
              },
              this,
            );
          }
          _c = App;
          exports.default = App;
          var _c;
          $RefreshReg$(_c, "App");

          $parcel$ReactRefreshHelpers$f00f.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "pages/RowGroupPage": "fBKwA",
        "react-router-dom": "9xmpe",
        "./pages/BlockPage": "hMWXE",
        "./pages/EditorPage": "acdMU",
        "./pages/ExpanderPage": "4MX8d",
        "./pages/ListPage": "4qXuG",
        "./pages/pages.css": "6BQRX",
        "./pages/TablePage": "1cK6r",
        "./pages/WindowPage": "eGYPj",
        "./pages/CurrentPage": "fE6W8",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    fBKwA: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$d716 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$d716.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "RowGroupPage", () => RowGroupPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const RowGroupPage = () => {
            _s();
            const ta = (0, _react.useRef)(null);
            const [rowGroups, setRowGroups] = (0, _react.useState)([]);
            const [tableData, setTableData] = (0, _react.useState)(null);
            const [currentName, setCurrentName] = (0, _react.useState)("");
            const loadData = (0, _react.useCallback)(() => {
              try {
                if (ta.current && ta.current.value === "")
                  ta.current.value = window.localStorage.getItem("rowGroupContent") ?? "";
                if (ta.current) {
                  const j = JSON.parse(ta.current.value?.toString() ?? "[]");
                  setRowGroups(j);
                  ta.current.value = JSON.stringify(j, null, 2);
                }
              } catch (e) {
                console.log("JSON parse failed");
                console.dir(e);
              }
            }, []);
            const rg2Table = (0, _react.useCallback)(
              (rg) => {
                if (rg === undefined) setTableData(null);
                else if (tableData === null)
                  setTableData({
                    headerData: false,
                    bodyData: [rg],
                  });
                else
                  setTableData({
                    ...tableData,
                    bodyData: [rg],
                  });
              },
              [tableData],
            );
            const rgFromTableData = (0, _react.useCallback)(
              (ret) => {
                if (ret === null || ret.bodyData === undefined || ret.bodyData.length < 1)
                  return {
                    ...(0, _components.newRowGroup)(50),
                    name: currentName,
                  };
                return {
                  ...ret.bodyData[0],
                  name: currentName,
                };
              },
              [currentName],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "100%",
                        margin: "1.5rem",
                        display: "flex",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            style: {
                              width: "30%",
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "h4",
                                {
                                  children: "Available row groups",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/RowGroupPage.tsx",
                                  lineNumber: 70,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  children: rowGroups
                                    .filter((rg) => rg.name !== "Empty section")
                                    .map((rg, rgi) =>
                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        "div",
                                        {
                                          children: [
                                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                              "span",
                                              {
                                                onFocus: () => {
                                                  rg2Table(
                                                    rowGroups.find((rgi) => rgi.name === rg.name),
                                                  );
                                                  setCurrentName(rg.name ?? "");
                                                },
                                                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  (0, _components.AioString),
                                                  {
                                                    id: "test-string",
                                                    value: rg.name,
                                                    setValue: (ret) => {
                                                      setCurrentName(ret);
                                                      const ix = rowGroups.findIndex(
                                                        (rgi) => rgi.name === rg.name,
                                                      );
                                                      if (ix > -1) {
                                                        const newRg = {
                                                          ...rowGroups[ix],
                                                        };
                                                        const newRgs = [...rowGroups];
                                                        newRgs.splice(ix, 1, newRg);
                                                        setRowGroups(newRgs);
                                                      }
                                                    },
                                                  },
                                                  void 0,
                                                  false,
                                                  {
                                                    fileName: "src/pages/RowGroupPage.tsx",
                                                    lineNumber: 82,
                                                    columnNumber: 21,
                                                  },
                                                  undefined,
                                                ),
                                              },
                                              void 0,
                                              false,
                                              {
                                                fileName: "src/pages/RowGroupPage.tsx",
                                                lineNumber: 76,
                                                columnNumber: 19,
                                              },
                                              undefined,
                                            ),
                                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                              "div",
                                              {
                                                className: "aiox-button aiox-minus",
                                                onClick: () => {
                                                  const newRgs = [...rowGroups];
                                                  newRgs.splice(
                                                    newRgs.findIndex((rgi) => rgi.name === rg.name),
                                                    1,
                                                  );
                                                  setRowGroups(newRgs);
                                                  setTableData(null);
                                                },
                                              },
                                              void 0,
                                              false,
                                              {
                                                fileName: "src/pages/RowGroupPage.tsx",
                                                lineNumber: 97,
                                                columnNumber: 19,
                                              },
                                              undefined,
                                            ),
                                            tableData &&
                                              currentName === rg.name &&
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  style: {
                                                    display: "inline-block",
                                                    marginLeft: "0.5rem",
                                                    height: "1rem",
                                                    width: "1rem",
                                                    backgroundColor: "green",
                                                  },
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/pages/RowGroupPage.tsx",
                                                  lineNumber: 110,
                                                  columnNumber: 21,
                                                },
                                                undefined,
                                              ),
                                          ],
                                        },
                                        `${rgi}-${rg.name}`,
                                        true,
                                        {
                                          fileName: "src/pages/RowGroupPage.tsx",
                                          lineNumber: 75,
                                          columnNumber: 17,
                                        },
                                        undefined,
                                      ),
                                    ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/RowGroupPage.tsx",
                                  lineNumber: 71,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiox-button aiox-plus",
                                  onClick: () => {
                                    const newRgs = [...rowGroups];
                                    const newRg = {
                                      ...(0, _components.newRowGroup)(50),
                                      name: `Group ${newRgs.length}`,
                                    };
                                    newRgs.push(newRg);
                                    setRowGroups(newRgs);
                                    setCurrentName(newRg.name);
                                  },
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/RowGroupPage.tsx",
                                  lineNumber: 124,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 69,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            style: {
                              width: "70%",
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "h4",
                                {
                                  children: "Row group",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/RowGroupPage.tsx",
                                  lineNumber: 136,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  children:
                                    tableData &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        style: {
                                          display: "flex",
                                          flexDirection: "column",
                                          gap: "0.5rem",
                                        },
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _components.AsupInternalTable),
                                          {
                                            id: "test-table",
                                            groupTemplates: false,
                                            tableData: tableData,
                                            setTableData: (ret) => {
                                              setTableData(ret);
                                              const newRg = rgFromTableData(ret);
                                              const newRgs = [...rowGroups];
                                              newRgs.splice(
                                                newRgs.findIndex((rgi) => rgi.name === currentName),
                                                1,
                                                newRg,
                                              );
                                              setRowGroups(newRgs);
                                            },
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/pages/RowGroupPage.tsx",
                                            lineNumber: 146,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/pages/RowGroupPage.tsx",
                                        lineNumber: 139,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/RowGroupPage.tsx",
                                  lineNumber: 137,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 135,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/RowGroupPage.tsx",
                      lineNumber: 62,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                        backgroundColor: "rgb(220, 220, 220)",
                        borderRadius: "8px",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: loadData,
                            children: "Load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 177,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              if (!ta.current) return;
                              // Show intended data
                              ta.current.value = JSON.stringify(rowGroups, null, 2);
                              // Save string
                              window.localStorage.setItem(
                                "rowGroupContent",
                                JSON.stringify(rowGroups),
                              );
                            },
                            children: "Save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 178,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            style: {
                              paddingLeft: "1rem",
                              paddingRight: "1rem",
                            },
                            children: "(browser storage)",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 189,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              /** Load row group templates */ fetch(
                                `${undefined}/data/groupTemplates.json`,
                                {
                                  headers: {
                                    "Content-Type": "application/json",
                                    Accept: "application/json",
                                  },
                                },
                              )
                                .then(function (response) {
                                  return response.json();
                                })
                                .then(function (MyJson) {
                                  setRowGroups(MyJson);
                                });
                            },
                            children: "Defaults",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 190,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                style: {
                                  width: "98%",
                                  height: "200px",
                                },
                                ref: ta,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/RowGroupPage.tsx",
                                lineNumber: 208,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/RowGroupPage.tsx",
                            lineNumber: 207,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/RowGroupPage.tsx",
                      lineNumber: 168,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(RowGroupPage, "9lW0/u1aPyQBcoS8yKXUVa46I9s=");
          _c = RowGroupPage;
          var _c;
          $RefreshReg$(_c, "RowGroupPage");

          $parcel$ReactRefreshHelpers$d716.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    dHnah: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "AsupInternalEditor", () => (0, _aie.AsupInternalEditor));
        parcelHelpers.export(exports, "AsupInternalTable", () => (0, _ait.AsupInternalTable));
        parcelHelpers.export(exports, "AsupInternalWindow", () => (0, _aiw.AsupInternalWindow));
        parcelHelpers.export(exports, "AsupInternalBlock", () => (0, _aif.AsupInternalBlock));
        parcelHelpers.export(exports, "AifLineType", () => (0, _aif.AifLineType));
        parcelHelpers.export(exports, "AioExpander", () => (0, _aio.AioExpander));
        parcelHelpers.export(
          exports,
          "AioReplacementDisplay",
          () => (0, _aio.AioReplacementDisplay),
        );
        parcelHelpers.export(
          exports,
          "AioReplacementValuesDisplay",
          () => (0, _aio.AioReplacementValuesDisplay),
        );
        parcelHelpers.export(exports, "AioDropSelect", () => (0, _aio.AioDropSelect));
        parcelHelpers.export(exports, "AioIconButton", () => (0, _aio.AioIconButton));
        parcelHelpers.export(exports, "AioString", () => (0, _aio.AioString));
        parcelHelpers.export(
          exports,
          "newExternalReplacements",
          () => (0, _functions.newExternalReplacements),
        );
        parcelHelpers.export(exports, "newExternalSingle", () => (0, _functions.newExternalSingle));
        parcelHelpers.export(
          exports,
          "newReplacementValues",
          () => (0, _functions.newReplacementValues),
        );
        parcelHelpers.export(exports, "newRowGroup", () => (0, _functions.newRowGroup));
        parcelHelpers.export(exports, "toHtml", () => (0, _functions.toHtml));
        parcelHelpers.export(exports, "fromHtml", () => (0, _functions.fromHtml));
        parcelHelpers.export(
          exports,
          "updateReplacementVersion",
          () => (0, _functions.updateReplacementVersion),
        );
        parcelHelpers.export(exports, "updateReplToExtl", () => (0, _functions.updateReplToExtl));
        parcelHelpers.export(
          exports,
          "updateTableDataVersion",
          () => (0, _functions.updateTableDataVersion),
        );
        parcelHelpers.export(
          exports,
          "updateLineDisplayVersion",
          () => (0, _functions.updateLineDisplayVersion),
        );
        var _aie = require("./aie");
        var _aif = require("./aif");
        var _aio = require("./aio");
        var _ait = require("./ait");
        var _aiw = require("./aiw");
        var _functions = require("./functions");
      },
      {
        "./aie": "lfTjR",
        "./aif": "l4Y1o",
        "./aio": "2DzvE",
        "./ait": "6sre2",
        "./aiw": "j8CDd",
        "./functions": "gfVyL",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    lfTjR: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AsupInternalEditor",
          () => (0, _asupInternalEditor.AsupInternalEditor),
        );
        var _asupInternalEditor = require("./AsupInternalEditor");
      },
      {
        "./AsupInternalEditor": "4zpN3",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "4zpN3": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$c7cb = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$c7cb.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AsupInternalEditor", () => AsupInternalEditor);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _draftJs = require("draft-js");
          var _draftCss = require("draft-js/dist/Draft.css");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aieCss = require("./aie.css");
          var _aieStyleButtonRow = require("./AieStyleButtonRow");
          var _editorV2 = require("./EditorV2");
          var _loadFromHTML = require("./functions/loadFromHTML");
          var _saveToHTML = require("./functions/saveToHTML");
          var _styleMapToDraft = require("./functions/styleMapToDraft");
          var _styleMapToExclude = require("./functions/styleMapToExclude");
          var _s = $RefreshSig$();
          const AsupInternalEditor = ({
            id,
            value,
            setValue,
            style,
            styleMap,
            textAlignment,
            showStyleButtons,
            editable,
            decimalAlignPercent,
          }) => {
            _s();
            /** Current editor state */ const [editorState, setEditorState] = (0, _react.useState)(
              (0, _draftJs.EditorState).createEmpty(),
            );
            const [editorV2Text, setEditorV2Text] = (0, _react.useState)("");
            (0, _react.useEffect)(() => setEditorV2Text(value), [value]);
            /** Current button state */ const [buttonState, setButtonState] = (0, _react.useState)(
              "hidden",
            );
            // Add default style map
            const currentStyleMap = (0, _react.useRef)(
              (0, _styleMapToDraft.styleMapToDraft)(styleMap),
            );
            const styleMapExclude = (0, _react.useRef)(
              (0, _styleMapToExclude.styleMapToExclude)(styleMap),
            );
            // Show or hide style buttons
            const onFocus = (0, _react.useCallback)(() => {
              if (showStyleButtons) setButtonState("");
            }, [showStyleButtons]);
            // Only send data base onBlur of editor
            const onBlur = (0, _react.useCallback)(() => {
              setButtonState("hidden");
              if (typeof setValue === "function") {
                if (textAlignment !== "decimal")
                  setValue(
                    (0, _saveToHTML.saveToHTML)(
                      (0, _draftJs.convertToRaw)(editorState.getCurrentContent()),
                      currentStyleMap.current,
                    ),
                  );
                else setValue(editorV2Text);
              }
            }, [editorState, editorV2Text, setValue, textAlignment]);
            // Initial Text loading/update
            (0, _react.useEffect)(() => {
              // Update the content
              setEditorState(
                (0, _draftJs.EditorState).createWithContent(
                  (0, _loadFromHTML.loadFromHTML)(value, editable),
                ),
              );
            }, [editable, value]);
            /**
             * Apply style to current selection on button press
             * @param style Name of the style to apply
             */ const aieApplyStyle = (style) => {
              // Get current selection
              const selection = editorState.getSelection();
              // Get current content
              let nextContentState = editorState.getCurrentContent();
              const currentStyles = editorState.getCurrentInlineStyle();
              // Remove all excluded styles from selection
              for (const s of styleMapExclude.current[style])
                nextContentState = (0, _draftJs.Modifier).removeInlineStyle(
                  nextContentState,
                  selection,
                  s,
                );
              // Add or remove target style
              if (currentStyles.has(style))
                nextContentState = (0, _draftJs.Modifier).removeInlineStyle(
                  nextContentState,
                  selection,
                  style,
                );
              else
                nextContentState = (0, _draftJs.Modifier).applyInlineStyle(
                  nextContentState,
                  selection,
                  style,
                );
              let nextEditorState = (0, _draftJs.EditorState).createWithContent(nextContentState);
              // Put selection back
              nextEditorState = (0, _draftJs.EditorState).acceptSelection(
                nextEditorState,
                selection,
              );
              // Update editor
              setEditorState(nextEditorState);
            };
            const handlePastedText = (0, _react.useCallback)(
              (text) => {
                const sel = editorState.getSelection();
                let newContent;
                if (
                  sel.getAnchorOffset() === sel.getFocusOffset() &&
                  sel.getAnchorKey === sel.getFocusKey
                )
                  newContent = (0, _draftJs.Modifier).insertText(
                    editorState.getCurrentContent(),
                    editorState.getSelection(),
                    text.trim(),
                  );
                else
                  newContent = (0, _draftJs.Modifier).replaceText(
                    editorState.getCurrentContent(),
                    editorState.getSelection(),
                    text.trim(),
                  );
                setEditorState(
                  (0, _draftJs.EditorState).push(editorState, newContent, "insert-characters"),
                );
                return "handled";
              },
              [editorState],
            );
            // Render the component
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                className: "aie-outer",
                style: {
                  ...style,
                },
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      id: `${id}-holder`,
                      className: "aie-holder",
                      onBlur: onBlur,
                      onFocus: onFocus,
                      children:
                        textAlignment === "decimal"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _editorV2.EditorV2),
                              {
                                id: `${id}-v2editor`,
                                text: editorV2Text,
                                setText:
                                  editable !== false || typeof setValue !== "function"
                                    ? setEditorV2Text
                                    : undefined,
                                customStyleMap: styleMap,
                                textAlignment: textAlignment,
                                decimalAlignPercent: decimalAlignPercent,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aie/AsupInternalEditor.tsx",
                                lineNumber: 147,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _draftJs.Editor),
                              {
                                customStyleMap: currentStyleMap.current,
                                editorState: editorState,
                                onChange: setEditorState,
                                textAlignment:
                                  textAlignment !== "default" ? textAlignment : undefined,
                                readOnly: editable === false || typeof setValue !== "function",
                                handlePastedText: handlePastedText,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aie/AsupInternalEditor.tsx",
                                lineNumber: 158,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aie/AsupInternalEditor.tsx",
                      lineNumber: 140,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  textAlignment !== "decimal" &&
                    !(editable === false || typeof setValue !== "function") &&
                    buttonState !== "hidden" &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: `aie-button-position ${
                          textAlignment !== undefined ? textAlignment : "left"
                        }`,
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            className: "aie-button-holder",
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _aieStyleButtonRow.AieStyleButtonRow),
                              {
                                id: `${id}-stylebuttons`,
                                styleList: Object.keys(currentStyleMap.current),
                                currentStyle: editorState.getCurrentInlineStyle(),
                                applyStyleFunction: aieApplyStyle,
                                disabled: editorState.getSelection().isCollapsed(),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aie/AsupInternalEditor.tsx",
                                lineNumber: 178,
                                columnNumber: 15,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aie/AsupInternalEditor.tsx",
                            lineNumber: 177,
                            columnNumber: 13,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aie/AsupInternalEditor.tsx",
                        lineNumber: 172,
                        columnNumber: 11,
                      },
                      undefined,
                    ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aie/AsupInternalEditor.tsx",
                lineNumber: 134,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AsupInternalEditor, "Js4DVHifa/flbOIS1GbPV99CQQ0=");
          _c = AsupInternalEditor;
          var _c;
          $RefreshReg$(_c, "AsupInternalEditor");

          $parcel$ReactRefreshHelpers$c7cb.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "draft-js": "80cnM",
        "draft-js/dist/Draft.css": "iUxJS",
        react: "21dqq",
        "./aie.css": "lQogA",
        "./AieStyleButtonRow": "8F1sM",
        "./EditorV2": "90i5X",
        "./functions/loadFromHTML": "dyESa",
        "./functions/saveToHTML": "ju5wJ",
        "./functions/styleMapToDraft": "hKOZV",
        "./functions/styleMapToExclude": "lO8pD",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "80cnM": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         */ "use strict";
        var AtomicBlockUtils = require("77bbdbeaff1385e0");
        var BlockMapBuilder = require("afd6990cf1d947ea");
        var CharacterMetadata = require("fffcd2613448a7b5");
        var CompositeDraftDecorator = require("da6d7f2e65c0e04d");
        var ContentBlock = require("d9044e24bcc89ee5");
        var ContentState = require("190cb71fb26003f0");
        var DefaultDraftBlockRenderMap = require("cbe6003ff01cd80c");
        var DefaultDraftInlineStyle = require("2c376ba5c523777c");
        var DraftEditor = require("75522c30fc830001");
        var DraftEditorBlock = require("f55c39e840cdef7c");
        var DraftEntity = require("2fad4a789dc3f68c");
        var DraftModifier = require("f6f6b3b2a68bf621");
        var DraftEntityInstance = require("284b1e27c2d6e604");
        var EditorState = require("8670786fa510b4f9");
        var KeyBindingUtil = require("8d2976fb0870a101");
        var RawDraftContentState = require("c6a3cec23a0520ab");
        var RichTextEditorUtil = require("f51107981d434713");
        var SelectionState = require("df0edbff86323a97");
        var convertFromDraftStateToRaw = require("7230262c97211d77");
        var convertFromRawToDraftState = require("bcaaa19c642e94f9");
        var generateRandomKey = require("ad32eb0b63d32fbf");
        var getDefaultKeyBinding = require("ce0dd89590a48ce3");
        var getVisibleSelectionRect = require("c599847a286138ec");
        var convertFromHTML = require("960425b1e55c1460");
        var DraftPublic = {
          Editor: DraftEditor,
          EditorBlock: DraftEditorBlock,
          EditorState: EditorState,
          CompositeDecorator: CompositeDraftDecorator,
          Entity: DraftEntity,
          EntityInstance: DraftEntityInstance,
          BlockMapBuilder: BlockMapBuilder,
          CharacterMetadata: CharacterMetadata,
          ContentBlock: ContentBlock,
          ContentState: ContentState,
          RawDraftContentState: RawDraftContentState,
          SelectionState: SelectionState,
          AtomicBlockUtils: AtomicBlockUtils,
          KeyBindingUtil: KeyBindingUtil,
          Modifier: DraftModifier,
          RichUtils: RichTextEditorUtil,
          DefaultDraftBlockRenderMap: DefaultDraftBlockRenderMap,
          DefaultDraftInlineStyle: DefaultDraftInlineStyle,
          convertFromHTML: convertFromHTML,
          convertFromRaw: convertFromRawToDraftState,
          convertToRaw: convertFromDraftStateToRaw,
          genKey: generateRandomKey,
          getDefaultKeyBinding: getDefaultKeyBinding,
          getVisibleSelectionRect: getVisibleSelectionRect,
        };
        module.exports = DraftPublic;
      },
      {
        "77bbdbeaff1385e0": "dS9jY",
        afd6990cf1d947ea: "4sYuW",
        fffcd2613448a7b5: "5sTZK",
        da6d7f2e65c0e04d: "dQDU5",
        d9044e24bcc89ee5: "hCjL2",
        "190cb71fb26003f0": "2TRWx",
        cbe6003ff01cd80c: "67bzr",
        "2c376ba5c523777c": "lp1ln",
        "75522c30fc830001": "1yxf1",
        f55c39e840cdef7c: "9Lyys",
        "2fad4a789dc3f68c": "7ZjY7",
        f6f6b3b2a68bf621: "aeLN8",
        "284b1e27c2d6e604": "cJ6ci",
        "8670786fa510b4f9": "2EY4X",
        "8d2976fb0870a101": "68S9C",
        c6a3cec23a0520ab: "eIya8",
        f51107981d434713: "e1uYw",
        df0edbff86323a97: "5Aucl",
        "7230262c97211d77": "6HZuL",
        bcaaa19c642e94f9: "ep1XL",
        ad32eb0b63d32fbf: "fgtnr",
        ce0dd89590a48ce3: "gSyKU",
        c599847a286138ec: "1jVDO",
        "960425b1e55c1460": "5vdps",
      },
    ],
    dS9jY: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var BlockMapBuilder = require("710220db6c7d3d0b");
        var CharacterMetadata = require("d007cf61b5884d8c");
        var ContentBlock = require("44b75dbb936a5e91");
        var ContentBlockNode = require("8917c7004c994da8");
        var DraftModifier = require("13f863ee5db15bac");
        var EditorState = require("d56fdbf456522daf");
        var generateRandomKey = require("3774c25468df1e83");
        var gkx = require("982608db7cff3d29");
        var Immutable = require("8e92fe316c442a56");
        var moveBlockInContentState = require("6e73eac73095c690");
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        var ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;
        var List = Immutable.List,
          Repeat = Immutable.Repeat;
        var AtomicBlockUtils = {
          insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {
            var contentState = editorState.getCurrentContent();
            var selectionState = editorState.getSelection();
            var afterRemoval = DraftModifier.removeRange(contentState, selectionState, "backward");
            var targetSelection = afterRemoval.getSelectionAfter();
            var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);
            var insertionTarget = afterSplit.getSelectionAfter();
            var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, "atomic");
            var charData = CharacterMetadata.create({
              entity: entityKey,
            });
            var atomicBlockConfig = {
              key: generateRandomKey(),
              type: "atomic",
              text: character,
              characterList: List(Repeat(charData, character.length)),
            };
            var atomicDividerBlockConfig = {
              key: generateRandomKey(),
              type: "unstyled",
            };
            if (experimentalTreeDataSupport) {
              atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {
                nextSibling: atomicDividerBlockConfig.key,
              });
              atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {
                prevSibling: atomicBlockConfig.key,
              });
            }
            var fragmentArray = [
              new ContentBlockRecord(atomicBlockConfig),
              new ContentBlockRecord(atomicDividerBlockConfig),
            ];
            var fragment = BlockMapBuilder.createFromArray(fragmentArray);
            var withAtomicBlock = DraftModifier.replaceWithFragment(
              asAtomicBlock,
              insertionTarget,
              fragment,
            );
            var newContent = withAtomicBlock.merge({
              selectionBefore: selectionState,
              selectionAfter: withAtomicBlock.getSelectionAfter().set("hasFocus", true),
            });
            return EditorState.push(editorState, newContent, "insert-fragment");
          },
          moveAtomicBlock: function moveAtomicBlock(
            editorState,
            atomicBlock,
            targetRange,
            insertionMode,
          ) {
            var contentState = editorState.getCurrentContent();
            var selectionState = editorState.getSelection();
            var withMovedAtomicBlock;
            if (insertionMode === "before" || insertionMode === "after") {
              var targetBlock = contentState.getBlockForKey(
                insertionMode === "before" ? targetRange.getStartKey() : targetRange.getEndKey(),
              );
              withMovedAtomicBlock = moveBlockInContentState(
                contentState,
                atomicBlock,
                targetBlock,
                insertionMode,
              );
            } else {
              var afterRemoval = DraftModifier.removeRange(contentState, targetRange, "backward");
              var selectionAfterRemoval = afterRemoval.getSelectionAfter();
              var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());
              if (selectionAfterRemoval.getStartOffset() === 0)
                withMovedAtomicBlock = moveBlockInContentState(
                  afterRemoval,
                  atomicBlock,
                  _targetBlock,
                  "before",
                );
              else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength())
                withMovedAtomicBlock = moveBlockInContentState(
                  afterRemoval,
                  atomicBlock,
                  _targetBlock,
                  "after",
                );
              else {
                var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);
                var selectionAfterSplit = afterSplit.getSelectionAfter();
                var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());
                withMovedAtomicBlock = moveBlockInContentState(
                  afterSplit,
                  atomicBlock,
                  _targetBlock2,
                  "before",
                );
              }
            }
            var newContent = withMovedAtomicBlock.merge({
              selectionBefore: selectionState,
              selectionAfter: withMovedAtomicBlock.getSelectionAfter().set("hasFocus", true),
            });
            return EditorState.push(editorState, newContent, "move-block");
          },
        };
        module.exports = AtomicBlockUtils;
      },
      {
        "710220db6c7d3d0b": "4sYuW",
        d007cf61b5884d8c: "5sTZK",
        "44b75dbb936a5e91": "hCjL2",
        "8917c7004c994da8": "ketXe",
        "13f863ee5db15bac": "aeLN8",
        d56fdbf456522daf: "2EY4X",
        "3774c25468df1e83": "fgtnr",
        "982608db7cff3d29": "l5VFU",
        "8e92fe316c442a56": "lhHDL",
        "6e73eac73095c690": "bxoU1",
      },
    ],
    "4sYuW": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var Immutable = require("5bd0cd1a64c9a453");
        var OrderedMap = Immutable.OrderedMap;
        var BlockMapBuilder = {
          createFromArray: function createFromArray(blocks) {
            return OrderedMap(
              blocks.map(function (block) {
                return [block.getKey(), block];
              }),
            );
          },
        };
        module.exports = BlockMapBuilder;
      },
      { "5bd0cd1a64c9a453": "lhHDL" },
    ],
    lhHDL: [
      function (require, module, exports) {
        /**
         *  Copyright (c) 2014-2015, Facebook, Inc.
         *  All rights reserved.
         *
         *  This source code is licensed under the BSD-style license found in the
         *  LICENSE file in the root directory of this source tree. An additional grant
         *  of patent rights can be found in the PATENTS file in the same directory.
         */ (function (global, factory) {
          module.exports = factory();
        })(this, function () {
          "use strict";
          var SLICE$0 = Array.prototype.slice;
          function createClass(ctor, superClass) {
            if (superClass) ctor.prototype = Object.create(superClass.prototype);
            ctor.prototype.constructor = ctor;
          }
          function Iterable(value) {
            return isIterable(value) ? value : Seq(value);
          }
          createClass(KeyedIterable, Iterable);
          function KeyedIterable(value) {
            return isKeyed(value) ? value : KeyedSeq(value);
          }
          createClass(IndexedIterable, Iterable);
          function IndexedIterable(value) {
            return isIndexed(value) ? value : IndexedSeq(value);
          }
          createClass(SetIterable, Iterable);
          function SetIterable(value) {
            return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
          }
          function isIterable(maybeIterable) {
            return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
          }
          function isKeyed(maybeKeyed) {
            return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
          }
          function isIndexed(maybeIndexed) {
            return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
          }
          function isAssociative(maybeAssociative) {
            return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
          }
          function isOrdered(maybeOrdered) {
            return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
          }
          Iterable.isIterable = isIterable;
          Iterable.isKeyed = isKeyed;
          Iterable.isIndexed = isIndexed;
          Iterable.isAssociative = isAssociative;
          Iterable.isOrdered = isOrdered;
          Iterable.Keyed = KeyedIterable;
          Iterable.Indexed = IndexedIterable;
          Iterable.Set = SetIterable;
          var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
          var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
          var IS_INDEXED_SENTINEL = "@@__IMMUTABLE_INDEXED__@@";
          var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
          // Used for setting prototype methods that IE8 chokes on.
          var DELETE = "delete";
          // Constants describing the size of trie nodes.
          var SHIFT = 5; // Resulted in best performance after ______?
          var SIZE = 1 << SHIFT;
          var MASK = SIZE - 1;
          // A consistent shared value representing "not set" which equals nothing other
          // than itself, and nothing that could be provided externally.
          var NOT_SET = {};
          // Boolean references, Rough equivalent of `bool &`.
          var CHANGE_LENGTH = {
            value: false,
          };
          var DID_ALTER = {
            value: false,
          };
          function MakeRef(ref) {
            ref.value = false;
            return ref;
          }
          function SetRef(ref) {
            ref && (ref.value = true);
          }
          // A function which returns a value representing an "owner" for transient writes
          // to tries. The return value will only ever equal itself, and will not equal
          // the return of any subsequent call of this function.
          function OwnerID() {}
          // http://jsperf.com/copy-array-inline
          function arrCopy(arr, offset) {
            offset = offset || 0;
            var len = Math.max(0, arr.length - offset);
            var newArr = new Array(len);
            for (var ii = 0; ii < len; ii++) newArr[ii] = arr[ii + offset];
            return newArr;
          }
          function ensureSize(iter) {
            if (iter.size === undefined) iter.size = iter.__iterate(returnTrue);
            return iter.size;
          }
          function wrapIndex(iter, index) {
            // This implements "is array index" which the ECMAString spec defines as:
            //
            //     A String property name P is an array index if and only if
            //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
            //     to 2^32−1.
            //
            // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
            if (typeof index !== "number") {
              var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
              if ("" + uint32Index !== index || uint32Index === 4294967295) return NaN;
              index = uint32Index;
            }
            return index < 0 ? ensureSize(iter) + index : index;
          }
          function returnTrue() {
            return true;
          }
          function wholeSlice(begin, end, size) {
            return (
              (begin === 0 || (size !== undefined && begin <= -size)) &&
              (end === undefined || (size !== undefined && end >= size))
            );
          }
          function resolveBegin(begin, size) {
            return resolveIndex(begin, size, 0);
          }
          function resolveEnd(end, size) {
            return resolveIndex(end, size, size);
          }
          function resolveIndex(index, size, defaultIndex) {
            return index === undefined
              ? defaultIndex
              : index < 0
              ? Math.max(0, size + index)
              : size === undefined
              ? index
              : Math.min(size, index);
          }
          /* global Symbol */ var ITERATE_KEYS = 0;
          var ITERATE_VALUES = 1;
          var ITERATE_ENTRIES = 2;
          var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
          function Iterator(next) {
            this.next = next;
          }
          Iterator.prototype.toString = function () {
            return "[Iterator]";
          };
          Iterator.KEYS = ITERATE_KEYS;
          Iterator.VALUES = ITERATE_VALUES;
          Iterator.ENTRIES = ITERATE_ENTRIES;
          Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
            return this.toString();
          };
          Iterator.prototype[ITERATOR_SYMBOL] = function () {
            return this;
          };
          function iteratorValue(type, k, v, iteratorResult) {
            var value = type === 0 ? k : type === 1 ? v : [k, v];
            iteratorResult
              ? (iteratorResult.value = value)
              : (iteratorResult = {
                  value: value,
                  done: false,
                });
            return iteratorResult;
          }
          function iteratorDone() {
            return {
              value: undefined,
              done: true,
            };
          }
          function hasIterator(maybeIterable) {
            return !!getIteratorFn(maybeIterable);
          }
          function isIterator(maybeIterator) {
            return maybeIterator && typeof maybeIterator.next === "function";
          }
          function getIterator(iterable) {
            var iteratorFn = getIteratorFn(iterable);
            return iteratorFn && iteratorFn.call(iterable);
          }
          function getIteratorFn(iterable) {
            var iteratorFn =
              iterable &&
              ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
                iterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") return iteratorFn;
          }
          function isArrayLike(value) {
            return value && typeof value.length === "number";
          }
          createClass(Seq, Iterable);
          function Seq(value) {
            return value === null || value === undefined
              ? emptySequence()
              : isIterable(value)
              ? value.toSeq()
              : seqFromValue(value);
          }
          Seq.of = function () {
            return Seq(arguments);
          };
          Seq.prototype.toSeq = function () {
            return this;
          };
          Seq.prototype.toString = function () {
            return this.__toString("Seq {", "}");
          };
          Seq.prototype.cacheResult = function () {
            if (!this._cache && this.__iterateUncached) {
              this._cache = this.entrySeq().toArray();
              this.size = this._cache.length;
            }
            return this;
          };
          // abstract __iterateUncached(fn, reverse)
          Seq.prototype.__iterate = function (fn, reverse) {
            return seqIterate(this, fn, reverse, true);
          };
          // abstract __iteratorUncached(type, reverse)
          Seq.prototype.__iterator = function (type, reverse) {
            return seqIterator(this, type, reverse, true);
          };
          createClass(KeyedSeq, Seq);
          function KeyedSeq(value) {
            return value === null || value === undefined
              ? emptySequence().toKeyedSeq()
              : isIterable(value)
              ? isKeyed(value)
                ? value.toSeq()
                : value.fromEntrySeq()
              : keyedSeqFromValue(value);
          }
          KeyedSeq.prototype.toKeyedSeq = function () {
            return this;
          };
          createClass(IndexedSeq, Seq);
          function IndexedSeq(value) {
            return value === null || value === undefined
              ? emptySequence()
              : !isIterable(value)
              ? indexedSeqFromValue(value)
              : isKeyed(value)
              ? value.entrySeq()
              : value.toIndexedSeq();
          }
          IndexedSeq.of = function () {
            return IndexedSeq(arguments);
          };
          IndexedSeq.prototype.toIndexedSeq = function () {
            return this;
          };
          IndexedSeq.prototype.toString = function () {
            return this.__toString("Seq [", "]");
          };
          IndexedSeq.prototype.__iterate = function (fn, reverse) {
            return seqIterate(this, fn, reverse, false);
          };
          IndexedSeq.prototype.__iterator = function (type, reverse) {
            return seqIterator(this, type, reverse, false);
          };
          createClass(SetSeq, Seq);
          function SetSeq(value) {
            return (
              value === null || value === undefined
                ? emptySequence()
                : !isIterable(value)
                ? indexedSeqFromValue(value)
                : isKeyed(value)
                ? value.entrySeq()
                : value
            ).toSetSeq();
          }
          SetSeq.of = function () {
            return SetSeq(arguments);
          };
          SetSeq.prototype.toSetSeq = function () {
            return this;
          };
          Seq.isSeq = isSeq;
          Seq.Keyed = KeyedSeq;
          Seq.Set = SetSeq;
          Seq.Indexed = IndexedSeq;
          var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
          Seq.prototype[IS_SEQ_SENTINEL] = true;
          createClass(ArraySeq, IndexedSeq);
          function ArraySeq(array) {
            this._array = array;
            this.size = array.length;
          }
          ArraySeq.prototype.get = function (index, notSetValue) {
            return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
          };
          ArraySeq.prototype.__iterate = function (fn, reverse) {
            var array = this._array;
            var maxIndex = array.length - 1;
            for (var ii = 0; ii <= maxIndex; ii++) {
              if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) return ii + 1;
            }
            return ii;
          };
          ArraySeq.prototype.__iterator = function (type, reverse) {
            var array = this._array;
            var maxIndex = array.length - 1;
            var ii = 0;
            return new Iterator(function () {
              return ii > maxIndex
                ? iteratorDone()
                : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
            });
          };
          createClass(ObjectSeq, KeyedSeq);
          function ObjectSeq(object) {
            var keys = Object.keys(object);
            this._object = object;
            this._keys = keys;
            this.size = keys.length;
          }
          ObjectSeq.prototype.get = function (key, notSetValue) {
            if (notSetValue !== undefined && !this.has(key)) return notSetValue;
            return this._object[key];
          };
          ObjectSeq.prototype.has = function (key) {
            return this._object.hasOwnProperty(key);
          };
          ObjectSeq.prototype.__iterate = function (fn, reverse) {
            var object = this._object;
            var keys = this._keys;
            var maxIndex = keys.length - 1;
            for (var ii = 0; ii <= maxIndex; ii++) {
              var key = keys[reverse ? maxIndex - ii : ii];
              if (fn(object[key], key, this) === false) return ii + 1;
            }
            return ii;
          };
          ObjectSeq.prototype.__iterator = function (type, reverse) {
            var object = this._object;
            var keys = this._keys;
            var maxIndex = keys.length - 1;
            var ii = 0;
            return new Iterator(function () {
              var key = keys[reverse ? maxIndex - ii : ii];
              return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
            });
          };
          ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
          createClass(IterableSeq, IndexedSeq);
          function IterableSeq(iterable) {
            this._iterable = iterable;
            this.size = iterable.length || iterable.size;
          }
          IterableSeq.prototype.__iterateUncached = function (fn, reverse) {
            if (reverse) return this.cacheResult().__iterate(fn, reverse);
            var iterable = this._iterable;
            var iterator = getIterator(iterable);
            var iterations = 0;
            if (isIterator(iterator)) {
              var step;
              while (!(step = iterator.next()).done) {
                if (fn(step.value, iterations++, this) === false) break;
              }
            }
            return iterations;
          };
          IterableSeq.prototype.__iteratorUncached = function (type, reverse) {
            if (reverse) return this.cacheResult().__iterator(type, reverse);
            var iterable = this._iterable;
            var iterator = getIterator(iterable);
            if (!isIterator(iterator)) return new Iterator(iteratorDone);
            var iterations = 0;
            return new Iterator(function () {
              var step = iterator.next();
              return step.done ? step : iteratorValue(type, iterations++, step.value);
            });
          };
          createClass(IteratorSeq, IndexedSeq);
          function IteratorSeq(iterator) {
            this._iterator = iterator;
            this._iteratorCache = [];
          }
          IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {
            if (reverse) return this.cacheResult().__iterate(fn, reverse);
            var iterator = this._iterator;
            var cache = this._iteratorCache;
            var iterations = 0;
            while (iterations < cache.length) {
              if (fn(cache[iterations], iterations++, this) === false) return iterations;
            }
            var step;
            while (!(step = iterator.next()).done) {
              var val = step.value;
              cache[iterations] = val;
              if (fn(val, iterations++, this) === false) break;
            }
            return iterations;
          };
          IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {
            if (reverse) return this.cacheResult().__iterator(type, reverse);
            var iterator = this._iterator;
            var cache = this._iteratorCache;
            var iterations = 0;
            return new Iterator(function () {
              if (iterations >= cache.length) {
                var step = iterator.next();
                if (step.done) return step;
                cache[iterations] = step.value;
              }
              return iteratorValue(type, iterations, cache[iterations++]);
            });
          };
          // # pragma Helper functions
          function isSeq(maybeSeq) {
            return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
          }
          var EMPTY_SEQ;
          function emptySequence() {
            return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
          }
          function keyedSeqFromValue(value) {
            var seq = Array.isArray(value)
              ? new ArraySeq(value).fromEntrySeq()
              : isIterator(value)
              ? new IteratorSeq(value).fromEntrySeq()
              : hasIterator(value)
              ? new IterableSeq(value).fromEntrySeq()
              : typeof value === "object"
              ? new ObjectSeq(value)
              : undefined;
            if (!seq)
              throw new TypeError(
                "Expected Array or iterable object of [k, v] entries, or keyed object: " + value,
              );
            return seq;
          }
          function indexedSeqFromValue(value) {
            var seq = maybeIndexedSeqFromValue(value);
            if (!seq) throw new TypeError("Expected Array or iterable object of values: " + value);
            return seq;
          }
          function seqFromValue(value) {
            var seq =
              maybeIndexedSeqFromValue(value) ||
              (typeof value === "object" && new ObjectSeq(value));
            if (!seq)
              throw new TypeError(
                "Expected Array or iterable object of values, or keyed object: " + value,
              );
            return seq;
          }
          function maybeIndexedSeqFromValue(value) {
            return isArrayLike(value)
              ? new ArraySeq(value)
              : isIterator(value)
              ? new IteratorSeq(value)
              : hasIterator(value)
              ? new IterableSeq(value)
              : undefined;
          }
          function seqIterate(seq, fn, reverse, useKeys) {
            var cache = seq._cache;
            if (cache) {
              var maxIndex = cache.length - 1;
              for (var ii = 0; ii <= maxIndex; ii++) {
                var entry = cache[reverse ? maxIndex - ii : ii];
                if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) return ii + 1;
              }
              return ii;
            }
            return seq.__iterateUncached(fn, reverse);
          }
          function seqIterator(seq, type, reverse, useKeys) {
            var cache = seq._cache;
            if (cache) {
              var maxIndex = cache.length - 1;
              var ii = 0;
              return new Iterator(function () {
                var entry = cache[reverse ? maxIndex - ii : ii];
                return ii++ > maxIndex
                  ? iteratorDone()
                  : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
              });
            }
            return seq.__iteratorUncached(type, reverse);
          }
          function fromJS(json, converter) {
            return converter
              ? fromJSWith(converter, json, "", {
                  "": json,
                })
              : fromJSDefault(json);
          }
          function fromJSWith(converter, json, key, parentJSON) {
            if (Array.isArray(json))
              return converter.call(
                parentJSON,
                key,
                IndexedSeq(json).map(function (v, k) {
                  return fromJSWith(converter, v, k, json);
                }),
              );
            if (isPlainObj(json))
              return converter.call(
                parentJSON,
                key,
                KeyedSeq(json).map(function (v, k) {
                  return fromJSWith(converter, v, k, json);
                }),
              );
            return json;
          }
          function fromJSDefault(json) {
            if (Array.isArray(json)) return IndexedSeq(json).map(fromJSDefault).toList();
            if (isPlainObj(json)) return KeyedSeq(json).map(fromJSDefault).toMap();
            return json;
          }
          function isPlainObj(value) {
            return value && (value.constructor === Object || value.constructor === undefined);
          }
          /**
           * An extension of the "same-value" algorithm as [described for use by ES6 Map
           * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
           *
           * NaN is considered the same as NaN, however -0 and 0 are considered the same
           * value, which is different from the algorithm described by
           * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
           *
           * This is extended further to allow Objects to describe the values they
           * represent, by way of `valueOf` or `equals` (and `hashCode`).
           *
           * Note: because of this extension, the key equality of Immutable.Map and the
           * value equality of Immutable.Set will differ from ES6 Map and Set.
           *
           * ### Defining custom values
           *
           * The easiest way to describe the value an object represents is by implementing
           * `valueOf`. For example, `Date` represents a value by returning a unix
           * timestamp for `valueOf`:
           *
           *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
           *     var date2 = new Date(1234567890000);
           *     date1.valueOf(); // 1234567890000
           *     assert( date1 !== date2 );
           *     assert( Immutable.is( date1, date2 ) );
           *
           * Note: overriding `valueOf` may have other implications if you use this object
           * where JavaScript expects a primitive, such as implicit string coercion.
           *
           * For more complex types, especially collections, implementing `valueOf` may
           * not be performant. An alternative is to implement `equals` and `hashCode`.
           *
           * `equals` takes another object, presumably of similar type, and returns true
           * if the it is equal. Equality is symmetrical, so the same result should be
           * returned if this and the argument are flipped.
           *
           *     assert( a.equals(b) === b.equals(a) );
           *
           * `hashCode` returns a 32bit integer number representing the object which will
           * be used to determine how to store the value object in a Map or Set. You must
           * provide both or neither methods, one must not exist without the other.
           *
           * Also, an important relationship between these methods must be upheld: if two
           * values are equal, they *must* return the same hashCode. If the values are not
           * equal, they might have the same hashCode; this is called a hash collision,
           * and while undesirable for performance reasons, it is acceptable.
           *
           *     if (a.equals(b)) {
           *       assert( a.hashCode() === b.hashCode() );
           *     }
           *
           * All Immutable collections implement `equals` and `hashCode`.
           *
           */ function is(valueA, valueB) {
            if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) return true;
            if (!valueA || !valueB) return false;
            if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
              valueA = valueA.valueOf();
              valueB = valueB.valueOf();
              if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) return true;
              if (!valueA || !valueB) return false;
            }
            if (
              typeof valueA.equals === "function" &&
              typeof valueB.equals === "function" &&
              valueA.equals(valueB)
            )
              return true;
            return false;
          }
          function deepEqual(a, b) {
            if (a === b) return true;
            if (
              !isIterable(b) ||
              (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||
              (a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash) ||
              isKeyed(a) !== isKeyed(b) ||
              isIndexed(a) !== isIndexed(b) ||
              isOrdered(a) !== isOrdered(b)
            )
              return false;
            if (a.size === 0 && b.size === 0) return true;
            var notAssociative = !isAssociative(a);
            if (isOrdered(a)) {
              var entries = a.entries();
              return (
                b.every(function (v, k) {
                  var entry = entries.next().value;
                  return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
                }) && entries.next().done
              );
            }
            var flipped = false;
            if (a.size === undefined) {
              if (b.size === undefined) {
                if (typeof a.cacheResult === "function") a.cacheResult();
              } else {
                flipped = true;
                var _ = a;
                a = b;
                b = _;
              }
            }
            var allEqual = true;
            var bSize = b.__iterate(function (v, k) {
              if (
                notAssociative
                  ? !a.has(v)
                  : flipped
                  ? !is(v, a.get(k, NOT_SET))
                  : !is(a.get(k, NOT_SET), v)
              ) {
                allEqual = false;
                return false;
              }
            });
            return allEqual && a.size === bSize;
          }
          createClass(Repeat, IndexedSeq);
          function Repeat(value, times) {
            if (!(this instanceof Repeat)) return new Repeat(value, times);
            this._value = value;
            this.size = times === undefined ? Infinity : Math.max(0, times);
            if (this.size === 0) {
              if (EMPTY_REPEAT) return EMPTY_REPEAT;
              EMPTY_REPEAT = this;
            }
          }
          Repeat.prototype.toString = function () {
            if (this.size === 0) return "Repeat []";
            return "Repeat [ " + this._value + " " + this.size + " times ]";
          };
          Repeat.prototype.get = function (index, notSetValue) {
            return this.has(index) ? this._value : notSetValue;
          };
          Repeat.prototype.includes = function (searchValue) {
            return is(this._value, searchValue);
          };
          Repeat.prototype.slice = function (begin, end) {
            var size = this.size;
            return wholeSlice(begin, end, size)
              ? this
              : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
          };
          Repeat.prototype.reverse = function () {
            return this;
          };
          Repeat.prototype.indexOf = function (searchValue) {
            if (is(this._value, searchValue)) return 0;
            return -1;
          };
          Repeat.prototype.lastIndexOf = function (searchValue) {
            if (is(this._value, searchValue)) return this.size;
            return -1;
          };
          Repeat.prototype.__iterate = function (fn, reverse) {
            for (var ii = 0; ii < this.size; ii++) {
              if (fn(this._value, ii, this) === false) return ii + 1;
            }
            return ii;
          };
          Repeat.prototype.__iterator = function (type, reverse) {
            var this$0 = this;
            var ii = 0;
            return new Iterator(function () {
              return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
            });
          };
          Repeat.prototype.equals = function (other) {
            return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);
          };
          var EMPTY_REPEAT;
          function invariant(condition, error) {
            if (!condition) throw new Error(error);
          }
          createClass(Range, IndexedSeq);
          function Range(start, end, step) {
            if (!(this instanceof Range)) return new Range(start, end, step);
            invariant(step !== 0, "Cannot step a Range by 0");
            start = start || 0;
            if (end === undefined) end = Infinity;
            step = step === undefined ? 1 : Math.abs(step);
            if (end < start) step = -step;
            this._start = start;
            this._end = end;
            this._step = step;
            this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
            if (this.size === 0) {
              if (EMPTY_RANGE) return EMPTY_RANGE;
              EMPTY_RANGE = this;
            }
          }
          Range.prototype.toString = function () {
            if (this.size === 0) return "Range []";
            return (
              "Range [ " +
              this._start +
              "..." +
              this._end +
              (this._step > 1 ? " by " + this._step : "") +
              " ]"
            );
          };
          Range.prototype.get = function (index, notSetValue) {
            return this.has(index)
              ? this._start + wrapIndex(this, index) * this._step
              : notSetValue;
          };
          Range.prototype.includes = function (searchValue) {
            var possibleIndex = (searchValue - this._start) / this._step;
            return (
              possibleIndex >= 0 &&
              possibleIndex < this.size &&
              possibleIndex === Math.floor(possibleIndex)
            );
          };
          Range.prototype.slice = function (begin, end) {
            if (wholeSlice(begin, end, this.size)) return this;
            begin = resolveBegin(begin, this.size);
            end = resolveEnd(end, this.size);
            if (end <= begin) return new Range(0, 0);
            return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
          };
          Range.prototype.indexOf = function (searchValue) {
            var offsetValue = searchValue - this._start;
            if (offsetValue % this._step === 0) {
              var index = offsetValue / this._step;
              if (index >= 0 && index < this.size) return index;
            }
            return -1;
          };
          Range.prototype.lastIndexOf = function (searchValue) {
            return this.indexOf(searchValue);
          };
          Range.prototype.__iterate = function (fn, reverse) {
            var maxIndex = this.size - 1;
            var step = this._step;
            var value = reverse ? this._start + maxIndex * step : this._start;
            for (var ii = 0; ii <= maxIndex; ii++) {
              if (fn(value, ii, this) === false) return ii + 1;
              value += reverse ? -step : step;
            }
            return ii;
          };
          Range.prototype.__iterator = function (type, reverse) {
            var maxIndex = this.size - 1;
            var step = this._step;
            var value = reverse ? this._start + maxIndex * step : this._start;
            var ii = 0;
            return new Iterator(function () {
              var v = value;
              value += reverse ? -step : step;
              return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
            });
          };
          Range.prototype.equals = function (other) {
            return other instanceof Range
              ? this._start === other._start &&
                  this._end === other._end &&
                  this._step === other._step
              : deepEqual(this, other);
          };
          var EMPTY_RANGE;
          createClass(Collection, Iterable);
          function Collection() {
            throw TypeError("Abstract");
          }
          createClass(KeyedCollection, Collection);
          function KeyedCollection() {}
          createClass(IndexedCollection, Collection);
          function IndexedCollection() {}
          createClass(SetCollection, Collection);
          function SetCollection() {}
          Collection.Keyed = KeyedCollection;
          Collection.Indexed = IndexedCollection;
          Collection.Set = SetCollection;
          var imul =
            typeof Math.imul === "function" && Math.imul(0xffffffff, 2) === -2
              ? Math.imul
              : function imul(a, b) {
                  a = a | 0; // int
                  b = b | 0; // int
                  var c = a & 0xffff;
                  var d = b & 0xffff;
                  // Shift by 0 fixes the sign on the high part.
                  return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int
                };
          // v8 has an optimization for storing 31-bit signed numbers.
          // Values which have either 00 or 11 as the high order bits qualify.
          // This function drops the highest order bit in a signed number, maintaining
          // the sign bit.
          function smi(i32) {
            return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);
          }
          function hash(o) {
            if (o === false || o === null || o === undefined) return 0;
            if (typeof o.valueOf === "function") {
              o = o.valueOf();
              if (o === false || o === null || o === undefined) return 0;
            }
            if (o === true) return 1;
            var type = typeof o;
            if (type === "number") {
              var h = o | 0;
              if (h !== o) h ^= o * 0xffffffff;
              while (o > 0xffffffff) {
                o /= 0xffffffff;
                h ^= o;
              }
              return smi(h);
            }
            if (type === "string")
              return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
            if (typeof o.hashCode === "function") return o.hashCode();
            if (type === "object") return hashJSObj(o);
            if (typeof o.toString === "function") return hashString(o.toString());
            throw new Error("Value type " + type + " cannot be hashed.");
          }
          function cachedHashString(string) {
            var hash = stringHashCache[string];
            if (hash === undefined) {
              hash = hashString(string);
              if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
                STRING_HASH_CACHE_SIZE = 0;
                stringHashCache = {};
              }
              STRING_HASH_CACHE_SIZE++;
              stringHashCache[string] = hash;
            }
            return hash;
          }
          // http://jsperf.com/hashing-strings
          function hashString(string) {
            // This is the hash from JVM
            // The hash code for a string is computed as
            // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
            // where s[i] is the ith character of the string and n is the length of
            // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
            // (exclusive) by dropping high bits.
            var hash = 0;
            for (var ii = 0; ii < string.length; ii++)
              hash = (31 * hash + string.charCodeAt(ii)) | 0;
            return smi(hash);
          }
          function hashJSObj(obj) {
            var hash;
            if (usingWeakMap) {
              hash = weakMap.get(obj);
              if (hash !== undefined) return hash;
            }
            hash = obj[UID_HASH_KEY];
            if (hash !== undefined) return hash;
            if (!canDefineProperty) {
              hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
              if (hash !== undefined) return hash;
              hash = getIENodeHash(obj);
              if (hash !== undefined) return hash;
            }
            hash = ++objHashUID;
            if (objHashUID & 0x40000000) objHashUID = 0;
            if (usingWeakMap) weakMap.set(obj, hash);
            else if (isExtensible !== undefined && isExtensible(obj) === false)
              throw new Error("Non-extensible objects are not allowed as keys.");
            else if (canDefineProperty)
              Object.defineProperty(obj, UID_HASH_KEY, {
                enumerable: false,
                configurable: false,
                writable: false,
                value: hash,
              });
            else if (
              obj.propertyIsEnumerable !== undefined &&
              obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable
            ) {
              // Since we can't define a non-enumerable property on the object
              // we'll hijack one of the less-used non-enumerable properties to
              // save our hash on it. Since this is a function it will not show up in
              // `JSON.stringify` which is what we want.
              obj.propertyIsEnumerable = function () {
                return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
              };
              obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
            } else if (obj.nodeType !== undefined)
              // At this point we couldn't get the IE `uniqueID` to use as a hash
              // and we couldn't use a non-enumerable property to exploit the
              // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
              // itself.
              obj[UID_HASH_KEY] = hash;
            else throw new Error("Unable to set a non-enumerable property on object.");
            return hash;
          }
          // Get references to ES5 object methods.
          var isExtensible = Object.isExtensible;
          // True if Object.defineProperty works as expected. IE8 fails this test.
          var canDefineProperty = (function () {
            try {
              Object.defineProperty({}, "@", {});
              return true;
            } catch (e) {
              return false;
            }
          })();
          // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
          // and avoid memory leaks from the IE cloneNode bug.
          function getIENodeHash(node) {
            if (node && node.nodeType > 0)
              switch (node.nodeType) {
                case 1:
                  return node.uniqueID;
                case 9:
                  return node.documentElement && node.documentElement.uniqueID;
              }
          }
          // If possible, use a WeakMap.
          var usingWeakMap = typeof WeakMap === "function";
          var weakMap;
          if (usingWeakMap) weakMap = new WeakMap();
          var objHashUID = 0;
          var UID_HASH_KEY = "__immutablehash__";
          if (typeof Symbol === "function") UID_HASH_KEY = Symbol(UID_HASH_KEY);
          var STRING_HASH_CACHE_MIN_STRLEN = 16;
          var STRING_HASH_CACHE_MAX_SIZE = 255;
          var STRING_HASH_CACHE_SIZE = 0;
          var stringHashCache = {};
          function assertNotInfinite(size) {
            invariant(size !== Infinity, "Cannot perform this action with an infinite size.");
          }
          createClass(Map, KeyedCollection);
          // @pragma Construction
          function Map(value) {
            return value === null || value === undefined
              ? emptyMap()
              : isMap(value) && !isOrdered(value)
              ? value
              : emptyMap().withMutations(function (map) {
                  var iter = KeyedIterable(value);
                  assertNotInfinite(iter.size);
                  iter.forEach(function (v, k) {
                    return map.set(k, v);
                  });
                });
          }
          Map.prototype.toString = function () {
            return this.__toString("Map {", "}");
          };
          // @pragma Access
          Map.prototype.get = function (k, notSetValue) {
            return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;
          };
          // @pragma Modification
          Map.prototype.set = function (k, v) {
            return updateMap(this, k, v);
          };
          Map.prototype.setIn = function (keyPath, v) {
            return this.updateIn(keyPath, NOT_SET, function () {
              return v;
            });
          };
          Map.prototype.remove = function (k) {
            return updateMap(this, k, NOT_SET);
          };
          Map.prototype.deleteIn = function (keyPath) {
            return this.updateIn(keyPath, function () {
              return NOT_SET;
            });
          };
          Map.prototype.update = function (k, notSetValue, updater) {
            return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
          };
          Map.prototype.updateIn = function (keyPath, notSetValue, updater) {
            if (!updater) {
              updater = notSetValue;
              notSetValue = undefined;
            }
            var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);
            return updatedValue === NOT_SET ? undefined : updatedValue;
          };
          Map.prototype.clear = function () {
            if (this.size === 0) return this;
            if (this.__ownerID) {
              this.size = 0;
              this._root = null;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return emptyMap();
          };
          // @pragma Composition
          Map.prototype.merge = function () {
            return mergeIntoMapWith(this, undefined, arguments);
          };
          Map.prototype.mergeWith = function (merger) {
            var iters = SLICE$0.call(arguments, 1);
            return mergeIntoMapWith(this, merger, iters);
          };
          Map.prototype.mergeIn = function (keyPath) {
            var iters = SLICE$0.call(arguments, 1);
            return this.updateIn(keyPath, emptyMap(), function (m) {
              return typeof m.merge === "function"
                ? m.merge.apply(m, iters)
                : iters[iters.length - 1];
            });
          };
          Map.prototype.mergeDeep = function () {
            return mergeIntoMapWith(this, deepMerger, arguments);
          };
          Map.prototype.mergeDeepWith = function (merger) {
            var iters = SLICE$0.call(arguments, 1);
            return mergeIntoMapWith(this, deepMergerWith(merger), iters);
          };
          Map.prototype.mergeDeepIn = function (keyPath) {
            var iters = SLICE$0.call(arguments, 1);
            return this.updateIn(keyPath, emptyMap(), function (m) {
              return typeof m.mergeDeep === "function"
                ? m.mergeDeep.apply(m, iters)
                : iters[iters.length - 1];
            });
          };
          Map.prototype.sort = function (comparator) {
            // Late binding
            return OrderedMap(sortFactory(this, comparator));
          };
          Map.prototype.sortBy = function (mapper, comparator) {
            // Late binding
            return OrderedMap(sortFactory(this, comparator, mapper));
          };
          // @pragma Mutability
          Map.prototype.withMutations = function (fn) {
            var mutable = this.asMutable();
            fn(mutable);
            return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
          };
          Map.prototype.asMutable = function () {
            return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
          };
          Map.prototype.asImmutable = function () {
            return this.__ensureOwner();
          };
          Map.prototype.wasAltered = function () {
            return this.__altered;
          };
          Map.prototype.__iterator = function (type, reverse) {
            return new MapIterator(this, type, reverse);
          };
          Map.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            this._root &&
              this._root.iterate(function (entry) {
                iterations++;
                return fn(entry[1], entry[0], this$0);
              }, reverse);
            return iterations;
          };
          Map.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            if (!ownerID) {
              this.__ownerID = ownerID;
              this.__altered = false;
              return this;
            }
            return makeMap(this.size, this._root, ownerID, this.__hash);
          };
          function isMap(maybeMap) {
            return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
          }
          Map.isMap = isMap;
          var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
          var MapPrototype = Map.prototype;
          MapPrototype[IS_MAP_SENTINEL] = true;
          MapPrototype[DELETE] = MapPrototype.remove;
          MapPrototype.removeIn = MapPrototype.deleteIn;
          // #pragma Trie Nodes
          function ArrayMapNode(ownerID, entries) {
            this.ownerID = ownerID;
            this.entries = entries;
          }
          ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
            var entries = this.entries;
            for (var ii = 0, len = entries.length; ii < len; ii++) {
              if (is(key, entries[ii][0])) return entries[ii][1];
            }
            return notSetValue;
          };
          ArrayMapNode.prototype.update = function (
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter,
          ) {
            var removed = value === NOT_SET;
            var entries = this.entries;
            var idx = 0;
            for (var len = entries.length; idx < len; idx++) {
              if (is(key, entries[idx][0])) break;
            }
            var exists = idx < len;
            if (exists ? entries[idx][1] === value : removed) return this;
            SetRef(didAlter);
            (removed || !exists) && SetRef(didChangeSize);
            if (removed && entries.length === 1) return; // undefined
            if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE)
              return createNodes(ownerID, entries, key, value);
            var isEditable = ownerID && ownerID === this.ownerID;
            var newEntries = isEditable ? entries : arrCopy(entries);
            if (exists) {
              if (removed)
                idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
              else newEntries[idx] = [key, value];
            } else newEntries.push([key, value]);
            if (isEditable) {
              this.entries = newEntries;
              return this;
            }
            return new ArrayMapNode(ownerID, newEntries);
          };
          function BitmapIndexedNode(ownerID, bitmap, nodes) {
            this.ownerID = ownerID;
            this.bitmap = bitmap;
            this.nodes = nodes;
          }
          BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {
            if (keyHash === undefined) keyHash = hash(key);
            var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
            var bitmap = this.bitmap;
            return (bitmap & bit) === 0
              ? notSetValue
              : this.nodes[popCount(bitmap & (bit - 1))].get(
                  shift + SHIFT,
                  keyHash,
                  key,
                  notSetValue,
                );
          };
          BitmapIndexedNode.prototype.update = function (
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter,
          ) {
            if (keyHash === undefined) keyHash = hash(key);
            var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
            var bit = 1 << keyHashFrag;
            var bitmap = this.bitmap;
            var exists = (bitmap & bit) !== 0;
            if (!exists && value === NOT_SET) return this;
            var idx = popCount(bitmap & (bit - 1));
            var nodes = this.nodes;
            var node = exists ? nodes[idx] : undefined;
            var newNode = updateNode(
              node,
              ownerID,
              shift + SHIFT,
              keyHash,
              key,
              value,
              didChangeSize,
              didAlter,
            );
            if (newNode === node) return this;
            if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE)
              return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
            if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1]))
              return nodes[idx ^ 1];
            if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) return newNode;
            var isEditable = ownerID && ownerID === this.ownerID;
            var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;
            var newNodes = exists
              ? newNode
                ? setIn(nodes, idx, newNode, isEditable)
                : spliceOut(nodes, idx, isEditable)
              : spliceIn(nodes, idx, newNode, isEditable);
            if (isEditable) {
              this.bitmap = newBitmap;
              this.nodes = newNodes;
              return this;
            }
            return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
          };
          function HashArrayMapNode(ownerID, count, nodes) {
            this.ownerID = ownerID;
            this.count = count;
            this.nodes = nodes;
          }
          HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
            if (keyHash === undefined) keyHash = hash(key);
            var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
            var node = this.nodes[idx];
            return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
          };
          HashArrayMapNode.prototype.update = function (
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter,
          ) {
            if (keyHash === undefined) keyHash = hash(key);
            var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
            var removed = value === NOT_SET;
            var nodes = this.nodes;
            var node = nodes[idx];
            if (removed && !node) return this;
            var newNode = updateNode(
              node,
              ownerID,
              shift + SHIFT,
              keyHash,
              key,
              value,
              didChangeSize,
              didAlter,
            );
            if (newNode === node) return this;
            var newCount = this.count;
            if (!node) newCount++;
            else if (!newNode) {
              newCount--;
              if (newCount < MIN_HASH_ARRAY_MAP_SIZE)
                return packNodes(ownerID, nodes, newCount, idx);
            }
            var isEditable = ownerID && ownerID === this.ownerID;
            var newNodes = setIn(nodes, idx, newNode, isEditable);
            if (isEditable) {
              this.count = newCount;
              this.nodes = newNodes;
              return this;
            }
            return new HashArrayMapNode(ownerID, newCount, newNodes);
          };
          function HashCollisionNode(ownerID, keyHash, entries) {
            this.ownerID = ownerID;
            this.keyHash = keyHash;
            this.entries = entries;
          }
          HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {
            var entries = this.entries;
            for (var ii = 0, len = entries.length; ii < len; ii++) {
              if (is(key, entries[ii][0])) return entries[ii][1];
            }
            return notSetValue;
          };
          HashCollisionNode.prototype.update = function (
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter,
          ) {
            if (keyHash === undefined) keyHash = hash(key);
            var removed = value === NOT_SET;
            if (keyHash !== this.keyHash) {
              if (removed) return this;
              SetRef(didAlter);
              SetRef(didChangeSize);
              return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
            }
            var entries = this.entries;
            var idx = 0;
            for (var len = entries.length; idx < len; idx++) {
              if (is(key, entries[idx][0])) break;
            }
            var exists = idx < len;
            if (exists ? entries[idx][1] === value : removed) return this;
            SetRef(didAlter);
            (removed || !exists) && SetRef(didChangeSize);
            if (removed && len === 2) return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
            var isEditable = ownerID && ownerID === this.ownerID;
            var newEntries = isEditable ? entries : arrCopy(entries);
            if (exists) {
              if (removed)
                idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
              else newEntries[idx] = [key, value];
            } else newEntries.push([key, value]);
            if (isEditable) {
              this.entries = newEntries;
              return this;
            }
            return new HashCollisionNode(ownerID, this.keyHash, newEntries);
          };
          function ValueNode(ownerID, keyHash, entry) {
            this.ownerID = ownerID;
            this.keyHash = keyHash;
            this.entry = entry;
          }
          ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {
            return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
          };
          ValueNode.prototype.update = function (
            ownerID,
            shift,
            keyHash,
            key,
            value,
            didChangeSize,
            didAlter,
          ) {
            var removed = value === NOT_SET;
            var keyMatch = is(key, this.entry[0]);
            if (keyMatch ? value === this.entry[1] : removed) return this;
            SetRef(didAlter);
            if (removed) {
              SetRef(didChangeSize);
              return; // undefined
            }
            if (keyMatch) {
              if (ownerID && ownerID === this.ownerID) {
                this.entry[1] = value;
                return this;
              }
              return new ValueNode(ownerID, this.keyHash, [key, value]);
            }
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
          };
          // #pragma Iterators
          ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (
            fn,
            reverse,
          ) {
            var entries = this.entries;
            for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
              if (fn(entries[reverse ? maxIndex - ii : ii]) === false) return false;
            }
          };
          BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (
            fn,
            reverse,
          ) {
            var nodes = this.nodes;
            for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
              var node = nodes[reverse ? maxIndex - ii : ii];
              if (node && node.iterate(fn, reverse) === false) return false;
            }
          };
          ValueNode.prototype.iterate = function (fn, reverse) {
            return fn(this.entry);
          };
          createClass(MapIterator, Iterator);
          function MapIterator(map, type, reverse) {
            this._type = type;
            this._reverse = reverse;
            this._stack = map._root && mapIteratorFrame(map._root);
          }
          MapIterator.prototype.next = function () {
            var type = this._type;
            var stack = this._stack;
            while (stack) {
              var node = stack.node;
              var index = stack.index++;
              var maxIndex;
              if (node.entry) {
                if (index === 0) return mapIteratorValue(type, node.entry);
              } else if (node.entries) {
                maxIndex = node.entries.length - 1;
                if (index <= maxIndex)
                  return mapIteratorValue(
                    type,
                    node.entries[this._reverse ? maxIndex - index : index],
                  );
              } else {
                maxIndex = node.nodes.length - 1;
                if (index <= maxIndex) {
                  var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                  if (subNode) {
                    if (subNode.entry) return mapIteratorValue(type, subNode.entry);
                    stack = this._stack = mapIteratorFrame(subNode, stack);
                  }
                  continue;
                }
              }
              stack = this._stack = this._stack.__prev;
            }
            return iteratorDone();
          };
          function mapIteratorValue(type, entry) {
            return iteratorValue(type, entry[0], entry[1]);
          }
          function mapIteratorFrame(node, prev) {
            return {
              node: node,
              index: 0,
              __prev: prev,
            };
          }
          function makeMap(size, root, ownerID, hash) {
            var map = Object.create(MapPrototype);
            map.size = size;
            map._root = root;
            map.__ownerID = ownerID;
            map.__hash = hash;
            map.__altered = false;
            return map;
          }
          var EMPTY_MAP;
          function emptyMap() {
            return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
          }
          function updateMap(map, k, v) {
            var newRoot;
            var newSize;
            if (!map._root) {
              if (v === NOT_SET) return map;
              newSize = 1;
              newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
            } else {
              var didChangeSize = MakeRef(CHANGE_LENGTH);
              var didAlter = MakeRef(DID_ALTER);
              newRoot = updateNode(
                map._root,
                map.__ownerID,
                0,
                undefined,
                k,
                v,
                didChangeSize,
                didAlter,
              );
              if (!didAlter.value) return map;
              newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);
            }
            if (map.__ownerID) {
              map.size = newSize;
              map._root = newRoot;
              map.__hash = undefined;
              map.__altered = true;
              return map;
            }
            return newRoot ? makeMap(newSize, newRoot) : emptyMap();
          }
          function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
            if (!node) {
              if (value === NOT_SET) return node;
              SetRef(didAlter);
              SetRef(didChangeSize);
              return new ValueNode(ownerID, keyHash, [key, value]);
            }
            return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
          }
          function isLeafNode(node) {
            return node.constructor === ValueNode || node.constructor === HashCollisionNode;
          }
          function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
            if (node.keyHash === keyHash)
              return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
            var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
            var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
            var newNode;
            var nodes =
              idx1 === idx2
                ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]
                : ((newNode = new ValueNode(ownerID, keyHash, entry)),
                  idx1 < idx2 ? [node, newNode] : [newNode, node]);
            return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
          }
          function createNodes(ownerID, entries, key, value) {
            if (!ownerID) ownerID = new OwnerID();
            var node = new ValueNode(ownerID, hash(key), [key, value]);
            for (var ii = 0; ii < entries.length; ii++) {
              var entry = entries[ii];
              node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
            }
            return node;
          }
          function packNodes(ownerID, nodes, count, excluding) {
            var bitmap = 0;
            var packedII = 0;
            var packedNodes = new Array(count);
            for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
              var node = nodes[ii];
              if (node !== undefined && ii !== excluding) {
                bitmap |= bit;
                packedNodes[packedII++] = node;
              }
            }
            return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
          }
          function expandNodes(ownerID, nodes, bitmap, including, node) {
            var count = 0;
            var expandedNodes = new Array(SIZE);
            for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1)
              expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
            expandedNodes[including] = node;
            return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
          }
          function mergeIntoMapWith(map, merger, iterables) {
            var iters = [];
            for (var ii = 0; ii < iterables.length; ii++) {
              var value = iterables[ii];
              var iter = KeyedIterable(value);
              if (!isIterable(value))
                iter = iter.map(function (v) {
                  return fromJS(v);
                });
              iters.push(iter);
            }
            return mergeIntoCollectionWith(map, merger, iters);
          }
          function deepMerger(existing, value, key) {
            return existing && existing.mergeDeep && isIterable(value)
              ? existing.mergeDeep(value)
              : is(existing, value)
              ? existing
              : value;
          }
          function deepMergerWith(merger) {
            return function (existing, value, key) {
              if (existing && existing.mergeDeepWith && isIterable(value))
                return existing.mergeDeepWith(merger, value);
              var nextValue = merger(existing, value, key);
              return is(existing, nextValue) ? existing : nextValue;
            };
          }
          function mergeIntoCollectionWith(collection, merger, iters) {
            iters = iters.filter(function (x) {
              return x.size !== 0;
            });
            if (iters.length === 0) return collection;
            if (collection.size === 0 && !collection.__ownerID && iters.length === 1)
              return collection.constructor(iters[0]);
            return collection.withMutations(function (collection) {
              var mergeIntoMap = merger
                ? function (value, key) {
                    collection.update(key, NOT_SET, function (existing) {
                      return existing === NOT_SET ? value : merger(existing, value, key);
                    });
                  }
                : function (value, key) {
                    collection.set(key, value);
                  };
              for (var ii = 0; ii < iters.length; ii++) iters[ii].forEach(mergeIntoMap);
            });
          }
          function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
            var isNotSet = existing === NOT_SET;
            var step = keyPathIter.next();
            if (step.done) {
              var existingValue = isNotSet ? notSetValue : existing;
              var newValue = updater(existingValue);
              return newValue === existingValue ? existing : newValue;
            }
            invariant(isNotSet || (existing && existing.set), "invalid keyPath");
            var key = step.value;
            var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
            var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);
            return nextUpdated === nextExisting
              ? existing
              : nextUpdated === NOT_SET
              ? existing.remove(key)
              : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
          }
          function popCount(x) {
            x = x - ((x >> 1) & 0x55555555);
            x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
            x = (x + (x >> 4)) & 0x0f0f0f0f;
            x = x + (x >> 8);
            x = x + (x >> 16);
            return x & 0x7f;
          }
          function setIn(array, idx, val, canEdit) {
            var newArray = canEdit ? array : arrCopy(array);
            newArray[idx] = val;
            return newArray;
          }
          function spliceIn(array, idx, val, canEdit) {
            var newLen = array.length + 1;
            if (canEdit && idx + 1 === newLen) {
              array[idx] = val;
              return array;
            }
            var newArray = new Array(newLen);
            var after = 0;
            for (var ii = 0; ii < newLen; ii++)
              if (ii === idx) {
                newArray[ii] = val;
                after = -1;
              } else newArray[ii] = array[ii + after];
            return newArray;
          }
          function spliceOut(array, idx, canEdit) {
            var newLen = array.length - 1;
            if (canEdit && idx === newLen) {
              array.pop();
              return array;
            }
            var newArray = new Array(newLen);
            var after = 0;
            for (var ii = 0; ii < newLen; ii++) {
              if (ii === idx) after = 1;
              newArray[ii] = array[ii + after];
            }
            return newArray;
          }
          var MAX_ARRAY_MAP_SIZE = SIZE / 4;
          var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
          var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
          createClass(List, IndexedCollection);
          // @pragma Construction
          function List(value) {
            var empty = emptyList();
            if (value === null || value === undefined) return empty;
            if (isList(value)) return value;
            var iter = IndexedIterable(value);
            var size = iter.size;
            if (size === 0) return empty;
            assertNotInfinite(size);
            if (size > 0 && size < SIZE)
              return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
            return empty.withMutations(function (list) {
              list.setSize(size);
              iter.forEach(function (v, i) {
                return list.set(i, v);
              });
            });
          }
          List.of = function () {
            return this(arguments);
          };
          List.prototype.toString = function () {
            return this.__toString("List [", "]");
          };
          // @pragma Access
          List.prototype.get = function (index, notSetValue) {
            index = wrapIndex(this, index);
            if (index >= 0 && index < this.size) {
              index += this._origin;
              var node = listNodeFor(this, index);
              return node && node.array[index & MASK];
            }
            return notSetValue;
          };
          // @pragma Modification
          List.prototype.set = function (index, value) {
            return updateList(this, index, value);
          };
          List.prototype.remove = function (index) {
            return !this.has(index)
              ? this
              : index === 0
              ? this.shift()
              : index === this.size - 1
              ? this.pop()
              : this.splice(index, 1);
          };
          List.prototype.insert = function (index, value) {
            return this.splice(index, 0, value);
          };
          List.prototype.clear = function () {
            if (this.size === 0) return this;
            if (this.__ownerID) {
              this.size = this._origin = this._capacity = 0;
              this._level = SHIFT;
              this._root = this._tail = null;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return emptyList();
          };
          List.prototype.push = function () {
            var values = arguments;
            var oldSize = this.size;
            return this.withMutations(function (list) {
              setListBounds(list, 0, oldSize + values.length);
              for (var ii = 0; ii < values.length; ii++) list.set(oldSize + ii, values[ii]);
            });
          };
          List.prototype.pop = function () {
            return setListBounds(this, 0, -1);
          };
          List.prototype.unshift = function () {
            var values = arguments;
            return this.withMutations(function (list) {
              setListBounds(list, -values.length);
              for (var ii = 0; ii < values.length; ii++) list.set(ii, values[ii]);
            });
          };
          List.prototype.shift = function () {
            return setListBounds(this, 1);
          };
          // @pragma Composition
          List.prototype.merge = function () {
            return mergeIntoListWith(this, undefined, arguments);
          };
          List.prototype.mergeWith = function (merger) {
            var iters = SLICE$0.call(arguments, 1);
            return mergeIntoListWith(this, merger, iters);
          };
          List.prototype.mergeDeep = function () {
            return mergeIntoListWith(this, deepMerger, arguments);
          };
          List.prototype.mergeDeepWith = function (merger) {
            var iters = SLICE$0.call(arguments, 1);
            return mergeIntoListWith(this, deepMergerWith(merger), iters);
          };
          List.prototype.setSize = function (size) {
            return setListBounds(this, 0, size);
          };
          // @pragma Iteration
          List.prototype.slice = function (begin, end) {
            var size = this.size;
            if (wholeSlice(begin, end, size)) return this;
            return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
          };
          List.prototype.__iterator = function (type, reverse) {
            var index = 0;
            var values = iterateList(this, reverse);
            return new Iterator(function () {
              var value = values();
              return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);
            });
          };
          List.prototype.__iterate = function (fn, reverse) {
            var index = 0;
            var values = iterateList(this, reverse);
            var value;
            while ((value = values()) !== DONE) {
              if (fn(value, index++, this) === false) break;
            }
            return index;
          };
          List.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            if (!ownerID) {
              this.__ownerID = ownerID;
              return this;
            }
            return makeList(
              this._origin,
              this._capacity,
              this._level,
              this._root,
              this._tail,
              ownerID,
              this.__hash,
            );
          };
          function isList(maybeList) {
            return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
          }
          List.isList = isList;
          var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
          var ListPrototype = List.prototype;
          ListPrototype[IS_LIST_SENTINEL] = true;
          ListPrototype[DELETE] = ListPrototype.remove;
          ListPrototype.setIn = MapPrototype.setIn;
          ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
          ListPrototype.update = MapPrototype.update;
          ListPrototype.updateIn = MapPrototype.updateIn;
          ListPrototype.mergeIn = MapPrototype.mergeIn;
          ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
          ListPrototype.withMutations = MapPrototype.withMutations;
          ListPrototype.asMutable = MapPrototype.asMutable;
          ListPrototype.asImmutable = MapPrototype.asImmutable;
          ListPrototype.wasAltered = MapPrototype.wasAltered;
          function VNode(array, ownerID) {
            this.array = array;
            this.ownerID = ownerID;
          }
          // TODO: seems like these methods are very similar
          VNode.prototype.removeBefore = function (ownerID, level, index) {
            if (index === level ? 1 << level : this.array.length === 0) return this;
            var originIndex = (index >>> level) & MASK;
            if (originIndex >= this.array.length) return new VNode([], ownerID);
            var removingFirst = originIndex === 0;
            var newChild;
            if (level > 0) {
              var oldChild = this.array[originIndex];
              newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
              if (newChild === oldChild && removingFirst) return this;
            }
            if (removingFirst && !newChild) return this;
            var editable = editableVNode(this, ownerID);
            if (!removingFirst)
              for (var ii = 0; ii < originIndex; ii++) editable.array[ii] = undefined;
            if (newChild) editable.array[originIndex] = newChild;
            return editable;
          };
          VNode.prototype.removeAfter = function (ownerID, level, index) {
            if (index === (level ? 1 << level : 0) || this.array.length === 0) return this;
            var sizeIndex = ((index - 1) >>> level) & MASK;
            if (sizeIndex >= this.array.length) return this;
            var newChild;
            if (level > 0) {
              var oldChild = this.array[sizeIndex];
              newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
              if (newChild === oldChild && sizeIndex === this.array.length - 1) return this;
            }
            var editable = editableVNode(this, ownerID);
            editable.array.splice(sizeIndex + 1);
            if (newChild) editable.array[sizeIndex] = newChild;
            return editable;
          };
          var DONE = {};
          function iterateList(list, reverse) {
            var left = list._origin;
            var right = list._capacity;
            var tailPos = getTailOffset(right);
            var tail = list._tail;
            return iterateNodeOrLeaf(list._root, list._level, 0);
            function iterateNodeOrLeaf(node, level, offset) {
              return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
            }
            function iterateLeaf(node, offset) {
              var array = offset === tailPos ? tail && tail.array : node && node.array;
              var from = offset > left ? 0 : left - offset;
              var to = right - offset;
              if (to > SIZE) to = SIZE;
              return function () {
                if (from === to) return DONE;
                var idx = reverse ? --to : from++;
                return array && array[idx];
              };
            }
            function iterateNode(node, level, offset) {
              var values;
              var array = node && node.array;
              var from = offset > left ? 0 : (left - offset) >> level;
              var to = ((right - offset) >> level) + 1;
              if (to > SIZE) to = SIZE;
              return function () {
                do {
                  if (values) {
                    var value = values();
                    if (value !== DONE) return value;
                    values = null;
                  }
                  if (from === to) return DONE;
                  var idx = reverse ? --to : from++;
                  values = iterateNodeOrLeaf(
                    array && array[idx],
                    level - SHIFT,
                    offset + (idx << level),
                  );
                } while (true);
              };
            }
          }
          function makeList(origin, capacity, level, root, tail, ownerID, hash) {
            var list = Object.create(ListPrototype);
            list.size = capacity - origin;
            list._origin = origin;
            list._capacity = capacity;
            list._level = level;
            list._root = root;
            list._tail = tail;
            list.__ownerID = ownerID;
            list.__hash = hash;
            list.__altered = false;
            return list;
          }
          var EMPTY_LIST;
          function emptyList() {
            return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
          }
          function updateList(list, index, value) {
            index = wrapIndex(list, index);
            if (index !== index) return list;
            if (index >= list.size || index < 0)
              return list.withMutations(function (list) {
                index < 0
                  ? setListBounds(list, index).set(0, value)
                  : setListBounds(list, 0, index + 1).set(index, value);
              });
            index += list._origin;
            var newTail = list._tail;
            var newRoot = list._root;
            var didAlter = MakeRef(DID_ALTER);
            if (index >= getTailOffset(list._capacity))
              newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
            else
              newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
            if (!didAlter.value) return list;
            if (list.__ownerID) {
              list._root = newRoot;
              list._tail = newTail;
              list.__hash = undefined;
              list.__altered = true;
              return list;
            }
            return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
          }
          function updateVNode(node, ownerID, level, index, value, didAlter) {
            var idx = (index >>> level) & MASK;
            var nodeHas = node && idx < node.array.length;
            if (!nodeHas && value === undefined) return node;
            var newNode;
            if (level > 0) {
              var lowerNode = node && node.array[idx];
              var newLowerNode = updateVNode(
                lowerNode,
                ownerID,
                level - SHIFT,
                index,
                value,
                didAlter,
              );
              if (newLowerNode === lowerNode) return node;
              newNode = editableVNode(node, ownerID);
              newNode.array[idx] = newLowerNode;
              return newNode;
            }
            if (nodeHas && node.array[idx] === value) return node;
            SetRef(didAlter);
            newNode = editableVNode(node, ownerID);
            if (value === undefined && idx === newNode.array.length - 1) newNode.array.pop();
            else newNode.array[idx] = value;
            return newNode;
          }
          function editableVNode(node, ownerID) {
            if (ownerID && node && ownerID === node.ownerID) return node;
            return new VNode(node ? node.array.slice() : [], ownerID);
          }
          function listNodeFor(list, rawIndex) {
            if (rawIndex >= getTailOffset(list._capacity)) return list._tail;
            if (rawIndex < 1 << (list._level + SHIFT)) {
              var node = list._root;
              var level = list._level;
              while (node && level > 0) {
                node = node.array[(rawIndex >>> level) & MASK];
                level -= SHIFT;
              }
              return node;
            }
          }
          function setListBounds(list, begin, end) {
            // Sanitize begin & end using this shorthand for ToInt32(argument)
            // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
            if (begin !== undefined) begin = begin | 0;
            if (end !== undefined) end = end | 0;
            var owner = list.__ownerID || new OwnerID();
            var oldOrigin = list._origin;
            var oldCapacity = list._capacity;
            var newOrigin = oldOrigin + begin;
            var newCapacity =
              end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
            if (newOrigin === oldOrigin && newCapacity === oldCapacity) return list;
            // If it's going to end after it starts, it's empty.
            if (newOrigin >= newCapacity) return list.clear();
            var newLevel = list._level;
            var newRoot = list._root;
            // New origin might need creating a higher root.
            var offsetShift = 0;
            while (newOrigin + offsetShift < 0) {
              newRoot = new VNode(
                newRoot && newRoot.array.length ? [undefined, newRoot] : [],
                owner,
              );
              newLevel += SHIFT;
              offsetShift += 1 << newLevel;
            }
            if (offsetShift) {
              newOrigin += offsetShift;
              oldOrigin += offsetShift;
              newCapacity += offsetShift;
              oldCapacity += offsetShift;
            }
            var oldTailOffset = getTailOffset(oldCapacity);
            var newTailOffset = getTailOffset(newCapacity);
            // New size might need creating a higher root.
            while (newTailOffset >= 1 << (newLevel + SHIFT)) {
              newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
              newLevel += SHIFT;
            }
            // Locate or create the new tail.
            var oldTail = list._tail;
            var newTail =
              newTailOffset < oldTailOffset
                ? listNodeFor(list, newCapacity - 1)
                : newTailOffset > oldTailOffset
                ? new VNode([], owner)
                : oldTail;
            // Merge Tail into tree.
            if (
              oldTail &&
              newTailOffset > oldTailOffset &&
              newOrigin < oldCapacity &&
              oldTail.array.length
            ) {
              newRoot = editableVNode(newRoot, owner);
              var node = newRoot;
              for (var level = newLevel; level > SHIFT; level -= SHIFT) {
                var idx = (oldTailOffset >>> level) & MASK;
                node = node.array[idx] = editableVNode(node.array[idx], owner);
              }
              node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
            }
            // If the size has been reduced, there's a chance the tail needs to be trimmed.
            if (newCapacity < oldCapacity)
              newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
            // If the new origin is within the tail, then we do not need a root.
            if (newOrigin >= newTailOffset) {
              newOrigin -= newTailOffset;
              newCapacity -= newTailOffset;
              newLevel = SHIFT;
              newRoot = null;
              newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
              // Otherwise, if the root has been trimmed, garbage collect.
            } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
              offsetShift = 0;
              // Identify the new top root node of the subtree of the old root.
              while (newRoot) {
                var beginIndex = (newOrigin >>> newLevel) & MASK;
                if ((beginIndex !== newTailOffset >>> newLevel) & MASK) break;
                if (beginIndex) offsetShift += (1 << newLevel) * beginIndex;
                newLevel -= SHIFT;
                newRoot = newRoot.array[beginIndex];
              }
              // Trim the new sides of the new root.
              if (newRoot && newOrigin > oldOrigin)
                newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
              if (newRoot && newTailOffset < oldTailOffset)
                newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
              if (offsetShift) {
                newOrigin -= offsetShift;
                newCapacity -= offsetShift;
              }
            }
            if (list.__ownerID) {
              list.size = newCapacity - newOrigin;
              list._origin = newOrigin;
              list._capacity = newCapacity;
              list._level = newLevel;
              list._root = newRoot;
              list._tail = newTail;
              list.__hash = undefined;
              list.__altered = true;
              return list;
            }
            return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
          }
          function mergeIntoListWith(list, merger, iterables) {
            var iters = [];
            var maxSize = 0;
            for (var ii = 0; ii < iterables.length; ii++) {
              var value = iterables[ii];
              var iter = IndexedIterable(value);
              if (iter.size > maxSize) maxSize = iter.size;
              if (!isIterable(value))
                iter = iter.map(function (v) {
                  return fromJS(v);
                });
              iters.push(iter);
            }
            if (maxSize > list.size) list = list.setSize(maxSize);
            return mergeIntoCollectionWith(list, merger, iters);
          }
          function getTailOffset(size) {
            return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;
          }
          createClass(OrderedMap, Map);
          // @pragma Construction
          function OrderedMap(value) {
            return value === null || value === undefined
              ? emptyOrderedMap()
              : isOrderedMap(value)
              ? value
              : emptyOrderedMap().withMutations(function (map) {
                  var iter = KeyedIterable(value);
                  assertNotInfinite(iter.size);
                  iter.forEach(function (v, k) {
                    return map.set(k, v);
                  });
                });
          }
          OrderedMap.of = function () {
            return this(arguments);
          };
          OrderedMap.prototype.toString = function () {
            return this.__toString("OrderedMap {", "}");
          };
          // @pragma Access
          OrderedMap.prototype.get = function (k, notSetValue) {
            var index = this._map.get(k);
            return index !== undefined ? this._list.get(index)[1] : notSetValue;
          };
          // @pragma Modification
          OrderedMap.prototype.clear = function () {
            if (this.size === 0) return this;
            if (this.__ownerID) {
              this.size = 0;
              this._map.clear();
              this._list.clear();
              return this;
            }
            return emptyOrderedMap();
          };
          OrderedMap.prototype.set = function (k, v) {
            return updateOrderedMap(this, k, v);
          };
          OrderedMap.prototype.remove = function (k) {
            return updateOrderedMap(this, k, NOT_SET);
          };
          OrderedMap.prototype.wasAltered = function () {
            return this._map.wasAltered() || this._list.wasAltered();
          };
          OrderedMap.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            return this._list.__iterate(function (entry) {
              return entry && fn(entry[1], entry[0], this$0);
            }, reverse);
          };
          OrderedMap.prototype.__iterator = function (type, reverse) {
            return this._list.fromEntrySeq().__iterator(type, reverse);
          };
          OrderedMap.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            var newMap = this._map.__ensureOwner(ownerID);
            var newList = this._list.__ensureOwner(ownerID);
            if (!ownerID) {
              this.__ownerID = ownerID;
              this._map = newMap;
              this._list = newList;
              return this;
            }
            return makeOrderedMap(newMap, newList, ownerID, this.__hash);
          };
          function isOrderedMap(maybeOrderedMap) {
            return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
          }
          OrderedMap.isOrderedMap = isOrderedMap;
          OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
          OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
          function makeOrderedMap(map, list, ownerID, hash) {
            var omap = Object.create(OrderedMap.prototype);
            omap.size = map ? map.size : 0;
            omap._map = map;
            omap._list = list;
            omap.__ownerID = ownerID;
            omap.__hash = hash;
            return omap;
          }
          var EMPTY_ORDERED_MAP;
          function emptyOrderedMap() {
            return (
              EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))
            );
          }
          function updateOrderedMap(omap, k, v) {
            var map = omap._map;
            var list = omap._list;
            var i = map.get(k);
            var has = i !== undefined;
            var newMap;
            var newList;
            if (v === NOT_SET) {
              if (!has) return omap;
              if (list.size >= SIZE && list.size >= map.size * 2) {
                newList = list.filter(function (entry, idx) {
                  return entry !== undefined && i !== idx;
                });
                newMap = newList
                  .toKeyedSeq()
                  .map(function (entry) {
                    return entry[0];
                  })
                  .flip()
                  .toMap();
                if (omap.__ownerID) newMap.__ownerID = newList.__ownerID = omap.__ownerID;
              } else {
                newMap = map.remove(k);
                newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
              }
            } else if (has) {
              if (v === list.get(i)[1]) return omap;
              newMap = map;
              newList = list.set(i, [k, v]);
            } else {
              newMap = map.set(k, list.size);
              newList = list.set(list.size, [k, v]);
            }
            if (omap.__ownerID) {
              omap.size = newMap.size;
              omap._map = newMap;
              omap._list = newList;
              omap.__hash = undefined;
              return omap;
            }
            return makeOrderedMap(newMap, newList);
          }
          createClass(ToKeyedSequence, KeyedSeq);
          function ToKeyedSequence(indexed, useKeys) {
            this._iter = indexed;
            this._useKeys = useKeys;
            this.size = indexed.size;
          }
          ToKeyedSequence.prototype.get = function (key, notSetValue) {
            return this._iter.get(key, notSetValue);
          };
          ToKeyedSequence.prototype.has = function (key) {
            return this._iter.has(key);
          };
          ToKeyedSequence.prototype.valueSeq = function () {
            return this._iter.valueSeq();
          };
          ToKeyedSequence.prototype.reverse = function () {
            var this$0 = this;
            var reversedSequence = reverseFactory(this, true);
            if (!this._useKeys)
              reversedSequence.valueSeq = function () {
                return this$0._iter.toSeq().reverse();
              };
            return reversedSequence;
          };
          ToKeyedSequence.prototype.map = function (mapper, context) {
            var this$0 = this;
            var mappedSequence = mapFactory(this, mapper, context);
            if (!this._useKeys)
              mappedSequence.valueSeq = function () {
                return this$0._iter.toSeq().map(mapper, context);
              };
            return mappedSequence;
          };
          ToKeyedSequence.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            var ii;
            return this._iter.__iterate(
              this._useKeys
                ? function (v, k) {
                    return fn(v, k, this$0);
                  }
                : ((ii = reverse ? resolveSize(this) : 0),
                  function (v) {
                    return fn(v, reverse ? --ii : ii++, this$0);
                  }),
              reverse,
            );
          };
          ToKeyedSequence.prototype.__iterator = function (type, reverse) {
            if (this._useKeys) return this._iter.__iterator(type, reverse);
            var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
            var ii = reverse ? resolveSize(this) : 0;
            return new Iterator(function () {
              var step = iterator.next();
              return step.done
                ? step
                : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
            });
          };
          ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
          createClass(ToIndexedSequence, IndexedSeq);
          function ToIndexedSequence(iter) {
            this._iter = iter;
            this.size = iter.size;
          }
          ToIndexedSequence.prototype.includes = function (value) {
            return this._iter.includes(value);
          };
          ToIndexedSequence.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            return this._iter.__iterate(function (v) {
              return fn(v, iterations++, this$0);
            }, reverse);
          };
          ToIndexedSequence.prototype.__iterator = function (type, reverse) {
            var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
            var iterations = 0;
            return new Iterator(function () {
              var step = iterator.next();
              return step.done ? step : iteratorValue(type, iterations++, step.value, step);
            });
          };
          createClass(ToSetSequence, SetSeq);
          function ToSetSequence(iter) {
            this._iter = iter;
            this.size = iter.size;
          }
          ToSetSequence.prototype.has = function (key) {
            return this._iter.includes(key);
          };
          ToSetSequence.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            return this._iter.__iterate(function (v) {
              return fn(v, v, this$0);
            }, reverse);
          };
          ToSetSequence.prototype.__iterator = function (type, reverse) {
            var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
            return new Iterator(function () {
              var step = iterator.next();
              return step.done ? step : iteratorValue(type, step.value, step.value, step);
            });
          };
          createClass(FromEntriesSequence, KeyedSeq);
          function FromEntriesSequence(entries) {
            this._iter = entries;
            this.size = entries.size;
          }
          FromEntriesSequence.prototype.entrySeq = function () {
            return this._iter.toSeq();
          };
          FromEntriesSequence.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            return this._iter.__iterate(function (entry) {
              // Check if entry exists first so array access doesn't throw for holes
              // in the parent iteration.
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return fn(
                  indexedIterable ? entry.get(1) : entry[1],
                  indexedIterable ? entry.get(0) : entry[0],
                  this$0,
                );
              }
            }, reverse);
          };
          FromEntriesSequence.prototype.__iterator = function (type, reverse) {
            var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
            return new Iterator(function () {
              while (true) {
                var step = iterator.next();
                if (step.done) return step;
                var entry = step.value;
                // Check if entry exists first so array access doesn't throw for holes
                // in the parent iteration.
                if (entry) {
                  validateEntry(entry);
                  var indexedIterable = isIterable(entry);
                  return iteratorValue(
                    type,
                    indexedIterable ? entry.get(0) : entry[0],
                    indexedIterable ? entry.get(1) : entry[1],
                    step,
                  );
                }
              }
            });
          };
          ToIndexedSequence.prototype.cacheResult =
            ToKeyedSequence.prototype.cacheResult =
            ToSetSequence.prototype.cacheResult =
            FromEntriesSequence.prototype.cacheResult =
              cacheResultThrough;
          function flipFactory(iterable) {
            var flipSequence = makeSequence(iterable);
            flipSequence._iter = iterable;
            flipSequence.size = iterable.size;
            flipSequence.flip = function () {
              return iterable;
            };
            flipSequence.reverse = function () {
              var reversedSequence = iterable.reverse.apply(this); // super.reverse()
              reversedSequence.flip = function () {
                return iterable.reverse();
              };
              return reversedSequence;
            };
            flipSequence.has = function (key) {
              return iterable.includes(key);
            };
            flipSequence.includes = function (key) {
              return iterable.has(key);
            };
            flipSequence.cacheResult = cacheResultThrough;
            flipSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              return iterable.__iterate(function (v, k) {
                return fn(k, v, this$0) !== false;
              }, reverse);
            };
            flipSequence.__iteratorUncached = function (type, reverse) {
              if (type === ITERATE_ENTRIES) {
                var iterator = iterable.__iterator(type, reverse);
                return new Iterator(function () {
                  var step = iterator.next();
                  if (!step.done) {
                    var k = step.value[0];
                    step.value[0] = step.value[1];
                    step.value[1] = k;
                  }
                  return step;
                });
              }
              return iterable.__iterator(
                type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
                reverse,
              );
            };
            return flipSequence;
          }
          function mapFactory(iterable, mapper, context) {
            var mappedSequence = makeSequence(iterable);
            mappedSequence.size = iterable.size;
            mappedSequence.has = function (key) {
              return iterable.has(key);
            };
            mappedSequence.get = function (key, notSetValue) {
              var v = iterable.get(key, NOT_SET);
              return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);
            };
            mappedSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              return iterable.__iterate(function (v, k, c) {
                return fn(mapper.call(context, v, k, c), k, this$0) !== false;
              }, reverse);
            };
            mappedSequence.__iteratorUncached = function (type, reverse) {
              var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
              return new Iterator(function () {
                var step = iterator.next();
                if (step.done) return step;
                var entry = step.value;
                var key = entry[0];
                return iteratorValue(
                  type,
                  key,
                  mapper.call(context, entry[1], key, iterable),
                  step,
                );
              });
            };
            return mappedSequence;
          }
          function reverseFactory(iterable, useKeys) {
            var reversedSequence = makeSequence(iterable);
            reversedSequence._iter = iterable;
            reversedSequence.size = iterable.size;
            reversedSequence.reverse = function () {
              return iterable;
            };
            if (iterable.flip)
              reversedSequence.flip = function () {
                var flipSequence = flipFactory(iterable);
                flipSequence.reverse = function () {
                  return iterable.flip();
                };
                return flipSequence;
              };
            reversedSequence.get = function (key, notSetValue) {
              return iterable.get(useKeys ? key : -1 - key, notSetValue);
            };
            reversedSequence.has = function (key) {
              return iterable.has(useKeys ? key : -1 - key);
            };
            reversedSequence.includes = function (value) {
              return iterable.includes(value);
            };
            reversedSequence.cacheResult = cacheResultThrough;
            reversedSequence.__iterate = function (fn, reverse) {
              var this$0 = this;
              return iterable.__iterate(function (v, k) {
                return fn(v, k, this$0);
              }, !reverse);
            };
            reversedSequence.__iterator = function (type, reverse) {
              return iterable.__iterator(type, !reverse);
            };
            return reversedSequence;
          }
          function filterFactory(iterable, predicate, context, useKeys) {
            var filterSequence = makeSequence(iterable);
            if (useKeys) {
              filterSequence.has = function (key) {
                var v = iterable.get(key, NOT_SET);
                return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
              };
              filterSequence.get = function (key, notSetValue) {
                var v = iterable.get(key, NOT_SET);
                return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;
              };
            }
            filterSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              var iterations = 0;
              iterable.__iterate(function (v, k, c) {
                if (predicate.call(context, v, k, c)) {
                  iterations++;
                  return fn(v, useKeys ? k : iterations - 1, this$0);
                }
              }, reverse);
              return iterations;
            };
            filterSequence.__iteratorUncached = function (type, reverse) {
              var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
              var iterations = 0;
              return new Iterator(function () {
                while (true) {
                  var step = iterator.next();
                  if (step.done) return step;
                  var entry = step.value;
                  var key = entry[0];
                  var value = entry[1];
                  if (predicate.call(context, value, key, iterable))
                    return iteratorValue(type, useKeys ? key : iterations++, value, step);
                }
              });
            };
            return filterSequence;
          }
          function countByFactory(iterable, grouper, context) {
            var groups = Map().asMutable();
            iterable.__iterate(function (v, k) {
              groups.update(grouper.call(context, v, k, iterable), 0, function (a) {
                return a + 1;
              });
            });
            return groups.asImmutable();
          }
          function groupByFactory(iterable, grouper, context) {
            var isKeyedIter = isKeyed(iterable);
            var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
            iterable.__iterate(function (v, k) {
              groups.update(grouper.call(context, v, k, iterable), function (a) {
                return (a = a || []), a.push(isKeyedIter ? [k, v] : v), a;
              });
            });
            var coerce = iterableClass(iterable);
            return groups.map(function (arr) {
              return reify(iterable, coerce(arr));
            });
          }
          function sliceFactory(iterable, begin, end, useKeys) {
            var originalSize = iterable.size;
            // Sanitize begin & end using this shorthand for ToInt32(argument)
            // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
            if (begin !== undefined) begin = begin | 0;
            if (end !== undefined) end = end | 0;
            if (wholeSlice(begin, end, originalSize)) return iterable;
            var resolvedBegin = resolveBegin(begin, originalSize);
            var resolvedEnd = resolveEnd(end, originalSize);
            // begin or end will be NaN if they were provided as negative numbers and
            // this iterable's size is unknown. In that case, cache first so there is
            // a known size and these do not resolve to NaN.
            if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd)
              return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
            // Note: resolvedEnd is undefined when the original sequence's length is
            // unknown and this slice did not supply an end and should contain all
            // elements after resolvedBegin.
            // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
            var resolvedSize = resolvedEnd - resolvedBegin;
            var sliceSize;
            if (resolvedSize === resolvedSize) sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
            var sliceSeq = makeSequence(iterable);
            // If iterable.size is undefined, the size of the realized sliceSeq is
            // unknown at this point unless the number of items to slice is 0
            sliceSeq.size = sliceSize === 0 ? sliceSize : (iterable.size && sliceSize) || undefined;
            if (!useKeys && isSeq(iterable) && sliceSize >= 0)
              sliceSeq.get = function (index, notSetValue) {
                index = wrapIndex(this, index);
                return index >= 0 && index < sliceSize
                  ? iterable.get(index + resolvedBegin, notSetValue)
                  : notSetValue;
              };
            sliceSeq.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              if (sliceSize === 0) return 0;
              if (reverse) return this.cacheResult().__iterate(fn, reverse);
              var skipped = 0;
              var isSkipping = true;
              var iterations = 0;
              iterable.__iterate(function (v, k) {
                if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
                  iterations++;
                  return (
                    fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                    iterations !== sliceSize
                  );
                }
              });
              return iterations;
            };
            sliceSeq.__iteratorUncached = function (type, reverse) {
              if (sliceSize !== 0 && reverse) return this.cacheResult().__iterator(type, reverse);
              // Don't bother instantiating parent iterator if taking 0.
              var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
              var skipped = 0;
              var iterations = 0;
              return new Iterator(function () {
                while (skipped++ < resolvedBegin) iterator.next();
                if (++iterations > sliceSize) return iteratorDone();
                var step = iterator.next();
                if (useKeys || type === ITERATE_VALUES) return step;
                else if (type === ITERATE_KEYS)
                  return iteratorValue(type, iterations - 1, undefined, step);
                else return iteratorValue(type, iterations - 1, step.value[1], step);
              });
            };
            return sliceSeq;
          }
          function takeWhileFactory(iterable, predicate, context) {
            var takeSequence = makeSequence(iterable);
            takeSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              if (reverse) return this.cacheResult().__iterate(fn, reverse);
              var iterations = 0;
              iterable.__iterate(function (v, k, c) {
                return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);
              });
              return iterations;
            };
            takeSequence.__iteratorUncached = function (type, reverse) {
              var this$0 = this;
              if (reverse) return this.cacheResult().__iterator(type, reverse);
              var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
              var iterating = true;
              return new Iterator(function () {
                if (!iterating) return iteratorDone();
                var step = iterator.next();
                if (step.done) return step;
                var entry = step.value;
                var k = entry[0];
                var v = entry[1];
                if (!predicate.call(context, v, k, this$0)) {
                  iterating = false;
                  return iteratorDone();
                }
                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
              });
            };
            return takeSequence;
          }
          function skipWhileFactory(iterable, predicate, context, useKeys) {
            var skipSequence = makeSequence(iterable);
            skipSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              if (reverse) return this.cacheResult().__iterate(fn, reverse);
              var isSkipping = true;
              var iterations = 0;
              iterable.__iterate(function (v, k, c) {
                if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
                  iterations++;
                  return fn(v, useKeys ? k : iterations - 1, this$0);
                }
              });
              return iterations;
            };
            skipSequence.__iteratorUncached = function (type, reverse) {
              var this$0 = this;
              if (reverse) return this.cacheResult().__iterator(type, reverse);
              var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
              var skipping = true;
              var iterations = 0;
              return new Iterator(function () {
                var step, k, v;
                do {
                  step = iterator.next();
                  if (step.done) {
                    if (useKeys || type === ITERATE_VALUES) return step;
                    else if (type === ITERATE_KEYS)
                      return iteratorValue(type, iterations++, undefined, step);
                    else return iteratorValue(type, iterations++, step.value[1], step);
                  }
                  var entry = step.value;
                  k = entry[0];
                  v = entry[1];
                  skipping && (skipping = predicate.call(context, v, k, this$0));
                } while (skipping);
                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
              });
            };
            return skipSequence;
          }
          function concatFactory(iterable, values) {
            var isKeyedIterable = isKeyed(iterable);
            var iters = [iterable]
              .concat(values)
              .map(function (v) {
                if (!isIterable(v))
                  v = isKeyedIterable
                    ? keyedSeqFromValue(v)
                    : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
                else if (isKeyedIterable) v = KeyedIterable(v);
                return v;
              })
              .filter(function (v) {
                return v.size !== 0;
              });
            if (iters.length === 0) return iterable;
            if (iters.length === 1) {
              var singleton = iters[0];
              if (
                singleton === iterable ||
                (isKeyedIterable && isKeyed(singleton)) ||
                (isIndexed(iterable) && isIndexed(singleton))
              )
                return singleton;
            }
            var concatSeq = new ArraySeq(iters);
            if (isKeyedIterable) concatSeq = concatSeq.toKeyedSeq();
            else if (!isIndexed(iterable)) concatSeq = concatSeq.toSetSeq();
            concatSeq = concatSeq.flatten(true);
            concatSeq.size = iters.reduce(function (sum, seq) {
              if (sum !== undefined) {
                var size = seq.size;
                if (size !== undefined) return sum + size;
              }
            }, 0);
            return concatSeq;
          }
          function flattenFactory(iterable, depth, useKeys) {
            var flatSequence = makeSequence(iterable);
            flatSequence.__iterateUncached = function (fn, reverse) {
              var iterations = 0;
              var stopped = false;
              function flatDeep(iter, currentDepth) {
                var this$0 = this;
                iter.__iterate(function (v, k) {
                  if ((!depth || currentDepth < depth) && isIterable(v))
                    flatDeep(v, currentDepth + 1);
                  else if (fn(v, useKeys ? k : iterations++, this$0) === false) stopped = true;
                  return !stopped;
                }, reverse);
              }
              flatDeep(iterable, 0);
              return iterations;
            };
            flatSequence.__iteratorUncached = function (type, reverse) {
              var iterator = iterable.__iterator(type, reverse);
              var stack = [];
              var iterations = 0;
              return new Iterator(function () {
                while (iterator) {
                  var step = iterator.next();
                  if (step.done !== false) {
                    iterator = stack.pop();
                    continue;
                  }
                  var v = step.value;
                  if (type === ITERATE_ENTRIES) v = v[1];
                  if ((!depth || stack.length < depth) && isIterable(v)) {
                    stack.push(iterator);
                    iterator = v.__iterator(type, reverse);
                  } else return useKeys ? step : iteratorValue(type, iterations++, v, step);
                }
                return iteratorDone();
              });
            };
            return flatSequence;
          }
          function flatMapFactory(iterable, mapper, context) {
            var coerce = iterableClass(iterable);
            return iterable
              .toSeq()
              .map(function (v, k) {
                return coerce(mapper.call(context, v, k, iterable));
              })
              .flatten(true);
          }
          function interposeFactory(iterable, separator) {
            var interposedSequence = makeSequence(iterable);
            interposedSequence.size = iterable.size && iterable.size * 2 - 1;
            interposedSequence.__iterateUncached = function (fn, reverse) {
              var this$0 = this;
              var iterations = 0;
              iterable.__iterate(function (v, k) {
                return (
                  (!iterations || fn(separator, iterations++, this$0) !== false) &&
                  fn(v, iterations++, this$0) !== false
                );
              }, reverse);
              return iterations;
            };
            interposedSequence.__iteratorUncached = function (type, reverse) {
              var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
              var iterations = 0;
              var step;
              return new Iterator(function () {
                if (!step || iterations % 2) {
                  step = iterator.next();
                  if (step.done) return step;
                }
                return iterations % 2
                  ? iteratorValue(type, iterations++, separator)
                  : iteratorValue(type, iterations++, step.value, step);
              });
            };
            return interposedSequence;
          }
          function sortFactory(iterable, comparator, mapper) {
            if (!comparator) comparator = defaultComparator;
            var isKeyedIterable = isKeyed(iterable);
            var index = 0;
            var entries = iterable
              .toSeq()
              .map(function (v, k) {
                return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
              })
              .toArray();
            entries
              .sort(function (a, b) {
                return comparator(a[3], b[3]) || a[2] - b[2];
              })
              .forEach(
                isKeyedIterable
                  ? function (v, i) {
                      entries[i].length = 2;
                    }
                  : function (v, i) {
                      entries[i] = v[1];
                    },
              );
            return isKeyedIterable
              ? KeyedSeq(entries)
              : isIndexed(iterable)
              ? IndexedSeq(entries)
              : SetSeq(entries);
          }
          function maxFactory(iterable, comparator, mapper) {
            if (!comparator) comparator = defaultComparator;
            if (mapper) {
              var entry = iterable
                .toSeq()
                .map(function (v, k) {
                  return [v, mapper(v, k, iterable)];
                })
                .reduce(function (a, b) {
                  return maxCompare(comparator, a[1], b[1]) ? b : a;
                });
              return entry && entry[0];
            } else
              return iterable.reduce(function (a, b) {
                return maxCompare(comparator, a, b) ? b : a;
              });
          }
          function maxCompare(comparator, a, b) {
            var comp = comparator(b, a);
            // b is considered the new max if the comparator declares them equal, but
            // they are not equal and b is in fact a nullish value.
            return (
              (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0
            );
          }
          function zipWithFactory(keyIter, zipper, iters) {
            var zipSequence = makeSequence(keyIter);
            zipSequence.size = new ArraySeq(iters)
              .map(function (i) {
                return i.size;
              })
              .min();
            // Note: this a generic base implementation of __iterate in terms of
            // __iterator which may be more generically useful in the future.
            zipSequence.__iterate = function (fn, reverse) {
              /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */ // indexed:
              var iterator = this.__iterator(ITERATE_VALUES, reverse);
              var step;
              var iterations = 0;
              while (!(step = iterator.next()).done) {
                if (fn(step.value, iterations++, this) === false) break;
              }
              return iterations;
            };
            zipSequence.__iteratorUncached = function (type, reverse) {
              var iterators = iters.map(function (i) {
                return (i = Iterable(i)), getIterator(reverse ? i.reverse() : i);
              });
              var iterations = 0;
              var isDone = false;
              return new Iterator(function () {
                var steps;
                if (!isDone) {
                  steps = iterators.map(function (i) {
                    return i.next();
                  });
                  isDone = steps.some(function (s) {
                    return s.done;
                  });
                }
                if (isDone) return iteratorDone();
                return iteratorValue(
                  type,
                  iterations++,
                  zipper.apply(
                    null,
                    steps.map(function (s) {
                      return s.value;
                    }),
                  ),
                );
              });
            };
            return zipSequence;
          }
          // #pragma Helper Functions
          function reify(iter, seq) {
            return isSeq(iter) ? seq : iter.constructor(seq);
          }
          function validateEntry(entry) {
            if (entry !== Object(entry)) throw new TypeError("Expected [K, V] tuple: " + entry);
          }
          function resolveSize(iter) {
            assertNotInfinite(iter.size);
            return ensureSize(iter);
          }
          function iterableClass(iterable) {
            return isKeyed(iterable)
              ? KeyedIterable
              : isIndexed(iterable)
              ? IndexedIterable
              : SetIterable;
          }
          function makeSequence(iterable) {
            return Object.create(
              (isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype,
            );
          }
          function cacheResultThrough() {
            if (this._iter.cacheResult) {
              this._iter.cacheResult();
              this.size = this._iter.size;
              return this;
            } else return Seq.prototype.cacheResult.call(this);
          }
          function defaultComparator(a, b) {
            return a > b ? 1 : a < b ? -1 : 0;
          }
          function forceIterator(keyPath) {
            var iter = getIterator(keyPath);
            if (!iter) {
              // Array might not be iterable in this environment, so we need a fallback
              // to our wrapped type.
              if (!isArrayLike(keyPath))
                throw new TypeError("Expected iterable or array-like: " + keyPath);
              iter = getIterator(Iterable(keyPath));
            }
            return iter;
          }
          createClass(Record, KeyedCollection);
          function Record(defaultValues, name) {
            var hasInitialized;
            var RecordType = function Record(values) {
              if (values instanceof RecordType) return values;
              if (!(this instanceof RecordType)) return new RecordType(values);
              if (!hasInitialized) {
                hasInitialized = true;
                var keys = Object.keys(defaultValues);
                setProps(RecordTypePrototype, keys);
                RecordTypePrototype.size = keys.length;
                RecordTypePrototype._name = name;
                RecordTypePrototype._keys = keys;
                RecordTypePrototype._defaultValues = defaultValues;
              }
              this._map = Map(values);
            };
            var RecordTypePrototype = (RecordType.prototype = Object.create(RecordPrototype));
            RecordTypePrototype.constructor = RecordType;
            return RecordType;
          }
          Record.prototype.toString = function () {
            return this.__toString(recordName(this) + " {", "}");
          };
          // @pragma Access
          Record.prototype.has = function (k) {
            return this._defaultValues.hasOwnProperty(k);
          };
          Record.prototype.get = function (k, notSetValue) {
            if (!this.has(k)) return notSetValue;
            var defaultVal = this._defaultValues[k];
            return this._map ? this._map.get(k, defaultVal) : defaultVal;
          };
          // @pragma Modification
          Record.prototype.clear = function () {
            if (this.__ownerID) {
              this._map && this._map.clear();
              return this;
            }
            var RecordType = this.constructor;
            return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
          };
          Record.prototype.set = function (k, v) {
            if (!this.has(k))
              throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
            var newMap = this._map && this._map.set(k, v);
            if (this.__ownerID || newMap === this._map) return this;
            return makeRecord(this, newMap);
          };
          Record.prototype.remove = function (k) {
            if (!this.has(k)) return this;
            var newMap = this._map && this._map.remove(k);
            if (this.__ownerID || newMap === this._map) return this;
            return makeRecord(this, newMap);
          };
          Record.prototype.wasAltered = function () {
            return this._map.wasAltered();
          };
          Record.prototype.__iterator = function (type, reverse) {
            var this$0 = this;
            return KeyedIterable(this._defaultValues)
              .map(function (_, k) {
                return this$0.get(k);
              })
              .__iterator(type, reverse);
          };
          Record.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            return KeyedIterable(this._defaultValues)
              .map(function (_, k) {
                return this$0.get(k);
              })
              .__iterate(fn, reverse);
          };
          Record.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            var newMap = this._map && this._map.__ensureOwner(ownerID);
            if (!ownerID) {
              this.__ownerID = ownerID;
              this._map = newMap;
              return this;
            }
            return makeRecord(this, newMap, ownerID);
          };
          var RecordPrototype = Record.prototype;
          RecordPrototype[DELETE] = RecordPrototype.remove;
          RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
          RecordPrototype.merge = MapPrototype.merge;
          RecordPrototype.mergeWith = MapPrototype.mergeWith;
          RecordPrototype.mergeIn = MapPrototype.mergeIn;
          RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
          RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
          RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
          RecordPrototype.setIn = MapPrototype.setIn;
          RecordPrototype.update = MapPrototype.update;
          RecordPrototype.updateIn = MapPrototype.updateIn;
          RecordPrototype.withMutations = MapPrototype.withMutations;
          RecordPrototype.asMutable = MapPrototype.asMutable;
          RecordPrototype.asImmutable = MapPrototype.asImmutable;
          function makeRecord(likeRecord, map, ownerID) {
            var record = Object.create(Object.getPrototypeOf(likeRecord));
            record._map = map;
            record.__ownerID = ownerID;
            return record;
          }
          function recordName(record) {
            return record._name || record.constructor.name || "Record";
          }
          function setProps(prototype, names) {
            try {
              names.forEach(setProp.bind(undefined, prototype));
            } catch (error) {
              // Object.defineProperty failed. Probably IE8.
            }
          }
          function setProp(prototype, name) {
            Object.defineProperty(prototype, name, {
              get: function () {
                return this.get(name);
              },
              set: function (value) {
                invariant(this.__ownerID, "Cannot set on an immutable record.");
                this.set(name, value);
              },
            });
          }
          createClass(Set, SetCollection);
          // @pragma Construction
          function Set(value) {
            return value === null || value === undefined
              ? emptySet()
              : isSet(value) && !isOrdered(value)
              ? value
              : emptySet().withMutations(function (set) {
                  var iter = SetIterable(value);
                  assertNotInfinite(iter.size);
                  iter.forEach(function (v) {
                    return set.add(v);
                  });
                });
          }
          Set.of = function () {
            return this(arguments);
          };
          Set.fromKeys = function (value) {
            return this(KeyedIterable(value).keySeq());
          };
          Set.prototype.toString = function () {
            return this.__toString("Set {", "}");
          };
          // @pragma Access
          Set.prototype.has = function (value) {
            return this._map.has(value);
          };
          // @pragma Modification
          Set.prototype.add = function (value) {
            return updateSet(this, this._map.set(value, true));
          };
          Set.prototype.remove = function (value) {
            return updateSet(this, this._map.remove(value));
          };
          Set.prototype.clear = function () {
            return updateSet(this, this._map.clear());
          };
          // @pragma Composition
          Set.prototype.union = function () {
            var iters = SLICE$0.call(arguments, 0);
            iters = iters.filter(function (x) {
              return x.size !== 0;
            });
            if (iters.length === 0) return this;
            if (this.size === 0 && !this.__ownerID && iters.length === 1)
              return this.constructor(iters[0]);
            return this.withMutations(function (set) {
              for (var ii = 0; ii < iters.length; ii++)
                SetIterable(iters[ii]).forEach(function (value) {
                  return set.add(value);
                });
            });
          };
          Set.prototype.intersect = function () {
            var iters = SLICE$0.call(arguments, 0);
            if (iters.length === 0) return this;
            iters = iters.map(function (iter) {
              return SetIterable(iter);
            });
            var originalSet = this;
            return this.withMutations(function (set) {
              originalSet.forEach(function (value) {
                if (
                  !iters.every(function (iter) {
                    return iter.includes(value);
                  })
                )
                  set.remove(value);
              });
            });
          };
          Set.prototype.subtract = function () {
            var iters = SLICE$0.call(arguments, 0);
            if (iters.length === 0) return this;
            iters = iters.map(function (iter) {
              return SetIterable(iter);
            });
            var originalSet = this;
            return this.withMutations(function (set) {
              originalSet.forEach(function (value) {
                if (
                  iters.some(function (iter) {
                    return iter.includes(value);
                  })
                )
                  set.remove(value);
              });
            });
          };
          Set.prototype.merge = function () {
            return this.union.apply(this, arguments);
          };
          Set.prototype.mergeWith = function (merger) {
            var iters = SLICE$0.call(arguments, 1);
            return this.union.apply(this, iters);
          };
          Set.prototype.sort = function (comparator) {
            // Late binding
            return OrderedSet(sortFactory(this, comparator));
          };
          Set.prototype.sortBy = function (mapper, comparator) {
            // Late binding
            return OrderedSet(sortFactory(this, comparator, mapper));
          };
          Set.prototype.wasAltered = function () {
            return this._map.wasAltered();
          };
          Set.prototype.__iterate = function (fn, reverse) {
            var this$0 = this;
            return this._map.__iterate(function (_, k) {
              return fn(k, k, this$0);
            }, reverse);
          };
          Set.prototype.__iterator = function (type, reverse) {
            return this._map
              .map(function (_, k) {
                return k;
              })
              .__iterator(type, reverse);
          };
          Set.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            var newMap = this._map.__ensureOwner(ownerID);
            if (!ownerID) {
              this.__ownerID = ownerID;
              this._map = newMap;
              return this;
            }
            return this.__make(newMap, ownerID);
          };
          function isSet(maybeSet) {
            return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
          }
          Set.isSet = isSet;
          var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
          var SetPrototype = Set.prototype;
          SetPrototype[IS_SET_SENTINEL] = true;
          SetPrototype[DELETE] = SetPrototype.remove;
          SetPrototype.mergeDeep = SetPrototype.merge;
          SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
          SetPrototype.withMutations = MapPrototype.withMutations;
          SetPrototype.asMutable = MapPrototype.asMutable;
          SetPrototype.asImmutable = MapPrototype.asImmutable;
          SetPrototype.__empty = emptySet;
          SetPrototype.__make = makeSet;
          function updateSet(set, newMap) {
            if (set.__ownerID) {
              set.size = newMap.size;
              set._map = newMap;
              return set;
            }
            return newMap === set._map
              ? set
              : newMap.size === 0
              ? set.__empty()
              : set.__make(newMap);
          }
          function makeSet(map, ownerID) {
            var set = Object.create(SetPrototype);
            set.size = map ? map.size : 0;
            set._map = map;
            set.__ownerID = ownerID;
            return set;
          }
          var EMPTY_SET;
          function emptySet() {
            return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
          }
          createClass(OrderedSet, Set);
          // @pragma Construction
          function OrderedSet(value) {
            return value === null || value === undefined
              ? emptyOrderedSet()
              : isOrderedSet(value)
              ? value
              : emptyOrderedSet().withMutations(function (set) {
                  var iter = SetIterable(value);
                  assertNotInfinite(iter.size);
                  iter.forEach(function (v) {
                    return set.add(v);
                  });
                });
          }
          OrderedSet.of = function () {
            return this(arguments);
          };
          OrderedSet.fromKeys = function (value) {
            return this(KeyedIterable(value).keySeq());
          };
          OrderedSet.prototype.toString = function () {
            return this.__toString("OrderedSet {", "}");
          };
          function isOrderedSet(maybeOrderedSet) {
            return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
          }
          OrderedSet.isOrderedSet = isOrderedSet;
          var OrderedSetPrototype = OrderedSet.prototype;
          OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
          OrderedSetPrototype.__empty = emptyOrderedSet;
          OrderedSetPrototype.__make = makeOrderedSet;
          function makeOrderedSet(map, ownerID) {
            var set = Object.create(OrderedSetPrototype);
            set.size = map ? map.size : 0;
            set._map = map;
            set.__ownerID = ownerID;
            return set;
          }
          var EMPTY_ORDERED_SET;
          function emptyOrderedSet() {
            return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
          }
          createClass(Stack, IndexedCollection);
          // @pragma Construction
          function Stack(value) {
            return value === null || value === undefined
              ? emptyStack()
              : isStack(value)
              ? value
              : emptyStack().unshiftAll(value);
          }
          Stack.of = function () {
            return this(arguments);
          };
          Stack.prototype.toString = function () {
            return this.__toString("Stack [", "]");
          };
          // @pragma Access
          Stack.prototype.get = function (index, notSetValue) {
            var head = this._head;
            index = wrapIndex(this, index);
            while (head && index--) head = head.next;
            return head ? head.value : notSetValue;
          };
          Stack.prototype.peek = function () {
            return this._head && this._head.value;
          };
          // @pragma Modification
          Stack.prototype.push = function () {
            if (arguments.length === 0) return this;
            var newSize = this.size + arguments.length;
            var head = this._head;
            for (var ii = arguments.length - 1; ii >= 0; ii--)
              head = {
                value: arguments[ii],
                next: head,
              };
            if (this.__ownerID) {
              this.size = newSize;
              this._head = head;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return makeStack(newSize, head);
          };
          Stack.prototype.pushAll = function (iter) {
            iter = IndexedIterable(iter);
            if (iter.size === 0) return this;
            assertNotInfinite(iter.size);
            var newSize = this.size;
            var head = this._head;
            iter.reverse().forEach(function (value) {
              newSize++;
              head = {
                value: value,
                next: head,
              };
            });
            if (this.__ownerID) {
              this.size = newSize;
              this._head = head;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return makeStack(newSize, head);
          };
          Stack.prototype.pop = function () {
            return this.slice(1);
          };
          Stack.prototype.unshift = function () {
            return this.push.apply(this, arguments);
          };
          Stack.prototype.unshiftAll = function (iter) {
            return this.pushAll(iter);
          };
          Stack.prototype.shift = function () {
            return this.pop.apply(this, arguments);
          };
          Stack.prototype.clear = function () {
            if (this.size === 0) return this;
            if (this.__ownerID) {
              this.size = 0;
              this._head = undefined;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return emptyStack();
          };
          Stack.prototype.slice = function (begin, end) {
            if (wholeSlice(begin, end, this.size)) return this;
            var resolvedBegin = resolveBegin(begin, this.size);
            var resolvedEnd = resolveEnd(end, this.size);
            if (resolvedEnd !== this.size)
              // super.slice(begin, end);
              return IndexedCollection.prototype.slice.call(this, begin, end);
            var newSize = this.size - resolvedBegin;
            var head = this._head;
            while (resolvedBegin--) head = head.next;
            if (this.__ownerID) {
              this.size = newSize;
              this._head = head;
              this.__hash = undefined;
              this.__altered = true;
              return this;
            }
            return makeStack(newSize, head);
          };
          // @pragma Mutability
          Stack.prototype.__ensureOwner = function (ownerID) {
            if (ownerID === this.__ownerID) return this;
            if (!ownerID) {
              this.__ownerID = ownerID;
              this.__altered = false;
              return this;
            }
            return makeStack(this.size, this._head, ownerID, this.__hash);
          };
          // @pragma Iteration
          Stack.prototype.__iterate = function (fn, reverse) {
            if (reverse) return this.reverse().__iterate(fn);
            var iterations = 0;
            var node = this._head;
            while (node) {
              if (fn(node.value, iterations++, this) === false) break;
              node = node.next;
            }
            return iterations;
          };
          Stack.prototype.__iterator = function (type, reverse) {
            if (reverse) return this.reverse().__iterator(type);
            var iterations = 0;
            var node = this._head;
            return new Iterator(function () {
              if (node) {
                var value = node.value;
                node = node.next;
                return iteratorValue(type, iterations++, value);
              }
              return iteratorDone();
            });
          };
          function isStack(maybeStack) {
            return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
          }
          Stack.isStack = isStack;
          var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
          var StackPrototype = Stack.prototype;
          StackPrototype[IS_STACK_SENTINEL] = true;
          StackPrototype.withMutations = MapPrototype.withMutations;
          StackPrototype.asMutable = MapPrototype.asMutable;
          StackPrototype.asImmutable = MapPrototype.asImmutable;
          StackPrototype.wasAltered = MapPrototype.wasAltered;
          function makeStack(size, head, ownerID, hash) {
            var map = Object.create(StackPrototype);
            map.size = size;
            map._head = head;
            map.__ownerID = ownerID;
            map.__hash = hash;
            map.__altered = false;
            return map;
          }
          var EMPTY_STACK;
          function emptyStack() {
            return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
          }
          /**
           * Contributes additional methods to a constructor
           */ function mixin(ctor, methods) {
            var keyCopier = function (key) {
              ctor.prototype[key] = methods[key];
            };
            Object.keys(methods).forEach(keyCopier);
            Object.getOwnPropertySymbols &&
              Object.getOwnPropertySymbols(methods).forEach(keyCopier);
            return ctor;
          }
          Iterable.Iterator = Iterator;
          mixin(Iterable, {
            // ### Conversion to other types
            toArray: function () {
              assertNotInfinite(this.size);
              var array = new Array(this.size || 0);
              this.valueSeq().__iterate(function (v, i) {
                array[i] = v;
              });
              return array;
            },
            toIndexedSeq: function () {
              return new ToIndexedSequence(this);
            },
            toJS: function () {
              return this.toSeq()
                .map(function (value) {
                  return value && typeof value.toJS === "function" ? value.toJS() : value;
                })
                .__toJS();
            },
            toJSON: function () {
              return this.toSeq()
                .map(function (value) {
                  return value && typeof value.toJSON === "function" ? value.toJSON() : value;
                })
                .__toJS();
            },
            toKeyedSeq: function () {
              return new ToKeyedSequence(this, true);
            },
            toMap: function () {
              // Use Late Binding here to solve the circular dependency.
              return Map(this.toKeyedSeq());
            },
            toObject: function () {
              assertNotInfinite(this.size);
              var object = {};
              this.__iterate(function (v, k) {
                object[k] = v;
              });
              return object;
            },
            toOrderedMap: function () {
              // Use Late Binding here to solve the circular dependency.
              return OrderedMap(this.toKeyedSeq());
            },
            toOrderedSet: function () {
              // Use Late Binding here to solve the circular dependency.
              return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
            },
            toSet: function () {
              // Use Late Binding here to solve the circular dependency.
              return Set(isKeyed(this) ? this.valueSeq() : this);
            },
            toSetSeq: function () {
              return new ToSetSequence(this);
            },
            toSeq: function () {
              return isIndexed(this)
                ? this.toIndexedSeq()
                : isKeyed(this)
                ? this.toKeyedSeq()
                : this.toSetSeq();
            },
            toStack: function () {
              // Use Late Binding here to solve the circular dependency.
              return Stack(isKeyed(this) ? this.valueSeq() : this);
            },
            toList: function () {
              // Use Late Binding here to solve the circular dependency.
              return List(isKeyed(this) ? this.valueSeq() : this);
            },
            // ### Common JavaScript methods and properties
            toString: function () {
              return "[Iterable]";
            },
            __toString: function (head, tail) {
              if (this.size === 0) return head + tail;
              return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
            },
            // ### ES6 Collection methods (ES6 Array and Map)
            concat: function () {
              var values = SLICE$0.call(arguments, 0);
              return reify(this, concatFactory(this, values));
            },
            includes: function (searchValue) {
              return this.some(function (value) {
                return is(value, searchValue);
              });
            },
            entries: function () {
              return this.__iterator(ITERATE_ENTRIES);
            },
            every: function (predicate, context) {
              assertNotInfinite(this.size);
              var returnValue = true;
              this.__iterate(function (v, k, c) {
                if (!predicate.call(context, v, k, c)) {
                  returnValue = false;
                  return false;
                }
              });
              return returnValue;
            },
            filter: function (predicate, context) {
              return reify(this, filterFactory(this, predicate, context, true));
            },
            find: function (predicate, context, notSetValue) {
              var entry = this.findEntry(predicate, context);
              return entry ? entry[1] : notSetValue;
            },
            findEntry: function (predicate, context) {
              var found;
              this.__iterate(function (v, k, c) {
                if (predicate.call(context, v, k, c)) {
                  found = [k, v];
                  return false;
                }
              });
              return found;
            },
            findLastEntry: function (predicate, context) {
              return this.toSeq().reverse().findEntry(predicate, context);
            },
            forEach: function (sideEffect, context) {
              assertNotInfinite(this.size);
              return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
            },
            join: function (separator) {
              assertNotInfinite(this.size);
              separator = separator !== undefined ? "" + separator : ",";
              var joined = "";
              var isFirst = true;
              this.__iterate(function (v) {
                isFirst ? (isFirst = false) : (joined += separator);
                joined += v !== null && v !== undefined ? v.toString() : "";
              });
              return joined;
            },
            keys: function () {
              return this.__iterator(ITERATE_KEYS);
            },
            map: function (mapper, context) {
              return reify(this, mapFactory(this, mapper, context));
            },
            reduce: function (reducer, initialReduction, context) {
              assertNotInfinite(this.size);
              var reduction;
              var useFirst;
              if (arguments.length < 2) useFirst = true;
              else reduction = initialReduction;
              this.__iterate(function (v, k, c) {
                if (useFirst) {
                  useFirst = false;
                  reduction = v;
                } else reduction = reducer.call(context, reduction, v, k, c);
              });
              return reduction;
            },
            reduceRight: function (reducer, initialReduction, context) {
              var reversed = this.toKeyedSeq().reverse();
              return reversed.reduce.apply(reversed, arguments);
            },
            reverse: function () {
              return reify(this, reverseFactory(this, true));
            },
            slice: function (begin, end) {
              return reify(this, sliceFactory(this, begin, end, true));
            },
            some: function (predicate, context) {
              return !this.every(not(predicate), context);
            },
            sort: function (comparator) {
              return reify(this, sortFactory(this, comparator));
            },
            values: function () {
              return this.__iterator(ITERATE_VALUES);
            },
            // ### More sequential methods
            butLast: function () {
              return this.slice(0, -1);
            },
            isEmpty: function () {
              return this.size !== undefined
                ? this.size === 0
                : !this.some(function () {
                    return true;
                  });
            },
            count: function (predicate, context) {
              return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
            },
            countBy: function (grouper, context) {
              return countByFactory(this, grouper, context);
            },
            equals: function (other) {
              return deepEqual(this, other);
            },
            entrySeq: function () {
              var iterable = this;
              if (iterable._cache)
                // We cache as an entries array, so we can just return the cache!
                return new ArraySeq(iterable._cache);
              var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
              entriesSequence.fromEntrySeq = function () {
                return iterable.toSeq();
              };
              return entriesSequence;
            },
            filterNot: function (predicate, context) {
              return this.filter(not(predicate), context);
            },
            findLast: function (predicate, context, notSetValue) {
              return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
            },
            first: function () {
              return this.find(returnTrue);
            },
            flatMap: function (mapper, context) {
              return reify(this, flatMapFactory(this, mapper, context));
            },
            flatten: function (depth) {
              return reify(this, flattenFactory(this, depth, true));
            },
            fromEntrySeq: function () {
              return new FromEntriesSequence(this);
            },
            get: function (searchKey, notSetValue) {
              return this.find(
                function (_, key) {
                  return is(key, searchKey);
                },
                undefined,
                notSetValue,
              );
            },
            getIn: function (searchKeyPath, notSetValue) {
              var nested = this;
              // Note: in an ES6 environment, we would prefer:
              // for (var key of searchKeyPath) {
              var iter = forceIterator(searchKeyPath);
              var step;
              while (!(step = iter.next()).done) {
                var key = step.value;
                nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
                if (nested === NOT_SET) return notSetValue;
              }
              return nested;
            },
            groupBy: function (grouper, context) {
              return groupByFactory(this, grouper, context);
            },
            has: function (searchKey) {
              return this.get(searchKey, NOT_SET) !== NOT_SET;
            },
            hasIn: function (searchKeyPath) {
              return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
            },
            isSubset: function (iter) {
              iter = typeof iter.includes === "function" ? iter : Iterable(iter);
              return this.every(function (value) {
                return iter.includes(value);
              });
            },
            isSuperset: function (iter) {
              iter = typeof iter.isSubset === "function" ? iter : Iterable(iter);
              return iter.isSubset(this);
            },
            keySeq: function () {
              return this.toSeq().map(keyMapper).toIndexedSeq();
            },
            last: function () {
              return this.toSeq().reverse().first();
            },
            max: function (comparator) {
              return maxFactory(this, comparator);
            },
            maxBy: function (mapper, comparator) {
              return maxFactory(this, comparator, mapper);
            },
            min: function (comparator) {
              return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
            },
            minBy: function (mapper, comparator) {
              return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
            },
            rest: function () {
              return this.slice(1);
            },
            skip: function (amount) {
              return this.slice(Math.max(0, amount));
            },
            skipLast: function (amount) {
              return reify(this, this.toSeq().reverse().skip(amount).reverse());
            },
            skipWhile: function (predicate, context) {
              return reify(this, skipWhileFactory(this, predicate, context, true));
            },
            skipUntil: function (predicate, context) {
              return this.skipWhile(not(predicate), context);
            },
            sortBy: function (mapper, comparator) {
              return reify(this, sortFactory(this, comparator, mapper));
            },
            take: function (amount) {
              return this.slice(0, Math.max(0, amount));
            },
            takeLast: function (amount) {
              return reify(this, this.toSeq().reverse().take(amount).reverse());
            },
            takeWhile: function (predicate, context) {
              return reify(this, takeWhileFactory(this, predicate, context));
            },
            takeUntil: function (predicate, context) {
              return this.takeWhile(not(predicate), context);
            },
            valueSeq: function () {
              return this.toIndexedSeq();
            },
            // ### Hashable Object
            hashCode: function () {
              return this.__hash || (this.__hash = hashIterable(this));
            },
          });
          // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
          // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
          // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
          // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
          var IterablePrototype = Iterable.prototype;
          IterablePrototype[IS_ITERABLE_SENTINEL] = true;
          IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
          IterablePrototype.__toJS = IterablePrototype.toArray;
          IterablePrototype.__toStringMapper = quoteString;
          IterablePrototype.inspect = IterablePrototype.toSource = function () {
            return this.toString();
          };
          IterablePrototype.chain = IterablePrototype.flatMap;
          IterablePrototype.contains = IterablePrototype.includes;
          // Temporary warning about using length
          (function () {
            try {
              Object.defineProperty(IterablePrototype, "length", {
                get: function () {
                  if (!Iterable.noLengthWarning) {
                    var stack;
                    try {
                      throw new Error();
                    } catch (error) {
                      stack = error.stack;
                    }
                    if (stack.indexOf("_wrapObject") === -1) {
                      console &&
                        console.warn &&
                        console.warn(
                          "iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. " +
                            stack,
                        );
                      return this.size;
                    }
                  }
                },
              });
            } catch (e) {}
          })();
          mixin(KeyedIterable, {
            // ### More sequential methods
            flip: function () {
              return reify(this, flipFactory(this));
            },
            findKey: function (predicate, context) {
              var entry = this.findEntry(predicate, context);
              return entry && entry[0];
            },
            findLastKey: function (predicate, context) {
              return this.toSeq().reverse().findKey(predicate, context);
            },
            keyOf: function (searchValue) {
              return this.findKey(function (value) {
                return is(value, searchValue);
              });
            },
            lastKeyOf: function (searchValue) {
              return this.findLastKey(function (value) {
                return is(value, searchValue);
              });
            },
            mapEntries: function (mapper, context) {
              var this$0 = this;
              var iterations = 0;
              return reify(
                this,
                this.toSeq()
                  .map(function (v, k) {
                    return mapper.call(context, [k, v], iterations++, this$0);
                  })
                  .fromEntrySeq(),
              );
            },
            mapKeys: function (mapper, context) {
              var this$0 = this;
              return reify(
                this,
                this.toSeq()
                  .flip()
                  .map(function (k, v) {
                    return mapper.call(context, k, v, this$0);
                  })
                  .flip(),
              );
            },
          });
          var KeyedIterablePrototype = KeyedIterable.prototype;
          KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
          KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
          KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
          KeyedIterablePrototype.__toStringMapper = function (v, k) {
            return JSON.stringify(k) + ": " + quoteString(v);
          };
          mixin(IndexedIterable, {
            // ### Conversion to other types
            toKeyedSeq: function () {
              return new ToKeyedSequence(this, false);
            },
            // ### ES6 Collection methods (ES6 Array and Map)
            filter: function (predicate, context) {
              return reify(this, filterFactory(this, predicate, context, false));
            },
            findIndex: function (predicate, context) {
              var entry = this.findEntry(predicate, context);
              return entry ? entry[0] : -1;
            },
            indexOf: function (searchValue) {
              var key = this.toKeyedSeq().keyOf(searchValue);
              return key === undefined ? -1 : key;
            },
            lastIndexOf: function (searchValue) {
              var key = this.toKeyedSeq().reverse().keyOf(searchValue);
              return key === undefined ? -1 : key;
              // var index =
              // return this.toSeq().reverse().indexOf(searchValue);
            },
            reverse: function () {
              return reify(this, reverseFactory(this, false));
            },
            slice: function (begin, end) {
              return reify(this, sliceFactory(this, begin, end, false));
            },
            splice: function (index, removeNum /*, ...values*/) {
              var numArgs = arguments.length;
              removeNum = Math.max(removeNum | 0, 0);
              if (numArgs === 0 || (numArgs === 2 && !removeNum)) return this;
              // If index is negative, it should resolve relative to the size of the
              // collection. However size may be expensive to compute if not cached, so
              // only call count() if the number is in fact negative.
              index = resolveBegin(index, index < 0 ? this.count() : this.size);
              var spliced = this.slice(0, index);
              return reify(
                this,
                numArgs === 1
                  ? spliced
                  : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)),
              );
            },
            // ### More collection methods
            findLastIndex: function (predicate, context) {
              var key = this.toKeyedSeq().findLastKey(predicate, context);
              return key === undefined ? -1 : key;
            },
            first: function () {
              return this.get(0);
            },
            flatten: function (depth) {
              return reify(this, flattenFactory(this, depth, false));
            },
            get: function (index, notSetValue) {
              index = wrapIndex(this, index);
              return index < 0 ||
                this.size === Infinity ||
                (this.size !== undefined && index > this.size)
                ? notSetValue
                : this.find(
                    function (_, key) {
                      return key === index;
                    },
                    undefined,
                    notSetValue,
                  );
            },
            has: function (index) {
              index = wrapIndex(this, index);
              return (
                index >= 0 &&
                (this.size !== undefined
                  ? this.size === Infinity || index < this.size
                  : this.indexOf(index) !== -1)
              );
            },
            interpose: function (separator) {
              return reify(this, interposeFactory(this, separator));
            },
            interleave: function () {
              var iterables = [this].concat(arrCopy(arguments));
              var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
              var interleaved = zipped.flatten(true);
              if (zipped.size) interleaved.size = zipped.size * iterables.length;
              return reify(this, interleaved);
            },
            last: function () {
              return this.get(-1);
            },
            skipWhile: function (predicate, context) {
              return reify(this, skipWhileFactory(this, predicate, context, false));
            },
            zip: function () {
              var iterables = [this].concat(arrCopy(arguments));
              return reify(this, zipWithFactory(this, defaultZipper, iterables));
            },
            zipWith: function (zipper /*, ...iterables */) {
              var iterables = arrCopy(arguments);
              iterables[0] = this;
              return reify(this, zipWithFactory(this, zipper, iterables));
            },
          });
          IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
          IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
          mixin(SetIterable, {
            // ### ES6 Collection methods (ES6 Array and Map)
            get: function (value, notSetValue) {
              return this.has(value) ? value : notSetValue;
            },
            includes: function (value) {
              return this.has(value);
            },
            // ### More sequential methods
            keySeq: function () {
              return this.valueSeq();
            },
          });
          SetIterable.prototype.has = IterablePrototype.includes;
          // Mixin subclasses
          mixin(KeyedSeq, KeyedIterable.prototype);
          mixin(IndexedSeq, IndexedIterable.prototype);
          mixin(SetSeq, SetIterable.prototype);
          mixin(KeyedCollection, KeyedIterable.prototype);
          mixin(IndexedCollection, IndexedIterable.prototype);
          mixin(SetCollection, SetIterable.prototype);
          // #pragma Helper functions
          function keyMapper(v, k) {
            return k;
          }
          function entryMapper(v, k) {
            return [k, v];
          }
          function not(predicate) {
            return function () {
              return !predicate.apply(this, arguments);
            };
          }
          function neg(predicate) {
            return function () {
              return -predicate.apply(this, arguments);
            };
          }
          function quoteString(value) {
            return typeof value === "string" ? JSON.stringify(value) : value;
          }
          function defaultZipper() {
            return arrCopy(arguments);
          }
          function defaultNegComparator(a, b) {
            return a < b ? 1 : a > b ? -1 : 0;
          }
          function hashIterable(iterable) {
            if (iterable.size === Infinity) return 0;
            var ordered = isOrdered(iterable);
            var keyed = isKeyed(iterable);
            var h = ordered ? 1 : 0;
            var size = iterable.__iterate(
              keyed
                ? ordered
                  ? function (v, k) {
                      h = (31 * h + hashMerge(hash(v), hash(k))) | 0;
                    }
                  : function (v, k) {
                      h = (h + hashMerge(hash(v), hash(k))) | 0;
                    }
                : ordered
                ? function (v) {
                    h = (31 * h + hash(v)) | 0;
                  }
                : function (v) {
                    h = (h + hash(v)) | 0;
                  },
            );
            return murmurHashOfSize(size, h);
          }
          function murmurHashOfSize(size, h) {
            h = imul(h, 0xcc9e2d51);
            h = imul((h << 15) | (h >>> -15), 0x1b873593);
            h = imul((h << 13) | (h >>> -13), 5);
            h = ((h + 0xe6546b64) | 0) ^ size;
            h = imul(h ^ (h >>> 16), 0x85ebca6b);
            h = imul(h ^ (h >>> 13), 0xc2b2ae35);
            h = smi(h ^ (h >>> 16));
            return h;
          }
          function hashMerge(a, b) {
            return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int
          }
          var Immutable = {
            Iterable: Iterable,
            Seq: Seq,
            Collection: Collection,
            Map: Map,
            OrderedMap: OrderedMap,
            List: List,
            Stack: Stack,
            Set: Set,
            OrderedSet: OrderedSet,
            Record: Record,
            Range: Range,
            Repeat: Repeat,
            is: is,
            fromJS: fromJS,
          };
          return Immutable;
        });
      },
      {},
    ],
    "5sTZK": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var _require = require("e3119b19aeab70f8"),
          Map = _require.Map,
          OrderedSet = _require.OrderedSet,
          Record = _require.Record; // Immutable.map is typed such that the value for every key in the map
        // must be the same type
        var EMPTY_SET = OrderedSet();
        var defaultRecord = {
          style: EMPTY_SET,
          entity: null,
        };
        var CharacterMetadataRecord = Record(defaultRecord);
        var CharacterMetadata = /*#__PURE__*/ (function (_CharacterMetadataRec) {
          _inheritsLoose(CharacterMetadata, _CharacterMetadataRec);
          function CharacterMetadata() {
            return _CharacterMetadataRec.apply(this, arguments) || this;
          }
          var _proto = CharacterMetadata.prototype;
          _proto.getStyle = function getStyle() {
            return this.get("style");
          };
          _proto.getEntity = function getEntity() {
            return this.get("entity");
          };
          _proto.hasStyle = function hasStyle(style) {
            return this.getStyle().includes(style);
          };
          CharacterMetadata.applyStyle = function applyStyle(record, style) {
            var withStyle = record.set("style", record.getStyle().add(style));
            return CharacterMetadata.create(withStyle);
          };
          CharacterMetadata.removeStyle = function removeStyle(record, style) {
            var withoutStyle = record.set("style", record.getStyle().remove(style));
            return CharacterMetadata.create(withoutStyle);
          };
          CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {
            var withEntity =
              record.getEntity() === entityKey ? record : record.set("entity", entityKey);
            return CharacterMetadata.create(withEntity);
          }
          /**
           * Use this function instead of the `CharacterMetadata` constructor.
           * Since most content generally uses only a very small number of
           * style/entity permutations, we can reuse these objects as often as
           * possible.
           */;
          CharacterMetadata.create = function create(config) {
            if (!config) return EMPTY;
            var defaultConfig = {
              style: EMPTY_SET,
              entity: null,
            }; // Fill in unspecified properties, if necessary.
            var configMap = Map(defaultConfig).merge(config);
            var existing = pool.get(configMap);
            if (existing) return existing;
            var newCharacter = new CharacterMetadata(configMap);
            pool = pool.set(configMap, newCharacter);
            return newCharacter;
          };
          CharacterMetadata.fromJS = function fromJS(_ref) {
            var style = _ref.style,
              entity = _ref.entity;
            return new CharacterMetadata({
              style: Array.isArray(style) ? OrderedSet(style) : style,
              entity: Array.isArray(entity) ? OrderedSet(entity) : entity,
            });
          };
          return CharacterMetadata;
        })(CharacterMetadataRecord);
        var EMPTY = new CharacterMetadata();
        var pool = Map([[Map(defaultRecord), EMPTY]]);
        CharacterMetadata.EMPTY = EMPTY;
        module.exports = CharacterMetadata;
      },
      { e3119b19aeab70f8: "lhHDL" },
    ],
    hCjL2: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var CharacterMetadata = require("535b72004ba5214d");
        var findRangesImmutable = require("426766109d4ce37");
        var Immutable = require("3d04142b1a6b91f2");
        var List = Immutable.List,
          Map = Immutable.Map,
          OrderedSet = Immutable.OrderedSet,
          Record = Immutable.Record,
          Repeat = Immutable.Repeat;
        var EMPTY_SET = OrderedSet();
        var defaultRecord = {
          key: "",
          type: "unstyled",
          text: "",
          characterList: List(),
          depth: 0,
          data: Map(),
        };
        var ContentBlockRecord = Record(defaultRecord);
        var decorateCharacterList = function decorateCharacterList(config) {
          if (!config) return config;
          var characterList = config.characterList,
            text = config.text;
          if (text && !characterList)
            config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));
          return config;
        };
        var ContentBlock = /*#__PURE__*/ (function (_ContentBlockRecord) {
          _inheritsLoose(ContentBlock, _ContentBlockRecord);
          function ContentBlock(config) {
            return _ContentBlockRecord.call(this, decorateCharacterList(config)) || this;
          }
          var _proto = ContentBlock.prototype;
          _proto.getKey = function getKey() {
            return this.get("key");
          };
          _proto.getType = function getType() {
            return this.get("type");
          };
          _proto.getText = function getText() {
            return this.get("text");
          };
          _proto.getCharacterList = function getCharacterList() {
            return this.get("characterList");
          };
          _proto.getLength = function getLength() {
            return this.getText().length;
          };
          _proto.getDepth = function getDepth() {
            return this.get("depth");
          };
          _proto.getData = function getData() {
            return this.get("data");
          };
          _proto.getInlineStyleAt = function getInlineStyleAt(offset) {
            var character = this.getCharacterList().get(offset);
            return character ? character.getStyle() : EMPTY_SET;
          };
          _proto.getEntityAt = function getEntityAt(offset) {
            var character = this.getCharacterList().get(offset);
            return character ? character.getEntity() : null;
          }
          /**
           * Execute a callback for every contiguous range of styles within the block.
           */;
          _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {
            findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);
          }
          /**
           * Execute a callback for every contiguous range of entities within the block.
           */;
          _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {
            findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);
          };
          return ContentBlock;
        })(ContentBlockRecord);
        function haveEqualStyle(charA, charB) {
          return charA.getStyle() === charB.getStyle();
        }
        function haveEqualEntity(charA, charB) {
          return charA.getEntity() === charB.getEntity();
        }
        module.exports = ContentBlock;
      },
      { "535b72004ba5214d": "5sTZK", "426766109d4ce37": "1vrx7", "3d04142b1a6b91f2": "lhHDL" },
    ],
    "1vrx7": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Search through an array to find contiguous stretches of elements that
         * match a specified filter function.
         *
         * When ranges are found, execute a specified `found` function to supply
         * the values to the caller.
         */ function findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {
          if (!haystack.size) return;
          var cursor = 0;
          haystack.reduce(function (value, nextValue, nextIndex) {
            if (!areEqualFn(value, nextValue)) {
              if (filterFn(value)) foundFn(cursor, nextIndex);
              cursor = nextIndex;
            }
            return nextValue;
          });
          filterFn(haystack.last()) && foundFn(cursor, haystack.count());
        }
        module.exports = findRangesImmutable;
      },
      {},
    ],
    ketXe: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This file is a fork of ContentBlock adding support for nesting references by
         * providing links to children, parent, prevSibling, and nextSibling.
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var CharacterMetadata = require("7c071d4923d54c1d");
        var findRangesImmutable = require("40aeaede29a619ad");
        var Immutable = require("dba3ef1a148c4a2d");
        var List = Immutable.List,
          Map = Immutable.Map,
          OrderedSet = Immutable.OrderedSet,
          Record = Immutable.Record,
          Repeat = Immutable.Repeat;
        var EMPTY_SET = OrderedSet();
        var defaultRecord = {
          parent: null,
          characterList: List(),
          data: Map(),
          depth: 0,
          key: "",
          text: "",
          type: "unstyled",
          children: List(),
          prevSibling: null,
          nextSibling: null,
        };
        var haveEqualStyle = function haveEqualStyle(charA, charB) {
          return charA.getStyle() === charB.getStyle();
        };
        var haveEqualEntity = function haveEqualEntity(charA, charB) {
          return charA.getEntity() === charB.getEntity();
        };
        var decorateCharacterList = function decorateCharacterList(config) {
          if (!config) return config;
          var characterList = config.characterList,
            text = config.text;
          if (text && !characterList)
            config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));
          return config;
        };
        var ContentBlockNode = /*#__PURE__*/ (function (_ref) {
          _inheritsLoose(ContentBlockNode, _ref);
          function ContentBlockNode() {
            var props =
              arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRecord;
            /* eslint-disable-next-line constructor-super */ return (
              _ref.call(this, decorateCharacterList(props)) || this
            );
          }
          var _proto = ContentBlockNode.prototype;
          _proto.getKey = function getKey() {
            return this.get("key");
          };
          _proto.getType = function getType() {
            return this.get("type");
          };
          _proto.getText = function getText() {
            return this.get("text");
          };
          _proto.getCharacterList = function getCharacterList() {
            return this.get("characterList");
          };
          _proto.getLength = function getLength() {
            return this.getText().length;
          };
          _proto.getDepth = function getDepth() {
            return this.get("depth");
          };
          _proto.getData = function getData() {
            return this.get("data");
          };
          _proto.getInlineStyleAt = function getInlineStyleAt(offset) {
            var character = this.getCharacterList().get(offset);
            return character ? character.getStyle() : EMPTY_SET;
          };
          _proto.getEntityAt = function getEntityAt(offset) {
            var character = this.getCharacterList().get(offset);
            return character ? character.getEntity() : null;
          };
          _proto.getChildKeys = function getChildKeys() {
            return this.get("children");
          };
          _proto.getParentKey = function getParentKey() {
            return this.get("parent");
          };
          _proto.getPrevSiblingKey = function getPrevSiblingKey() {
            return this.get("prevSibling");
          };
          _proto.getNextSiblingKey = function getNextSiblingKey() {
            return this.get("nextSibling");
          };
          _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {
            findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);
          };
          _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {
            findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);
          };
          return ContentBlockNode;
        })(Record(defaultRecord));
        module.exports = ContentBlockNode;
      },
      { "7c071d4923d54c1d": "5sTZK", "40aeaede29a619ad": "1vrx7", dba3ef1a148c4a2d: "lhHDL" },
    ],
    aeLN8: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var CharacterMetadata = require("42d0028d877b9749");
        var ContentStateInlineStyle = require("33736603b3e0dcc5");
        var applyEntityToContentState = require("fe3ef6a557fcb405");
        var getCharacterRemovalRange = require("f35ad941f49b0658");
        var getContentStateFragment = require("e3abc4fa3b6b11d1");
        var Immutable = require("f298c9ce9de065c4");
        var insertFragmentIntoContentState = require("fb90dc6eb59a1fa1");
        var insertTextIntoContentState = require("97ead59b195df506");
        var invariant = require("cdcce36c3a6b0f5d");
        var modifyBlockForContentState = require("4096ead369b988b7");
        var removeEntitiesAtEdges = require("def10037d73caa3b");
        var removeRangeFromContentState = require("921c78827f354b25");
        var splitBlockInContentState = require("a86bce112c4d2fd5");
        var OrderedSet = Immutable.OrderedSet;
        /**
         * `DraftModifier` provides a set of convenience methods that apply
         * modifications to a `ContentState` object based on a target `SelectionState`.
         *
         * Any change to a `ContentState` should be decomposable into a series of
         * transaction functions that apply the required changes and return output
         * `ContentState` objects.
         *
         * These functions encapsulate some of the most common transaction sequences.
         */ var DraftModifier = {
          replaceText: function replaceText(
            contentState,
            rangeToReplace,
            text,
            inlineStyle,
            entityKey,
          ) {
            var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);
            var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);
            var character = CharacterMetadata.create({
              style: inlineStyle || OrderedSet(),
              entity: entityKey || null,
            });
            return insertTextIntoContentState(
              withoutText,
              withoutText.getSelectionAfter(),
              text,
              character,
            );
          },
          insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {
            !targetRange.isCollapsed() &&
              invariant(false, "Target range must be collapsed for `insertText`.");
            return DraftModifier.replaceText(
              contentState,
              targetRange,
              text,
              inlineStyle,
              entityKey,
            );
          },
          moveText: function moveText(contentState, removalRange, targetRange) {
            var movedFragment = getContentStateFragment(contentState, removalRange);
            var afterRemoval = DraftModifier.removeRange(contentState, removalRange, "backward");
            return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);
          },
          replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {
            var mergeBlockData =
              arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : "REPLACE_WITH_NEW_DATA";
            var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);
            var withoutText = removeRangeFromContentState(withoutEntities, targetRange);
            return insertFragmentIntoContentState(
              withoutText,
              withoutText.getSelectionAfter(),
              fragment,
              mergeBlockData,
            );
          },
          removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {
            var startKey, endKey, startBlock, endBlock;
            if (rangeToRemove.getIsBackward())
              rangeToRemove = rangeToRemove.merge({
                anchorKey: rangeToRemove.getFocusKey(),
                anchorOffset: rangeToRemove.getFocusOffset(),
                focusKey: rangeToRemove.getAnchorKey(),
                focusOffset: rangeToRemove.getAnchorOffset(),
                isBackward: false,
              });
            startKey = rangeToRemove.getAnchorKey();
            endKey = rangeToRemove.getFocusKey();
            startBlock = contentState.getBlockForKey(startKey);
            endBlock = contentState.getBlockForKey(endKey);
            var startOffset = rangeToRemove.getStartOffset();
            var endOffset = rangeToRemove.getEndOffset();
            var startEntityKey = startBlock.getEntityAt(startOffset);
            var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.
            // If so, try to remove the appropriate substring of the entity text.
            if (startKey === endKey) {
              if (startEntityKey && startEntityKey === endEntityKey) {
                var adjustedRemovalRange = getCharacterRemovalRange(
                  contentState.getEntityMap(),
                  startBlock,
                  endBlock,
                  rangeToRemove,
                  removalDirection,
                );
                return removeRangeFromContentState(contentState, adjustedRemovalRange);
              }
            }
            var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);
            return removeRangeFromContentState(withoutEntities, rangeToRemove);
          },
          splitBlock: function splitBlock(contentState, selectionState) {
            var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
            var withoutText = removeRangeFromContentState(withoutEntities, selectionState);
            return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());
          },
          applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {
            return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);
          },
          removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {
            return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);
          },
          setBlockType: function setBlockType(contentState, selectionState, blockType) {
            return modifyBlockForContentState(contentState, selectionState, function (block) {
              return block.merge({
                type: blockType,
                depth: 0,
              });
            });
          },
          setBlockData: function setBlockData(contentState, selectionState, blockData) {
            return modifyBlockForContentState(contentState, selectionState, function (block) {
              return block.merge({
                data: blockData,
              });
            });
          },
          mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {
            return modifyBlockForContentState(contentState, selectionState, function (block) {
              return block.merge({
                data: block.getData().merge(blockData),
              });
            });
          },
          applyEntity: function applyEntity(contentState, selectionState, entityKey) {
            var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
            return applyEntityToContentState(withoutEntities, selectionState, entityKey);
          },
        };
        module.exports = DraftModifier;
      },
      {
        "42d0028d877b9749": "5sTZK",
        "33736603b3e0dcc5": "kh09z",
        fe3ef6a557fcb405: "47VcF",
        f35ad941f49b0658: "l0ozl",
        e3abc4fa3b6b11d1: "kdkQl",
        f298c9ce9de065c4: "lhHDL",
        fb90dc6eb59a1fa1: "dZVX9",
        "97ead59b195df506": "hEh2a",
        cdcce36c3a6b0f5d: "d6MgO",
        "4096ead369b988b7": "g6CEz",
        def10037d73caa3b: "bD0Zb",
        "921c78827f354b25": "8CtaB",
        a86bce112c4d2fd5: "bSYWE",
      },
    ],
    kh09z: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var CharacterMetadata = require("aa4bcfb63502011d");
        var _require = require("1f2f4f89957e4c43"),
          Map = _require.Map;
        var ContentStateInlineStyle = {
          add: function add(contentState, selectionState, inlineStyle) {
            return modifyInlineStyle(contentState, selectionState, inlineStyle, true);
          },
          remove: function remove(contentState, selectionState, inlineStyle) {
            return modifyInlineStyle(contentState, selectionState, inlineStyle, false);
          },
        };
        function modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {
          var blockMap = contentState.getBlockMap();
          var startKey = selectionState.getStartKey();
          var startOffset = selectionState.getStartOffset();
          var endKey = selectionState.getEndKey();
          var endOffset = selectionState.getEndOffset();
          var newBlocks = blockMap
            .skipUntil(function (_, k) {
              return k === startKey;
            })
            .takeUntil(function (_, k) {
              return k === endKey;
            })
            .concat(Map([[endKey, blockMap.get(endKey)]]))
            .map(function (block, blockKey) {
              var sliceStart;
              var sliceEnd;
              if (startKey === endKey) {
                sliceStart = startOffset;
                sliceEnd = endOffset;
              } else {
                sliceStart = blockKey === startKey ? startOffset : 0;
                sliceEnd = blockKey === endKey ? endOffset : block.getLength();
              }
              var chars = block.getCharacterList();
              var current;
              while (sliceStart < sliceEnd) {
                current = chars.get(sliceStart);
                chars = chars.set(
                  sliceStart,
                  addOrRemove
                    ? CharacterMetadata.applyStyle(current, inlineStyle)
                    : CharacterMetadata.removeStyle(current, inlineStyle),
                );
                sliceStart++;
              }
              return block.set("characterList", chars);
            });
          return contentState.merge({
            blockMap: blockMap.merge(newBlocks),
            selectionBefore: selectionState,
            selectionAfter: selectionState,
          });
        }
        module.exports = ContentStateInlineStyle;
      },
      { aa4bcfb63502011d: "5sTZK", "1f2f4f89957e4c43": "lhHDL" },
    ],
    "47VcF": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var applyEntityToContentBlock = require("1b47aae1d46c1970");
        var Immutable = require("271c0b1d75fca2d4");
        function applyEntityToContentState(contentState, selectionState, entityKey) {
          var blockMap = contentState.getBlockMap();
          var startKey = selectionState.getStartKey();
          var startOffset = selectionState.getStartOffset();
          var endKey = selectionState.getEndKey();
          var endOffset = selectionState.getEndOffset();
          var newBlocks = blockMap
            .skipUntil(function (_, k) {
              return k === startKey;
            })
            .takeUntil(function (_, k) {
              return k === endKey;
            })
            .toOrderedMap()
            .merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]]))
            .map(function (block, blockKey) {
              var sliceStart = blockKey === startKey ? startOffset : 0;
              var sliceEnd = blockKey === endKey ? endOffset : block.getLength();
              return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);
            });
          return contentState.merge({
            blockMap: blockMap.merge(newBlocks),
            selectionBefore: selectionState,
            selectionAfter: selectionState,
          });
        }
        module.exports = applyEntityToContentState;
      },
      { "1b47aae1d46c1970": "9Wr0x", "271c0b1d75fca2d4": "lhHDL" },
    ],
    "9Wr0x": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var CharacterMetadata = require("36fe7499100e3abb");
        function applyEntityToContentBlock(contentBlock, startArg, end, entityKey) {
          var start = startArg;
          var characterList = contentBlock.getCharacterList();
          while (start < end) {
            characterList = characterList.set(
              start,
              CharacterMetadata.applyEntity(characterList.get(start), entityKey),
            );
            start++;
          }
          return contentBlock.set("characterList", characterList);
        }
        module.exports = applyEntityToContentBlock;
      },
      { "36fe7499100e3abb": "5sTZK" },
    ],
    l0ozl: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftEntitySegments = require("7cc6d8ee5d5a3cdc");
        var getRangesForDraftEntity = require("3d68071e4f9a9e4d");
        var invariant = require("86d1f54ac6977c31");
        /**
         * Given a SelectionState and a removal direction, determine the entire range
         * that should be removed from a ContentState. This is based on any entities
         * within the target, with their `mutability` values taken into account.
         *
         * For instance, if we are attempting to remove part of an "immutable" entity
         * range, the entire entity must be removed. The returned `SelectionState`
         * will be adjusted accordingly.
         */ function getCharacterRemovalRange(
          entityMap,
          startBlock,
          endBlock,
          selectionState,
          direction,
        ) {
          var start = selectionState.getStartOffset();
          var end = selectionState.getEndOffset();
          var startEntityKey = startBlock.getEntityAt(start);
          var endEntityKey = endBlock.getEntityAt(end - 1);
          if (!startEntityKey && !endEntityKey) return selectionState;
          var newSelectionState = selectionState;
          if (startEntityKey && startEntityKey === endEntityKey)
            newSelectionState = getEntityRemovalRange(
              entityMap,
              startBlock,
              newSelectionState,
              direction,
              startEntityKey,
              true,
              true,
            );
          else if (startEntityKey && endEntityKey) {
            var startSelectionState = getEntityRemovalRange(
              entityMap,
              startBlock,
              newSelectionState,
              direction,
              startEntityKey,
              false,
              true,
            );
            var endSelectionState = getEntityRemovalRange(
              entityMap,
              endBlock,
              newSelectionState,
              direction,
              endEntityKey,
              false,
              false,
            );
            newSelectionState = newSelectionState.merge({
              anchorOffset: startSelectionState.getAnchorOffset(),
              focusOffset: endSelectionState.getFocusOffset(),
              isBackward: false,
            });
          } else if (startEntityKey) {
            var _startSelectionState = getEntityRemovalRange(
              entityMap,
              startBlock,
              newSelectionState,
              direction,
              startEntityKey,
              false,
              true,
            );
            newSelectionState = newSelectionState.merge({
              anchorOffset: _startSelectionState.getStartOffset(),
              isBackward: false,
            });
          } else if (endEntityKey) {
            var _endSelectionState = getEntityRemovalRange(
              entityMap,
              endBlock,
              newSelectionState,
              direction,
              endEntityKey,
              false,
              false,
            );
            newSelectionState = newSelectionState.merge({
              focusOffset: _endSelectionState.getEndOffset(),
              isBackward: false,
            });
          }
          return newSelectionState;
        }
        function getEntityRemovalRange(
          entityMap,
          block,
          selectionState,
          direction,
          entityKey,
          isEntireSelectionWithinEntity,
          isEntityAtStart,
        ) {
          var start = selectionState.getStartOffset();
          var end = selectionState.getEndOffset();
          var entity = entityMap.__get(entityKey);
          var mutability = entity.getMutability();
          var sideToConsider = isEntityAtStart ? start : end; // `MUTABLE` entities can just have the specified range of text removed
          // directly. No adjustments are needed.
          if (mutability === "MUTABLE") return selectionState;
          // Find the entity range that overlaps with our removal range.
          var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function (range) {
            return sideToConsider <= range.end && sideToConsider >= range.start;
          });
          !(entityRanges.length == 1) &&
            invariant(false, "There should only be one entity range within this removal range.");
          var entityRange = entityRanges[0]; // For `IMMUTABLE` entity types, we will remove the entire entity range.
          if (mutability === "IMMUTABLE")
            return selectionState.merge({
              anchorOffset: entityRange.start,
              focusOffset: entityRange.end,
              isBackward: false,
            });
          // For `SEGMENTED` entity types, determine the appropriate segment to
          // remove.
          if (!isEntireSelectionWithinEntity) {
            if (isEntityAtStart) end = entityRange.end;
            else start = entityRange.start;
          }
          var removalRange = DraftEntitySegments.getRemovalRange(
            start,
            end,
            block.getText().slice(entityRange.start, entityRange.end),
            entityRange.start,
            direction,
          );
          return selectionState.merge({
            anchorOffset: removalRange.start,
            focusOffset: removalRange.end,
            isBackward: false,
          });
        }
        module.exports = getCharacterRemovalRange;
      },
      { "7cc6d8ee5d5a3cdc": "gpzvI", "3d68071e4f9a9e4d": "fFdZy", "86d1f54ac6977c31": "d6MgO" },
    ],
    gpzvI: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Identify the range to delete from a segmented entity.
         *
         * Rules:
         *
         *  Example: 'John F. Kennedy'
         *
         *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])
         *     will return the range of that text.
         *
         *       'John F. Kennedy' -> 'John F.'
         *                  ^
         *
         *   - Forward deletion of whitespace will remove the following section:
         *
         *       'John F. Kennedy' -> 'John Kennedy'
         *            ^
         *
         *   - Backward deletion of whitespace will remove the previous section:
         *
         *       'John F. Kennedy' -> 'F. Kennedy'
         *            ^
         */ var DraftEntitySegments = {
          getRemovalRange: function getRemovalRange(
            selectionStart,
            selectionEnd,
            text,
            entityStart,
            direction,
          ) {
            var segments = text.split(" ");
            segments = segments.map(function (/*string*/ segment, /*number*/ ii) {
              if (direction === "forward") {
                if (ii > 0) return " " + segment;
              } else if (ii < segments.length - 1) return segment + " ";
              return segment;
            });
            var segmentStart = entityStart;
            var segmentEnd;
            var segment;
            var removalStart = null;
            var removalEnd = null;
            for (var jj = 0; jj < segments.length; jj++) {
              segment = segments[jj];
              segmentEnd = segmentStart + segment.length; // Our selection overlaps this segment.
              if (selectionStart < segmentEnd && segmentStart < selectionEnd) {
                if (removalStart !== null) removalEnd = segmentEnd;
                else {
                  removalStart = segmentStart;
                  removalEnd = segmentEnd;
                }
              } else if (removalStart !== null) break;
              segmentStart = segmentEnd;
            }
            var entityEnd = entityStart + text.length;
            var atStart = removalStart === entityStart;
            var atEnd = removalEnd === entityEnd;
            if ((!atStart && atEnd) || (atStart && !atEnd)) {
              if (direction === "forward") {
                if (removalEnd !== entityEnd) removalEnd++;
              } else if (removalStart !== entityStart) removalStart--;
            }
            return {
              start: removalStart,
              end: removalEnd,
            };
          },
        };
        module.exports = DraftEntitySegments;
      },
      {},
    ],
    fFdZy: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var invariant = require("59eeff5b62ec344f");
        /**
         * Obtain the start and end positions of the range that has the
         * specified entity applied to it.
         *
         * Entity keys are applied only to contiguous stretches of text, so this
         * method searches for the first instance of the entity key and returns
         * the subsequent range.
         */ function getRangesForDraftEntity(block, key) {
          var ranges = [];
          block.findEntityRanges(
            function (c) {
              return c.getEntity() === key;
            },
            function (start, end) {
              ranges.push({
                start: start,
                end: end,
              });
            },
          );
          !!!ranges.length && invariant(false, "Entity key not found in this range.");
          return ranges;
        }
        module.exports = getRangesForDraftEntity;
      },
      { "59eeff5b62ec344f": "d6MgO" },
    ],
    d6MgO: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */ "use strict";
        var validateFormat = function (format) {
          if (format === undefined)
            throw new Error("invariant(...): Second argument must be a string.");
        };
        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments to provide
         * information about what broke and what you were expecting.
         *
         * The invariant message will be stripped in production, but the invariant will
         * remain to ensure logic does not differ in production.
         */ function invariant(condition, format) {
          for (
            var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2;
            _key < _len;
            _key++
          )
            args[_key - 2] = arguments[_key];
          validateFormat(format);
          if (!condition) {
            var error;
            if (format === undefined)
              error = new Error(
                "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.",
              );
            else {
              var argIndex = 0;
              error = new Error(
                format.replace(/%s/g, function () {
                  return String(args[argIndex++]);
                }),
              );
              error.name = "Invariant Violation";
            }
            error.framesToPop = 1; // Skip invariant's own stack frame.
            throw error;
          }
        }
        module.exports = invariant;
      },
      {},
    ],
    kdkQl: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var randomizeBlockMapKeys = require("b6350eb3b9b1217c");
        var removeEntitiesAtEdges = require("3ae7e52df4ef06e");
        var getContentStateFragment = function getContentStateFragment(
          contentState,
          selectionState,
        ) {
          var startKey = selectionState.getStartKey();
          var startOffset = selectionState.getStartOffset();
          var endKey = selectionState.getEndKey();
          var endOffset = selectionState.getEndOffset(); // Edge entities should be stripped to ensure that we don't preserve
          // invalid partial entities when the fragment is reused. We do, however,
          // preserve entities that are entirely within the selection range.
          var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);
          var blockMap = contentWithoutEdgeEntities.getBlockMap();
          var blockKeys = blockMap.keySeq();
          var startIndex = blockKeys.indexOf(startKey);
          var endIndex = blockKeys.indexOf(endKey) + 1;
          return randomizeBlockMapKeys(
            blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {
              var text = block.getText();
              var chars = block.getCharacterList();
              if (startKey === endKey)
                return block.merge({
                  text: text.slice(startOffset, endOffset),
                  characterList: chars.slice(startOffset, endOffset),
                });
              if (blockKey === startKey)
                return block.merge({
                  text: text.slice(startOffset),
                  characterList: chars.slice(startOffset),
                });
              if (blockKey === endKey)
                return block.merge({
                  text: text.slice(0, endOffset),
                  characterList: chars.slice(0, endOffset),
                });
              return block;
            }),
          );
        };
        module.exports = getContentStateFragment;
      },
      { b6350eb3b9b1217c: "aBGqI", "3ae7e52df4ef06e": "bD0Zb" },
    ],
    aBGqI: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var ContentBlockNode = require("97605aa2d29e9c9f");
        var generateRandomKey = require("37850736974886f4");
        var Immutable = require("f758ec4092e376bb");
        var OrderedMap = Immutable.OrderedMap;
        var randomizeContentBlockNodeKeys = function randomizeContentBlockNodeKeys(blockMap) {
          var newKeysRef = {}; // we keep track of root blocks in order to update subsequent sibling links
          var lastRootBlock;
          return OrderedMap(
            blockMap
              .withMutations(function (blockMapState) {
                blockMapState.forEach(function (block, index) {
                  var oldKey = block.getKey();
                  var nextKey = block.getNextSiblingKey();
                  var prevKey = block.getPrevSiblingKey();
                  var childrenKeys = block.getChildKeys();
                  var parentKey = block.getParentKey(); // new key that we will use to build linking
                  var key = generateRandomKey(); // we will add it here to re-use it later
                  newKeysRef[oldKey] = key;
                  if (nextKey) {
                    var nextBlock = blockMapState.get(nextKey);
                    if (nextBlock) blockMapState.setIn([nextKey, "prevSibling"], key);
                    // this can happen when generating random keys for fragments
                    else blockMapState.setIn([oldKey, "nextSibling"], null);
                  }
                  if (prevKey) {
                    var prevBlock = blockMapState.get(prevKey);
                    if (prevBlock) blockMapState.setIn([prevKey, "nextSibling"], key);
                    // this can happen when generating random keys for fragments
                    else blockMapState.setIn([oldKey, "prevSibling"], null);
                  }
                  if (parentKey && blockMapState.get(parentKey)) {
                    var parentBlock = blockMapState.get(parentKey);
                    var parentChildrenList = parentBlock.getChildKeys();
                    blockMapState.setIn(
                      [parentKey, "children"],
                      parentChildrenList.set(parentChildrenList.indexOf(block.getKey()), key),
                    );
                  } else {
                    // blocks will then be treated as root block nodes
                    blockMapState.setIn([oldKey, "parent"], null);
                    if (lastRootBlock) {
                      blockMapState.setIn([lastRootBlock.getKey(), "nextSibling"], key);
                      blockMapState.setIn(
                        [oldKey, "prevSibling"],
                        newKeysRef[lastRootBlock.getKey()],
                      );
                    }
                    lastRootBlock = blockMapState.get(oldKey);
                  }
                  childrenKeys.forEach(function (childKey) {
                    var childBlock = blockMapState.get(childKey);
                    if (childBlock) blockMapState.setIn([childKey, "parent"], key);
                    else
                      blockMapState.setIn(
                        [oldKey, "children"],
                        block.getChildKeys().filter(function (child) {
                          return child !== childKey;
                        }),
                      );
                  });
                });
              })
              .toArray()
              .map(function (block) {
                return [newKeysRef[block.getKey()], block.set("key", newKeysRef[block.getKey()])];
              }),
          );
        };
        var randomizeContentBlockKeys = function randomizeContentBlockKeys(blockMap) {
          return OrderedMap(
            blockMap.toArray().map(function (block) {
              var key = generateRandomKey();
              return [key, block.set("key", key)];
            }),
          );
        };
        var randomizeBlockMapKeys = function randomizeBlockMapKeys(blockMap) {
          var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;
          if (!isTreeBasedBlockMap) return randomizeContentBlockKeys(blockMap);
          return randomizeContentBlockNodeKeys(blockMap);
        };
        module.exports = randomizeBlockMapKeys;
      },
      { "97605aa2d29e9c9f": "ketXe", "37850736974886f4": "fgtnr", f758ec4092e376bb: "lhHDL" },
    ],
    fgtnr: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var seenKeys = {};
        var MULTIPLIER = Math.pow(2, 24);
        function generateRandomKey() {
          var key;
          while (key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key))
            key = Math.floor(Math.random() * MULTIPLIER).toString(32);
          seenKeys[key] = true;
          return key;
        }
        module.exports = generateRandomKey;
      },
      {},
    ],
    bD0Zb: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var CharacterMetadata = require("178e212a4f5d9088");
        var findRangesImmutable = require("df70302cfb629a11");
        var invariant = require("cc6aa60ec57e73ec");
        function removeEntitiesAtEdges(contentState, selectionState) {
          var blockMap = contentState.getBlockMap();
          var entityMap = contentState.getEntityMap();
          var updatedBlocks = {};
          var startKey = selectionState.getStartKey();
          var startOffset = selectionState.getStartOffset();
          var startBlock = blockMap.get(startKey);
          var updatedStart = removeForBlock(entityMap, startBlock, startOffset);
          if (updatedStart !== startBlock) updatedBlocks[startKey] = updatedStart;
          var endKey = selectionState.getEndKey();
          var endOffset = selectionState.getEndOffset();
          var endBlock = blockMap.get(endKey);
          if (startKey === endKey) endBlock = updatedStart;
          var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);
          if (updatedEnd !== endBlock) updatedBlocks[endKey] = updatedEnd;
          if (!Object.keys(updatedBlocks).length)
            return contentState.set("selectionAfter", selectionState);
          return contentState.merge({
            blockMap: blockMap.merge(updatedBlocks),
            selectionAfter: selectionState,
          });
        }
        /**
         * Given a list of characters and an offset that is in the middle of an entity,
         * returns the start and end of the entity that is overlapping the offset.
         * Note: This method requires that the offset be in an entity range.
         */ function getRemovalRange(characters, entityKey, offset) {
          var removalRange; // Iterates through a list looking for ranges of matching items
          // based on the 'isEqual' callback.
          // Then instead of returning the result, call the 'found' callback
          // with each range.
          // Then filters those ranges based on the 'filter' callback
          //
          // Here we use it to find ranges of characters with the same entity key.
          findRangesImmutable(
            characters,
            function (a, b) {
              return a.getEntity() === b.getEntity();
            },
            function (element) {
              return element.getEntity() === entityKey;
            },
            function (start, end) {
              // 'found' callback
              if (start <= offset && end >= offset)
                // this entity overlaps the offset index
                removalRange = {
                  start: start,
                  end: end,
                };
            },
          );
          !(typeof removalRange === "object") &&
            invariant(false, "Removal range must exist within character list.");
          return removalRange;
        }
        function removeForBlock(entityMap, block, offset) {
          var chars = block.getCharacterList();
          var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;
          var charAfter = offset < chars.count() ? chars.get(offset) : undefined;
          var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;
          var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;
          if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {
            var entity = entityMap.__get(entityAfterCursor);
            if (entity.getMutability() !== "MUTABLE") {
              var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset),
                start = _getRemovalRange.start,
                end = _getRemovalRange.end;
              var current;
              while (start < end) {
                current = chars.get(start);
                chars = chars.set(start, CharacterMetadata.applyEntity(current, null));
                start++;
              }
              return block.set("characterList", chars);
            }
          }
          return block;
        }
        module.exports = removeEntitiesAtEdges;
      },
      { "178e212a4f5d9088": "5sTZK", df70302cfb629a11: "1vrx7", cc6aa60ec57e73ec: "d6MgO" },
    ],
    dZVX9: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var BlockMapBuilder = require("1e6aa9b7fe197ce4");
        var ContentBlockNode = require("dae0d227ee8db298");
        var Immutable = require("7b02199c24ae8906");
        var insertIntoList = require("900a400cdb26a7d2");
        var invariant = require("3aa8b264d1154d11");
        var randomizeBlockMapKeys = require("61f677d2269aaded");
        var List = Immutable.List;
        var updateExistingBlock = function updateExistingBlock(
          contentState,
          selectionState,
          blockMap,
          fragmentBlock,
          targetKey,
          targetOffset,
        ) {
          var mergeBlockData =
            arguments.length > 6 && arguments[6] !== undefined
              ? arguments[6]
              : "REPLACE_WITH_NEW_DATA";
          var targetBlock = blockMap.get(targetKey);
          var text = targetBlock.getText();
          var chars = targetBlock.getCharacterList();
          var finalKey = targetKey;
          var finalOffset = targetOffset + fragmentBlock.getText().length;
          var data = null;
          switch (mergeBlockData) {
            case "MERGE_OLD_DATA_TO_NEW_DATA":
              data = fragmentBlock.getData().merge(targetBlock.getData());
              break;
            case "REPLACE_WITH_NEW_DATA":
              data = fragmentBlock.getData();
              break;
          }
          var type = targetBlock.getType();
          if (text && type === "unstyled") type = fragmentBlock.getType();
          var newBlock = targetBlock.merge({
            text: text.slice(0, targetOffset) + fragmentBlock.getText() + text.slice(targetOffset),
            characterList: insertIntoList(chars, fragmentBlock.getCharacterList(), targetOffset),
            type: type,
            data: data,
          });
          return contentState.merge({
            blockMap: blockMap.set(targetKey, newBlock),
            selectionBefore: selectionState,
            selectionAfter: selectionState.merge({
              anchorKey: finalKey,
              anchorOffset: finalOffset,
              focusKey: finalKey,
              focusOffset: finalOffset,
              isBackward: false,
            }),
          });
        };
        /**
         * Appends text/characterList from the fragment first block to
         * target block.
         */ var updateHead = function updateHead(block, targetOffset, fragment) {
          var text = block.getText();
          var chars = block.getCharacterList(); // Modify head portion of block.
          var headText = text.slice(0, targetOffset);
          var headCharacters = chars.slice(0, targetOffset);
          var appendToHead = fragment.first();
          return block.merge({
            text: headText + appendToHead.getText(),
            characterList: headCharacters.concat(appendToHead.getCharacterList()),
            type: headText ? block.getType() : appendToHead.getType(),
            data: appendToHead.getData(),
          });
        };
        /**
         * Appends offset text/characterList from the target block to the last
         * fragment block.
         */ var updateTail = function updateTail(block, targetOffset, fragment) {
          // Modify tail portion of block.
          var text = block.getText();
          var chars = block.getCharacterList(); // Modify head portion of block.
          var blockSize = text.length;
          var tailText = text.slice(targetOffset, blockSize);
          var tailCharacters = chars.slice(targetOffset, blockSize);
          var prependToTail = fragment.last();
          return prependToTail.merge({
            text: prependToTail.getText() + tailText,
            characterList: prependToTail.getCharacterList().concat(tailCharacters),
            data: prependToTail.getData(),
          });
        };
        var getRootBlocks = function getRootBlocks(block, blockMap) {
          var headKey = block.getKey();
          var rootBlock = block;
          var rootBlocks = []; // sometimes the fragment head block will not be part of the blockMap itself this can happen when
          // the fragment head is used to update the target block, however when this does not happen we need
          // to make sure that we include it on the rootBlocks since the first block of a fragment is always a
          // fragment root block
          if (blockMap.get(headKey)) rootBlocks.push(headKey);
          while (rootBlock && rootBlock.getNextSiblingKey()) {
            var lastSiblingKey = rootBlock.getNextSiblingKey();
            if (!lastSiblingKey) break;
            rootBlocks.push(lastSiblingKey);
            rootBlock = blockMap.get(lastSiblingKey);
          }
          return rootBlocks;
        };
        var updateBlockMapLinks = function updateBlockMapLinks(
          blockMap,
          originalBlockMap,
          targetBlock,
          fragmentHeadBlock,
        ) {
          return blockMap.withMutations(function (blockMapState) {
            var targetKey = targetBlock.getKey();
            var headKey = fragmentHeadBlock.getKey();
            var targetNextKey = targetBlock.getNextSiblingKey();
            var targetParentKey = targetBlock.getParentKey();
            var fragmentRootBlocks = getRootBlocks(fragmentHeadBlock, blockMap);
            var lastRootFragmentBlockKey = fragmentRootBlocks[fragmentRootBlocks.length - 1];
            if (blockMapState.get(headKey)) {
              // update the fragment head when it is part of the blockMap otherwise
              blockMapState.setIn([targetKey, "nextSibling"], headKey);
              blockMapState.setIn([headKey, "prevSibling"], targetKey);
            } else {
              // update the target block that had the fragment head contents merged into it
              blockMapState.setIn(
                [targetKey, "nextSibling"],
                fragmentHeadBlock.getNextSiblingKey(),
              );
              blockMapState.setIn(
                [fragmentHeadBlock.getNextSiblingKey(), "prevSibling"],
                targetKey,
              );
            } // update the last root block fragment
            blockMapState.setIn([lastRootFragmentBlockKey, "nextSibling"], targetNextKey); // update the original target next block
            if (targetNextKey)
              blockMapState.setIn([targetNextKey, "prevSibling"], lastRootFragmentBlockKey);
            // update fragment parent links
            fragmentRootBlocks.forEach(function (blockKey) {
              return blockMapState.setIn([blockKey, "parent"], targetParentKey);
            }); // update targetBlock parent child links
            if (targetParentKey) {
              var targetParent = blockMap.get(targetParentKey);
              var originalTargetParentChildKeys = targetParent.getChildKeys();
              var targetBlockIndex = originalTargetParentChildKeys.indexOf(targetKey);
              var insertionIndex = targetBlockIndex + 1;
              var newChildrenKeysArray = originalTargetParentChildKeys.toArray(); // insert fragment children
              newChildrenKeysArray.splice.apply(
                newChildrenKeysArray,
                [insertionIndex, 0].concat(fragmentRootBlocks),
              );
              blockMapState.setIn([targetParentKey, "children"], List(newChildrenKeysArray));
            }
          });
        };
        var insertFragment = function insertFragment(
          contentState,
          selectionState,
          blockMap,
          fragment,
          targetKey,
          targetOffset,
        ) {
          var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;
          var newBlockArr = [];
          var fragmentSize = fragment.size;
          var target = blockMap.get(targetKey);
          var head = fragment.first();
          var tail = fragment.last();
          var finalOffset = tail.getLength();
          var finalKey = tail.getKey();
          var shouldNotUpdateFromFragmentBlock =
            isTreeBasedBlockMap &&
            (!target.getChildKeys().isEmpty() || !head.getChildKeys().isEmpty());
          blockMap.forEach(function (block, blockKey) {
            if (blockKey !== targetKey) {
              newBlockArr.push(block);
              return;
            }
            if (shouldNotUpdateFromFragmentBlock) newBlockArr.push(block);
            else newBlockArr.push(updateHead(block, targetOffset, fragment));
            // Insert fragment blocks after the head and before the tail.
            fragment // when we are updating the target block with the head fragment block we skip the first fragment
              // head since its contents have already been merged with the target block otherwise we include
              // the whole fragment
              .slice(shouldNotUpdateFromFragmentBlock ? 0 : 1, fragmentSize - 1)
              .forEach(function (fragmentBlock) {
                return newBlockArr.push(fragmentBlock);
              }); // update tail
            newBlockArr.push(updateTail(block, targetOffset, fragment));
          });
          var updatedBlockMap = BlockMapBuilder.createFromArray(newBlockArr);
          if (isTreeBasedBlockMap)
            updatedBlockMap = updateBlockMapLinks(updatedBlockMap, blockMap, target, head);
          return contentState.merge({
            blockMap: updatedBlockMap,
            selectionBefore: selectionState,
            selectionAfter: selectionState.merge({
              anchorKey: finalKey,
              anchorOffset: finalOffset,
              focusKey: finalKey,
              focusOffset: finalOffset,
              isBackward: false,
            }),
          });
        };
        var insertFragmentIntoContentState = function insertFragmentIntoContentState(
          contentState,
          selectionState,
          fragmentBlockMap,
        ) {
          var mergeBlockData =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : "REPLACE_WITH_NEW_DATA";
          !selectionState.isCollapsed() &&
            invariant(
              false,
              "`insertFragment` should only be called with a collapsed selection state.",
            );
          var blockMap = contentState.getBlockMap();
          var fragment = randomizeBlockMapKeys(fragmentBlockMap);
          var targetKey = selectionState.getStartKey();
          var targetOffset = selectionState.getStartOffset();
          var targetBlock = blockMap.get(targetKey);
          if (targetBlock instanceof ContentBlockNode)
            !targetBlock.getChildKeys().isEmpty() &&
              invariant(
                false,
                "`insertFragment` should not be called when a container node is selected.",
              );
          // When we insert a fragment with a single block we simply update the target block
          // with the contents of the inserted fragment block
          if (fragment.size === 1)
            return updateExistingBlock(
              contentState,
              selectionState,
              blockMap,
              fragment.first(),
              targetKey,
              targetOffset,
              mergeBlockData,
            );
          return insertFragment(
            contentState,
            selectionState,
            blockMap,
            fragment,
            targetKey,
            targetOffset,
          );
        };
        module.exports = insertFragmentIntoContentState;
      },
      {
        "1e6aa9b7fe197ce4": "4sYuW",
        dae0d227ee8db298: "ketXe",
        "7b02199c24ae8906": "lhHDL",
        "900a400cdb26a7d2": "aV57a",
        "3aa8b264d1154d11": "d6MgO",
        "61f677d2269aaded": "aBGqI",
      },
    ],
    aV57a: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Maintain persistence for target list when appending and prepending.
         */ function insertIntoList(targetListArg, toInsert, offset) {
          var targetList = targetListArg;
          if (offset === targetList.count())
            toInsert.forEach(function (c) {
              targetList = targetList.push(c);
            });
          else if (offset === 0)
            toInsert.reverse().forEach(function (c) {
              targetList = targetList.unshift(c);
            });
          else {
            var head = targetList.slice(0, offset);
            var tail = targetList.slice(offset);
            targetList = head.concat(toInsert, tail).toList();
          }
          return targetList;
        }
        module.exports = insertIntoList;
      },
      {},
    ],
    hEh2a: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var Immutable = require("a9ed38452fcc96ff");
        var insertIntoList = require("49e70dc5f086b278");
        var invariant = require("4f10eea00935ab9c");
        var Repeat = Immutable.Repeat;
        function insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {
          !selectionState.isCollapsed() &&
            invariant(false, "`insertText` should only be called with a collapsed range.");
          var len = null;
          if (text != null) len = text.length;
          if (len == null || len === 0) return contentState;
          var blockMap = contentState.getBlockMap();
          var key = selectionState.getStartKey();
          var offset = selectionState.getStartOffset();
          var block = blockMap.get(key);
          var blockText = block.getText();
          var newBlock = block.merge({
            text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),
            characterList: insertIntoList(
              block.getCharacterList(),
              Repeat(characterMetadata, len).toList(),
              offset,
            ),
          });
          var newOffset = offset + len;
          return contentState.merge({
            blockMap: blockMap.set(key, newBlock),
            selectionAfter: selectionState.merge({
              anchorOffset: newOffset,
              focusOffset: newOffset,
            }),
          });
        }
        module.exports = insertTextIntoContentState;
      },
      { a9ed38452fcc96ff: "lhHDL", "49e70dc5f086b278": "aV57a", "4f10eea00935ab9c": "d6MgO" },
    ],
    g6CEz: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var Immutable = require("7b672cd1a6dea064");
        var Map = Immutable.Map;
        function modifyBlockForContentState(contentState, selectionState, operation) {
          var startKey = selectionState.getStartKey();
          var endKey = selectionState.getEndKey();
          var blockMap = contentState.getBlockMap();
          var newBlocks = blockMap
            .toSeq()
            .skipUntil(function (_, k) {
              return k === startKey;
            })
            .takeUntil(function (_, k) {
              return k === endKey;
            })
            .concat(Map([[endKey, blockMap.get(endKey)]]))
            .map(operation);
          return contentState.merge({
            blockMap: blockMap.merge(newBlocks),
            selectionBefore: selectionState,
            selectionAfter: selectionState,
          });
        }
        module.exports = modifyBlockForContentState;
      },
      { "7b672cd1a6dea064": "lhHDL" },
    ],
    "8CtaB": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var ContentBlockNode = require("56732d1a92846ce8");
        var getNextDelimiterBlockKey = require("c529614152bf869");
        var Immutable = require("e582ea396e8ecaea");
        var List = Immutable.List,
          Map = Immutable.Map;
        var transformBlock = function transformBlock(key, blockMap, func) {
          if (!key) return;
          var block = blockMap.get(key);
          if (!block) return;
          blockMap.set(key, func(block));
        };
        /**
         * Ancestors needs to be preserved when there are non selected
         * children to make sure we do not leave any orphans behind
         */ var getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {
          var parents = [];
          if (!blockKey) return parents;
          var blockNode = blockMap.get(blockKey);
          while (blockNode && blockNode.getParentKey()) {
            var parentKey = blockNode.getParentKey();
            if (parentKey) parents.push(parentKey);
            blockNode = parentKey ? blockMap.get(parentKey) : null;
          }
          return parents;
        };
        /**
         * Get all next delimiter keys until we hit a root delimiter and return
         * an array of key references
         */ var getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {
          var nextDelimiters = [];
          if (!block) return nextDelimiters;
          var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);
          while (nextDelimiter && blockMap.get(nextDelimiter)) {
            var _block = blockMap.get(nextDelimiter);
            nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance
            nextDelimiter = _block.getParentKey()
              ? getNextDelimiterBlockKey(_block, blockMap)
              : null;
          }
          return nextDelimiters;
        };
        var getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {
          if (!block) return null;
          // note that we need to make sure we refer to the original block since this
          // function is called within a withMutations
          var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();
          while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey))
            nextValidSiblingKey =
              originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;
          return nextValidSiblingKey;
        };
        var getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {
          if (!block) return null;
          // note that we need to make sure we refer to the original block since this
          // function is called within a withMutations
          var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();
          while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey))
            prevValidSiblingKey =
              originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;
          return prevValidSiblingKey;
        };
        var updateBlockMapLinks = function updateBlockMapLinks(
          blockMap,
          startBlock,
          endBlock,
          originalBlockMap,
        ) {
          return blockMap.withMutations(function (blocks) {
            // update start block if its retained
            transformBlock(startBlock.getKey(), blocks, function (block) {
              return block.merge({
                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
              });
            }); // update endblock if its retained
            transformBlock(endBlock.getKey(), blocks, function (block) {
              return block.merge({
                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
              });
            }); // update start block parent ancestors
            getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {
              return transformBlock(parentKey, blocks, function (block) {
                return block.merge({
                  children: block.getChildKeys().filter(function (key) {
                    return blocks.get(key);
                  }),
                  nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
                  prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
                });
              });
            }); // update start block next - can only happen if startBlock == endBlock
            transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {
              return block.merge({
                prevSibling: startBlock.getPrevSiblingKey(),
              });
            }); // update start block prev
            transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {
              return block.merge({
                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
              });
            }); // update end block next
            transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {
              return block.merge({
                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
              });
            }); // update end block prev
            transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {
              return block.merge({
                nextSibling: endBlock.getNextSiblingKey(),
              });
            }); // update end block parent ancestors
            getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {
              transformBlock(parentKey, blocks, function (block) {
                return block.merge({
                  children: block.getChildKeys().filter(function (key) {
                    return blocks.get(key);
                  }),
                  nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
                  prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
                });
              });
            }); // update next delimiters all the way to a root delimiter
            getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {
              return transformBlock(delimiterKey, blocks, function (block) {
                return block.merge({
                  nextSibling: getNextValidSibling(block, blocks, originalBlockMap),
                  prevSibling: getPrevValidSibling(block, blocks, originalBlockMap),
                });
              });
            }); // if parent (startBlock) was deleted
            if (
              blockMap.get(startBlock.getKey()) == null &&
              blockMap.get(endBlock.getKey()) != null &&
              endBlock.getParentKey() === startBlock.getKey() &&
              endBlock.getPrevSiblingKey() == null
            ) {
              var prevSiblingKey = startBlock.getPrevSiblingKey(); // endBlock becomes next sibling of parent's prevSibling
              transformBlock(endBlock.getKey(), blocks, function (block) {
                return block.merge({
                  prevSibling: prevSiblingKey,
                });
              });
              transformBlock(prevSiblingKey, blocks, function (block) {
                return block.merge({
                  nextSibling: endBlock.getKey(),
                });
              }); // Update parent for previous parent's children, and children for that parent
              var prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;
              var newParentKey = prevSibling ? prevSibling.getParentKey() : null;
              startBlock.getChildKeys().forEach(function (childKey) {
                transformBlock(childKey, blocks, function (block) {
                  return block.merge({
                    parent: newParentKey, // set to null if there is no parent
                  });
                });
              });
              if (newParentKey != null) {
                var newParent = blockMap.get(newParentKey);
                transformBlock(newParentKey, blocks, function (block) {
                  return block.merge({
                    children: newParent.getChildKeys().concat(startBlock.getChildKeys()),
                  });
                });
              } // last child of deleted parent should point to next sibling
              transformBlock(
                startBlock.getChildKeys().find(function (key) {
                  var block = blockMap.get(key);
                  return block.getNextSiblingKey() === null;
                }),
                blocks,
                function (block) {
                  return block.merge({
                    nextSibling: startBlock.getNextSiblingKey(),
                  });
                },
              );
            }
          });
        };
        var removeRangeFromContentState = function removeRangeFromContentState(
          contentState,
          selectionState,
        ) {
          if (selectionState.isCollapsed()) return contentState;
          var blockMap = contentState.getBlockMap();
          var startKey = selectionState.getStartKey();
          var startOffset = selectionState.getStartOffset();
          var endKey = selectionState.getEndKey();
          var endOffset = selectionState.getEndOffset();
          var startBlock = blockMap.get(startKey);
          var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together
          var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children
          var parentAncestors = [];
          if (isExperimentalTreeBlock) {
            var endBlockchildrenKeys = endBlock.getChildKeys();
            var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected siblings so we can not remove its ancestors parents
            if (endBlock.getNextSiblingKey())
              parentAncestors = parentAncestors.concat(endBlockAncestors);
            // endBlock has children so can not remove this block or any of its ancestors
            if (!endBlockchildrenKeys.isEmpty())
              parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));
            // we need to retain all ancestors of the next delimiter block
            parentAncestors = parentAncestors.concat(
              getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap),
            );
          }
          var characterList;
          if (startBlock === endBlock)
            characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);
          else
            characterList = startBlock
              .getCharacterList()
              .slice(0, startOffset)
              .concat(endBlock.getCharacterList().slice(endOffset));
          var modifiedStart = startBlock.merge({
            text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),
            characterList: characterList,
          }); // If cursor (collapsed) is at the start of the first child, delete parent
          // instead of child
          var shouldDeleteParent =
            isExperimentalTreeBlock &&
            startOffset === 0 &&
            endOffset === 0 &&
            endBlock.getParentKey() === startKey &&
            endBlock.getPrevSiblingKey() == null;
          var newBlocks = shouldDeleteParent
            ? Map([[startKey, null]])
            : blockMap
                .toSeq()
                .skipUntil(function (_, k) {
                  return k === startKey;
                })
                .takeUntil(function (_, k) {
                  return k === endKey;
                })
                .filter(function (_, k) {
                  return parentAncestors.indexOf(k) === -1;
                })
                .concat(Map([[endKey, null]]))
                .map(function (_, k) {
                  return k === startKey ? modifiedStart : null;
                });
          var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {
            return !!block;
          }); // Only update tree block pointers if the range is across blocks
          if (isExperimentalTreeBlock && startBlock !== endBlock)
            updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);
          return contentState.merge({
            blockMap: updatedBlockMap,
            selectionBefore: selectionState,
            selectionAfter: selectionState.merge({
              anchorKey: startKey,
              anchorOffset: startOffset,
              focusKey: startKey,
              focusOffset: startOffset,
              isBackward: false,
            }),
          });
        };
        /**
         * Maintain persistence for target list when removing characters on the
         * head and tail of the character list.
         */ var removeFromList = function removeFromList(targetList, startOffset, endOffset) {
          if (startOffset === 0)
            while (startOffset < endOffset) {
              targetList = targetList.shift();
              startOffset++;
            }
          else if (endOffset === targetList.count())
            while (endOffset > startOffset) {
              targetList = targetList.pop();
              endOffset--;
            }
          else {
            var head = targetList.slice(0, startOffset);
            var tail = targetList.slice(endOffset);
            targetList = head.concat(tail).toList();
          }
          return targetList;
        };
        module.exports = removeRangeFromContentState;
      },
      { "56732d1a92846ce8": "ketXe", c529614152bf869: "8lKbY", e582ea396e8ecaea: "lhHDL" },
    ],
    "8lKbY": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ var ContentBlockNode = require("71f757d3bee37569");
        var getNextDelimiterBlockKey = function getNextDelimiterBlockKey(block, blockMap) {
          var isExperimentalTreeBlock = block instanceof ContentBlockNode;
          if (!isExperimentalTreeBlock) return null;
          var nextSiblingKey = block.getNextSiblingKey();
          if (nextSiblingKey) return nextSiblingKey;
          var parent = block.getParentKey();
          if (!parent) return null;
          var nextNonDescendantBlock = blockMap.get(parent);
          while (nextNonDescendantBlock && !nextNonDescendantBlock.getNextSiblingKey()) {
            var parentKey = nextNonDescendantBlock.getParentKey();
            nextNonDescendantBlock = parentKey ? blockMap.get(parentKey) : null;
          }
          if (!nextNonDescendantBlock) return null;
          return nextNonDescendantBlock.getNextSiblingKey();
        };
        module.exports = getNextDelimiterBlockKey;
      },
      { "71f757d3bee37569": "ketXe" },
    ],
    bSYWE: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var ContentBlockNode = require("516fc5d745780258");
        var generateRandomKey = require("32b6a4a05020717c");
        var Immutable = require("1129c196b044c786");
        var invariant = require("1bb3f02be935337f");
        var modifyBlockForContentState = require("ce461201da3351a2");
        var List = Immutable.List,
          Map = Immutable.Map;
        var transformBlock = function transformBlock(key, blockMap, func) {
          if (!key) return;
          var block = blockMap.get(key);
          if (!block) return;
          blockMap.set(key, func(block));
        };
        var updateBlockMapLinks = function updateBlockMapLinks(
          blockMap,
          originalBlock,
          belowBlock,
        ) {
          return blockMap.withMutations(function (blocks) {
            var originalBlockKey = originalBlock.getKey();
            var belowBlockKey = belowBlock.getKey(); // update block parent
            transformBlock(originalBlock.getParentKey(), blocks, function (block) {
              var parentChildrenList = block.getChildKeys();
              var insertionIndex = parentChildrenList.indexOf(originalBlockKey) + 1;
              var newChildrenArray = parentChildrenList.toArray();
              newChildrenArray.splice(insertionIndex, 0, belowBlockKey);
              return block.merge({
                children: List(newChildrenArray),
              });
            }); // update original next block
            transformBlock(originalBlock.getNextSiblingKey(), blocks, function (block) {
              return block.merge({
                prevSibling: belowBlockKey,
              });
            }); // update original block
            transformBlock(originalBlockKey, blocks, function (block) {
              return block.merge({
                nextSibling: belowBlockKey,
              });
            }); // update below block
            transformBlock(belowBlockKey, blocks, function (block) {
              return block.merge({
                prevSibling: originalBlockKey,
              });
            });
          });
        };
        var splitBlockInContentState = function splitBlockInContentState(
          contentState,
          selectionState,
        ) {
          !selectionState.isCollapsed() && invariant(false, "Selection range must be collapsed.");
          var key = selectionState.getAnchorKey();
          var blockMap = contentState.getBlockMap();
          var blockToSplit = blockMap.get(key);
          var text = blockToSplit.getText();
          if (!text) {
            var blockType = blockToSplit.getType();
            if (blockType === "unordered-list-item" || blockType === "ordered-list-item")
              return modifyBlockForContentState(contentState, selectionState, function (block) {
                return block.merge({
                  type: "unstyled",
                  depth: 0,
                });
              });
          }
          var offset = selectionState.getAnchorOffset();
          var chars = blockToSplit.getCharacterList();
          var keyBelow = generateRandomKey();
          var isExperimentalTreeBlock = blockToSplit instanceof ContentBlockNode;
          var blockAbove = blockToSplit.merge({
            text: text.slice(0, offset),
            characterList: chars.slice(0, offset),
          });
          var blockBelow = blockAbove.merge({
            key: keyBelow,
            text: text.slice(offset),
            characterList: chars.slice(offset),
            data: Map(),
          });
          var blocksBefore = blockMap.toSeq().takeUntil(function (v) {
            return v === blockToSplit;
          });
          var blocksAfter = blockMap
            .toSeq()
            .skipUntil(function (v) {
              return v === blockToSplit;
            })
            .rest();
          var newBlocks = blocksBefore
            .concat(
              [
                [key, blockAbove],
                [keyBelow, blockBelow],
              ],
              blocksAfter,
            )
            .toOrderedMap();
          if (isExperimentalTreeBlock) {
            !blockToSplit.getChildKeys().isEmpty() &&
              invariant(false, "ContentBlockNode must not have children");
            newBlocks = updateBlockMapLinks(newBlocks, blockAbove, blockBelow);
          }
          return contentState.merge({
            blockMap: newBlocks,
            selectionBefore: selectionState,
            selectionAfter: selectionState.merge({
              anchorKey: keyBelow,
              anchorOffset: 0,
              focusKey: keyBelow,
              focusOffset: 0,
              isBackward: false,
            }),
          });
        };
        module.exports = splitBlockInContentState;
      },
      {
        "516fc5d745780258": "ketXe",
        "32b6a4a05020717c": "fgtnr",
        "1129c196b044c786": "lhHDL",
        "1bb3f02be935337f": "d6MgO",
        ce461201da3351a2: "g6CEz",
      },
    ],
    "2EY4X": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var BlockTree = require("260357c3ca5ae5c4");
        var ContentState = require("9b9a99888b9dc61c");
        var EditorBidiService = require("38f47d105177efc8");
        var SelectionState = require("358c816174595026");
        var Immutable = require("3adc396640fb0060");
        var OrderedSet = Immutable.OrderedSet,
          Record = Immutable.Record,
          Stack = Immutable.Stack,
          OrderedMap = Immutable.OrderedMap,
          List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide
        // basically all keys. `currentContent` varies, so this type doesn't include it.
        // (See the types defined below.)
        var defaultRecord = {
          allowUndo: true,
          currentContent: null,
          decorator: null,
          directionMap: null,
          forceSelection: false,
          inCompositionMode: false,
          inlineStyleOverride: null,
          lastChangeType: null,
          nativelyRenderedContent: null,
          redoStack: Stack(),
          selection: null,
          treeMap: null,
          undoStack: Stack(),
        };
        var EditorStateRecord = Record(defaultRecord);
        var EditorState = /*#__PURE__*/ (function () {
          EditorState.createEmpty = function createEmpty(decorator) {
            return this.createWithText("", decorator);
          };
          EditorState.createWithText = function createWithText(text, decorator) {
            return EditorState.createWithContent(ContentState.createFromText(text), decorator);
          };
          EditorState.createWithContent = function createWithContent(contentState, decorator) {
            if (contentState.getBlockMap().count() === 0) return EditorState.createEmpty(decorator);
            var firstKey = contentState.getBlockMap().first().getKey();
            return EditorState.create({
              currentContent: contentState,
              undoStack: Stack(),
              redoStack: Stack(),
              decorator: decorator || null,
              selection: SelectionState.createEmpty(firstKey),
            });
          };
          EditorState.create = function create(config) {
            var currentContent = config.currentContent,
              decorator = config.decorator;
            var recordConfig = _objectSpread({}, config, {
              treeMap: generateNewTreeMap(currentContent, decorator),
              directionMap: EditorBidiService.getDirectionMap(currentContent),
            });
            return new EditorState(new EditorStateRecord(recordConfig));
          };
          EditorState.fromJS = function fromJS(config) {
            return new EditorState(
              new EditorStateRecord(
                _objectSpread({}, config, {
                  directionMap:
                    config.directionMap != null
                      ? OrderedMap(config.directionMap)
                      : config.directionMap,
                  inlineStyleOverride:
                    config.inlineStyleOverride != null
                      ? OrderedSet(config.inlineStyleOverride)
                      : config.inlineStyleOverride,
                  nativelyRenderedContent:
                    config.nativelyRenderedContent != null
                      ? ContentState.fromJS(config.nativelyRenderedContent)
                      : config.nativelyRenderedContent,
                  redoStack:
                    config.redoStack != null
                      ? Stack(
                          config.redoStack.map(function (v) {
                            return ContentState.fromJS(v);
                          }),
                        )
                      : config.redoStack,
                  selection:
                    config.selection != null
                      ? new SelectionState(config.selection)
                      : config.selection,
                  treeMap:
                    config.treeMap != null
                      ? OrderedMap(config.treeMap).map(function (v) {
                          return List(v).map(function (v) {
                            return BlockTree.fromJS(v);
                          });
                        })
                      : config.treeMap,
                  undoStack:
                    config.undoStack != null
                      ? Stack(
                          config.undoStack.map(function (v) {
                            return ContentState.fromJS(v);
                          }),
                        )
                      : config.undoStack,
                  currentContent: ContentState.fromJS(config.currentContent),
                }),
              ),
            );
          };
          EditorState.set = function set(editorState, put) {
            var map = editorState.getImmutable().withMutations(function (state) {
              var existingDecorator = state.get("decorator");
              var decorator = existingDecorator;
              if (put.decorator === null) decorator = null;
              else if (put.decorator) decorator = put.decorator;
              var newContent = put.currentContent || editorState.getCurrentContent();
              if (decorator !== existingDecorator) {
                var treeMap = state.get("treeMap");
                var newTreeMap;
                if (decorator && existingDecorator)
                  newTreeMap = regenerateTreeForNewDecorator(
                    newContent,
                    newContent.getBlockMap(),
                    treeMap,
                    decorator,
                    existingDecorator,
                  );
                else newTreeMap = generateNewTreeMap(newContent, decorator);
                state.merge({
                  decorator: decorator,
                  treeMap: newTreeMap,
                  nativelyRenderedContent: null,
                });
                return;
              }
              var existingContent = editorState.getCurrentContent();
              if (newContent !== existingContent)
                state.set(
                  "treeMap",
                  regenerateTreeForNewBlocks(
                    editorState,
                    newContent.getBlockMap(),
                    newContent.getEntityMap(),
                    decorator,
                  ),
                );
              state.merge(put);
            });
            return new EditorState(map);
          };
          var _proto = EditorState.prototype;
          _proto.toJS = function toJS() {
            return this.getImmutable().toJS();
          };
          _proto.getAllowUndo = function getAllowUndo() {
            return this.getImmutable().get("allowUndo");
          };
          _proto.getCurrentContent = function getCurrentContent() {
            return this.getImmutable().get("currentContent");
          };
          _proto.getUndoStack = function getUndoStack() {
            return this.getImmutable().get("undoStack");
          };
          _proto.getRedoStack = function getRedoStack() {
            return this.getImmutable().get("redoStack");
          };
          _proto.getSelection = function getSelection() {
            return this.getImmutable().get("selection");
          };
          _proto.getDecorator = function getDecorator() {
            return this.getImmutable().get("decorator");
          };
          _proto.isInCompositionMode = function isInCompositionMode() {
            return this.getImmutable().get("inCompositionMode");
          };
          _proto.mustForceSelection = function mustForceSelection() {
            return this.getImmutable().get("forceSelection");
          };
          _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {
            return this.getImmutable().get("nativelyRenderedContent");
          };
          _proto.getLastChangeType = function getLastChangeType() {
            return this.getImmutable().get("lastChangeType");
          }
          /**
           * While editing, the user may apply inline style commands with a collapsed
           * cursor, intending to type text that adopts the specified style. In this
           * case, we track the specified style as an "override" that takes precedence
           * over the inline style of the text adjacent to the cursor.
           *
           * If null, there is no override in place.
           */;
          _proto.getInlineStyleOverride = function getInlineStyleOverride() {
            return this.getImmutable().get("inlineStyleOverride");
          };
          EditorState.setInlineStyleOverride = function setInlineStyleOverride(
            editorState,
            inlineStyleOverride,
          ) {
            return EditorState.set(editorState, {
              inlineStyleOverride: inlineStyleOverride,
            });
          }
          /**
           * Get the appropriate inline style for the editor state. If an
           * override is in place, use it. Otherwise, the current style is
           * based on the location of the selection state.
           */;
          _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {
            var override = this.getInlineStyleOverride();
            if (override != null) return override;
            var content = this.getCurrentContent();
            var selection = this.getSelection();
            if (selection.isCollapsed())
              return getInlineStyleForCollapsedSelection(content, selection);
            return getInlineStyleForNonCollapsedSelection(content, selection);
          };
          _proto.getBlockTree = function getBlockTree(blockKey) {
            return this.getImmutable().getIn(["treeMap", blockKey]);
          };
          _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {
            var firstKey = this.getCurrentContent().getBlockMap().first().getKey();
            return this.getSelection().hasEdgeWithin(firstKey, 0, 0);
          };
          _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {
            var content = this.getCurrentContent();
            var blockMap = content.getBlockMap();
            var last = blockMap.last();
            var end = last.getLength();
            return this.getSelection().hasEdgeWithin(last.getKey(), end, end);
          };
          _proto.getDirectionMap = function getDirectionMap() {
            return this.getImmutable().get("directionMap");
          }
          /**
           * Incorporate native DOM selection changes into the EditorState. This
           * method can be used when we simply want to accept whatever the DOM
           * has given us to represent selection, and we do not need to re-render
           * the editor.
           *
           * To forcibly move the DOM selection, see `EditorState.forceSelection`.
           */;
          EditorState.acceptSelection = function acceptSelection(editorState, selection) {
            return updateSelection(editorState, selection, false);
          }
          /**
           * At times, we need to force the DOM selection to be where we
           * need it to be. This can occur when the anchor or focus nodes
           * are non-text nodes, for instance. In this case, we want to trigger
           * a re-render of the editor, which in turn forces selection into
           * the correct place in the DOM. The `forceSelection` method
           * accomplishes this.
           *
           * This method should be used in cases where you need to explicitly
           * move the DOM selection from one place to another without a change
           * in ContentState.
           */;
          EditorState.forceSelection = function forceSelection(editorState, selection) {
            if (!selection.getHasFocus()) selection = selection.set("hasFocus", true);
            return updateSelection(editorState, selection, true);
          }
          /**
           * Move selection to the end of the editor without forcing focus.
           */;
          EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {
            var content = editorState.getCurrentContent();
            var lastBlock = content.getLastBlock();
            var lastKey = lastBlock.getKey();
            var length = lastBlock.getLength();
            return EditorState.acceptSelection(
              editorState,
              new SelectionState({
                anchorKey: lastKey,
                anchorOffset: length,
                focusKey: lastKey,
                focusOffset: length,
                isBackward: false,
              }),
            );
          }
          /**
           * Force focus to the end of the editor. This is useful in scenarios
           * where we want to programmatically focus the input and it makes sense
           * to allow the user to continue working seamlessly.
           */;
          EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {
            var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);
            return EditorState.forceSelection(
              afterSelectionMove,
              afterSelectionMove.getSelection(),
            );
          }
          /**
           * Push the current ContentState onto the undo stack if it should be
           * considered a boundary state, and set the provided ContentState as the
           * new current content.
           */;
          EditorState.push = function push(editorState, contentState, changeType) {
            var forceSelection =
              arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            if (editorState.getCurrentContent() === contentState) return editorState;
            var directionMap = EditorBidiService.getDirectionMap(
              contentState,
              editorState.getDirectionMap(),
            );
            if (!editorState.getAllowUndo())
              return EditorState.set(editorState, {
                currentContent: contentState,
                directionMap: directionMap,
                lastChangeType: changeType,
                selection: contentState.getSelectionAfter(),
                forceSelection: forceSelection,
                inlineStyleOverride: null,
              });
            var selection = editorState.getSelection();
            var currentContent = editorState.getCurrentContent();
            var undoStack = editorState.getUndoStack();
            var newContent = contentState;
            if (
              selection !== currentContent.getSelectionAfter() ||
              mustBecomeBoundary(editorState, changeType)
            ) {
              undoStack = undoStack.push(currentContent);
              newContent = newContent.set("selectionBefore", selection);
            } else if (
              changeType === "insert-characters" ||
              changeType === "backspace-character" ||
              changeType === "delete-character"
            )
              // Preserve the previous selection.
              newContent = newContent.set("selectionBefore", currentContent.getSelectionBefore());
            var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:
            var overrideChangeTypes = ["adjust-depth", "change-block-type", "split-block"];
            if (overrideChangeTypes.indexOf(changeType) === -1) inlineStyleOverride = null;
            var editorStateChanges = {
              currentContent: newContent,
              directionMap: directionMap,
              undoStack: undoStack,
              redoStack: Stack(),
              lastChangeType: changeType,
              selection: contentState.getSelectionAfter(),
              forceSelection: forceSelection,
              inlineStyleOverride: inlineStyleOverride,
            };
            return EditorState.set(editorState, editorStateChanges);
          }
          /**
           * Make the top ContentState in the undo stack the new current content and
           * push the current content onto the redo stack.
           */;
          EditorState.undo = function undo(editorState) {
            if (!editorState.getAllowUndo()) return editorState;
            var undoStack = editorState.getUndoStack();
            var newCurrentContent = undoStack.peek();
            if (!newCurrentContent) return editorState;
            var currentContent = editorState.getCurrentContent();
            var directionMap = EditorBidiService.getDirectionMap(
              newCurrentContent,
              editorState.getDirectionMap(),
            );
            return EditorState.set(editorState, {
              currentContent: newCurrentContent,
              directionMap: directionMap,
              undoStack: undoStack.shift(),
              redoStack: editorState.getRedoStack().push(currentContent),
              forceSelection: true,
              inlineStyleOverride: null,
              lastChangeType: "undo",
              nativelyRenderedContent: null,
              selection: currentContent.getSelectionBefore(),
            });
          }
          /**
           * Make the top ContentState in the redo stack the new current content and
           * push the current content onto the undo stack.
           */;
          EditorState.redo = function redo(editorState) {
            if (!editorState.getAllowUndo()) return editorState;
            var redoStack = editorState.getRedoStack();
            var newCurrentContent = redoStack.peek();
            if (!newCurrentContent) return editorState;
            var currentContent = editorState.getCurrentContent();
            var directionMap = EditorBidiService.getDirectionMap(
              newCurrentContent,
              editorState.getDirectionMap(),
            );
            return EditorState.set(editorState, {
              currentContent: newCurrentContent,
              directionMap: directionMap,
              undoStack: editorState.getUndoStack().push(currentContent),
              redoStack: redoStack.shift(),
              forceSelection: true,
              inlineStyleOverride: null,
              lastChangeType: "redo",
              nativelyRenderedContent: null,
              selection: newCurrentContent.getSelectionAfter(),
            });
          }
          /**
           * Not for public consumption.
           */;
          function EditorState(immutable) {
            _defineProperty(this, "_immutable", void 0);
            this._immutable = immutable;
          }
          /**
           * Not for public consumption.
           */ _proto.getImmutable = function getImmutable() {
            return this._immutable;
          };
          return EditorState;
        })();
        /**
         * Set the supplied SelectionState as the new current selection, and set
         * the `force` flag to trigger manual selection placement by the view.
         */ function updateSelection(editorState, selection, forceSelection) {
          return EditorState.set(editorState, {
            selection: selection,
            forceSelection: forceSelection,
            nativelyRenderedContent: null,
            inlineStyleOverride: null,
          });
        }
        /**
         * Regenerate the entire tree map for a given ContentState and decorator.
         * Returns an OrderedMap that maps all available ContentBlock objects.
         */ function generateNewTreeMap(contentState, decorator) {
          return contentState
            .getBlockMap()
            .map(function (block) {
              return BlockTree.generate(contentState, block, decorator);
            })
            .toOrderedMap();
        }
        /**
         * Regenerate tree map objects for all ContentBlocks that have changed
         * between the current editorState and newContent. Returns an OrderedMap
         * with only changed regenerated tree map objects.
         */ function regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {
          var contentState = editorState.getCurrentContent().set("entityMap", newEntityMap);
          var prevBlockMap = contentState.getBlockMap();
          var prevTreeMap = editorState.getImmutable().get("treeMap");
          return prevTreeMap.merge(
            newBlockMap
              .toSeq()
              .filter(function (block, key) {
                return block !== prevBlockMap.get(key);
              })
              .map(function (block) {
                return BlockTree.generate(contentState, block, decorator);
              }),
          );
        }
        /**
         * Generate tree map objects for a new decorator object, preserving any
         * decorations that are unchanged from the previous decorator.
         *
         * Note that in order for this to perform optimally, decoration Lists for
         * decorators should be preserved when possible to allow for direct immutable
         * List comparison.
         */ function regenerateTreeForNewDecorator(
          content,
          blockMap,
          previousTreeMap,
          decorator,
          existingDecorator,
        ) {
          return previousTreeMap.merge(
            blockMap
              .toSeq()
              .filter(function (block) {
                return (
                  decorator.getDecorations(block, content) !==
                  existingDecorator.getDecorations(block, content)
                );
              })
              .map(function (block) {
                return BlockTree.generate(content, block, decorator);
              }),
          );
        }
        /**
         * Return whether a change should be considered a boundary state, given
         * the previous change type. Allows us to discard potential boundary states
         * during standard typing or deletion behavior.
         */ function mustBecomeBoundary(editorState, changeType) {
          var lastChangeType = editorState.getLastChangeType();
          return (
            changeType !== lastChangeType ||
            (changeType !== "insert-characters" &&
              changeType !== "backspace-character" &&
              changeType !== "delete-character")
          );
        }
        function getInlineStyleForCollapsedSelection(content, selection) {
          var startKey = selection.getStartKey();
          var startOffset = selection.getStartOffset();
          var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to
          // preserve the style of the preceding character.
          if (startOffset > 0) return startBlock.getInlineStyleAt(startOffset - 1);
          // The caret is at position zero in this block. If the block has any
          // text at all, use the style of the first character.
          if (startBlock.getLength()) return startBlock.getInlineStyleAt(0);
          // Otherwise, look upward in the document to find the closest character.
          return lookUpwardForInlineStyle(content, startKey);
        }
        function getInlineStyleForNonCollapsedSelection(content, selection) {
          var startKey = selection.getStartKey();
          var startOffset = selection.getStartOffset();
          var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.
          if (startOffset < startBlock.getLength()) return startBlock.getInlineStyleAt(startOffset);
          // Check if the selection at the end of a non-empty block. Use the last
          // style in the block.
          if (startOffset > 0) return startBlock.getInlineStyleAt(startOffset - 1);
          // Otherwise, look upward in the document to find the closest character.
          return lookUpwardForInlineStyle(content, startKey);
        }
        function lookUpwardForInlineStyle(content, fromKey) {
          var lastNonEmpty = content
            .getBlockMap()
            .reverse()
            .skipUntil(function (_, k) {
              return k === fromKey;
            })
            .skip(1)
            .skipUntil(function (block, _) {
              return block.getLength();
            })
            .first();
          if (lastNonEmpty) return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);
          return OrderedSet();
        }
        module.exports = EditorState;
      },
      {
        "260357c3ca5ae5c4": "deDSY",
        "9b9a99888b9dc61c": "2TRWx",
        "38f47d105177efc8": "675Jw",
        "358c816174595026": "5Aucl",
        "3adc396640fb0060": "lhHDL",
      },
    ],
    deDSY: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        var findRangesImmutable = require("1728dc419250aa3c");
        var getOwnObjectValues = require("effe977a2df8cc75");
        var Immutable = require("e23221b83d8db24c");
        var List = Immutable.List,
          Repeat = Immutable.Repeat,
          Record = Immutable.Record;
        var returnTrue = function returnTrue() {
          return true;
        };
        var defaultLeafRange = {
          start: null,
          end: null,
        };
        var LeafRange = Record(defaultLeafRange);
        var defaultDecoratorRange = {
          start: null,
          end: null,
          decoratorKey: null,
          leaves: null,
        };
        var DecoratorRange = Record(defaultDecoratorRange);
        var BlockTree = {
          /**
           * Generate a block tree for a given ContentBlock/decorator pair.
           */ generate: function generate(contentState, block, decorator) {
            var textLength = block.getLength();
            if (!textLength)
              return List.of(
                new DecoratorRange({
                  start: 0,
                  end: 0,
                  decoratorKey: null,
                  leaves: List.of(
                    new LeafRange({
                      start: 0,
                      end: 0,
                    }),
                  ),
                }),
              );
            var leafSets = [];
            var decorations = decorator
              ? decorator.getDecorations(block, contentState)
              : List(Repeat(null, textLength));
            var chars = block.getCharacterList();
            findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {
              leafSets.push(
                new DecoratorRange({
                  start: start,
                  end: end,
                  decoratorKey: decorations.get(start),
                  leaves: generateLeaves(chars.slice(start, end).toList(), start),
                }),
              );
            });
            return List(leafSets);
          },
          fromJS: function fromJS(_ref) {
            var leaves = _ref.leaves,
              other = _objectWithoutPropertiesLoose(_ref, ["leaves"]);
            return new DecoratorRange(
              _objectSpread({}, other, {
                leaves:
                  leaves != null
                    ? List(Array.isArray(leaves) ? leaves : getOwnObjectValues(leaves)).map(
                        function (leaf) {
                          return LeafRange(leaf);
                        },
                      )
                    : null,
              }),
            );
          },
        };
        /**
         * Generate LeafRange records for a given character list.
         */ function generateLeaves(characters, offset) {
          var leaves = [];
          var inlineStyles = characters
            .map(function (c) {
              return c.getStyle();
            })
            .toList();
          findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {
            leaves.push(
              new LeafRange({
                start: start + offset,
                end: end + offset,
              }),
            );
          });
          return List(leaves);
        }
        function areEqual(a, b) {
          return a === b;
        }
        module.exports = BlockTree;
      },
      { "1728dc419250aa3c": "1vrx7", effe977a2df8cc75: "gCtCJ", e23221b83d8db24c: "lhHDL" },
    ],
    gCtCJ: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright 2004-present Facebook. All Rights Reserved.
         *
         *
         * @typechecks
         * @format
         */ /**
         * Retrieve an object's own values as an array. If you want the values in the
         * protoype chain, too, use getObjectValuesIncludingPrototype.
         *
         * If you are looking for a function that creates an Array instance based
         * on an "Array-like" object, use createArrayFrom instead.
         *
         * @param {object} obj An object.
         * @return {array}     The object's values.
         */ function getOwnObjectValues(obj) {
          return Object.keys(obj).map(function (key) {
            return obj[key];
          });
        }
        module.exports = getOwnObjectValues;
      },
      {},
    ],
    "2TRWx": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var BlockMapBuilder = require("88f01e895713b6ae");
        var CharacterMetadata = require("c21ffcd5a3d669b1");
        var ContentBlock = require("f20c5a20e8ad47fb");
        var ContentBlockNode = require("f6303b47bb451ab");
        var DraftEntity = require("e6d6cc1f2d7d5be6");
        var SelectionState = require("3b197efc77a41506");
        var generateRandomKey = require("c721f6df1c975ea3");
        var getOwnObjectValues = require("3af7fb85eec0d35");
        var gkx = require("23b15e8b3ea6e617");
        var Immutable = require("1d6eb43f41fb128b");
        var sanitizeDraftText = require("7a81843e97bde13a");
        var List = Immutable.List,
          Record = Immutable.Record,
          Repeat = Immutable.Repeat,
          ImmutableMap = Immutable.Map,
          OrderedMap = Immutable.OrderedMap;
        var defaultRecord = {
          entityMap: null,
          blockMap: null,
          selectionBefore: null,
          selectionAfter: null,
        };
        var ContentStateRecord = Record(defaultRecord);
        /* $FlowFixMe[signature-verification-failure] Supressing a `signature-
         * verification-failure` error here. TODO: T65949050 Clean up the branch for
         * this GK */ var ContentBlockNodeRecord = gkx("draft_tree_data_support")
          ? ContentBlockNode
          : ContentBlock;
        var ContentState = /*#__PURE__*/ (function (_ContentStateRecord) {
          _inheritsLoose(ContentState, _ContentStateRecord);
          function ContentState() {
            return _ContentStateRecord.apply(this, arguments) || this;
          }
          var _proto = ContentState.prototype;
          _proto.getEntityMap = function getEntityMap() {
            // TODO: update this when we fully remove DraftEntity
            return DraftEntity;
          };
          _proto.getBlockMap = function getBlockMap() {
            return this.get("blockMap");
          };
          _proto.getSelectionBefore = function getSelectionBefore() {
            return this.get("selectionBefore");
          };
          _proto.getSelectionAfter = function getSelectionAfter() {
            return this.get("selectionAfter");
          };
          _proto.getBlockForKey = function getBlockForKey(key) {
            var block = this.getBlockMap().get(key);
            return block;
          };
          _proto.getKeyBefore = function getKeyBefore(key) {
            return this.getBlockMap()
              .reverse()
              .keySeq()
              .skipUntil(function (v) {
                return v === key;
              })
              .skip(1)
              .first();
          };
          _proto.getKeyAfter = function getKeyAfter(key) {
            return this.getBlockMap()
              .keySeq()
              .skipUntil(function (v) {
                return v === key;
              })
              .skip(1)
              .first();
          };
          _proto.getBlockAfter = function getBlockAfter(key) {
            return this.getBlockMap()
              .skipUntil(function (_, k) {
                return k === key;
              })
              .skip(1)
              .first();
          };
          _proto.getBlockBefore = function getBlockBefore(key) {
            return this.getBlockMap()
              .reverse()
              .skipUntil(function (_, k) {
                return k === key;
              })
              .skip(1)
              .first();
          };
          _proto.getBlocksAsArray = function getBlocksAsArray() {
            return this.getBlockMap().toArray();
          };
          _proto.getFirstBlock = function getFirstBlock() {
            return this.getBlockMap().first();
          };
          _proto.getLastBlock = function getLastBlock() {
            return this.getBlockMap().last();
          };
          _proto.getPlainText = function getPlainText(delimiter) {
            return this.getBlockMap()
              .map(function (block) {
                return block ? block.getText() : "";
              })
              .join(delimiter || "\n");
          };
          _proto.getLastCreatedEntityKey = function getLastCreatedEntityKey() {
            // TODO: update this when we fully remove DraftEntity
            return DraftEntity.__getLastCreatedEntityKey();
          };
          _proto.hasText = function hasText() {
            var blockMap = this.getBlockMap();
            return (
              blockMap.size > 1 || // make sure that there are no zero width space chars
              escape(blockMap.first().getText()).replace(/%u200B/g, "").length > 0
            );
          };
          _proto.createEntity = function createEntity(type, mutability, data) {
            // TODO: update this when we fully remove DraftEntity
            DraftEntity.__create(type, mutability, data);
            return this;
          };
          _proto.mergeEntityData = function mergeEntityData(key, toMerge) {
            // TODO: update this when we fully remove DraftEntity
            DraftEntity.__mergeData(key, toMerge);
            return this;
          };
          _proto.replaceEntityData = function replaceEntityData(key, newData) {
            // TODO: update this when we fully remove DraftEntity
            DraftEntity.__replaceData(key, newData);
            return this;
          };
          _proto.addEntity = function addEntity(instance) {
            // TODO: update this when we fully remove DraftEntity
            DraftEntity.__add(instance);
            return this;
          };
          _proto.getEntity = function getEntity(key) {
            // TODO: update this when we fully remove DraftEntity
            return DraftEntity.__get(key);
          };
          _proto.getAllEntities = function getAllEntities() {
            return DraftEntity.__getAll();
          };
          _proto.loadWithEntities = function loadWithEntities(entities) {
            return DraftEntity.__loadWithEntities(entities);
          };
          ContentState.createFromBlockArray = function createFromBlockArray(blocks, entityMap) {
            // TODO: remove this when we completely deprecate the old entity API
            var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;
            var blockMap = BlockMapBuilder.createFromArray(theBlocks);
            var selectionState = blockMap.isEmpty()
              ? new SelectionState()
              : SelectionState.createEmpty(blockMap.first().getKey());
            return new ContentState({
              blockMap: blockMap,
              entityMap: entityMap || DraftEntity,
              selectionBefore: selectionState,
              selectionAfter: selectionState,
            });
          };
          ContentState.createFromText = function createFromText(text) {
            var delimiter =
              arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\r\n?|\n/g;
            var strings = text.split(delimiter);
            var blocks = strings.map(function (block) {
              block = sanitizeDraftText(block);
              return new ContentBlockNodeRecord({
                key: generateRandomKey(),
                text: block,
                type: "unstyled",
                characterList: List(Repeat(CharacterMetadata.EMPTY, block.length)),
              });
            });
            return ContentState.createFromBlockArray(blocks);
          };
          ContentState.fromJS = function fromJS(state) {
            return new ContentState(
              _objectSpread({}, state, {
                blockMap: OrderedMap(state.blockMap).map(ContentState.createContentBlockFromJS),
                selectionBefore: new SelectionState(state.selectionBefore),
                selectionAfter: new SelectionState(state.selectionAfter),
              }),
            );
          };
          ContentState.createContentBlockFromJS = function createContentBlockFromJS(block) {
            var characterList = block.characterList;
            return new ContentBlockNodeRecord(
              _objectSpread({}, block, {
                data: ImmutableMap(block.data),
                characterList:
                  characterList != null
                    ? List(
                        (Array.isArray(characterList)
                          ? characterList
                          : getOwnObjectValues(characterList)
                        ).map(function (c) {
                          return CharacterMetadata.fromJS(c);
                        }),
                      )
                    : undefined,
              }),
            );
          };
          return ContentState;
        })(ContentStateRecord);
        module.exports = ContentState;
      },
      {
        "88f01e895713b6ae": "4sYuW",
        c21ffcd5a3d669b1: "5sTZK",
        f20c5a20e8ad47fb: "hCjL2",
        f6303b47bb451ab: "ketXe",
        e6d6cc1f2d7d5be6: "7ZjY7",
        "3b197efc77a41506": "5Aucl",
        c721f6df1c975ea3: "fgtnr",
        "3af7fb85eec0d35": "gCtCJ",
        "23b15e8b3ea6e617": "l5VFU",
        "1d6eb43f41fb128b": "lhHDL",
        "7a81843e97bde13a": "kVM1f",
      },
    ],
    "7ZjY7": [
      function (require, module, exports) {
        "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var DraftEntityInstance = require("9b6f8277debb5a5e");
        var Immutable = require("67c411cb7d352a52");
        var invariant = require("f5f121d6bbf47fa9");
        var uuid = require("beba9da16555d746");
        var Map = Immutable.Map;
        var instances = Map();
        var instanceKey = uuid();
        /**
         * Temporary utility for generating the warnings
         */ function logWarning(oldMethodCall, newMethodCall) {
          console.warn(
            "WARNING: " +
              oldMethodCall +
              ' will be deprecated soon!\nPlease use "' +
              newMethodCall +
              '" instead.',
          );
        }
        /**
         * A "document entity" is an object containing metadata associated with a
         * piece of text in a ContentBlock.
         *
         * For example, a `link` entity might include a `uri` property. When a
         * ContentBlock is rendered in the browser, text that refers to that link
         * entity may be rendered as an anchor, with the `uri` as the href value.
         *
         * In a ContentBlock, every position in the text may correspond to zero
         * or one entities. This correspondence is tracked using a key string,
         * generated via DraftEntity.create() and used to obtain entity metadata
         * via DraftEntity.get().
         */ var DraftEntity = {
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.getLastCreatedEntityKey' instead.
           * ---
           * Get the random key string from whatever entity was last created.
           * We need this to support the new API, as part of transitioning to put Entity
           * storage in contentState.
           */ getLastCreatedEntityKey: function getLastCreatedEntityKey() {
            logWarning(
              "DraftEntity.getLastCreatedEntityKey",
              "contentState.getLastCreatedEntityKey",
            );
            return DraftEntity.__getLastCreatedEntityKey();
          },
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.createEntity' instead.
           * ---
           * Create a DraftEntityInstance and store it for later retrieval.
           *
           * A random key string will be generated and returned. This key may
           * be used to track the entity's usage in a ContentBlock, and for
           * retrieving data about the entity at render time.
           */ create: function create(type, mutability, data) {
            logWarning("DraftEntity.create", "contentState.createEntity");
            return DraftEntity.__create(type, mutability, data);
          },
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.addEntity' instead.
           * ---
           * Add an existing DraftEntityInstance to the DraftEntity map. This is
           * useful when restoring instances from the server.
           */ add: function add(instance) {
            logWarning("DraftEntity.add", "contentState.addEntity");
            return DraftEntity.__add(instance);
          },
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.getEntity' instead.
           * ---
           * Retrieve the entity corresponding to the supplied key string.
           */ get: function get(key) {
            logWarning("DraftEntity.get", "contentState.getEntity");
            return DraftEntity.__get(key);
          },
          /**
           * Get all the entities in the content state.
           */ __getAll: function __getAll() {
            return instances;
          },
          /**
           * Load the entity map with the given set of entities.
           */ __loadWithEntities: function __loadWithEntities(entities) {
            instances = entities;
            instanceKey = uuid();
          },
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.mergeEntityData' instead.
           * ---
           * Entity instances are immutable. If you need to update the data for an
           * instance, this method will merge your data updates and return a new
           * instance.
           */ mergeData: function mergeData(key, toMerge) {
            logWarning("DraftEntity.mergeData", "contentState.mergeEntityData");
            return DraftEntity.__mergeData(key, toMerge);
          },
          /**
           * WARNING: This method will be deprecated soon!
           * Please use 'contentState.replaceEntityData' instead.
           * ---
           * Completely replace the data for a given instance.
           */ replaceData: function replaceData(key, newData) {
            logWarning("DraftEntity.replaceData", "contentState.replaceEntityData");
            return DraftEntity.__replaceData(key, newData);
          },
          // ***********************************WARNING******************************
          // --- the above public API will be deprecated in the next version of Draft!
          // The methods below this line are private - don't call them directly.
          /**
           * Get the random key string from whatever entity was last created.
           * We need this to support the new API, as part of transitioning to put Entity
           * storage in contentState.
           */ __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {
            return instanceKey;
          },
          /**
           * Create a DraftEntityInstance and store it for later retrieval.
           *
           * A random key string will be generated and returned. This key may
           * be used to track the entity's usage in a ContentBlock, and for
           * retrieving data about the entity at render time.
           */ __create: function __create(type, mutability, data) {
            return DraftEntity.__add(
              new DraftEntityInstance({
                type: type,
                mutability: mutability,
                data: data || {},
              }),
            );
          },
          /**
           * Add an existing DraftEntityInstance to the DraftEntity map. This is
           * useful when restoring instances from the server.
           */ __add: function __add(instance) {
            instanceKey = uuid();
            instances = instances.set(instanceKey, instance);
            return instanceKey;
          },
          /**
           * Retrieve the entity corresponding to the supplied key string.
           */ __get: function __get(key) {
            var instance = instances.get(key);
            !!!instance && invariant(false, "Unknown DraftEntity key: %s.", key);
            return instance;
          },
          /**
           * Entity instances are immutable. If you need to update the data for an
           * instance, this method will merge your data updates and return a new
           * instance.
           */ __mergeData: function __mergeData(key, toMerge) {
            var instance = DraftEntity.__get(key);
            var newData = _objectSpread({}, instance.getData(), toMerge);
            var newInstance = instance.set("data", newData);
            instances = instances.set(key, newInstance);
            return newInstance;
          },
          /**
           * Completely replace the data for a given instance.
           */ __replaceData: function __replaceData(key, newData) {
            var instance = DraftEntity.__get(key);
            var newInstance = instance.set("data", newData);
            instances = instances.set(key, newInstance);
            return newInstance;
          },
        };
        module.exports = DraftEntity;
      },
      {
        "9b6f8277debb5a5e": "cJ6ci",
        "67c411cb7d352a52": "lhHDL",
        f5f121d6bbf47fa9: "d6MgO",
        beba9da16555d746: "kncUY",
      },
    ],
    cJ6ci: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @legacyServerCallableInstance
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var Immutable = require("863227ba84c488a2");
        var Record = Immutable.Record;
        var DraftEntityInstanceRecord = Record({
          type: "TOKEN",
          mutability: "IMMUTABLE",
          data: Object,
        });
        /**
         * An instance of a document entity, consisting of a `type` and relevant
         * `data`, metadata about the entity.
         *
         * For instance, a "link" entity might provide a URI, and a "mention"
         * entity might provide the mentioned user's ID. These pieces of data
         * may be used when rendering the entity as part of a ContentBlock DOM
         * representation. For a link, the data would be used as an href for
         * the rendered anchor. For a mention, the ID could be used to retrieve
         * a hovercard.
         */ var DraftEntityInstance = /*#__PURE__*/ (function (_DraftEntityInstanceR) {
          _inheritsLoose(DraftEntityInstance, _DraftEntityInstanceR);
          function DraftEntityInstance() {
            return _DraftEntityInstanceR.apply(this, arguments) || this;
          }
          var _proto = DraftEntityInstance.prototype;
          _proto.getType = function getType() {
            return this.get("type");
          };
          _proto.getMutability = function getMutability() {
            return this.get("mutability");
          };
          _proto.getData = function getData() {
            return this.get("data");
          };
          return DraftEntityInstance;
        })(DraftEntityInstanceRecord);
        module.exports = DraftEntityInstance;
      },
      { "863227ba84c488a2": "lhHDL" },
    ],
    kncUY: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright 2004-present Facebook. All Rights Reserved.
         *
         * @typechecks
         *
         * @format
         */ /*eslint-disable no-bitwise */ /**
         * Based on the rfc4122-compliant solution posted at
         * http://stackoverflow.com/questions/105034
         */ function uuid() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = (Math.random() * 16) | 0;
            var v = c == "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
          });
        }
        module.exports = uuid;
      },
      {},
    ],
    "5Aucl": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var Immutable = require("3197f87ecdf4b607");
        var Record = Immutable.Record;
        var defaultRecord = {
          anchorKey: "",
          anchorOffset: 0,
          focusKey: "",
          focusOffset: 0,
          isBackward: false,
          hasFocus: false,
        };
        /* $FlowFixMe[unclear-type] This comment suppresses an error found when
         * automatically adding a type annotation with the codemod Komodo/Annotate_
         * exports. To see the error delete this comment and run Flow. */ var SelectionStateRecord =
          Record(defaultRecord);
        var SelectionState = /*#__PURE__*/ (function (_SelectionStateRecord) {
          _inheritsLoose(SelectionState, _SelectionStateRecord);
          function SelectionState() {
            return _SelectionStateRecord.apply(this, arguments) || this;
          }
          var _proto = SelectionState.prototype;
          _proto.serialize = function serialize() {
            return (
              "Anchor: " +
              this.getAnchorKey() +
              ":" +
              this.getAnchorOffset() +
              ", " +
              "Focus: " +
              this.getFocusKey() +
              ":" +
              this.getFocusOffset() +
              ", " +
              "Is Backward: " +
              String(this.getIsBackward()) +
              ", " +
              "Has Focus: " +
              String(this.getHasFocus())
            );
          };
          _proto.getAnchorKey = function getAnchorKey() {
            return this.get("anchorKey");
          };
          _proto.getAnchorOffset = function getAnchorOffset() {
            return this.get("anchorOffset");
          };
          _proto.getFocusKey = function getFocusKey() {
            return this.get("focusKey");
          };
          _proto.getFocusOffset = function getFocusOffset() {
            return this.get("focusOffset");
          };
          _proto.getIsBackward = function getIsBackward() {
            return this.get("isBackward");
          };
          _proto.getHasFocus = function getHasFocus() {
            return this.get("hasFocus");
          }
          /**
           * Return whether the specified range overlaps with an edge of the
           * SelectionState.
           */;
          _proto.hasEdgeWithin = function hasEdgeWithin(blockKey, start, end) {
            var anchorKey = this.getAnchorKey();
            var focusKey = this.getFocusKey();
            if (anchorKey === focusKey && anchorKey === blockKey) {
              var selectionStart = this.getStartOffset();
              var selectionEnd = this.getEndOffset();
              return (
                (start <= selectionStart && selectionStart <= end) || // selectionStart is between start and end, or
                (start <= selectionEnd && selectionEnd <= end) // selectionEnd is between start and end
              );
            }
            if (blockKey !== anchorKey && blockKey !== focusKey) return false;
            var offsetToCheck =
              blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();
            return start <= offsetToCheck && end >= offsetToCheck;
          };
          _proto.isCollapsed = function isCollapsed() {
            return (
              this.getAnchorKey() === this.getFocusKey() &&
              this.getAnchorOffset() === this.getFocusOffset()
            );
          };
          _proto.getStartKey = function getStartKey() {
            return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();
          };
          _proto.getStartOffset = function getStartOffset() {
            return this.getIsBackward() ? this.getFocusOffset() : this.getAnchorOffset();
          };
          _proto.getEndKey = function getEndKey() {
            return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();
          };
          _proto.getEndOffset = function getEndOffset() {
            return this.getIsBackward() ? this.getAnchorOffset() : this.getFocusOffset();
          };
          SelectionState.createEmpty = function createEmpty(key) {
            return new SelectionState({
              anchorKey: key,
              anchorOffset: 0,
              focusKey: key,
              focusOffset: 0,
              isBackward: false,
              hasFocus: false,
            });
          };
          return SelectionState;
        })(SelectionStateRecord);
        module.exports = SelectionState;
      },
      { "3197f87ecdf4b607": "lhHDL" },
    ],
    l5VFU: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         */ "use strict";
        module.exports = function (name) {
          if (typeof window !== "undefined" && window.__DRAFT_GKX)
            return !!window.__DRAFT_GKX[name];
          return false;
        };
      },
      {},
    ],
    kVM1f: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var REGEX_BLOCK_DELIMITER = new RegExp("\r", "g");
        function sanitizeDraftText(input) {
          return input.replace(REGEX_BLOCK_DELIMITER, "");
        }
        module.exports = sanitizeDraftText;
      },
      {},
    ],
    "675Jw": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UnicodeBidiService = require("8b2f3bf5d984a849");
        var Immutable = require("153060ce1d5db106");
        var nullthrows = require("55fe8257dbba5fb5");
        var OrderedMap = Immutable.OrderedMap;
        var bidiService;
        var EditorBidiService = {
          getDirectionMap: function getDirectionMap(content, prevBidiMap) {
            if (!bidiService) bidiService = new UnicodeBidiService();
            else bidiService.reset();
            var blockMap = content.getBlockMap();
            var nextBidi = blockMap.valueSeq().map(function (block) {
              return nullthrows(bidiService).getDirection(block.getText());
            });
            var bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));
            if (prevBidiMap != null && Immutable.is(prevBidiMap, bidiMap)) return prevBidiMap;
            return bidiMap;
          },
        };
        module.exports = EditorBidiService;
      },
      { "8b2f3bf5d984a849": "hUshV", "153060ce1d5db106": "lhHDL", "55fe8257dbba5fb5": "fwtV9" },
    ],
    hUshV: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         *
         */ /**
         * Stateful API for text direction detection
         *
         * This class can be used in applications where you need to detect the
         * direction of a sequence of text blocks, where each direction shall be used
         * as the fallback direction for the next one.
         *
         * NOTE: A default direction, if not provided, is set based on the global
         *       direction, as defined by `UnicodeBidiDirection`.
         *
         * == Example ==
         * ```
         * var UnicodeBidiService = require('UnicodeBidiService');
         *
         * var bidiService = new UnicodeBidiService();
         *
         * ...
         *
         * bidiService.reset();
         * for (var para in paragraphs) {
         *   var dir = bidiService.getDirection(para);
         *   ...
         * }
         * ```
         *
         * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
         * Unicode Standard Annex #9 (UAX9)
         * http://www.unicode.org/reports/tr9/
         */ "use strict";
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var UnicodeBidi = require("60f81e0c1a6f7864");
        var UnicodeBidiDirection = require("b37f78655ef50915");
        var invariant = require("6c6c2951cef19c05");
        var UnicodeBidiService = /*#__PURE__*/ (function () {
          /**
           * Stateful class for paragraph direction detection
           *
           * @param defaultDir  Default direction of the service
           */ function UnicodeBidiService(defaultDir) {
            _defineProperty(this, "_defaultDir", void 0);
            _defineProperty(this, "_lastDir", void 0);
            if (!defaultDir) defaultDir = UnicodeBidiDirection.getGlobalDir();
            else
              !UnicodeBidiDirection.isStrong(defaultDir) &&
                invariant(false, "Default direction must be a strong direction (LTR or RTL)");
            this._defaultDir = defaultDir;
            this.reset();
          }
          /**
           * Reset the internal state
           *
           * Instead of creating a new instance, you can just reset() your instance
           * everytime you start a new loop.
           */ var _proto = UnicodeBidiService.prototype;
          _proto.reset = function reset() {
            this._lastDir = this._defaultDir;
          };
          /**
           * Returns the direction of a block of text, and remembers it as the
           * fall-back direction for the next paragraph.
           *
           * @param str  A text block, e.g. paragraph, table cell, tag
           * @return     The resolved direction
           */ _proto.getDirection = function getDirection(str) {
            this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);
            return this._lastDir;
          };
          return UnicodeBidiService;
        })();
        module.exports = UnicodeBidiService;
      },
      { "60f81e0c1a6f7864": "5uUXL", b37f78655ef50915: "bOUHt", "6c6c2951cef19c05": "d6MgO" },
    ],
    "5uUXL": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         *
         */ /**
         * Basic (stateless) API for text direction detection
         *
         * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
         * Unicode Standard Annex #9 (UAX9)
         * http://www.unicode.org/reports/tr9/
         */ "use strict";
        var UnicodeBidiDirection = require("fa1540bc9a981b55");
        var invariant = require("182b4081f6d0418e");
        /**
         * RegExp ranges of characters with a *Strong* Bidi_Class value.
         *
         * Data is based on DerivedBidiClass.txt in UCD version 7.0.0.
         *
         * NOTE: For performance reasons, we only support Unicode's
         *       Basic Multilingual Plane (BMP) for now.
         */ var RANGE_BY_BIDI_TYPE = {
          L: "A-Za-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u01BA\u01BB\u01BC-\u01BF\u01C0-\u01C3\u01C4-\u0293\u0294\u0295-\u02AF\u02B0-\u02B8\u02BB-\u02C1\u02D0-\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376-\u0377\u037A\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0482\u048A-\u052F\u0531-\u0556\u0559\u055A-\u055F\u0561-\u0587\u0589\u0903\u0904-\u0939\u093B\u093D\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0950\u0958-\u0961\u0964-\u0965\u0966-\u096F\u0970\u0971\u0972-\u0980\u0982-\u0983\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09CE\u09D7\u09DC-\u09DD\u09DF-\u09E1\u09E6-\u09EF\u09F0-\u09F1\u09F4-\u09F9\u09FA\u0A03\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0AD0\u0AE0-\u0AE1\u0AE6-\u0AEF\u0AF0\u0B02-\u0B03\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0B5C-\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B70\u0B71\u0B72-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BEF\u0BF0-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C59\u0C60-\u0C61\u0C66-\u0C6F\u0C7F\u0C82-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CBE\u0CBF\u0CC0-\u0CC4\u0CC6\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0CDE\u0CE0-\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF2\u0D02-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D57\u0D60-\u0D61\u0D66-\u0D6F\u0D70-\u0D75\u0D79\u0D7A-\u0D7F\u0D82-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF3\u0DF4\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E46\u0E4F\u0E50-\u0E59\u0E5A-\u0E5B\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F01-\u0F03\u0F04-\u0F12\u0F13\u0F14\u0F15-\u0F17\u0F1A-\u0F1F\u0F20-\u0F29\u0F2A-\u0F33\u0F34\u0F36\u0F38\u0F3E-\u0F3F\u0F40-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FCF\u0FD0-\u0FD4\u0FD5-\u0FD8\u0FD9-\u0FDA\u1000-\u102A\u102B-\u102C\u1031\u1038\u103B-\u103C\u103F\u1040-\u1049\u104A-\u104F\u1050-\u1055\u1056-\u1057\u105A-\u105D\u1061\u1062-\u1064\u1065-\u1066\u1067-\u106D\u106E-\u1070\u1075-\u1081\u1083-\u1084\u1087-\u108C\u108E\u108F\u1090-\u1099\u109A-\u109C\u109E-\u109F\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FB\u10FC\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u1368\u1369-\u137C\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166D-\u166E\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EB-\u16ED\u16EE-\u16F0\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1735-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7-\u17C8\u17D4-\u17D6\u17D7\u17D8-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1842\u1843\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1946-\u194F\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C0\u19C1-\u19C7\u19C8-\u19C9\u19D0-\u19D9\u19DA\u1A00-\u1A16\u1A19-\u1A1A\u1A1E-\u1A1F\u1A20-\u1A54\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AA6\u1AA7\u1AA8-\u1AAD\u1B04\u1B05-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B45-\u1B4B\u1B50-\u1B59\u1B5A-\u1B60\u1B61-\u1B6A\u1B74-\u1B7C\u1B82\u1B83-\u1BA0\u1BA1\u1BA6-\u1BA7\u1BAA\u1BAE-\u1BAF\u1BB0-\u1BB9\u1BBA-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1BFC-\u1BFF\u1C00-\u1C23\u1C24-\u1C2B\u1C34-\u1C35\u1C3B-\u1C3F\u1C40-\u1C49\u1C4D-\u1C4F\u1C50-\u1C59\u1C5A-\u1C77\u1C78-\u1C7D\u1C7E-\u1C7F\u1CC0-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF2-\u1CF3\u1CF5-\u1CF6\u1D00-\u1D2B\u1D2C-\u1D6A\u1D6B-\u1D77\u1D78\u1D79-\u1D9A\u1D9B-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2135-\u2138\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2182\u2183-\u2184\u2185-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7C-\u2C7D\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005\u3006\u3007\u3021-\u3029\u302E-\u302F\u3031-\u3035\u3038-\u303A\u303B\u303C\u3041-\u3096\u309D-\u309E\u309F\u30A1-\u30FA\u30FC-\u30FE\u30FF\u3105-\u312D\u3131-\u318E\u3190-\u3191\u3192-\u3195\u3196-\u319F\u31A0-\u31BA\u31F0-\u31FF\u3200-\u321C\u3220-\u3229\u322A-\u3247\u3248-\u324F\u3260-\u327B\u327F\u3280-\u3289\u328A-\u32B0\u32C0-\u32CB\u32D0-\u32FE\u3300-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA014\uA015\uA016-\uA48C\uA4D0-\uA4F7\uA4F8-\uA4FD\uA4FE-\uA4FF\uA500-\uA60B\uA60C\uA610-\uA61F\uA620-\uA629\uA62A-\uA62B\uA640-\uA66D\uA66E\uA680-\uA69B\uA69C-\uA69D\uA6A0-\uA6E5\uA6E6-\uA6EF\uA6F2-\uA6F7\uA722-\uA76F\uA770\uA771-\uA787\uA789-\uA78A\uA78B-\uA78E\uA790-\uA7AD\uA7B0-\uA7B1\uA7F7\uA7F8-\uA7F9\uA7FA\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA823-\uA824\uA827\uA830-\uA835\uA836-\uA837\uA840-\uA873\uA880-\uA881\uA882-\uA8B3\uA8B4-\uA8C3\uA8CE-\uA8CF\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8F8-\uA8FA\uA8FB\uA900-\uA909\uA90A-\uA925\uA92E-\uA92F\uA930-\uA946\uA952-\uA953\uA95F\uA960-\uA97C\uA983\uA984-\uA9B2\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uA9C1-\uA9CD\uA9CF\uA9D0-\uA9D9\uA9DE-\uA9DF\uA9E0-\uA9E4\uA9E6\uA9E7-\uA9EF\uA9F0-\uA9F9\uA9FA-\uA9FE\uAA00-\uAA28\uAA2F-\uAA30\uAA33-\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F\uAA60-\uAA6F\uAA70\uAA71-\uAA76\uAA77-\uAA79\uAA7A\uAA7B\uAA7D\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAADD\uAADE-\uAADF\uAAE0-\uAAEA\uAAEB\uAAEE-\uAAEF\uAAF0-\uAAF1\uAAF2\uAAF3-\uAAF4\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5B\uAB5C-\uAB5F\uAB64-\uAB65\uABC0-\uABE2\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEB\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uE000-\uF8FF\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFF6F\uFF70\uFF71-\uFF9D\uFF9E-\uFF9F\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
          R: "\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05D0-\u05EA\u05EB-\u05EF\u05F0-\u05F2\u05F3-\u05F4\u05F5-\u05FF\u07C0-\u07C9\u07CA-\u07EA\u07F4-\u07F5\u07FA\u07FB-\u07FF\u0800-\u0815\u081A\u0824\u0828\u082E-\u082F\u0830-\u083E\u083F\u0840-\u0858\u085C-\u085D\u085E\u085F-\u089F\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB37\uFB38-\uFB3C\uFB3D\uFB3E\uFB3F\uFB40-\uFB41\uFB42\uFB43-\uFB44\uFB45\uFB46-\uFB4F",
          AL: "\u0608\u060B\u060D\u061B\u061C\u061D\u061E-\u061F\u0620-\u063F\u0640\u0641-\u064A\u066D\u066E-\u066F\u0671-\u06D3\u06D4\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FD-\u06FE\u06FF\u0700-\u070D\u070E\u070F\u0710\u0712-\u072F\u074B-\u074C\u074D-\u07A5\u07B1\u07B2-\u07BF\u08A0-\u08B2\u08B3-\u08E3\uFB50-\uFBB1\uFBB2-\uFBC1\uFBC2-\uFBD2\uFBD3-\uFD3D\uFD40-\uFD4F\uFD50-\uFD8F\uFD90-\uFD91\uFD92-\uFDC7\uFDC8-\uFDCF\uFDF0-\uFDFB\uFDFC\uFDFE-\uFDFF\uFE70-\uFE74\uFE75\uFE76-\uFEFC\uFEFD-\uFEFE",
        };
        var REGEX_STRONG = new RegExp(
          "[" + RANGE_BY_BIDI_TYPE.L + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + "]",
        );
        var REGEX_RTL = new RegExp("[" + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + "]");
        /**
         * Returns the first strong character (has Bidi_Class value of L, R, or AL).
         *
         * @param str  A text block; e.g. paragraph, table cell, tag
         * @return     A character with strong bidi direction, or null if not found
         */ function firstStrongChar(str) {
          var match = REGEX_STRONG.exec(str);
          return match == null ? null : match[0];
        }
        /**
         * Returns the direction of a block of text, based on the direction of its
         * first strong character (has Bidi_Class value of L, R, or AL).
         *
         * @param str  A text block; e.g. paragraph, table cell, tag
         * @return     The resolved direction
         */ function firstStrongCharDir(str) {
          var strongChar = firstStrongChar(str);
          if (strongChar == null) return UnicodeBidiDirection.NEUTRAL;
          return REGEX_RTL.exec(strongChar) ? UnicodeBidiDirection.RTL : UnicodeBidiDirection.LTR;
        }
        /**
         * Returns the direction of a block of text, based on the direction of its
         * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
         * direction, if no strong character is found.
         *
         * This function is supposed to be used in respect to Higher-Level Protocol
         * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
         *
         * @param str       A text block; e.g. paragraph, table cell, tag
         * @param fallback  Fallback direction, used if no strong direction detected
         *                  for the block (default = NEUTRAL)
         * @return          The resolved direction
         */ function resolveBlockDir(str, fallback) {
          fallback = fallback || UnicodeBidiDirection.NEUTRAL;
          if (!str.length) return fallback;
          var blockDir = firstStrongCharDir(str);
          return blockDir === UnicodeBidiDirection.NEUTRAL ? fallback : blockDir;
        }
        /**
         * Returns the direction of a block of text, based on the direction of its
         * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
         * direction, if no strong character is found.
         *
         * NOTE: This function is similar to resolveBlockDir(), but uses the global
         * direction as the fallback, so it *always* returns a Strong direction,
         * making it useful for integration in places that you need to make the final
         * decision, like setting some CSS class.
         *
         * This function is supposed to be used in respect to Higher-Level Protocol
         * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
         *
         * @param str             A text block; e.g. paragraph, table cell
         * @param strongFallback  Fallback direction, used if no strong direction
         *                        detected for the block (default = global direction)
         * @return                The resolved Strong direction
         */ function getDirection(str, strongFallback) {
          if (!strongFallback) strongFallback = UnicodeBidiDirection.getGlobalDir();
          !UnicodeBidiDirection.isStrong(strongFallback) &&
            invariant(false, "Fallback direction must be a strong direction");
          return resolveBlockDir(str, strongFallback);
        }
        /**
         * Returns true if getDirection(arguments...) returns LTR.
         *
         * @param str             A text block; e.g. paragraph, table cell
         * @param strongFallback  Fallback direction, used if no strong direction
         *                        detected for the block (default = global direction)
         * @return                True if the resolved direction is LTR
         */ function isDirectionLTR(str, strongFallback) {
          return getDirection(str, strongFallback) === UnicodeBidiDirection.LTR;
        }
        /**
         * Returns true if getDirection(arguments...) returns RTL.
         *
         * @param str             A text block; e.g. paragraph, table cell
         * @param strongFallback  Fallback direction, used if no strong direction
         *                        detected for the block (default = global direction)
         * @return                True if the resolved direction is RTL
         */ function isDirectionRTL(str, strongFallback) {
          return getDirection(str, strongFallback) === UnicodeBidiDirection.RTL;
        }
        var UnicodeBidi = {
          firstStrongChar: firstStrongChar,
          firstStrongCharDir: firstStrongCharDir,
          resolveBlockDir: resolveBlockDir,
          getDirection: getDirection,
          isDirectionLTR: isDirectionLTR,
          isDirectionRTL: isDirectionRTL,
        };
        module.exports = UnicodeBidi;
      },
      { fa1540bc9a981b55: "bOUHt", "182b4081f6d0418e": "d6MgO" },
    ],
    bOUHt: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         *
         */ /**
         * Constants to represent text directionality
         *
         * Also defines a *global* direciton, to be used in bidi algorithms as a
         * default fallback direciton, when no better direction is found or provided.
         *
         * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial
         *       global direction value based on the application.
         *
         * Part of the implementation of Unicode Bidirectional Algorithm (UBA)
         * Unicode Standard Annex #9 (UAX9)
         * http://www.unicode.org/reports/tr9/
         */ "use strict";
        var invariant = require("d95615cdb0925b9f");
        var NEUTRAL = "NEUTRAL"; // No strong direction
        var LTR = "LTR"; // Left-to-Right direction
        var RTL = "RTL"; // Right-to-Left direction
        var globalDir = null; // == Helpers ==
        /**
         * Check if a directionality value is a Strong one
         */ function isStrong(dir) {
          return dir === LTR || dir === RTL;
        }
        /**
         * Get string value to be used for `dir` HTML attribute or `direction` CSS
         * property.
         */ function getHTMLDir(dir) {
          !isStrong(dir) &&
            invariant(false, "`dir` must be a strong direction to be converted to HTML Direction");
          return dir === LTR ? "ltr" : "rtl";
        }
        /**
         * Get string value to be used for `dir` HTML attribute or `direction` CSS
         * property, but returns null if `dir` has same value as `otherDir`.
         * `null`.
         */ function getHTMLDirIfDifferent(dir, otherDir) {
          !isStrong(dir) &&
            invariant(false, "`dir` must be a strong direction to be converted to HTML Direction");
          !isStrong(otherDir) &&
            invariant(
              false,
              "`otherDir` must be a strong direction to be converted to HTML Direction",
            );
          return dir === otherDir ? null : getHTMLDir(dir);
        } // == Global Direction ==
        /**
         * Set the global direction.
         */ function setGlobalDir(dir) {
          globalDir = dir;
        }
        /**
         * Initialize the global direction
         */ function initGlobalDir() {
          setGlobalDir(LTR);
        }
        /**
         * Get the global direction
         */ function getGlobalDir() {
          if (!globalDir) this.initGlobalDir();
          !globalDir && invariant(false, "Global direction not set.");
          return globalDir;
        }
        var UnicodeBidiDirection = {
          // Values
          NEUTRAL: NEUTRAL,
          LTR: LTR,
          RTL: RTL,
          // Helpers
          isStrong: isStrong,
          getHTMLDir: getHTMLDir,
          getHTMLDirIfDifferent: getHTMLDirIfDifferent,
          // Global Direction
          setGlobalDir: setGlobalDir,
          initGlobalDir: initGlobalDir,
          getGlobalDir: getGlobalDir,
        };
        module.exports = UnicodeBidiDirection;
      },
      { d95615cdb0925b9f: "d6MgO" },
    ],
    fwtV9: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */ var nullthrows = function nullthrows(x) {
          if (x != null) return x;
          throw new Error("Got unexpected null or undefined");
        };
        module.exports = nullthrows;
      },
      {},
    ],
    bxoU1: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var ContentBlockNode = require("e68813b4fc57b896");
        var getNextDelimiterBlockKey = require("97cb48ca0d7fe158");
        var Immutable = require("2dda3fe95330dd98");
        var invariant = require("d88f39c1dee084f9");
        var OrderedMap = Immutable.OrderedMap,
          List = Immutable.List;
        var transformBlock = function transformBlock(key, blockMap, func) {
          if (!key) return;
          var block = blockMap.get(key);
          if (!block) return;
          blockMap.set(key, func(block));
        };
        var updateBlockMapLinks = function updateBlockMapLinks(
          blockMap,
          originalBlockToBeMoved,
          originalTargetBlock,
          insertionMode,
          isExperimentalTreeBlock,
        ) {
          if (!isExperimentalTreeBlock) return blockMap;
          // possible values of 'insertionMode' are: 'after', 'before'
          var isInsertedAfterTarget = insertionMode === "after";
          var originalBlockKey = originalBlockToBeMoved.getKey();
          var originalTargetKey = originalTargetBlock.getKey();
          var originalParentKey = originalBlockToBeMoved.getParentKey();
          var originalNextSiblingKey = originalBlockToBeMoved.getNextSiblingKey();
          var originalPrevSiblingKey = originalBlockToBeMoved.getPrevSiblingKey();
          var newParentKey = originalTargetBlock.getParentKey();
          var newNextSiblingKey = isInsertedAfterTarget
            ? originalTargetBlock.getNextSiblingKey()
            : originalTargetKey;
          var newPrevSiblingKey = isInsertedAfterTarget
            ? originalTargetKey
            : originalTargetBlock.getPrevSiblingKey();
          return blockMap.withMutations(function (blocks) {
            // update old parent
            transformBlock(originalParentKey, blocks, function (block) {
              var parentChildrenList = block.getChildKeys();
              return block.merge({
                children: parentChildrenList["delete"](
                  parentChildrenList.indexOf(originalBlockKey),
                ),
              });
            }); // update old prev
            transformBlock(originalPrevSiblingKey, blocks, function (block) {
              return block.merge({
                nextSibling: originalNextSiblingKey,
              });
            }); // update old next
            transformBlock(originalNextSiblingKey, blocks, function (block) {
              return block.merge({
                prevSibling: originalPrevSiblingKey,
              });
            }); // update new next
            transformBlock(newNextSiblingKey, blocks, function (block) {
              return block.merge({
                prevSibling: originalBlockKey,
              });
            }); // update new prev
            transformBlock(newPrevSiblingKey, blocks, function (block) {
              return block.merge({
                nextSibling: originalBlockKey,
              });
            }); // update new parent
            transformBlock(newParentKey, blocks, function (block) {
              var newParentChildrenList = block.getChildKeys();
              var targetBlockIndex = newParentChildrenList.indexOf(originalTargetKey);
              var insertionIndex = isInsertedAfterTarget
                ? targetBlockIndex + 1
                : targetBlockIndex !== 0
                ? targetBlockIndex - 1
                : 0;
              var newChildrenArray = newParentChildrenList.toArray();
              newChildrenArray.splice(insertionIndex, 0, originalBlockKey);
              return block.merge({
                children: List(newChildrenArray),
              });
            }); // update block
            transformBlock(originalBlockKey, blocks, function (block) {
              return block.merge({
                nextSibling: newNextSiblingKey,
                prevSibling: newPrevSiblingKey,
                parent: newParentKey,
              });
            });
          });
        };
        var moveBlockInContentState = function moveBlockInContentState(
          contentState,
          blockToBeMoved,
          targetBlock,
          insertionMode,
        ) {
          !(insertionMode !== "replace") && invariant(false, "Replacing blocks is not supported.");
          var targetKey = targetBlock.getKey();
          var blockKey = blockToBeMoved.getKey();
          !(blockKey !== targetKey) && invariant(false, "Block cannot be moved next to itself.");
          var blockMap = contentState.getBlockMap();
          var isExperimentalTreeBlock = blockToBeMoved instanceof ContentBlockNode;
          var blocksToBeMoved = [blockToBeMoved];
          var blockMapWithoutBlocksToBeMoved = blockMap["delete"](blockKey);
          if (isExperimentalTreeBlock) {
            blocksToBeMoved = [];
            blockMapWithoutBlocksToBeMoved = blockMap.withMutations(function (blocks) {
              var nextSiblingKey = blockToBeMoved.getNextSiblingKey();
              var nextDelimiterBlockKey = getNextDelimiterBlockKey(blockToBeMoved, blocks);
              blocks
                .toSeq()
                .skipUntil(function (block) {
                  return block.getKey() === blockKey;
                })
                .takeWhile(function (block) {
                  var key = block.getKey();
                  var isBlockToBeMoved = key === blockKey;
                  var hasNextSiblingAndIsNotNextSibling = nextSiblingKey && key !== nextSiblingKey;
                  var doesNotHaveNextSiblingAndIsNotDelimiter =
                    !nextSiblingKey &&
                    block.getParentKey() &&
                    (!nextDelimiterBlockKey || key !== nextDelimiterBlockKey);
                  return !!(
                    isBlockToBeMoved ||
                    hasNextSiblingAndIsNotNextSibling ||
                    doesNotHaveNextSiblingAndIsNotDelimiter
                  );
                })
                .forEach(function (block) {
                  blocksToBeMoved.push(block);
                  blocks["delete"](block.getKey());
                });
            });
          }
          var blocksBefore = blockMapWithoutBlocksToBeMoved.toSeq().takeUntil(function (v) {
            return v === targetBlock;
          });
          var blocksAfter = blockMapWithoutBlocksToBeMoved
            .toSeq()
            .skipUntil(function (v) {
              return v === targetBlock;
            })
            .skip(1);
          var slicedBlocks = blocksToBeMoved.map(function (block) {
            return [block.getKey(), block];
          });
          var newBlocks = OrderedMap();
          if (insertionMode === "before") {
            var blockBefore = contentState.getBlockBefore(targetKey);
            !(!blockBefore || blockBefore.getKey() !== blockToBeMoved.getKey()) &&
              invariant(false, "Block cannot be moved next to itself.");
            newBlocks = blocksBefore
              .concat([].concat(slicedBlocks, [[targetKey, targetBlock]]), blocksAfter)
              .toOrderedMap();
          } else if (insertionMode === "after") {
            var blockAfter = contentState.getBlockAfter(targetKey);
            !(!blockAfter || blockAfter.getKey() !== blockKey) &&
              invariant(false, "Block cannot be moved next to itself.");
            newBlocks = blocksBefore
              .concat([[targetKey, targetBlock]].concat(slicedBlocks), blocksAfter)
              .toOrderedMap();
          }
          return contentState.merge({
            blockMap: updateBlockMapLinks(
              newBlocks,
              blockToBeMoved,
              targetBlock,
              insertionMode,
              isExperimentalTreeBlock,
            ),
            selectionBefore: contentState.getSelectionAfter(),
            selectionAfter: contentState.getSelectionAfter().merge({
              anchorKey: blockKey,
              focusKey: blockKey,
            }),
          });
        };
        module.exports = moveBlockInContentState;
      },
      {
        e68813b4fc57b896: "ketXe",
        "97cb48ca0d7fe158": "8lKbY",
        "2dda3fe95330dd98": "lhHDL",
        d88f39c1dee084f9: "d6MgO",
      },
    ],
    dQDU5: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var Immutable = require("f2cc80571b17651b");
        var List = Immutable.List;
        var DELIMITER = ".";
        /**
         * A CompositeDraftDecorator traverses through a list of DraftDecorator
         * instances to identify sections of a ContentBlock that should be rendered
         * in a "decorated" manner. For example, hashtags, mentions, and links may
         * be intended to stand out visually, be rendered as anchors, etc.
         *
         * The list of decorators supplied to the constructor will be used in the
         * order they are provided. This allows the caller to specify a priority for
         * string matching, in case of match collisions among decorators.
         *
         * For instance, I may have a link with a `#` in its text. Though this section
         * of text may match our hashtag decorator, it should not be treated as a
         * hashtag. I should therefore list my link DraftDecorator
         * before my hashtag DraftDecorator when constructing this composite
         * decorator instance.
         *
         * Thus, when a collision like this is encountered, the earlier match is
         * preserved and the new match is discarded.
         */ var CompositeDraftDecorator = /*#__PURE__*/ (function () {
          function CompositeDraftDecorator(decorators) {
            _defineProperty(this, "_decorators", void 0);
            // Copy the decorator array, since we use this array order to determine
            // precedence of decoration matching. If the array is mutated externally,
            // we don't want to be affected here.
            this._decorators = decorators.slice();
          }
          var _proto = CompositeDraftDecorator.prototype;
          _proto.getDecorations = function getDecorations(block, contentState) {
            var decorations = Array(block.getText().length).fill(null);
            this._decorators.forEach(function (/*object*/ decorator, /*number*/ ii) {
              var counter = 0;
              var strategy = decorator.strategy;
              var callback = function callback(/*number*/ start, /*number*/ end) {
                // Find out if any of our matching range is already occupied
                // by another decorator. If so, discard the match. Otherwise, store
                // the component key for rendering.
                if (canOccupySlice(decorations, start, end)) {
                  occupySlice(decorations, start, end, ii + DELIMITER + counter);
                  counter++;
                }
              };
              strategy(block, callback, contentState);
            });
            return List(decorations);
          };
          _proto.getComponentForKey = function getComponentForKey(key) {
            var componentKey = parseInt(key.split(DELIMITER)[0], 10);
            return this._decorators[componentKey].component;
          };
          _proto.getPropsForKey = function getPropsForKey(key) {
            var componentKey = parseInt(key.split(DELIMITER)[0], 10);
            return this._decorators[componentKey].props;
          };
          return CompositeDraftDecorator;
        })();
        /**
         * Determine whether we can occupy the specified slice of the decorations
         * array.
         */ function canOccupySlice(decorations, start, end) {
          for (var ii = start; ii < end; ii++) {
            if (decorations[ii] != null) return false;
          }
          return true;
        }
        /**
         * Splice the specified component into our decoration array at the desired
         * range.
         */ function occupySlice(targetArr, start, end, componentKey) {
          for (var ii = start; ii < end; ii++) targetArr[ii] = componentKey;
        }
        module.exports = CompositeDraftDecorator;
      },
      { f2cc80571b17651b: "lhHDL" },
    ],
    "67bzr": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var React = require("39eddd75b9149401");
        var cx = require("38c209be04fc70ab");
        var _require = require("619fa7f26c1ca3a3"),
          Map = _require.Map;
        var UL_WRAP = React.createElement("ul", {
          className: cx("public/DraftStyleDefault/ul"),
        });
        var OL_WRAP = React.createElement("ol", {
          className: cx("public/DraftStyleDefault/ol"),
        });
        var PRE_WRAP = React.createElement("pre", {
          className: cx("public/DraftStyleDefault/pre"),
        });
        var DefaultDraftBlockRenderMap = Map({
          "header-one": {
            element: "h1",
          },
          "header-two": {
            element: "h2",
          },
          "header-three": {
            element: "h3",
          },
          "header-four": {
            element: "h4",
          },
          "header-five": {
            element: "h5",
          },
          "header-six": {
            element: "h6",
          },
          section: {
            element: "section",
          },
          article: {
            element: "article",
          },
          "unordered-list-item": {
            element: "li",
            wrapper: UL_WRAP,
          },
          "ordered-list-item": {
            element: "li",
            wrapper: OL_WRAP,
          },
          blockquote: {
            element: "blockquote",
          },
          atomic: {
            element: "figure",
          },
          "code-block": {
            element: "pre",
            wrapper: PRE_WRAP,
          },
          unstyled: {
            element: "div",
            aliasedElements: ["p"],
          },
        });
        module.exports = DefaultDraftBlockRenderMap;
      },
      { "39eddd75b9149401": "21dqq", "38c209be04fc70ab": "zRtOM", "619fa7f26c1ca3a3": "lhHDL" },
    ],
    zRtOM: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ /**
         * This function is used to mark string literals representing CSS class names
         * so that they can be transformed statically. This allows for modularization
         * and minification of CSS class names.
         *
         * In static_upstream, this function is actually implemented, but it should
         * eventually be replaced with something more descriptive, and the transform
         * that is used in the main stack should be ported for use elsewhere.
         *
         * @param string|object className to modularize, or an object of key/values.
         *                      In the object case, the values are conditions that
         *                      determine if the className keys should be included.
         * @param [string ...]  Variable list of classNames in the string case.
         * @return string       Renderable space-separated CSS className.
         */ function cx(classNames) {
          if (typeof classNames == "object")
            return Object.keys(classNames)
              .filter(function (className) {
                return classNames[className];
              })
              .map(replace)
              .join(" ");
          return Array.prototype.map.call(arguments, replace).join(" ");
        }
        function replace(str) {
          return str.replace(/\//g, "-");
        }
        module.exports = cx;
      },
      {},
    ],
    lp1ln: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        module.exports = {
          BOLD: {
            fontWeight: "bold",
          },
          CODE: {
            fontFamily: "monospace",
            wordWrap: "break-word",
          },
          ITALIC: {
            fontStyle: "italic",
          },
          STRIKETHROUGH: {
            textDecoration: "line-through",
          },
          UNDERLINE: {
            textDecoration: "underline",
          },
        };
      },
      {},
    ],
    "1yxf1": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @preventMunge
         * @emails oncall+draft_js
         */ var global = arguments[3];
        ("use strict");
        var _assign = require("53705a3e48baa705");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var DefaultDraftBlockRenderMap = require("4c57a076d80af934");
        var DefaultDraftInlineStyle = require("7b18d4443450f7cf");
        var DraftEditorCompositionHandler = require("9b19ac867ef719b9");
        var DraftEditorContents = require("8b18cb9c23d0dee");
        var DraftEditorDragHandler = require("6f34af41a28b1097");
        var DraftEditorEditHandler = require("32b49eb8d55cb122");
        var flushControlled = require("f97ba24fffdde779");
        var DraftEditorPlaceholder = require("b35ff1a1dea0fd45");
        var DraftEffects = require("f4c5d47782c1a59d");
        var EditorState = require("a9bd129579e3ed4b");
        var React = require("bb1b09c8e1ec58ad");
        var Scroll = require("c85288cf47f1d0b6");
        var Style = require("2bd7f8a24f4fe8f2");
        var UserAgent = require("c999ce3625fcc3a5");
        var cx = require("5eb51a99c42bef3f");
        var generateRandomKey = require("e3324809d1ab1216");
        var getDefaultKeyBinding = require("67f2e284984093d9");
        var getScrollPosition = require("de4c6d5193f478b0");
        var gkx = require("dc2e7b15ac5f95c8");
        var invariant = require("e1fa692a1e15b6a9");
        var isHTMLElement = require("c2b8a2b3c677a24f");
        var nullthrows = require("7e2d87c6d3a4e937");
        var isIE = UserAgent.isBrowser("IE"); // IE does not support the `input` event on contentEditable, so we can't
        // observe spellcheck behavior.
        var allowSpellCheck = !isIE; // Define a set of handler objects to correspond to each possible `mode`
        // of editor behavior.
        var handlerMap = {
          edit: DraftEditorEditHandler,
          composite: DraftEditorCompositionHandler,
          drag: DraftEditorDragHandler,
          cut: null,
          render: null,
        };
        var didInitODS = false;
        var UpdateDraftEditorFlags = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(UpdateDraftEditorFlags, _React$Component);
          function UpdateDraftEditorFlags() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = UpdateDraftEditorFlags.prototype;
          _proto.render = function render() {
            return null;
          };
          _proto.componentDidMount = function componentDidMount() {
            this._update();
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            this._update();
          };
          _proto._update = function _update() {
            var editor = this.props.editor;
            /**
             * Sometimes a render triggers a 'focus' or other event, and that will
             * schedule a second render pass.
             * In order to make sure the second render pass gets the latest editor
             * state, we update it here.
             * Example:
             * render #1
             * +
             * |
             * | cWU -> Nothing ... latestEditorState = STALE_STATE :(
             * |
             * | render -> this.props.editorState = FRESH_STATE
             * | +         *and* set latestEditorState = FRESH_STATE
             *   |
             * | |
             * | +--> triggers 'focus' event, calling 'handleFocus' with latestEditorState
             * |                                                +
             * |                                                |
             * +>cdU -> latestEditorState = FRESH_STATE         | the 'handleFocus' call schedules render #2
             *                                                  | with latestEditorState, which is FRESH_STATE
             *                                                  |
             * render #2 <--------------------------------------+
             * +
             * |
             * | cwU -> nothing updates
             * |
             * | render -> this.props.editorState = FRESH_STATE which was passed in above
             * |
             * +>cdU fires and resets latestEditorState = FRESH_STATE
             * ---
             * Note that if we don't set latestEditorState in 'render' in the above
             * diagram, then STALE_STATE gets passed to render #2.
             */ editor._latestEditorState = this.props.editorState;
            /**
             * The reason we set this 'blockSelectEvents' flag is that  IE will fire a
             * 'selectionChange' event when we programmatically change the selection,
             * meaning it would trigger a new select event while we are in the middle
             * of updating.
             * We found that the 'selection.addRange' was what triggered the stray
             * selectionchange event in IE.
             * To be clear - we have not been able to reproduce specific bugs related
             * to this stray selection event, but have recorded logs that some
             * conditions do cause it to get bumped into during editOnSelect.
             */ editor._blockSelectEvents = true;
          };
          return UpdateDraftEditorFlags;
        })(React.Component);
        /**
         * `DraftEditor` is the root editor component. It composes a `contentEditable`
         * div, and provides a wide variety of useful function props for managing the
         * state of the editor. See `DraftEditorProps` for details.
         */ var DraftEditor = /*#__PURE__*/ (function (_React$Component2) {
          _inheritsLoose(DraftEditor, _React$Component2);
          /**
           * Define proxies that can route events to the current handler.
           */ function DraftEditor(props) {
            var _this;
            _this = _React$Component2.call(this, props) || this;
            _defineProperty(_assertThisInitialized(_this), "_blockSelectEvents", void 0);
            _defineProperty(_assertThisInitialized(_this), "_clipboard", void 0);
            _defineProperty(_assertThisInitialized(_this), "_handler", void 0);
            _defineProperty(_assertThisInitialized(_this), "_dragCount", void 0);
            _defineProperty(_assertThisInitialized(_this), "_internalDrag", void 0);
            _defineProperty(_assertThisInitialized(_this), "_editorKey", void 0);
            _defineProperty(_assertThisInitialized(_this), "_placeholderAccessibilityID", void 0);
            _defineProperty(_assertThisInitialized(_this), "_latestEditorState", void 0);
            _defineProperty(_assertThisInitialized(_this), "_latestCommittedEditorState", void 0);
            _defineProperty(_assertThisInitialized(_this), "_pendingStateFromBeforeInput", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onBeforeInput", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onBlur", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onCharacterData", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onCompositionEnd", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onCompositionStart", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onCopy", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onCut", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onDragEnd", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onDragOver", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onDragStart", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onDrop", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onInput", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onFocus", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onKeyDown", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onKeyPress", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onKeyUp", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onMouseDown", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onMouseUp", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onPaste", void 0);
            _defineProperty(_assertThisInitialized(_this), "_onSelect", void 0);
            _defineProperty(_assertThisInitialized(_this), "editor", void 0);
            _defineProperty(_assertThisInitialized(_this), "editorContainer", void 0);
            _defineProperty(_assertThisInitialized(_this), "focus", void 0);
            _defineProperty(_assertThisInitialized(_this), "blur", void 0);
            _defineProperty(_assertThisInitialized(_this), "setMode", void 0);
            _defineProperty(_assertThisInitialized(_this), "exitCurrentMode", void 0);
            _defineProperty(_assertThisInitialized(_this), "restoreEditorDOM", void 0);
            _defineProperty(_assertThisInitialized(_this), "setClipboard", void 0);
            _defineProperty(_assertThisInitialized(_this), "getClipboard", void 0);
            _defineProperty(_assertThisInitialized(_this), "getEditorKey", void 0);
            _defineProperty(_assertThisInitialized(_this), "update", void 0);
            _defineProperty(_assertThisInitialized(_this), "onDragEnter", void 0);
            _defineProperty(_assertThisInitialized(_this), "onDragLeave", void 0);
            _defineProperty(
              _assertThisInitialized(_this),
              "_handleEditorContainerRef",
              function (node) {
                _this.editorContainer = node; // Instead of having a direct ref on the child, we'll grab it here.
                // This is safe as long as the rendered structure is static (which it is).
                // This lets the child support ref={props.editorRef} without merging refs.
                _this.editor = node !== null ? node.firstChild : null;
              },
            );
            _defineProperty(_assertThisInitialized(_this), "focus", function (scrollPosition) {
              var editorState = _this.props.editorState;
              var alreadyHasFocus = editorState.getSelection().getHasFocus();
              var editorNode = _this.editor;
              if (!editorNode)
                // once in a while people call 'focus' in a setTimeout, and the node has
                // been deleted, so it can be null in that case.
                return;
              var scrollParent = Style.getScrollParent(editorNode);
              var _ref = scrollPosition || getScrollPosition(scrollParent),
                x = _ref.x,
                y = _ref.y;
              !isHTMLElement(editorNode) && invariant(false, "editorNode is not an HTMLElement");
              editorNode.focus(); // Restore scroll position
              if (scrollParent === window) window.scrollTo(x, y);
              else Scroll.setTop(scrollParent, y);
              // On Chrome and Safari, calling focus on contenteditable focuses the
              // cursor at the first character. This is something you don't expect when
              // you're clicking on an input element but not directly on a character.
              // Put the cursor back where it was before the blur.
              if (!alreadyHasFocus)
                _this.update(EditorState.forceSelection(editorState, editorState.getSelection()));
            });
            _defineProperty(_assertThisInitialized(_this), "blur", function () {
              var editorNode = _this.editor;
              if (!editorNode) return;
              !isHTMLElement(editorNode) && invariant(false, "editorNode is not an HTMLElement");
              editorNode.blur();
            });
            _defineProperty(_assertThisInitialized(_this), "setMode", function (mode) {
              var _this$props = _this.props,
                onPaste = _this$props.onPaste,
                onCut = _this$props.onCut,
                onCopy = _this$props.onCopy;
              var editHandler = _objectSpread({}, handlerMap.edit);
              if (onPaste)
                /* $FlowFixMe[incompatible-type] (>=0.117.0 site=www,mobile) This comment
                 * suppresses an error found when Flow v0.117 was deployed. To see the
                 * error delete this comment and run Flow. */ editHandler.onPaste = onPaste;
              if (onCut) editHandler.onCut = onCut;
              if (onCopy) editHandler.onCopy = onCopy;
              var handler = _objectSpread({}, handlerMap, {
                edit: editHandler,
              });
              _this._handler = handler[mode];
            });
            _defineProperty(_assertThisInitialized(_this), "exitCurrentMode", function () {
              _this.setMode("edit");
            });
            _defineProperty(
              _assertThisInitialized(_this),
              "restoreEditorDOM",
              function (scrollPosition) {
                _this.setState(
                  {
                    contentsKey: _this.state.contentsKey + 1,
                  },
                  function () {
                    _this.focus(scrollPosition);
                  },
                );
              },
            );
            _defineProperty(_assertThisInitialized(_this), "setClipboard", function (clipboard) {
              _this._clipboard = clipboard;
            });
            _defineProperty(_assertThisInitialized(_this), "getClipboard", function () {
              return _this._clipboard;
            });
            _defineProperty(_assertThisInitialized(_this), "update", function (editorState) {
              _this._latestEditorState = editorState;
              _this.props.onChange(editorState);
            });
            _defineProperty(_assertThisInitialized(_this), "onDragEnter", function () {
              _this._dragCount++;
            });
            _defineProperty(_assertThisInitialized(_this), "onDragLeave", function () {
              _this._dragCount--;
              if (_this._dragCount === 0) _this.exitCurrentMode();
            });
            _this._blockSelectEvents = false;
            _this._clipboard = null;
            _this._handler = null;
            _this._dragCount = 0;
            _this._editorKey = props.editorKey || generateRandomKey();
            _this._placeholderAccessibilityID = "placeholder-" + _this._editorKey;
            _this._latestEditorState = props.editorState;
            _this._latestCommittedEditorState = props.editorState;
            _this._onBeforeInput = _this._buildHandler("onBeforeInput");
            _this._onBlur = _this._buildHandler("onBlur");
            _this._onCharacterData = _this._buildHandler("onCharacterData");
            _this._onCompositionEnd = _this._buildHandler("onCompositionEnd");
            _this._onCompositionStart = _this._buildHandler("onCompositionStart");
            _this._onCopy = _this._buildHandler("onCopy");
            _this._onCut = _this._buildHandler("onCut");
            _this._onDragEnd = _this._buildHandler("onDragEnd");
            _this._onDragOver = _this._buildHandler("onDragOver");
            _this._onDragStart = _this._buildHandler("onDragStart");
            _this._onDrop = _this._buildHandler("onDrop");
            _this._onInput = _this._buildHandler("onInput");
            _this._onFocus = _this._buildHandler("onFocus");
            _this._onKeyDown = _this._buildHandler("onKeyDown");
            _this._onKeyPress = _this._buildHandler("onKeyPress");
            _this._onKeyUp = _this._buildHandler("onKeyUp");
            _this._onMouseDown = _this._buildHandler("onMouseDown");
            _this._onMouseUp = _this._buildHandler("onMouseUp");
            _this._onPaste = _this._buildHandler("onPaste");
            _this._onSelect = _this._buildHandler("onSelect");
            _this.getEditorKey = function () {
              return _this._editorKey;
            };
            [
              "onDownArrow",
              "onEscape",
              "onLeftArrow",
              "onRightArrow",
              "onTab",
              "onUpArrow",
            ].forEach(function (propName) {
              if (props.hasOwnProperty(propName))
                // eslint-disable-next-line no-console
                console.warn(
                  "Supplying an `".concat(propName, "` prop to `DraftEditor` has ") +
                    "been deprecated. If your handler needs access to the keyboard " +
                    "event, supply a custom `keyBindingFn` prop that falls back to " +
                    "the default one (eg. https://is.gd/wHKQ3W).",
                );
            });
            _this.state = {
              contentsKey: 0,
            };
            return _this;
          }
          /**
           * Build a method that will pass the event to the specified handler method.
           * This allows us to look up the correct handler function for the current
           * editor mode, if any has been specified.
           */ var _proto2 = DraftEditor.prototype;
          _proto2._buildHandler = function _buildHandler(eventName) {
            var _this2 = this;
            // Wrap event handlers in `flushControlled`. In sync mode, this is
            // effectively a no-op. In async mode, this ensures all updates scheduled
            // inside the handler are flushed before React yields to the browser.
            return function (e) {
              if (!_this2.props.readOnly) {
                var method = _this2._handler && _this2._handler[eventName];
                if (method) {
                  if (flushControlled)
                    flushControlled(function () {
                      return method(_this2, e);
                    });
                  else method(_this2, e);
                }
              }
            };
          };
          _proto2._showPlaceholder = function _showPlaceholder() {
            return (
              !!this.props.placeholder &&
              !this.props.editorState.isInCompositionMode() &&
              !this.props.editorState.getCurrentContent().hasText()
            );
          };
          _proto2._renderPlaceholder = function _renderPlaceholder() {
            if (this._showPlaceholder()) {
              var placeHolderProps = {
                text: nullthrows(this.props.placeholder),
                editorState: this.props.editorState,
                textAlignment: this.props.textAlignment,
                accessibilityID: this._placeholderAccessibilityID,
              };
              /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This comment
               * suppresses an error found when Flow v0.112 was deployed. To see the
               * error delete this comment and run Flow. */ return React.createElement(
                DraftEditorPlaceholder,
                placeHolderProps,
              );
            }
            return null;
          }
          /**
           * returns ariaDescribedBy prop with '{{editor_id_placeholder}}' replaced with
           * the DOM id of the placeholder (if it exists)
           * @returns aria-describedby attribute value
           */;
          _proto2._renderARIADescribedBy = function _renderARIADescribedBy() {
            var describedBy = this.props.ariaDescribedBy || "";
            var placeholderID = this._showPlaceholder() ? this._placeholderAccessibilityID : "";
            return describedBy.replace("{{editor_id_placeholder}}", placeholderID) || undefined;
          };
          _proto2.render = function render() {
            var _this$props2 = this.props,
              blockRenderMap = _this$props2.blockRenderMap,
              blockRendererFn = _this$props2.blockRendererFn,
              blockStyleFn = _this$props2.blockStyleFn,
              customStyleFn = _this$props2.customStyleFn,
              customStyleMap = _this$props2.customStyleMap,
              editorState = _this$props2.editorState,
              preventScroll = _this$props2.preventScroll,
              readOnly = _this$props2.readOnly,
              textAlignment = _this$props2.textAlignment,
              textDirectionality = _this$props2.textDirectionality;
            var rootClass = cx({
              "DraftEditor/root": true,
              "DraftEditor/alignLeft": textAlignment === "left",
              "DraftEditor/alignRight": textAlignment === "right",
              "DraftEditor/alignCenter": textAlignment === "center",
            });
            var contentStyle = {
              outline: "none",
              // fix parent-draggable Safari bug. #1326
              userSelect: "text",
              WebkitUserSelect: "text",
              whiteSpace: "pre-wrap",
              wordWrap: "break-word",
            }; // The aria-expanded and aria-haspopup properties should only be rendered
            // for a combobox.
            /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment
             * suppresses an error found when Flow v0.68 was deployed. To see the error
             * delete this comment and run Flow. */ var ariaRole = this.props.role || "textbox";
            var ariaExpanded = ariaRole === "combobox" ? !!this.props.ariaExpanded : null;
            var editorContentsProps = {
              blockRenderMap: blockRenderMap,
              blockRendererFn: blockRendererFn,
              blockStyleFn: blockStyleFn,
              customStyleMap: _objectSpread({}, DefaultDraftInlineStyle, customStyleMap),
              customStyleFn: customStyleFn,
              editorKey: this._editorKey,
              editorState: editorState,
              preventScroll: preventScroll,
              textDirectionality: textDirectionality,
            };
            return React.createElement(
              "div",
              {
                className: rootClass,
              },
              this._renderPlaceholder(),
              React.createElement(
                "div",
                {
                  className: cx("DraftEditor/editorContainer"),
                  ref: this._handleEditorContainerRef,
                },
                React.createElement(
                  "div",
                  {
                    "aria-activedescendant": readOnly ? null : this.props.ariaActiveDescendantID,
                    "aria-autocomplete": readOnly ? null : this.props.ariaAutoComplete,
                    "aria-controls": readOnly ? null : this.props.ariaControls,
                    "aria-describedby": this._renderARIADescribedBy(),
                    "aria-expanded": readOnly ? null : ariaExpanded,
                    "aria-label": this.props.ariaLabel,
                    "aria-labelledby": this.props.ariaLabelledBy,
                    "aria-multiline": this.props.ariaMultiline,
                    "aria-owns": readOnly ? null : this.props.ariaOwneeID,
                    autoCapitalize: this.props.autoCapitalize,
                    autoComplete: this.props.autoComplete,
                    autoCorrect: this.props.autoCorrect,
                    className: cx({
                      // Chrome's built-in translation feature mutates the DOM in ways
                      // that Draft doesn't expect (ex: adding <font> tags inside
                      // DraftEditorLeaf spans) and causes problems. We add notranslate
                      // here which makes its autotranslation skip over this subtree.
                      notranslate: !readOnly,
                      "public/DraftEditor/content": true,
                    }),
                    contentEditable: !readOnly,
                    "data-testid": this.props.webDriverTestID,
                    onBeforeInput: this._onBeforeInput,
                    onBlur: this._onBlur,
                    onCompositionEnd: this._onCompositionEnd,
                    onCompositionStart: this._onCompositionStart,
                    onCopy: this._onCopy,
                    onCut: this._onCut,
                    onDragEnd: this._onDragEnd,
                    onDragEnter: this.onDragEnter,
                    onDragLeave: this.onDragLeave,
                    onDragOver: this._onDragOver,
                    onDragStart: this._onDragStart,
                    onDrop: this._onDrop,
                    onFocus: this._onFocus,
                    onInput: this._onInput,
                    onKeyDown: this._onKeyDown,
                    onKeyPress: this._onKeyPress,
                    onKeyUp: this._onKeyUp,
                    onMouseUp: this._onMouseUp,
                    onPaste: this._onPaste,
                    onSelect: this._onSelect,
                    ref: this.props.editorRef,
                    role: readOnly ? null : ariaRole,
                    spellCheck: allowSpellCheck && this.props.spellCheck,
                    style: contentStyle,
                    suppressContentEditableWarning: true,
                    tabIndex: this.props.tabIndex,
                  },
                  React.createElement(UpdateDraftEditorFlags, {
                    editor: this,
                    editorState: editorState,
                  }),
                  React.createElement(
                    DraftEditorContents,
                    _extends({}, editorContentsProps, {
                      key: "contents" + this.state.contentsKey,
                    }),
                  ),
                ),
              ),
            );
          };
          _proto2.componentDidMount = function componentDidMount() {
            this._blockSelectEvents = false;
            if (!didInitODS && gkx("draft_ods_enabled")) {
              didInitODS = true;
              DraftEffects.initODS();
            }
            this.setMode("edit");
            /**
             * IE has a hardcoded "feature" that attempts to convert link text into
             * anchors in contentEditable DOM. This breaks the editor's expectations of
             * the DOM, and control is lost. Disable it to make IE behave.
             * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/
             * ie9-beta-minor-change-list.aspx
             */ if (isIE) {
              // editor can be null after mounting
              // https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback
              if (!this.editor) global.execCommand("AutoUrlDetect", false, false);
              else this.editor.ownerDocument.execCommand("AutoUrlDetect", false, false);
            }
          };
          _proto2.componentDidUpdate = function componentDidUpdate() {
            this._blockSelectEvents = false;
            this._latestEditorState = this.props.editorState;
            this._latestCommittedEditorState = this.props.editorState;
          }
          /**
           * Used via `this.focus()`.
           *
           * Force focus back onto the editor node.
           *
           * We attempt to preserve scroll position when focusing. You can also pass
           * a specified scroll position (for cases like `cut` behavior where it should
           * be restored to a known position).
           */;
          return DraftEditor;
        })(React.Component);
        _defineProperty(DraftEditor, "defaultProps", {
          ariaDescribedBy: "{{editor_id_placeholder}}",
          blockRenderMap: DefaultDraftBlockRenderMap,
          blockRendererFn: function blockRendererFn() {
            return null;
          },
          blockStyleFn: function blockStyleFn() {
            return "";
          },
          keyBindingFn: getDefaultKeyBinding,
          readOnly: false,
          spellCheck: false,
          stripPastedStyles: false,
        });
        module.exports = DraftEditor;
      },
      {
        "53705a3e48baa705": "7OXxh",
        "4c57a076d80af934": "67bzr",
        "7b18d4443450f7cf": "lp1ln",
        "9b19ac867ef719b9": "k7YGd",
        "8b18cb9c23d0dee": "iCyJB",
        "6f34af41a28b1097": "NcTHz",
        "32b49eb8d55cb122": "20E1C",
        f97ba24fffdde779: "dgUmi",
        b35ff1a1dea0fd45: "h4auX",
        f4c5d47782c1a59d: "4tFlR",
        a9bd129579e3ed4b: "2EY4X",
        bb1b09c8e1ec58ad: "21dqq",
        c85288cf47f1d0b6: "2DSAK",
        "2bd7f8a24f4fe8f2": "1GeHz",
        c999ce3625fcc3a5: "c2opx",
        "5eb51a99c42bef3f": "zRtOM",
        e3324809d1ab1216: "fgtnr",
        "67f2e284984093d9": "gSyKU",
        de4c6d5193f478b0: "9CX89",
        dc2e7b15ac5f95c8: "l5VFU",
        e1fa692a1e15b6a9: "d6MgO",
        c2b8a2b3c677a24f: "1UoK0",
        "7e2d87c6d3a4e937": "fwtV9",
      },
    ],
    "7OXxh": [
      function (require, module, exports) {
        /*
object-assign
(c) Sindre Sorhus
@license MIT
*/ "use strict";
        /* eslint-disable no-unused-vars */ var getOwnPropertySymbols =
          Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;
        function toObject(val) {
          if (val === null || val === undefined)
            throw new TypeError("Object.assign cannot be called with null or undefined");
          return Object(val);
        }
        function shouldUseNative() {
          try {
            if (!Object.assign) return false;
            // Detect buggy property enumeration order in older V8 versions.
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") return false;
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) test2["_" + String.fromCharCode(i)] = i;
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
              return test2[n];
            });
            if (order2.join("") !== "0123456789") return false;
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function (letter) {
              test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst")
              return false;
            return true;
          } catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
          }
        }
        module.exports = shouldUseNative()
          ? Object.assign
          : function (target, source) {
              var from;
              var to = toObject(target);
              var symbols;
              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) if (hasOwnProperty.call(from, key)) to[key] = from[key];
                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++)
                    if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
                }
              }
              return to;
            };
      },
      {},
    ],
    k7YGd: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DOMObserver = require("862867e988e0042a");
        var DraftModifier = require("bbdab53c829a8b64");
        var DraftOffsetKey = require("835d23f5ec26fa3d");
        var EditorState = require("9f58fcb0a9e17d7");
        var Keys = require("43569015ec91c01a");
        var UserAgent = require("aec0f97a10481c76");
        var editOnSelect = require("16c96a21ca00622b");
        var getContentEditableContainer = require("2a379819f69874d8");
        var getDraftEditorSelection = require("b7e6b44bfb4a7d06");
        var getEntityKeyForSelection = require("2d60ac251c863370");
        var nullthrows = require("fc8471643b51e5ad");
        var isIE = UserAgent.isBrowser("IE");
        /**
         * Millisecond delay to allow `compositionstart` to fire again upon
         * `compositionend`.
         *
         * This is used for Korean input to ensure that typing can continue without
         * the editor trying to render too quickly. More specifically, Safari 7.1+
         * triggers `compositionstart` a little slower than Chrome/FF, which
         * leads to composed characters being resolved and re-render occurring
         * sooner than we want.
         */ var RESOLVE_DELAY = 20;
        /**
         * A handful of variables used to track the current composition and its
         * resolution status. These exist at the module level because it is not
         * possible to have compositions occurring in multiple editors simultaneously,
         * and it simplifies state management with respect to the DraftEditor component.
         */ var resolved = false;
        var stillComposing = false;
        var domObserver = null;
        function startDOMObserver(editor) {
          if (!domObserver) {
            domObserver = new DOMObserver(getContentEditableContainer(editor));
            domObserver.start();
          }
        }
        var DraftEditorCompositionHandler = {
          /**
           * A `compositionstart` event has fired while we're still in composition
           * mode. Continue the current composition session to prevent a re-render.
           */ onCompositionStart: function onCompositionStart(editor) {
            stillComposing = true;
            startDOMObserver(editor);
          },
          /**
           * Attempt to end the current composition session.
           *
           * Defer handling because browser will still insert the chars into active
           * element after `compositionend`. If a `compositionstart` event fires
           * before `resolveComposition` executes, our composition session will
           * continue.
           *
           * The `resolved` flag is useful because certain IME interfaces fire the
           * `compositionend` event multiple times, thus queueing up multiple attempts
           * at handling the composition. Since handling the same composition event
           * twice could break the DOM, we only use the first event. Example: Arabic
           * Google Input Tools on Windows 8.1 fires `compositionend` three times.
           */ onCompositionEnd: function onCompositionEnd(editor) {
            resolved = false;
            stillComposing = false;
            setTimeout(function () {
              if (!resolved) DraftEditorCompositionHandler.resolveComposition(editor);
            }, RESOLVE_DELAY);
          },
          onSelect: editOnSelect,
          /**
           * In Safari, keydown events may fire when committing compositions. If
           * the arrow keys are used to commit, prevent default so that the cursor
           * doesn't move, otherwise it will jump back noticeably on re-render.
           */ onKeyDown: function onKeyDown(editor, e) {
            if (!stillComposing) {
              // If a keydown event is received after compositionend but before the
              // 20ms timer expires (ex: type option-E then backspace, or type A then
              // backspace in 2-Set Korean), we should immediately resolve the
              // composition and reinterpret the key press in edit mode.
              DraftEditorCompositionHandler.resolveComposition(editor);
              editor._onKeyDown(e);
              return;
            }
            if (e.which === Keys.RIGHT || e.which === Keys.LEFT) e.preventDefault();
          },
          /**
           * Keypress events may fire when committing compositions. In Firefox,
           * pressing RETURN commits the composition and inserts extra newline
           * characters that we do not want. `preventDefault` allows the composition
           * to be committed while preventing the extra characters.
           */ onKeyPress: function onKeyPress(_editor, e) {
            if (e.which === Keys.RETURN) e.preventDefault();
          },
          /**
           * Attempt to insert composed characters into the document.
           *
           * If we are still in a composition session, do nothing. Otherwise, insert
           * the characters into the document and terminate the composition session.
           *
           * If no characters were composed -- for instance, the user
           * deleted all composed characters and committed nothing new --
           * force a re-render. We also re-render when the composition occurs
           * at the beginning of a leaf, to ensure that if the browser has
           * created a new text node for the composition, we will discard it.
           *
           * Resetting innerHTML will move focus to the beginning of the editor,
           * so we update to force it back to the correct place.
           */ resolveComposition: function resolveComposition(editor) {
            if (stillComposing) return;
            var mutations = nullthrows(domObserver).stopAndFlushMutations();
            domObserver = null;
            resolved = true;
            var editorState = EditorState.set(editor._latestEditorState, {
              inCompositionMode: false,
            });
            editor.exitCurrentMode();
            if (!mutations.size) {
              editor.update(editorState);
              return;
            } // TODO, check if Facebook still needs this flag or if it could be removed.
            // Since there can be multiple mutations providing a `composedChars` doesn't
            // apply well on this new model.
            // if (
            //   gkx('draft_handlebeforeinput_composed_text') &&
            //   editor.props.handleBeforeInput &&
            //   isEventHandled(
            //     editor.props.handleBeforeInput(
            //       composedChars,
            //       editorState,
            //       event.timeStamp,
            //     ),
            //   )
            // ) {
            //   return;
            // }
            var contentState = editorState.getCurrentContent();
            mutations.forEach(function (composedChars, offsetKey) {
              var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),
                blockKey = _DraftOffsetKey$decod.blockKey,
                decoratorKey = _DraftOffsetKey$decod.decoratorKey,
                leafKey = _DraftOffsetKey$decod.leafKey;
              var _editorState$getBlock = editorState
                  .getBlockTree(blockKey)
                  .getIn([decoratorKey, "leaves", leafKey]),
                start = _editorState$getBlock.start,
                end = _editorState$getBlock.end;
              var replacementRange = editorState.getSelection().merge({
                anchorKey: blockKey,
                focusKey: blockKey,
                anchorOffset: start,
                focusOffset: end,
                isBackward: false,
              });
              var entityKey = getEntityKeyForSelection(contentState, replacementRange);
              var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);
              contentState = DraftModifier.replaceText(
                contentState,
                replacementRange,
                composedChars,
                currentStyle,
                entityKey,
              ); // We need to update the editorState so the leaf node ranges are properly
              // updated and multiple mutations are correctly applied.
              editorState = EditorState.set(editorState, {
                currentContent: contentState,
              });
            }); // When we apply the text changes to the ContentState, the selection always
            // goes to the end of the field, but it should just stay where it is
            // after compositionEnd.
            var documentSelection = getDraftEditorSelection(
              editorState,
              getContentEditableContainer(editor),
            );
            var compositionEndSelectionState = documentSelection.selectionState;
            editor.restoreEditorDOM(); // See:
            // - https://github.com/facebook/draft-js/issues/2093
            // - https://github.com/facebook/draft-js/pull/2094
            // Apply this fix only in IE for now. We can test it in
            // other browsers in the future to ensure no regressions
            var editorStateWithUpdatedSelection = isIE
              ? EditorState.forceSelection(editorState, compositionEndSelectionState)
              : EditorState.acceptSelection(editorState, compositionEndSelectionState);
            editor.update(
              EditorState.push(editorStateWithUpdatedSelection, contentState, "insert-characters"),
            );
          },
        };
        module.exports = DraftEditorCompositionHandler;
      },
      {
        "862867e988e0042a": "if2qV",
        bbdab53c829a8b64: "aeLN8",
        "835d23f5ec26fa3d": "3pjWp",
        "9f58fcb0a9e17d7": "2EY4X",
        "43569015ec91c01a": "aZASa",
        aec0f97a10481c76: "c2opx",
        "16c96a21ca00622b": "61qfE",
        "2a379819f69874d8": "7uisP",
        b7e6b44bfb4a7d06: "9fT75",
        "2d60ac251c863370": "eAypV",
        fc8471643b51e5ad: "fwtV9",
      },
    ],
    if2qV: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var UserAgent = require("ee7d3214e3838402");
        var findAncestorOffsetKey = require("85a7ce6ebe6d0472");
        var getWindowForNode = require("4717860bfa9e427a");
        var Immutable = require("bcc20d4810a14f91");
        var invariant = require("599402ef13e5d754");
        var nullthrows = require("d0a6d3b9d7a0bbbd");
        var Map = Immutable.Map;
        // Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js
        var DOM_OBSERVER_OPTIONS = {
          subtree: true,
          characterData: true,
          childList: true,
          characterDataOldValue: false,
          attributes: false,
        }; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
        var USE_CHAR_DATA = UserAgent.isBrowser("IE <= 11");
        var DOMObserver = /*#__PURE__*/ (function () {
          function DOMObserver(container) {
            var _this = this;
            _defineProperty(this, "observer", void 0);
            _defineProperty(this, "container", void 0);
            _defineProperty(this, "mutations", void 0);
            _defineProperty(this, "onCharData", void 0);
            this.container = container;
            this.mutations = Map();
            var containerWindow = getWindowForNode(container);
            if (containerWindow.MutationObserver && !USE_CHAR_DATA)
              this.observer = new containerWindow.MutationObserver(function (mutations) {
                return _this.registerMutations(mutations);
              });
            else
              this.onCharData = function (e) {
                !(e.target instanceof Node) &&
                  invariant(false, "Expected target to be an instance of Node");
                _this.registerMutation({
                  type: "characterData",
                  target: e.target,
                });
              };
          }
          var _proto = DOMObserver.prototype;
          _proto.start = function start() {
            if (this.observer) this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);
            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event
             * type is not defined by Flow's standard library */ else
              this.container.addEventListener("DOMCharacterDataModified", this.onCharData);
          };
          _proto.stopAndFlushMutations = function stopAndFlushMutations() {
            var observer = this.observer;
            if (observer) {
              this.registerMutations(observer.takeRecords());
              observer.disconnect();
            }
            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event
             * type is not defined by Flow's standard library */ else
              this.container.removeEventListener("DOMCharacterDataModified", this.onCharData);
            var mutations = this.mutations;
            this.mutations = Map();
            return mutations;
          };
          _proto.registerMutations = function registerMutations(mutations) {
            for (var i = 0; i < mutations.length; i++) this.registerMutation(mutations[i]);
          };
          _proto.getMutationTextContent = function getMutationTextContent(mutation) {
            var type = mutation.type,
              target = mutation.target,
              removedNodes = mutation.removedNodes;
            if (type === "characterData") {
              // When `textContent` is '', there is a race condition that makes
              // getting the offsetKey from the target not possible.
              // These events are also followed by a `childList`, which is the one
              // we are able to retrieve the offsetKey and apply the '' text.
              if (target.textContent !== "") {
                // IE 11 considers the enter keypress that concludes the composition
                // as an input char. This strips that newline character so the draft
                // state does not receive spurious newlines.
                if (USE_CHAR_DATA) return target.textContent.replace("\n", "");
                return target.textContent;
              }
            } else if (type === "childList") {
              if (removedNodes && removedNodes.length)
                // `characterData` events won't happen or are ignored when
                // removing the last character of a leaf node, what happens
                // instead is a `childList` event with a `removedNodes` array.
                // For this case the textContent should be '' and
                // `DraftModifier.replaceText` will make sure the content is
                // updated properly.
                return "";
              else if (target.textContent !== "")
                // Typing Chinese in an empty block in MS Edge results in a
                // `childList` event with non-empty textContent.
                // See https://github.com/facebook/draft-js/issues/2082
                return target.textContent;
            }
            return null;
          };
          _proto.registerMutation = function registerMutation(mutation) {
            var textContent = this.getMutationTextContent(mutation);
            if (textContent != null) {
              var offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));
              this.mutations = this.mutations.set(offsetKey, textContent);
            }
          };
          return DOMObserver;
        })();
        module.exports = DOMObserver;
      },
      {
        ee7d3214e3838402: "c2opx",
        "85a7ce6ebe6d0472": "2PlIl",
        "4717860bfa9e427a": "OG7uI",
        bcc20d4810a14f91: "lhHDL",
        "599402ef13e5d754": "d6MgO",
        d0a6d3b9d7a0bbbd: "fwtV9",
      },
    ],
    c2opx: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        var UserAgentData = require("c0da3551f2e0d424");
        var VersionRange = require("8de32e679f9d1dda");
        var mapObject = require("c90998bfeca91351");
        var memoizeStringOnly = require("705405c2cfc7afc1");
        /**
         * Checks to see whether `name` and `version` satisfy `query`.
         *
         * @param {string} name Name of the browser, device, engine or platform
         * @param {?string} version Version of the browser, engine or platform
         * @param {string} query Query of form "Name [range expression]"
         * @param {?function} normalizer Optional pre-processor for range expression
         * @return {boolean}
         */ function compare(name, version, query, normalizer) {
          // check for exact match with no version
          if (name === query) return true;
          // check for non-matching names
          if (!query.startsWith(name)) return false;
          // full comparison with version
          var range = query.slice(name.length);
          if (version) {
            range = normalizer ? normalizer(range) : range;
            return VersionRange.contains(range, version);
          }
          return false;
        }
        /**
         * Normalizes `version` by stripping any "NT" prefix, but only on the Windows
         * platform.
         *
         * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.
         *
         * @param {string} version
         * @return {string}
         */ function normalizePlatformVersion(version) {
          if (UserAgentData.platformName === "Windows") return version.replace(/^\s*NT/, "");
          return version;
        }
        /**
         * Provides client-side access to the authoritative PHP-generated User Agent
         * information supplied by the server.
         */ var UserAgent = {
          /**
           * Check if the User Agent browser matches `query`.
           *
           * `query` should be a string like "Chrome" or "Chrome > 33".
           *
           * Valid browser names include:
           *
           * - ACCESS NetFront
           * - AOL
           * - Amazon Silk
           * - Android
           * - BlackBerry
           * - BlackBerry PlayBook
           * - Chrome
           * - Chrome for iOS
           * - Chrome frame
           * - Facebook PHP SDK
           * - Facebook for iOS
           * - Firefox
           * - IE
           * - IE Mobile
           * - Mobile Safari
           * - Motorola Internet Browser
           * - Nokia
           * - Openwave Mobile Browser
           * - Opera
           * - Opera Mini
           * - Opera Mobile
           * - Safari
           * - UIWebView
           * - Unknown
           * - webOS
           * - etc...
           *
           * An authoritative list can be found in the PHP `BrowserDetector` class and
           * related classes in the same file (see calls to `new UserAgentBrowser` here:
           * https://fburl.com/50728104).
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "Name [range expression]"
           * @return {boolean}
           */ isBrowser: function isBrowser(query) {
            return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);
          },
          /**
           * Check if the User Agent browser uses a 32 or 64 bit architecture.
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "32" or "64".
           * @return {boolean}
           */ isBrowserArchitecture: function isBrowserArchitecture(query) {
            return compare(UserAgentData.browserArchitecture, null, query);
          },
          /**
           * Check if the User Agent device matches `query`.
           *
           * `query` should be a string like "iPhone" or "iPad".
           *
           * Valid device names include:
           *
           * - Kindle
           * - Kindle Fire
           * - Unknown
           * - iPad
           * - iPhone
           * - iPod
           * - etc...
           *
           * An authoritative list can be found in the PHP `DeviceDetector` class and
           * related classes in the same file (see calls to `new UserAgentDevice` here:
           * https://fburl.com/50728332).
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "Name"
           * @return {boolean}
           */ isDevice: function isDevice(query) {
            return compare(UserAgentData.deviceName, null, query);
          },
          /**
           * Check if the User Agent rendering engine matches `query`.
           *
           * `query` should be a string like "WebKit" or "WebKit >= 537".
           *
           * Valid engine names include:
           *
           * - Gecko
           * - Presto
           * - Trident
           * - WebKit
           * - etc...
           *
           * An authoritative list can be found in the PHP `RenderingEngineDetector`
           * class related classes in the same file (see calls to `new
           * UserAgentRenderingEngine` here: https://fburl.com/50728617).
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "Name [range expression]"
           * @return {boolean}
           */ isEngine: function isEngine(query) {
            return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);
          },
          /**
           * Check if the User Agent platform matches `query`.
           *
           * `query` should be a string like "Windows" or "iOS 5 - 6".
           *
           * Valid platform names include:
           *
           * - Android
           * - BlackBerry OS
           * - Java ME
           * - Linux
           * - Mac OS X
           * - Mac OS X Calendar
           * - Mac OS X Internet Account
           * - Symbian
           * - SymbianOS
           * - Windows
           * - Windows Mobile
           * - Windows Phone
           * - iOS
           * - iOS Facebook Integration Account
           * - iOS Facebook Social Sharing UI
           * - webOS
           * - Chrome OS
           * - etc...
           *
           * An authoritative list can be found in the PHP `PlatformDetector` class and
           * related classes in the same file (see calls to `new UserAgentPlatform`
           * here: https://fburl.com/50729226).
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "Name [range expression]"
           * @return {boolean}
           */ isPlatform: function isPlatform(query) {
            return compare(
              UserAgentData.platformName,
              UserAgentData.platformFullVersion,
              query,
              normalizePlatformVersion,
            );
          },
          /**
           * Check if the User Agent platform is a 32 or 64 bit architecture.
           *
           * @note Function results are memoized
           *
           * @param {string} query Query of the form "32" or "64".
           * @return {boolean}
           */ isPlatformArchitecture: function isPlatformArchitecture(query) {
            return compare(UserAgentData.platformArchitecture, null, query);
          },
        };
        module.exports = mapObject(UserAgent, memoizeStringOnly);
      },
      {
        c0da3551f2e0d424: "2eoh5",
        "8de32e679f9d1dda": "akkdC",
        c90998bfeca91351: "iHkxY",
        "705405c2cfc7afc1": "lVSPu",
      },
    ],
    "2eoh5": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ /**
         * Usage note:
         * This module makes a best effort to export the same data we would internally.
         * At Facebook we use a server-generated module that does the parsing and
         * exports the data for the client to use. We can't rely on a server-side
         * implementation in open source so instead we make use of an open source
         * library to do the heavy lifting and then make some adjustments as necessary.
         * It's likely there will be some differences. Some we can smooth over.
         * Others are going to be harder.
         */ "use strict";
        var UAParser = require("c504fe0f305691ba");
        var UNKNOWN = "Unknown";
        var PLATFORM_MAP = {
          "Mac OS": "Mac OS X",
        };
        /**
         * Convert from UAParser platform name to what we expect.
         */ function convertPlatformName(name) {
          return PLATFORM_MAP[name] || name;
        }
        /**
         * Get the version number in parts. This is very naive. We actually get major
         * version as a part of UAParser already, which is generally good enough, but
         * let's get the minor just in case.
         */ function getBrowserVersion(version) {
          if (!version)
            return {
              major: "",
              minor: "",
            };
          var parts = version.split(".");
          return {
            major: parts[0],
            minor: parts[1],
          };
        }
        /**
         * Get the UA data fom UAParser and then convert it to the format we're
         * expecting for our APIS.
         */ var parser = new UAParser();
        var results = parser.getResult(); // Do some conversion first.
        var browserVersionData = getBrowserVersion(results.browser.version);
        var uaData = {
          browserArchitecture: results.cpu.architecture || UNKNOWN,
          browserFullVersion: results.browser.version || UNKNOWN,
          browserMinorVersion: browserVersionData.minor || UNKNOWN,
          browserName: results.browser.name || UNKNOWN,
          browserVersion: results.browser.major || UNKNOWN,
          deviceName: results.device.model || UNKNOWN,
          engineName: results.engine.name || UNKNOWN,
          engineVersion: results.engine.version || UNKNOWN,
          platformArchitecture: results.cpu.architecture || UNKNOWN,
          platformName: convertPlatformName(results.os.name) || UNKNOWN,
          platformVersion: results.os.version || UNKNOWN,
          platformFullVersion: results.os.version || UNKNOWN,
        };
        module.exports = uaData;
      },
      { c504fe0f305691ba: "2fabB" },
    ],
    "2fabB": [
      function (require, module, exports) {
        /////////////////////////////////////////////////////////////////////////////////
        /* UAParser.js v0.7.37
   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
   MIT License */ /*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */ /////////////////////////////////////////////////////////////////////////////////
        (function (window1, undefined) {
          "use strict";
          //////////////
          // Constants
          /////////////
          var LIBVERSION = "0.7.37",
            EMPTY = "",
            UNKNOWN = "?",
            FUNC_TYPE = "function",
            UNDEF_TYPE = "undefined",
            OBJ_TYPE = "object",
            STR_TYPE = "string",
            MAJOR = "major",
            MODEL = "model",
            NAME = "name",
            TYPE = "type",
            VENDOR = "vendor",
            VERSION = "version",
            ARCHITECTURE = "architecture",
            CONSOLE = "console",
            MOBILE = "mobile",
            TABLET = "tablet",
            SMARTTV = "smarttv",
            WEARABLE = "wearable",
            EMBEDDED = "embedded",
            UA_MAX_LENGTH = 500;
          var AMAZON = "Amazon",
            APPLE = "Apple",
            ASUS = "ASUS",
            BLACKBERRY = "BlackBerry",
            BROWSER = "Browser",
            CHROME = "Chrome",
            EDGE = "Edge",
            FIREFOX = "Firefox",
            GOOGLE = "Google",
            HUAWEI = "Huawei",
            LG = "LG",
            MICROSOFT = "Microsoft",
            MOTOROLA = "Motorola",
            OPERA = "Opera",
            SAMSUNG = "Samsung",
            SHARP = "Sharp",
            SONY = "Sony",
            XIAOMI = "Xiaomi",
            ZEBRA = "Zebra",
            FACEBOOK = "Facebook",
            CHROMIUM_OS = "Chromium OS",
            MAC_OS = "Mac OS";
          ///////////
          // Helper
          //////////
          var extend = function (regexes, extensions) {
              var mergedRegexes = {};
              for (var i in regexes)
                if (extensions[i] && extensions[i].length % 2 === 0)
                  mergedRegexes[i] = extensions[i].concat(regexes[i]);
                else mergedRegexes[i] = regexes[i];
              return mergedRegexes;
            },
            enumerize = function (arr) {
              var enums = {};
              for (var i = 0; i < arr.length; i++) enums[arr[i].toUpperCase()] = arr[i];
              return enums;
            },
            has = function (str1, str2) {
              return typeof str1 === STR_TYPE
                ? lowerize(str2).indexOf(lowerize(str1)) !== -1
                : false;
            },
            lowerize = function (str) {
              return str.toLowerCase();
            },
            majorize = function (version) {
              return typeof version === STR_TYPE
                ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0]
                : undefined;
            },
            trim = function (str, len) {
              if (typeof str === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
              }
            };
          ///////////////
          // Map helper
          //////////////
          var rgxMapper = function (ua, arrays) {
              var i = 0,
                j,
                k,
                p,
                q,
                matches,
                match;
              // loop through all regexes maps
              while (i < arrays.length && !matches) {
                var regex = arrays[i],
                  props = arrays[i + 1]; // odd sequence (1,3,5,..)
                j = k = 0;
                // try matching uastring with regexes
                while (j < regex.length && !matches) {
                  if (!regex[j]) break;
                  matches = regex[j++].exec(ua);
                  if (!!matches)
                    for (p = 0; p < props.length; p++) {
                      match = matches[++k];
                      q = props[p];
                      // check if given property is actually array
                      if (typeof q === OBJ_TYPE && q.length > 0) {
                        if (q.length === 2) {
                          if (typeof q[1] == FUNC_TYPE)
                            // assign modified match
                            this[q[0]] = q[1].call(this, match);
                          // assign given value, ignore regex match
                          else this[q[0]] = q[1];
                        } else if (q.length === 3) {
                          // check whether function or regex
                          if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test))
                            // call function (usually string mapper)
                            this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                          // sanitize match using given regex
                          else this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                        } else if (q.length === 4)
                          this[q[0]] = match
                            ? q[3].call(this, match.replace(q[1], q[2]))
                            : undefined;
                      } else this[q] = match ? match : undefined;
                    }
                }
                i += 2;
              }
            },
            strMapper = function (str, map) {
              for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0)
                  for (var j = 0; j < map[i].length; j++) {
                    if (has(map[i][j], str)) return i === UNKNOWN ? undefined : i;
                  }
                else if (has(map[i], str)) return i === UNKNOWN ? undefined : i;
              }
              return str;
            };
          ///////////////
          // String map
          //////////////
          // Safari < 3.0
          var oldSafariMap = {
              "1.0": "/8",
              1.2: "/1",
              1.3: "/3",
              "2.0": "/412",
              "2.0.2": "/416",
              "2.0.3": "/417",
              "2.0.4": "/419",
              "?": "/",
            },
            windowsVersionMap = {
              ME: "4.90",
              "NT 3.11": "NT3.51",
              "NT 4.0": "NT4.0",
              2000: "NT 5.0",
              XP: ["NT 5.1", "NT 5.2"],
              Vista: "NT 6.0",
              7: "NT 6.1",
              8: "NT 6.2",
              8.1: "NT 6.3",
              10: ["NT 6.4", "NT 10.0"],
              RT: "ARM",
            };
          //////////////
          // Regex map
          /////////////
          var regexes = {
            browser: [
              [
                /\b(?:crmo|crios)\/([\w\.]+)/i, // Chrome for Android/iOS
              ],
              [VERSION, [NAME, "Chrome"]],
              [
                /edg(?:e|ios|a)?\/([\w\.]+)/i, // Microsoft Edge
              ],
              [VERSION, [NAME, "Edge"]],
              [
                // Presto based
                /(opera mini)\/([-\w\.]+)/i,
                /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i, // Opera
              ],
              [NAME, VERSION],
              [
                /opios[\/ ]+([\w\.]+)/i, // Opera mini on iphone >= 8.0
              ],
              [VERSION, [NAME, OPERA + " Mini"]],
              [
                /\bopr\/([\w\.]+)/i, // Opera Webkit
              ],
              [VERSION, [NAME, OPERA]],
              [
                // Mixed
                /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i, // Baidu
              ],
              [VERSION, [NAME, "Baidu"]],
              [
                /(kindle)\/([\w\.]+)/i,
                /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                // Trident based
                /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
                /(?:ms|\()(ie) ([\w\.]+)/i,
                // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                /(heytap|ovi)browser\/([\d\.]+)/i,
                /(weibo)__([\d\.]+)/i, // Weibo
              ],
              [NAME, VERSION],
              [
                /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i, // UCBrowser
              ],
              [VERSION, [NAME, "UC" + BROWSER]],
              [
                /microm.+\bqbcore\/([\w\.]+)/i,
                /\bqbcore\/([\w\.]+).+microm/i,
                /micromessenger\/([\w\.]+)/i, // WeChat
              ],
              [VERSION, [NAME, "WeChat"]],
              [
                /konqueror\/([\w\.]+)/i, // Konqueror
              ],
              [VERSION, [NAME, "Konqueror"]],
              [
                /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i, // IE11
              ],
              [VERSION, [NAME, "IE"]],
              [
                /ya(?:search)?browser\/([\w\.]+)/i, // Yandex
              ],
              [VERSION, [NAME, "Yandex"]],
              [
                /slbrowser\/([\w\.]+)/i, // Smart Lenovo Browser
              ],
              [VERSION, [NAME, "Smart Lenovo " + BROWSER]],
              [
                /(avast|avg)\/([\w\.]+)/i, // Avast/AVG Secure Browser
              ],
              [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
              [
                /\bfocus\/([\w\.]+)/i, // Firefox Focus
              ],
              [VERSION, [NAME, FIREFOX + " Focus"]],
              [
                /\bopt\/([\w\.]+)/i, // Opera Touch
              ],
              [VERSION, [NAME, OPERA + " Touch"]],
              [
                /coc_coc\w+\/([\w\.]+)/i, // Coc Coc Browser
              ],
              [VERSION, [NAME, "Coc Coc"]],
              [
                /dolfin\/([\w\.]+)/i, // Dolphin
              ],
              [VERSION, [NAME, "Dolphin"]],
              [
                /coast\/([\w\.]+)/i, // Opera Coast
              ],
              [VERSION, [NAME, OPERA + " Coast"]],
              [
                /miuibrowser\/([\w\.]+)/i, // MIUI Browser
              ],
              [VERSION, [NAME, "MIUI " + BROWSER]],
              [
                /fxios\/([-\w\.]+)/i, // Firefox for iOS
              ],
              [VERSION, [NAME, FIREFOX]],
              [
                /\bqihu|(qi?ho?o?|360)browser/i, // 360
              ],
              [[NAME, "360 " + BROWSER]],
              [/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],
              [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
              [
                /samsungbrowser\/([\w\.]+)/i, // Samsung Internet
              ],
              [VERSION, [NAME, SAMSUNG + " Internet"]],
              [
                /(comodo_dragon)\/([\w\.]+)/i, // Comodo Dragon
              ],
              [[NAME, /_/g, " "], VERSION],
              [
                /metasr[\/ ]?([\d\.]+)/i, // Sogou Explorer
              ],
              [VERSION, [NAME, "Sogou Explorer"]],
              [
                /(sogou)mo\w+\/([\d\.]+)/i, // Sogou Mobile
              ],
              [[NAME, "Sogou Mobile"], VERSION],
              [
                /(electron)\/([\w\.]+) safari/i,
                /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i, // QQBrowser/2345 Browser
              ],
              [NAME, VERSION],
              [
                /(lbbrowser)/i,
                /\[(linkedin)app\]/i, // LinkedIn App for iOS & Android
              ],
              [NAME],
              [
                // WebView
                /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i, // Facebook App for iOS & Android
              ],
              [[NAME, FACEBOOK], VERSION],
              [
                /(Klarna)\/([\w\.]+)/i,
                /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
                /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
                /safari (line)\/([\w\.]+)/i,
                /\b(line)\/([\w\.]+)\/iab/i,
                /(alipay)client\/([\w\.]+)/i,
                /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i, // Chromium/Instagram/Snapchat
              ],
              [NAME, VERSION],
              [
                /\bgsa\/([\w\.]+) .*safari\//i, // Google Search Appliance on iOS
              ],
              [VERSION, [NAME, "GSA"]],
              [
                /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i, // TikTok
              ],
              [VERSION, [NAME, "TikTok"]],
              [
                /headlesschrome(?:\/([\w\.]+)| )/i, // Chrome Headless
              ],
              [VERSION, [NAME, CHROME + " Headless"]],
              [
                / wv\).+(chrome)\/([\w\.]+)/i, // Chrome WebView
              ],
              [[NAME, CHROME + " WebView"], VERSION],
              [
                /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i, // Android Browser
              ],
              [VERSION, [NAME, "Android " + BROWSER]],
              [
                /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i, // Chrome/OmniWeb/Arora/Tizen/Nokia
              ],
              [NAME, VERSION],
              [
                /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i, // Mobile Safari
              ],
              [VERSION, [NAME, "Mobile Safari"]],
              [
                /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i, // Safari & Safari Mobile
              ],
              [VERSION, NAME],
              [
                /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i, // Safari < 3.0
              ],
              [NAME, [VERSION, strMapper, oldSafariMap]],
              [/(webkit|khtml)\/([\w\.]+)/i],
              [NAME, VERSION],
              [
                // Gecko based
                /(navigator|netscape\d?)\/([-\w\.]+)/i, // Netscape
              ],
              [[NAME, "Netscape"], VERSION],
              [
                /mobile vr; rv:([\w\.]+)\).+firefox/i, // Firefox Reality
              ],
              [VERSION, [NAME, FIREFOX + " Reality"]],
              [
                /ekiohf.+(flow)\/([\w\.]+)/i,
                /(swiftfox)/i,
                /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                /(firefox)\/([\w\.]+)/i,
                /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                // Other
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                /(links) \(([\w\.]+)/i,
                /panasonic;(viera)/i, // Panasonic Viera
              ],
              [NAME, VERSION],
              [
                /(cobalt)\/([\w\.]+)/i, // Cobalt
              ],
              [NAME, [VERSION, /master.|lts./, ""]],
            ],
            cpu: [
              [
                /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i, // AMD64 (x64)
              ],
              [[ARCHITECTURE, "amd64"]],
              [
                /(ia32(?=;))/i, // IA32 (quicktime)
              ],
              [[ARCHITECTURE, lowerize]],
              [
                /((?:i[346]|x)86)[;\)]/i, // IA32 (x86)
              ],
              [[ARCHITECTURE, "ia32"]],
              [
                /\b(aarch64|arm(v?8e?l?|_?64))\b/i, // ARM64
              ],
              [[ARCHITECTURE, "arm64"]],
              [
                /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i, // ARMHF
              ],
              [[ARCHITECTURE, "armhf"]],
              [
                // PocketPC mistakenly identified as PowerPC
                /windows (ce|mobile); ppc;/i,
              ],
              [[ARCHITECTURE, "arm"]],
              [
                /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i, // PowerPC
              ],
              [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
              [
                /(sun4\w)[;\)]/i, // SPARC
              ],
              [[ARCHITECTURE, "sparc"]],
              [
                /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i,
              ],
              [[ARCHITECTURE, lowerize]],
            ],
            device: [
              [
                //////////////////////////
                // MOBILES & TABLETS
                /////////////////////////
                // Samsung
                /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i,
              ],
              [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
              [
                /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                /samsung[- ]([-\w]+)/i,
                /sec-(sgh\w+)/i,
              ],
              [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
              [
                // Apple
                /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i, // iPod/iPhone
              ],
              [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
              [
                /\((ipad);[-\w\),; ]+apple/i,
                /applecoremedia\/[\w\.]+ \((ipad)/i,
                /\b(ipad)\d\d?,\d\d?[;\]].+ios/i,
              ],
              [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
              [/(macintosh);/i],
              [MODEL, [VENDOR, APPLE]],
              [
                // Sharp
                /\b(sh-?[altvz]?\d\d[a-ekm]?)/i,
              ],
              [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
              [
                // Huawei
                /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i,
              ],
              [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
              [
                /(?:huawei|honor)([-\w ]+)[;\)]/i,
                /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i,
              ],
              [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
              [
                // Xiaomi
                /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
                /\b; (\w+) build\/hm\1/i,
                /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
                /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i, // Xiaomi Mi
              ],
              [
                [MODEL, /_/g, " "],
                [VENDOR, XIAOMI],
                [TYPE, MOBILE],
              ],
              [
                /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
                /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i, // Mi Pad tablets
              ],
              [
                [MODEL, /_/g, " "],
                [VENDOR, XIAOMI],
                [TYPE, TABLET],
              ],
              [
                // OPPO
                /; (\w+) bui.+ oppo/i,
                /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i,
              ],
              [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
              [
                // Vivo
                /vivo (\w+)(?: bui|\))/i,
                /\b(v[12]\d{3}\w?[at])(?: bui|;)/i,
              ],
              [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
              [
                // Realme
                /\b(rmx[1-3]\d{3})(?: bui|;|\))/i,
              ],
              [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
              [
                // Motorola
                /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                /\bmot(?:orola)?[- ](\w*)/i,
                /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i,
              ],
              [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
              [/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
              [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
              [
                // LG
                /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i,
              ],
              [MODEL, [VENDOR, LG], [TYPE, TABLET]],
              [
                /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                /\blg-?([\d\w]+) bui/i,
              ],
              [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
              [
                // Lenovo
                /(ideatab[-\w ]+)/i,
                /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i,
              ],
              [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
              [
                // Nokia
                /(?:maemo|nokia).*(n900|lumia \d+)/i,
                /nokia[-_ ]?([-\w\.]*)/i,
              ],
              [
                [MODEL, /_/g, " "],
                [VENDOR, "Nokia"],
                [TYPE, MOBILE],
              ],
              [
                // Google
                /(pixel c)\b/i, // Google Pixel C
              ],
              [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
              [
                /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i, // Google Pixel
              ],
              [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
              [
                // Sony
                /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i,
              ],
              [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
              [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
              [
                [MODEL, "Xperia Tablet"],
                [VENDOR, SONY],
                [TYPE, TABLET],
              ],
              [
                // OnePlus
                / (kb2005|in20[12]5|be20[12][59])\b/i,
                /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i,
              ],
              [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
              [
                // Amazon
                /(alexa)webm/i,
                /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
                /(kf[a-z]+)( bui|\)).+silk\//i, // Kindle Fire HD
              ],
              [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
              [
                /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i, // Fire Phone
              ],
              [
                [MODEL, /(.+)/g, "Fire Phone $1"],
                [VENDOR, AMAZON],
                [TYPE, MOBILE],
              ],
              [
                // BlackBerry
                /(playbook);[-\w\),; ]+(rim)/i, // BlackBerry PlayBook
              ],
              [MODEL, VENDOR, [TYPE, TABLET]],
              [
                /\b((?:bb[a-f]|st[hv])100-\d)/i,
                /\(bb10; (\w+)/i, // BlackBerry 10
              ],
              [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
              [
                // Asus
                /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i,
              ],
              [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
              [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
              [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
              [
                // HTC
                /(nexus 9)/i, // HTC Nexus 9
              ],
              [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
              [
                /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                // ZTE
                /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i, // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
              ],
              [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
              [
                // Acer
                /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i,
              ],
              [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
              [
                // Meizu
                /droid.+; (m[1-5] note) bui/i,
                /\bmz-([-\w]{2,})/i,
              ],
              [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
              [
                // Ulefone
                /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i,
              ],
              [MODEL, [VENDOR, "Ulefone"], [TYPE, MOBILE]],
              [
                // MIXED
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                /(hp) ([\w ]+\w)/i,
                /(asus)-?(\w+)/i,
                /(microsoft); (lumia[\w ]+)/i,
                /(lenovo)[-_ ]?([-\w]+)/i,
                /(jolla)/i,
                /(oppo) ?([\w ]+) bui/i, // OPPO
              ],
              [VENDOR, MODEL, [TYPE, MOBILE]],
              [
                /(kobo)\s(ereader|touch)/i,
                /(archos) (gamepad2?)/i,
                /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                /(kindle)\/([\w\.]+)/i,
                /(nook)[\w ]+build\/(\w+)/i,
                /(dell) (strea[kpr\d ]*[\dko])/i,
                /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                /(trinity)[- ]*(t\d{3}) bui/i,
                /(gigaset)[- ]+(q\w{1,9}) bui/i,
                /(vodafone) ([\w ]+)(?:\)| bui)/i, // Vodafone
              ],
              [VENDOR, MODEL, [TYPE, TABLET]],
              [
                /(surface duo)/i, // Surface Duo
              ],
              [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
              [
                /droid [\d\.]+; (fp\du?)(?: b|\))/i, // Fairphone
              ],
              [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
              [
                /(u304aa)/i, // AT&T
              ],
              [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
              [
                /\bsie-(\w*)/i, // Siemens
              ],
              [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
              [
                /\b(rct\w+) b/i, // RCA Tablets
              ],
              [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
              [
                /\b(venue[\d ]{2,7}) b/i, // Dell Venue Tablets
              ],
              [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
              [
                /\b(q(?:mv|ta)\w+) b/i, // Verizon Tablet
              ],
              [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
              [
                /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i, // Barnes & Noble Tablet
              ],
              [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
              [/\b(tm\d{3}\w+) b/i],
              [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
              [
                /\b(k88) b/i, // ZTE K Series Tablet
              ],
              [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
              [
                /\b(nx\d{3}j) b/i, // ZTE Nubia
              ],
              [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
              [
                /\b(gen\d{3}) b.+49h/i, // Swiss GEN Mobile
              ],
              [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
              [
                /\b(zur\d{3}) b/i, // Swiss ZUR Tablet
              ],
              [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
              [
                /\b((zeki)?tb.*\b) b/i, // Zeki Tablets
              ],
              [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
              [
                /\b([yr]\d{2}) b/i,
                /\b(dragon[- ]+touch |dt)(\w{5}) b/i, // Dragon Touch Tablet
              ],
              [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
              [
                /\b(ns-?\w{0,9}) b/i, // Insignia Tablets
              ],
              [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
              [
                /\b((nxa|next)-?\w{0,9}) b/i, // NextBook Tablets
              ],
              [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
              [
                /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i, // Voice Xtreme Phones
              ],
              [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
              [
                /\b(lvtel\-)?(v1[12]) b/i, // LvTel Phones
              ],
              [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
              [
                /\b(ph-1) /i, // Essential PH-1
              ],
              [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
              [
                /\b(v(100md|700na|7011|917g).*\b) b/i, // Envizen Tablets
              ],
              [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
              [
                /\b(trio[-\w\. ]+) b/i, // MachSpeed Tablets
              ],
              [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
              [
                /\btu_(1491) b/i, // Rotor Tablets
              ],
              [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
              [
                /(shield[\w ]+) b/i, // Nvidia Shield Tablets
              ],
              [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
              [
                /(sprint) (\w+)/i, // Sprint Phones
              ],
              [VENDOR, MODEL, [TYPE, MOBILE]],
              [
                /(kin\.[onetw]{3})/i, // Microsoft Kin
              ],
              [
                [MODEL, /\./g, " "],
                [VENDOR, MICROSOFT],
                [TYPE, MOBILE],
              ],
              [
                /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i, // Zebra
              ],
              [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
              [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
              [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
              [
                ///////////////////
                // SMARTTVS
                ///////////////////
                /smart-tv.+(samsung)/i, // Samsung
              ],
              [VENDOR, [TYPE, SMARTTV]],
              [/hbbtv.+maple;(\d+)/i],
              [
                [MODEL, /^/, "SmartTV"],
                [VENDOR, SAMSUNG],
                [TYPE, SMARTTV],
              ],
              [
                /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i, // LG SmartTV
              ],
              [
                [VENDOR, LG],
                [TYPE, SMARTTV],
              ],
              [
                /(apple) ?tv/i, // Apple TV
              ],
              [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
              [
                /crkey/i, // Google Chromecast
              ],
              [
                [MODEL, CHROME + "cast"],
                [VENDOR, GOOGLE],
                [TYPE, SMARTTV],
              ],
              [
                /droid.+aft(\w+)( bui|\))/i, // Fire TV
              ],
              [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
              [
                /\(dtv[\);].+(aquos)/i,
                /(aquos-tv[\w ]+)\)/i, // Sharp
              ],
              [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
              [
                /(bravia[\w ]+)( bui|\))/i, // Sony
              ],
              [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
              [
                /(mitv-\w{5}) bui/i, // Xiaomi
              ],
              [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
              [
                /Hbbtv.*(technisat) (.*);/i, // TechniSAT
              ],
              [VENDOR, MODEL, [TYPE, SMARTTV]],
              [
                /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
                /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i, // HbbTV devices
              ],
              [
                [VENDOR, trim],
                [MODEL, trim],
                [TYPE, SMARTTV],
              ],
              [
                /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i, // SmartTV from Unidentified Vendors
              ],
              [[TYPE, SMARTTV]],
              [
                ///////////////////
                // CONSOLES
                ///////////////////
                /(ouya)/i,
                /(nintendo) ([wids3utch]+)/i, // Nintendo
              ],
              [VENDOR, MODEL, [TYPE, CONSOLE]],
              [
                /droid.+; (shield) bui/i, // Nvidia
              ],
              [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
              [
                /(playstation [345portablevi]+)/i, // Playstation
              ],
              [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
              [
                /\b(xbox(?: one)?(?!; xbox))[\); ]/i, // Microsoft Xbox
              ],
              [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
              [
                ///////////////////
                // WEARABLES
                ///////////////////
                /((pebble))app/i, // Pebble
              ],
              [VENDOR, MODEL, [TYPE, WEARABLE]],
              [
                /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i, // Apple Watch
              ],
              [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
              [
                /droid.+; (glass) \d/i, // Google Glass
              ],
              [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
              [/droid.+; (wt63?0{2,3})\)/i],
              [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
              [
                /(quest( 2| pro)?)/i, // Oculus Quest
              ],
              [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
              [
                ///////////////////
                // EMBEDDED
                ///////////////////
                /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i, // Tesla
              ],
              [VENDOR, [TYPE, EMBEDDED]],
              [
                /(aeobc)\b/i, // Echo Dot
              ],
              [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
              [
                ////////////////////
                // MIXED (GENERIC)
                ///////////////////
                /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i, // Android Phones from Unidentified Vendors
              ],
              [MODEL, [TYPE, MOBILE]],
              [
                /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i, // Android Tablets from Unidentified Vendors
              ],
              [MODEL, [TYPE, TABLET]],
              [
                /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i, // Unidentifiable Tablet
              ],
              [[TYPE, TABLET]],
              [
                /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i, // Unidentifiable Mobile
              ],
              [[TYPE, MOBILE]],
              [
                /(android[-\w\. ]{0,9});.+buil/i, // Generic Android Device
              ],
              [MODEL, [VENDOR, "Generic"]],
            ],
            engine: [
              [
                /windows.+ edge\/([\w\.]+)/i, // EdgeHTML
              ],
              [VERSION, [NAME, EDGE + "HTML"]],
              [
                /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i, // Blink
              ],
              [VERSION, [NAME, "Blink"]],
              [
                /(presto)\/([\w\.]+)/i,
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                /ekioh(flow)\/([\w\.]+)/i,
                /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                /(icab)[\/ ]([23]\.[\d\.]+)/i,
                /\b(libweb)/i,
              ],
              [NAME, VERSION],
              [
                /rv\:([\w\.]{1,9})\b.+(gecko)/i, // Gecko
              ],
              [VERSION, NAME],
            ],
            os: [
              [
                // Windows
                /microsoft (windows) (vista|xp)/i, // Windows (iTunes)
              ],
              [NAME, VERSION],
              [
                /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, // Windows Phone
              ],
              [NAME, [VERSION, strMapper, windowsVersionMap]],
              [
                /windows nt 6\.2; (arm)/i,
                /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i,
              ],
              [
                [VERSION, strMapper, windowsVersionMap],
                [NAME, "Windows"],
              ],
              [
                // iOS/macOS
                /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                /cfnetwork\/.+darwin/i,
              ],
              [
                [VERSION, /_/g, "."],
                [NAME, "iOS"],
              ],
              [
                /(mac os x) ?([\w\. ]*)/i,
                /(macintosh|mac_powerpc\b)(?!.+haiku)/i, // Mac OS
              ],
              [
                [NAME, MAC_OS],
                [VERSION, /_/g, "."],
              ],
              [
                // Mobile OSes
                /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i, // Android-x86/HarmonyOS
              ],
              [VERSION, NAME],
              [
                /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                /(blackberry)\w*\/([\w\.]*)/i,
                /(tizen|kaios)[\/ ]([\w\.]+)/i,
                /\((series40);/i, // Series 40
              ],
              [NAME, VERSION],
              [
                /\(bb(10);/i, // BlackBerry 10
              ],
              [VERSION, [NAME, BLACKBERRY]],
              [
                /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i, // Symbian
              ],
              [VERSION, [NAME, "Symbian"]],
              [
                /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i, // Firefox OS
              ],
              [VERSION, [NAME, FIREFOX + " OS"]],
              [
                /web0s;.+rt(tv)/i,
                /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i, // WebOS
              ],
              [VERSION, [NAME, "webOS"]],
              [
                /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i, // watchOS
              ],
              [VERSION, [NAME, "watchOS"]],
              [
                // Google Chromecast
                /crkey\/([\d\.]+)/i, // Google Chromecast
              ],
              [VERSION, [NAME, CHROME + "cast"]],
              [
                /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i, // Chromium OS
              ],
              [[NAME, CHROMIUM_OS], VERSION],
              [
                // Smart TVs
                /panasonic;(viera)/i,
                /(netrange)mmh/i,
                /(nettv)\/(\d+\.[\w\.]+)/i,
                // Console
                /(nintendo|playstation) ([wids345portablevuch]+)/i,
                /(xbox); +xbox ([^\);]+)/i,
                // Other
                /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                /(mint)[\/\(\) ]?(\w*)/i,
                /(mageia|vectorlinux)[; ]/i,
                /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                /(hurd|linux) ?([\w\.]*)/i,
                /(gnu) ?([\w\.]*)/i,
                /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                /(haiku) (\w+)/i, // Haiku
              ],
              [NAME, VERSION],
              [
                /(sunos) ?([\w\.\d]*)/i, // Solaris
              ],
              [[NAME, "Solaris"], VERSION],
              [
                /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
                /(unix) ?([\w\.]*)/i, // UNIX
              ],
              [NAME, VERSION],
            ],
          };
          /////////////////
          // Constructor
          ////////////////
          var UAParser = function (ua, extensions) {
            if (typeof ua === OBJ_TYPE) {
              extensions = ua;
              ua = undefined;
            }
            if (!(this instanceof UAParser)) return new UAParser(ua, extensions).getResult();
            var _navigator =
              typeof window1 !== UNDEF_TYPE && window1.navigator ? window1.navigator : undefined;
            var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
            var _uach =
              _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined;
            var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
            var _isSelfNav = _navigator && _navigator.userAgent == _ua;
            this.getBrowser = function () {
              var _browser = {};
              _browser[NAME] = undefined;
              _browser[VERSION] = undefined;
              rgxMapper.call(_browser, _ua, _rgxmap.browser);
              _browser[MAJOR] = majorize(_browser[VERSION]);
              // Brave-specific detection
              if (
                _isSelfNav &&
                _navigator &&
                _navigator.brave &&
                typeof _navigator.brave.isBrave == FUNC_TYPE
              )
                _browser[NAME] = "Brave";
              return _browser;
            };
            this.getCPU = function () {
              var _cpu = {};
              _cpu[ARCHITECTURE] = undefined;
              rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
              return _cpu;
            };
            this.getDevice = function () {
              var _device = {};
              _device[VENDOR] = undefined;
              _device[MODEL] = undefined;
              _device[TYPE] = undefined;
              rgxMapper.call(_device, _ua, _rgxmap.device);
              if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) _device[TYPE] = MOBILE;
              // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
              if (
                _isSelfNav &&
                _device[MODEL] == "Macintosh" &&
                _navigator &&
                typeof _navigator.standalone !== UNDEF_TYPE &&
                _navigator.maxTouchPoints &&
                _navigator.maxTouchPoints > 2
              ) {
                _device[MODEL] = "iPad";
                _device[TYPE] = TABLET;
              }
              return _device;
            };
            this.getEngine = function () {
              var _engine = {};
              _engine[NAME] = undefined;
              _engine[VERSION] = undefined;
              rgxMapper.call(_engine, _ua, _rgxmap.engine);
              return _engine;
            };
            this.getOS = function () {
              var _os = {};
              _os[NAME] = undefined;
              _os[VERSION] = undefined;
              rgxMapper.call(_os, _ua, _rgxmap.os);
              if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != "Unknown")
                _os[NAME] = _uach.platform
                  .replace(/chrome os/i, CHROMIUM_OS)
                  .replace(/macos/i, MAC_OS); // backward compatibility
              return _os;
            };
            this.getResult = function () {
              return {
                ua: this.getUA(),
                browser: this.getBrowser(),
                engine: this.getEngine(),
                os: this.getOS(),
                device: this.getDevice(),
                cpu: this.getCPU(),
              };
            };
            this.getUA = function () {
              return _ua;
            };
            this.setUA = function (ua) {
              _ua =
                typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;
              return this;
            };
            this.setUA(_ua);
            return this;
          };
          UAParser.VERSION = LIBVERSION;
          UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
          UAParser.CPU = enumerize([ARCHITECTURE]);
          UAParser.DEVICE = enumerize([
            MODEL,
            VENDOR,
            TYPE,
            CONSOLE,
            MOBILE,
            SMARTTV,
            TABLET,
            WEARABLE,
            EMBEDDED,
          ]);
          UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
          ///////////
          // Export
          //////////
          // check js environment
          if (typeof exports !== UNDEF_TYPE) {
            // nodejs env
            if ("object" !== UNDEF_TYPE && module.exports) exports = module.exports = UAParser;
            exports.UAParser = UAParser;
          } else {
            // requirejs env (optional)
            if (typeof define === FUNC_TYPE && define.amd)
              define(function () {
                return UAParser;
              });
            else if (typeof window1 !== UNDEF_TYPE)
              // browser env
              window1.UAParser = UAParser;
          }
          // jQuery/Zepto specific (optional)
          // Note:
          //   In AMD env the global scope should be kept clean, but jQuery is an exception.
          //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
          //   and we should catch that.
          var $ = typeof window1 !== UNDEF_TYPE && (window1.jQuery || window1.Zepto);
          if ($ && !$.ua) {
            var parser = new UAParser();
            $.ua = parser.getResult();
            $.ua.get = function () {
              return parser.getUA();
            };
            $.ua.set = function (ua) {
              parser.setUA(ua);
              var result = parser.getResult();
              for (var prop in result) $.ua[prop] = result[prop];
            };
          }
        })(typeof window === "object" ? window : this);
      },
      {},
    ],
    akkdC: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        var invariant = require("922e26fa61a060ff");
        var componentRegex = /\./;
        var orRegex = /\|\|/;
        var rangeRegex = /\s+\-\s+/;
        var modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\s*(.+)/;
        var numericRegex = /^(\d*)(.*)/;
        /**
         * Splits input `range` on "||" and returns true if any subrange matches
         * `version`.
         *
         * @param {string} range
         * @param {string} version
         * @returns {boolean}
         */ function checkOrExpression(range, version) {
          var expressions = range.split(orRegex);
          if (expressions.length > 1)
            return expressions.some(function (range) {
              return VersionRange.contains(range, version);
            });
          else {
            range = expressions[0].trim();
            return checkRangeExpression(range, version);
          }
        }
        /**
         * Splits input `range` on " - " (the surrounding whitespace is required) and
         * returns true if version falls between the two operands.
         *
         * @param {string} range
         * @param {string} version
         * @returns {boolean}
         */ function checkRangeExpression(range, version) {
          var expressions = range.split(rangeRegex);
          !(expressions.length > 0 && expressions.length <= 2) &&
            invariant(false, 'the "-" operator expects exactly 2 operands');
          if (expressions.length === 1) return checkSimpleExpression(expressions[0], version);
          else {
            var startVersion = expressions[0],
              endVersion = expressions[1];
            !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) &&
              invariant(false, 'operands to the "-" operator must be simple (no modifiers)');
            return (
              checkSimpleExpression(">=" + startVersion, version) &&
              checkSimpleExpression("<=" + endVersion, version)
            );
          }
        }
        /**
         * Checks if `range` matches `version`. `range` should be a "simple" range (ie.
         * not a compound range using the " - " or "||" operators).
         *
         * @param {string} range
         * @param {string} version
         * @returns {boolean}
         */ function checkSimpleExpression(range, version) {
          range = range.trim();
          if (range === "") return true;
          var versionComponents = version.split(componentRegex);
          var _getModifierAndCompon = getModifierAndComponents(range),
            modifier = _getModifierAndCompon.modifier,
            rangeComponents = _getModifierAndCompon.rangeComponents;
          switch (modifier) {
            case "<":
              return checkLessThan(versionComponents, rangeComponents);
            case "<=":
              return checkLessThanOrEqual(versionComponents, rangeComponents);
            case ">=":
              return checkGreaterThanOrEqual(versionComponents, rangeComponents);
            case ">":
              return checkGreaterThan(versionComponents, rangeComponents);
            case "~":
            case "~>":
              return checkApproximateVersion(versionComponents, rangeComponents);
            default:
              return checkEqual(versionComponents, rangeComponents);
          }
        }
        /**
         * Checks whether `a` is less than `b`.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkLessThan(a, b) {
          return compareComponents(a, b) === -1;
        }
        /**
         * Checks whether `a` is less than or equal to `b`.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkLessThanOrEqual(a, b) {
          var result = compareComponents(a, b);
          return result === -1 || result === 0;
        }
        /**
         * Checks whether `a` is equal to `b`.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkEqual(a, b) {
          return compareComponents(a, b) === 0;
        }
        /**
         * Checks whether `a` is greater than or equal to `b`.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkGreaterThanOrEqual(a, b) {
          var result = compareComponents(a, b);
          return result === 1 || result === 0;
        }
        /**
         * Checks whether `a` is greater than `b`.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkGreaterThan(a, b) {
          return compareComponents(a, b) === 1;
        }
        /**
         * Checks whether `a` is "reasonably close" to `b` (as described in
         * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is "1.3.1"
         * then "reasonably close" is defined as ">= 1.3.1 and < 1.4".
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {boolean}
         */ function checkApproximateVersion(a, b) {
          var lowerBound = b.slice();
          var upperBound = b.slice();
          if (upperBound.length > 1) upperBound.pop();
          var lastIndex = upperBound.length - 1;
          var numeric = parseInt(upperBound[lastIndex], 10);
          if (isNumber(numeric)) upperBound[lastIndex] = numeric + 1 + "";
          return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);
        }
        /**
         * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version
         * components from `range`.
         *
         * For example, given `range` ">= 1.2.3" returns an object with a `modifier` of
         * `">="` and `components` of `[1, 2, 3]`.
         *
         * @param {string} range
         * @returns {object}
         */ function getModifierAndComponents(range) {
          var rangeComponents = range.split(componentRegex);
          var matches = rangeComponents[0].match(modifierRegex);
          !matches && invariant(false, "expected regex to match but it did not");
          return {
            modifier: matches[1],
            rangeComponents: [matches[2]].concat(rangeComponents.slice(1)),
          };
        }
        /**
         * Determines if `number` is a number.
         *
         * @param {mixed} number
         * @returns {boolean}
         */ function isNumber(number) {
          return !isNaN(number) && isFinite(number);
        }
        /**
         * Tests whether `range` is a "simple" version number without any modifiers
         * (">", "~" etc).
         *
         * @param {string} range
         * @returns {boolean}
         */ function isSimpleVersion(range) {
          return !getModifierAndComponents(range).modifier;
        }
        /**
         * Zero-pads array `array` until it is at least `length` long.
         *
         * @param {array} array
         * @param {number} length
         */ function zeroPad(array, length) {
          for (var i = array.length; i < length; i++) array[i] = "0";
        }
        /**
         * Normalizes `a` and `b` in preparation for comparison by doing the following:
         *
         * - zero-pads `a` and `b`
         * - marks any "x", "X" or "*" component in `b` as equivalent by zero-ing it out
         *   in both `a` and `b`
         * - marks any final "*" component in `b` as a greedy wildcard by zero-ing it
         *   and all of its successors in `a`
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {array<array<string>>}
         */ function normalizeVersions(a, b) {
          a = a.slice();
          b = b.slice();
          zeroPad(a, b.length); // mark "x" and "*" components as equal
          for (var i = 0; i < b.length; i++) {
            var matches = b[i].match(/^[x*]$/i);
            if (matches) {
              b[i] = a[i] = "0"; // final "*" greedily zeros all remaining components
              if (matches[0] === "*" && i === b.length - 1)
                for (var j = i; j < a.length; j++) a[j] = "0";
            }
          }
          zeroPad(b, a.length);
          return [a, b];
        }
        /**
         * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.
         *
         * For example, `10-alpha` is greater than `2-beta`.
         *
         * @param {string} a
         * @param {string} b
         * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
         * or greater than `b`, respectively
         */ function compareNumeric(a, b) {
          var aPrefix = a.match(numericRegex)[1];
          var bPrefix = b.match(numericRegex)[1];
          var aNumeric = parseInt(aPrefix, 10);
          var bNumeric = parseInt(bPrefix, 10);
          if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric)
            return compare(aNumeric, bNumeric);
          else return compare(a, b);
        }
        /**
         * Returns the ordering of `a` and `b`.
         *
         * @param {string|number} a
         * @param {string|number} b
         * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
         * or greater than `b`, respectively
         */ function compare(a, b) {
          !(typeof a === typeof b) && invariant(false, '"a" and "b" must be of the same type');
          if (a > b) return 1;
          else if (a < b) return -1;
          else return 0;
        }
        /**
         * Compares arrays of version components.
         *
         * @param {array<string>} a
         * @param {array<string>} b
         * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
         * or greater than `b`, respectively
         */ function compareComponents(a, b) {
          var _normalizeVersions = normalizeVersions(a, b),
            aNormalized = _normalizeVersions[0],
            bNormalized = _normalizeVersions[1];
          for (var i = 0; i < bNormalized.length; i++) {
            var result = compareNumeric(aNormalized[i], bNormalized[i]);
            if (result) return result;
          }
          return 0;
        }
        var VersionRange = {
          /**
           * Checks whether `version` satisfies the `range` specification.
           *
           * We support a subset of the expressions defined in
           * https://www.npmjs.org/doc/misc/semver.html:
           *
           *    version   Must match version exactly
           *    =version  Same as just version
           *    >version  Must be greater than version
           *    >=version Must be greater than or equal to version
           *    <version  Must be less than version
           *    <=version Must be less than or equal to version
           *    ~version  Must be at least version, but less than the next significant
           *              revision above version:
           *              "~1.2.3" is equivalent to ">= 1.2.3 and < 1.3"
           *    ~>version Equivalent to ~version
           *    1.2.x     Must match "1.2.x", where "x" is a wildcard that matches
           *              anything
           *    1.2.*     Similar to "1.2.x", but "*" in the trailing position is a
           *              "greedy" wildcard, so will match any number of additional
           *              components:
           *              "1.2.*" will match "1.2.1", "1.2.1.1", "1.2.1.1.1" etc
           *    *         Any version
           *    ""        (Empty string) Same as *
           *    v1 - v2   Equivalent to ">= v1 and <= v2"
           *    r1 || r2  Passes if either r1 or r2 are satisfied
           *
           * @param {string} range
           * @param {string} version
           * @returns {boolean}
           */ contains: function contains(range, version) {
            return checkOrExpression(range.trim(), version.trim());
          },
        };
        module.exports = VersionRange;
      },
      { "922e26fa61a060ff": "d6MgO" },
    ],
    iHkxY: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        /**
         * Executes the provided `callback` once for each enumerable own property in the
         * object and constructs a new object from the results. The `callback` is
         * invoked with three arguments:
         *
         *  - the property value
         *  - the property name
         *  - the object being traversed
         *
         * Properties that are added after the call to `mapObject` will not be visited
         * by `callback`. If the values of existing properties are changed, the value
         * passed to `callback` will be the value at the time `mapObject` visits them.
         * Properties that are deleted before being visited are not visited.
         *
         * @grep function objectMap()
         * @grep function objMap()
         *
         * @param {?object} object
         * @param {function} callback
         * @param {*} context
         * @return {?object}
         */ function mapObject(object, callback, context) {
          if (!object) return null;
          var result = {};
          for (var name in object)
            if (hasOwnProperty.call(object, name))
              result[name] = callback.call(context, object[name], name, object);
          return result;
        }
        module.exports = mapObject;
      },
      {},
    ],
    lVSPu: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         * @typechecks static-only
         */ "use strict";
        /**
         * Memoizes the return value of a function that accepts one string argument.
         */ function memoizeStringOnly(callback) {
          var cache = {};
          return function (string) {
            if (!cache.hasOwnProperty(string)) cache[string] = callback.call(this, string);
            return cache[string];
          };
        }
        module.exports = memoizeStringOnly;
      },
      {},
    ],
    "2PlIl": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getCorrectDocumentFromNode = require("3c1fffef139a5373");
        var getSelectionOffsetKeyForNode = require("1653de2a1dbe5ae7");
        /**
         * Get the key from the node's nearest offset-aware ancestor.
         */ function findAncestorOffsetKey(node) {
          var searchNode = node;
          while (searchNode && searchNode !== getCorrectDocumentFromNode(node).documentElement) {
            var key = getSelectionOffsetKeyForNode(searchNode);
            if (key != null) return key;
            searchNode = searchNode.parentNode;
          }
          return null;
        }
        module.exports = findAncestorOffsetKey;
      },
      { "3c1fffef139a5373": "4aMz1", "1653de2a1dbe5ae7": "dPXpP" },
    ],
    "4aMz1": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ function getCorrectDocumentFromNode(node) {
          if (!node || !node.ownerDocument) return document;
          return node.ownerDocument;
        }
        module.exports = getCorrectDocumentFromNode;
      },
      {},
    ],
    dPXpP: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Get offset key from a node or it's child nodes. Return the first offset key
         * found on the DOM tree of given node.
         */ var isElement = require("abd901cc53c1af39");
        function getSelectionOffsetKeyForNode(node) {
          if (isElement(node)) {
            var castedNode = node;
            var offsetKey = castedNode.getAttribute("data-offset-key");
            if (offsetKey) return offsetKey;
            for (var ii = 0; ii < castedNode.childNodes.length; ii++) {
              var childOffsetKey = getSelectionOffsetKeyForNode(castedNode.childNodes[ii]);
              if (childOffsetKey) return childOffsetKey;
            }
          }
          return null;
        }
        module.exports = getSelectionOffsetKeyForNode;
      },
      { abd901cc53c1af39: "wCJfe" },
    ],
    wCJfe: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ function isElement(node) {
          if (!node || !node.ownerDocument) return false;
          return node.nodeType === Node.ELEMENT_NODE;
        }
        module.exports = isElement;
      },
      {},
    ],
    OG7uI: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ function getWindowForNode(node) {
          if (!node || !node.ownerDocument || !node.ownerDocument.defaultView) return window;
          return node.ownerDocument.defaultView;
        }
        module.exports = getWindowForNode;
      },
      {},
    ],
    "3pjWp": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var KEY_DELIMITER = "-";
        var DraftOffsetKey = {
          encode: function encode(blockKey, decoratorKey, leafKey) {
            return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;
          },
          decode: function decode(offsetKey) {
            // Extracts the last two parts of offsetKey and captures the rest in blockKeyParts
            var _offsetKey$split$reve = offsetKey.split(KEY_DELIMITER).reverse(),
              leafKey = _offsetKey$split$reve[0],
              decoratorKey = _offsetKey$split$reve[1],
              blockKeyParts = _offsetKey$split$reve.slice(2);
            return {
              // Recomposes the parts of blockKey after reversing them
              blockKey: blockKeyParts.reverse().join(KEY_DELIMITER),
              decoratorKey: parseInt(decoratorKey, 10),
              leafKey: parseInt(leafKey, 10),
            };
          },
        };
        module.exports = DraftOffsetKey;
      },
      {},
    ],
    aZASa: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ module.exports = {
          BACKSPACE: 8,
          TAB: 9,
          RETURN: 13,
          ALT: 18,
          ESC: 27,
          SPACE: 32,
          PAGE_UP: 33,
          PAGE_DOWN: 34,
          END: 35,
          HOME: 36,
          LEFT: 37,
          UP: 38,
          RIGHT: 39,
          DOWN: 40,
          DELETE: 46,
          COMMA: 188,
          PERIOD: 190,
          A: 65,
          Z: 90,
          ZERO: 48,
          NUMPAD_0: 96,
          NUMPAD_9: 105,
        };
      },
      {},
    ],
    "61qfE": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftJsDebugLogging = require("54f8713bae0d1f2d");
        var EditorState = require("259d63350b011882");
        var getContentEditableContainer = require("1746f6cd406e9594");
        var getDraftEditorSelection = require("90028a181d0b6245");
        function editOnSelect(editor) {
          if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {
            if (editor._blockSelectEvents) {
              var _editorState = editor.props.editorState;
              var selectionState = _editorState.getSelection();
              DraftJsDebugLogging.logBlockedSelectionEvent({
                // For now I don't think we need any other info
                anonymizedDom: "N/A",
                extraParams: JSON.stringify({
                  stacktrace: new Error().stack,
                }),
                selectionState: JSON.stringify(selectionState.toJS()),
              });
            }
            return;
          }
          var editorState = editor.props.editorState;
          var documentSelection = getDraftEditorSelection(
            editorState,
            getContentEditableContainer(editor),
          );
          var updatedSelectionState = documentSelection.selectionState;
          if (updatedSelectionState !== editorState.getSelection()) {
            if (documentSelection.needsRecovery)
              editorState = EditorState.forceSelection(editorState, updatedSelectionState);
            else editorState = EditorState.acceptSelection(editorState, updatedSelectionState);
            editor.update(editorState);
          }
        }
        module.exports = editOnSelect;
      },
      {
        "54f8713bae0d1f2d": "lEvg1",
        "259d63350b011882": "2EY4X",
        "1746f6cd406e9594": "7uisP",
        "90028a181d0b6245": "9fT75",
      },
    ],
    lEvg1: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        module.exports = {
          logBlockedSelectionEvent: function logBlockedSelectionEvent() {
            return null;
          },
          logSelectionStateFailure: function logSelectionStateFailure() {
            return null;
          },
        };
      },
      {},
    ],
    "7uisP": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var invariant = require("1b88c4f1719a954d");
        var isHTMLElement = require("9bdb4bd5c8c72ad6");
        function getContentEditableContainer(editor) {
          var editorNode = editor.editorContainer;
          !editorNode && invariant(false, "Missing editorNode");
          !isHTMLElement(editorNode.firstChild) &&
            invariant(false, "editorNode.firstChild is not an HTMLElement");
          var htmlElement = editorNode.firstChild;
          return htmlElement;
        }
        module.exports = getContentEditableContainer;
      },
      { "1b88c4f1719a954d": "d6MgO", "9bdb4bd5c8c72ad6": "1UoK0" },
    ],
    "1UoK0": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ function isHTMLElement(node) {
          if (!node || !node.ownerDocument) return false;
          if (!node.ownerDocument.defaultView) return node instanceof HTMLElement;
          if (node instanceof node.ownerDocument.defaultView.HTMLElement) return true;
          return false;
        }
        module.exports = isHTMLElement;
      },
      {},
    ],
    "9fT75": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getDraftEditorSelectionWithNodes = require("2d1af3159311f3b5");
        /**
         * Convert the current selection range to an anchor/focus pair of offset keys
         * and values that can be interpreted by components.
         */ function getDraftEditorSelection(editorState, root) {
          var selection = root.ownerDocument.defaultView.getSelection();
          var anchorNode = selection.anchorNode,
            anchorOffset = selection.anchorOffset,
            focusNode = selection.focusNode,
            focusOffset = selection.focusOffset,
            rangeCount = selection.rangeCount;
          if (
            rangeCount === 0 || // No selection, ever. As in, the user hasn't selected anything since
            // opening the document.
            anchorNode == null ||
            focusNode == null
          )
            return {
              selectionState: editorState.getSelection().set("hasFocus", false),
              needsRecovery: false,
            };
          return getDraftEditorSelectionWithNodes(
            editorState,
            root,
            anchorNode,
            anchorOffset,
            focusNode,
            focusOffset,
          );
        }
        module.exports = getDraftEditorSelection;
      },
      { "2d1af3159311f3b5": "jfDPu" },
    ],
    jfDPu: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var findAncestorOffsetKey = require("9d408126800b2c6f");
        var getSelectionOffsetKeyForNode = require("3b5114ad7efdbf6f");
        var getUpdatedSelectionState = require("bba5f44758062a79");
        var invariant = require("f78a415be26d0920");
        var isElement = require("d82d5217a88accc");
        var nullthrows = require("15ebaa60138da8bd");
        /**
         * Convert the current selection range to an anchor/focus pair of offset keys
         * and values that can be interpreted by components.
         */ function getDraftEditorSelectionWithNodes(
          editorState,
          root,
          anchorNode,
          anchorOffset,
          focusNode,
          focusOffset,
        ) {
          var anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;
          var focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE; // If the selection range lies only on text nodes, the task is simple.
          // Find the nearest offset-aware elements and use the
          // offset values supplied by the selection range.
          if (anchorIsTextNode && focusIsTextNode)
            return {
              selectionState: getUpdatedSelectionState(
                editorState,
                nullthrows(findAncestorOffsetKey(anchorNode)),
                anchorOffset,
                nullthrows(findAncestorOffsetKey(focusNode)),
                focusOffset,
              ),
              needsRecovery: false,
            };
          var anchorPoint = null;
          var focusPoint = null;
          var needsRecovery = true; // An element is selected. Convert this selection range into leaf offset
          // keys and offset values for consumption at the component level. This
          // is common in Firefox, where select-all and triple click behavior leads
          // to entire elements being selected.
          //
          // Note that we use the `needsRecovery` parameter in the callback here. This
          // is because when certain elements are selected, the behavior for subsequent
          // cursor movement (e.g. via arrow keys) is uncertain and may not match
          // expectations at the component level. For example, if an entire <div> is
          // selected and the user presses the right arrow, Firefox keeps the selection
          // on the <div>. If we allow subsequent keypresses to insert characters
          // natively, they will be inserted into a browser-created text node to the
          // right of that <div>. This is obviously undesirable.
          //
          // With the `needsRecovery` flag, we inform the caller that it is responsible
          // for manually setting the selection state on the rendered document to
          // ensure proper selection state maintenance.
          if (anchorIsTextNode) {
            anchorPoint = {
              key: nullthrows(findAncestorOffsetKey(anchorNode)),
              offset: anchorOffset,
            };
            focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);
          } else if (focusIsTextNode) {
            focusPoint = {
              key: nullthrows(findAncestorOffsetKey(focusNode)),
              offset: focusOffset,
            };
            anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
          } else {
            anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
            focusPoint = getPointForNonTextNode(root, focusNode, focusOffset); // If the selection is collapsed on an empty block, don't force recovery.
            // This way, on arrow key selection changes, the browser can move the
            // cursor from a non-zero offset on one block, through empty blocks,
            // to a matching non-zero offset on other text blocks.
            if (anchorNode === focusNode && anchorOffset === focusOffset)
              needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== "BR";
          }
          return {
            selectionState: getUpdatedSelectionState(
              editorState,
              anchorPoint.key,
              anchorPoint.offset,
              focusPoint.key,
              focusPoint.offset,
            ),
            needsRecovery: needsRecovery,
          };
        }
        /**
         * Identify the first leaf descendant for the given node.
         */ function getFirstLeaf(node) {
          while (
            node.firstChild &&
            ((isElement(node.firstChild) &&
              node.firstChild.getAttribute("data-blocks") === "true") ||
              getSelectionOffsetKeyForNode(node.firstChild))
          )
            node = node.firstChild;
          return node;
        }
        /**
         * Identify the last leaf descendant for the given node.
         */ function getLastLeaf(node) {
          while (
            node.lastChild &&
            ((isElement(node.lastChild) && node.lastChild.getAttribute("data-blocks") === "true") ||
              getSelectionOffsetKeyForNode(node.lastChild))
          )
            node = node.lastChild;
          return node;
        }
        function getPointForNonTextNode(editorRoot, startNode, childOffset) {
          var node = startNode;
          var offsetKey = findAncestorOffsetKey(node);
          !(
            offsetKey != null ||
            (editorRoot && (editorRoot === node || editorRoot.firstChild === node))
          ) && invariant(false, "Unknown node in selection range."); // If the editorRoot is the selection, step downward into the content
          // wrapper.
          if (editorRoot === node) {
            node = node.firstChild;
            !isElement(node) && invariant(false, "Invalid DraftEditorContents node.");
            var castedNode = node; // assignment only added for flow :/
            // otherwise it throws in line 200 saying that node can be null or undefined
            node = castedNode;
            !(node.getAttribute("data-contents") === "true") &&
              invariant(false, "Invalid DraftEditorContents structure.");
            if (childOffset > 0) childOffset = node.childNodes.length;
          } // If the child offset is zero and we have an offset key, we're done.
          // If there's no offset key because the entire editor is selected,
          // find the leftmost ("first") leaf in the tree and use that as the offset
          // key.
          if (childOffset === 0) {
            var key = null;
            if (offsetKey != null) key = offsetKey;
            else {
              var firstLeaf = getFirstLeaf(node);
              key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));
            }
            return {
              key: key,
              offset: 0,
            };
          }
          var nodeBeforeCursor = node.childNodes[childOffset - 1];
          var leafKey = null;
          var textLength = null;
          if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {
            // Our target node may be a leaf or a text node, in which case we're
            // already where we want to be and can just use the child's length as
            // our offset.
            leafKey = nullthrows(offsetKey);
            textLength = getTextContentLength(nodeBeforeCursor);
          } else {
            // Otherwise, we'll look at the child to the left of the cursor and find
            // the last leaf node in its subtree.
            var lastLeaf = getLastLeaf(nodeBeforeCursor);
            leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));
            textLength = getTextContentLength(lastLeaf);
          }
          return {
            key: leafKey,
            offset: textLength,
          };
        }
        /**
         * Return the length of a node's textContent, regarding single newline
         * characters as zero-length. This allows us to avoid problems with identifying
         * the correct selection offset for empty blocks in IE, in which we
         * render newlines instead of break tags.
         */ function getTextContentLength(node) {
          var textContent = node.textContent;
          return textContent === "\n" ? 0 : textContent.length;
        }
        module.exports = getDraftEditorSelectionWithNodes;
      },
      {
        "9d408126800b2c6f": "2PlIl",
        "3b5114ad7efdbf6f": "dPXpP",
        bba5f44758062a79: "d0XHh",
        f78a415be26d0920: "d6MgO",
        d82d5217a88accc: "wCJfe",
        "15ebaa60138da8bd": "fwtV9",
      },
    ],
    d0XHh: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftOffsetKey = require("73a741749c4695d");
        var nullthrows = require("e6384ac3f8146f50");
        function getUpdatedSelectionState(
          editorState,
          anchorKey,
          anchorOffset,
          focusKey,
          focusOffset,
        ) {
          var selection = nullthrows(editorState.getSelection());
          if (!anchorKey || !focusKey) {
            /* eslint-disable-next-line */ console.warn(
              "Invalid selection state.",
              arguments,
              editorState.toJS(),
            );
            return selection;
          }
          var anchorPath = DraftOffsetKey.decode(anchorKey);
          var anchorBlockKey = anchorPath.blockKey;
          var anchorLeafBlockTree = editorState.getBlockTree(anchorBlockKey);
          var anchorLeaf =
            anchorLeafBlockTree &&
            anchorLeafBlockTree.getIn([anchorPath.decoratorKey, "leaves", anchorPath.leafKey]);
          var focusPath = DraftOffsetKey.decode(focusKey);
          var focusBlockKey = focusPath.blockKey;
          var focusLeafBlockTree = editorState.getBlockTree(focusBlockKey);
          var focusLeaf =
            focusLeafBlockTree &&
            focusLeafBlockTree.getIn([focusPath.decoratorKey, "leaves", focusPath.leafKey]);
          if (!anchorLeaf || !focusLeaf) {
            /* eslint-disable-next-line */ console.warn(
              "Invalid selection state.",
              arguments,
              editorState.toJS(),
            );
            return selection;
          }
          var anchorLeafStart = anchorLeaf.get("start");
          var focusLeafStart = focusLeaf.get("start");
          var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;
          var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;
          var areEqual =
            selection.getAnchorKey() === anchorBlockKey &&
            selection.getAnchorOffset() === anchorBlockOffset &&
            selection.getFocusKey() === focusBlockKey &&
            selection.getFocusOffset() === focusBlockOffset;
          if (areEqual) return selection;
          var isBackward = false;
          if (anchorBlockKey === focusBlockKey) {
            var anchorLeafEnd = anchorLeaf.get("end");
            var focusLeafEnd = focusLeaf.get("end");
            if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd)
              isBackward = focusOffset < anchorOffset;
            else isBackward = focusLeafStart < anchorLeafStart;
          } else {
            var startKey = editorState
              .getCurrentContent()
              .getBlockMap()
              .keySeq()
              .skipUntil(function (v) {
                return v === anchorBlockKey || v === focusBlockKey;
              })
              .first();
            isBackward = startKey === focusBlockKey;
          }
          return selection.merge({
            anchorKey: anchorBlockKey,
            anchorOffset: anchorBlockOffset,
            focusKey: focusBlockKey,
            focusOffset: focusBlockOffset,
            isBackward: isBackward,
          });
        }
        module.exports = getUpdatedSelectionState;
      },
      { "73a741749c4695d": "3pjWp", e6384ac3f8146f50: "fwtV9" },
    ],
    eAypV: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var _require = require("dab40fe8c7e1079b"),
          notEmptyKey = _require.notEmptyKey;
        /**
         * Return the entity key that should be used when inserting text for the
         * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`
         * and `SEGMENTED` entities should not be used for insertion behavior.
         */ function getEntityKeyForSelection(contentState, targetSelection) {
          var entityKey;
          if (targetSelection.isCollapsed()) {
            var key = targetSelection.getAnchorKey();
            var offset = targetSelection.getAnchorOffset();
            if (offset > 0) {
              entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);
              if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) return null;
              return filterKey(contentState.getEntityMap(), entityKey);
            }
            return null;
          }
          var startKey = targetSelection.getStartKey();
          var startOffset = targetSelection.getStartOffset();
          var startBlock = contentState.getBlockForKey(startKey);
          entityKey =
            startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);
          return filterKey(contentState.getEntityMap(), entityKey);
        }
        /**
         * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,
         * return it. If not, return null.
         */ function filterKey(entityMap, entityKey) {
          if (notEmptyKey(entityKey)) {
            var entity = entityMap.__get(entityKey);
            return entity.getMutability() === "MUTABLE" ? entityKey : null;
          }
          return null;
        }
        module.exports = getEntityKeyForSelection;
      },
      { dab40fe8c7e1079b: "Ci3yX" },
    ],
    Ci3yX: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * Provides utilities for handling draftjs keys.
         *
         * @emails oncall+draft_js
         *
         * @format
         */ "use strict";
        function notEmptyKey(key) {
          return key != null && key != "";
        }
        module.exports = {
          notEmptyKey: notEmptyKey,
        };
      },
      {},
    ],
    iCyJB: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         */ "use strict";
        var gkx = require("caae26fedd63c3c7");
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        module.exports = experimentalTreeDataSupport
          ? require("be2cbb51064c9842")
          : require("d782a880ac9f6a8f");
      },
      { caae26fedd63c3c7: "l5VFU", be2cbb51064c9842: "afMar", d782a880ac9f6a8f: "2iqjC" },
    ],
    afMar: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This file is a fork of DraftEditorContents.react.js for tree nodes
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ "use strict";
        var _assign = require("7060dc4ec1f921a6");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var DraftEditorBlockNode = require("5ac8b5603792f887");
        var DraftOffsetKey = require("f05a6e57683a254a");
        var React = require("4297f1f4a5ffc592");
        var nullthrows = require("b1d3f4c4a16c17c6");
        /**
         * `DraftEditorContents` is the container component for all block components
         * rendered for a `DraftEditor`. It is optimized to aggressively avoid
         * re-rendering blocks whenever possible.
         *
         * This component is separate from `DraftEditor` because certain props
         * (for instance, ARIA props) must be allowed to update without affecting
         * the contents of the editor.
         */ var DraftEditorContentsExperimental = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorContentsExperimental, _React$Component);
          function DraftEditorContentsExperimental() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = DraftEditorContentsExperimental.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            var prevEditorState = this.props.editorState;
            var nextEditorState = nextProps.editorState;
            var prevDirectionMap = prevEditorState.getDirectionMap();
            var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.
            if (prevDirectionMap !== nextDirectionMap) return true;
            var didHaveFocus = prevEditorState.getSelection().getHasFocus();
            var nowHasFocus = nextEditorState.getSelection().getHasFocus();
            if (didHaveFocus !== nowHasFocus) return true;
            var nextNativeContent = nextEditorState.getNativelyRenderedContent();
            var wasComposing = prevEditorState.isInCompositionMode();
            var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively
            // rendered state, there's nothing new to be done.
            if (
              prevEditorState === nextEditorState ||
              (nextNativeContent !== null &&
                nextEditorState.getCurrentContent() === nextNativeContent) ||
              (wasComposing && nowComposing)
            )
              return false;
            var prevContent = prevEditorState.getCurrentContent();
            var nextContent = nextEditorState.getCurrentContent();
            var prevDecorator = prevEditorState.getDecorator();
            var nextDecorator = nextEditorState.getDecorator();
            return (
              wasComposing !== nowComposing ||
              prevContent !== nextContent ||
              prevDecorator !== nextDecorator ||
              nextEditorState.mustForceSelection()
            );
          };
          _proto.render = function render() {
            var _this$props = this.props,
              blockRenderMap = _this$props.blockRenderMap,
              blockRendererFn = _this$props.blockRendererFn,
              blockStyleFn = _this$props.blockStyleFn,
              customStyleMap = _this$props.customStyleMap,
              customStyleFn = _this$props.customStyleFn,
              editorState = _this$props.editorState,
              editorKey = _this$props.editorKey,
              textDirectionality = _this$props.textDirectionality;
            var content = editorState.getCurrentContent();
            var selection = editorState.getSelection();
            var forceSelection = editorState.mustForceSelection();
            var decorator = editorState.getDecorator();
            var directionMap = nullthrows(editorState.getDirectionMap());
            var blocksAsArray = content.getBlocksAsArray();
            var rootBlock = blocksAsArray[0];
            var processedBlocks = [];
            var nodeBlock = rootBlock;
            while (nodeBlock) {
              var blockKey = nodeBlock.getKey();
              var blockProps = {
                blockRenderMap: blockRenderMap,
                blockRendererFn: blockRendererFn,
                blockStyleFn: blockStyleFn,
                contentState: content,
                customStyleFn: customStyleFn,
                customStyleMap: customStyleMap,
                decorator: decorator,
                editorKey: editorKey,
                editorState: editorState,
                forceSelection: forceSelection,
                selection: selection,
                block: nodeBlock,
                direction: textDirectionality ? textDirectionality : directionMap.get(blockKey),
                tree: editorState.getBlockTree(blockKey),
              };
              var configForType =
                blockRenderMap.get(nodeBlock.getType()) || blockRenderMap.get("unstyled");
              var wrapperTemplate = configForType.wrapper;
              processedBlocks.push({
                /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This
                 * comment suppresses an error found when Flow v0.112 was deployed. To
                 * see the error delete this comment and run Flow. */ block: React.createElement(
                  DraftEditorBlockNode,
                  _extends(
                    {
                      key: blockKey,
                    },
                    blockProps,
                  ),
                ),
                wrapperTemplate: wrapperTemplate,
                key: blockKey,
                offsetKey: DraftOffsetKey.encode(blockKey, 0, 0),
              });
              var nextBlockKey = nodeBlock.getNextSiblingKey();
              nodeBlock = nextBlockKey ? content.getBlockForKey(nextBlockKey) : null;
            } // Group contiguous runs of blocks that have the same wrapperTemplate
            var outputBlocks = [];
            for (var ii = 0; ii < processedBlocks.length; ) {
              var info = processedBlocks[ii];
              if (info.wrapperTemplate) {
                var blocks = [];
                do {
                  blocks.push(processedBlocks[ii].block);
                  ii++;
                } while (
                  ii < processedBlocks.length &&
                  processedBlocks[ii].wrapperTemplate === info.wrapperTemplate
                );
                var wrapperElement = React.cloneElement(
                  info.wrapperTemplate,
                  {
                    key: info.key + "-wrap",
                    "data-offset-key": info.offsetKey,
                  },
                  blocks,
                );
                outputBlocks.push(wrapperElement);
              } else {
                outputBlocks.push(info.block);
                ii++;
              }
            }
            return React.createElement(
              "div",
              {
                "data-contents": "true",
              },
              outputBlocks,
            );
          };
          return DraftEditorContentsExperimental;
        })(React.Component);
        module.exports = DraftEditorContentsExperimental;
      },
      {
        "7060dc4ec1f921a6": "7OXxh",
        "5ac8b5603792f887": "aQ5Fs",
        f05a6e57683a254a: "3pjWp",
        "4297f1f4a5ffc592": "21dqq",
        b1d3f4c4a16c17c6: "fwtV9",
      },
    ],
    aQ5Fs: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This file is a fork of DraftEditorBlock.react.js and DraftEditorContents.react.js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ "use strict";
        var _assign = require("8b2919b6e8a7b300");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var DraftEditorNode = require("41162913e223390");
        var DraftOffsetKey = require("1497809b9873a930");
        var React = require("e98e5e33174bd758");
        var Scroll = require("dc1cd15f0371d534");
        var Style = require("5ccc5c586532dde5");
        var getElementPosition = require("3a7300b28efa568");
        var getScrollPosition = require("42e5a8844c80f01a");
        var getViewportDimensions = require("ea77cbaa7edb2ce6");
        var Immutable = require("92958234276fdcf7");
        var invariant = require("7047aa7c09f1ce3e");
        var isHTMLElement = require("a9f85d0de5824aa9");
        var SCROLL_BUFFER = 10;
        var List = Immutable.List; // we should harden up the bellow flow types to make them more strict
        /**
         * Return whether a block overlaps with either edge of the `SelectionState`.
         */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {
          return selection.getAnchorKey() === key || selection.getFocusKey() === key;
        };
        /**
         * We will use this helper to identify blocks that need to be wrapped but have siblings that
         * also share the same wrapper element, this way we can do the wrapping once the last sibling
         * is added.
         */ var shouldNotAddWrapperElement = function shouldNotAddWrapperElement(
          block,
          contentState,
        ) {
          var nextSiblingKey = block.getNextSiblingKey();
          return nextSiblingKey
            ? contentState.getBlockForKey(nextSiblingKey).getType() === block.getType()
            : false;
        };
        var applyWrapperElementToSiblings = function applyWrapperElementToSiblings(
          wrapperTemplate,
          Element,
          nodes,
        ) {
          var wrappedSiblings = []; // we check back until we find a sibling that does not have same wrapper
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;
          try {
            for (
              var _iterator = nodes.reverse()[Symbol.iterator](), _step;
              !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
              _iteratorNormalCompletion = true
            ) {
              var sibling = _step.value;
              if (sibling.type !== Element) break;
              wrappedSiblings.push(sibling);
            } // we now should remove from acc the wrappedSiblings and add them back under same wrap
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) _iterator["return"]();
            } finally {
              if (_didIteratorError) throw _iteratorError;
            }
          }
          nodes.splice(nodes.indexOf(wrappedSiblings[0]), wrappedSiblings.length + 1);
          var childrenIs = wrappedSiblings.reverse();
          var key = childrenIs[0].key;
          nodes.push(
            React.cloneElement(
              wrapperTemplate,
              {
                key: "".concat(key, "-wrap"),
                "data-offset-key": DraftOffsetKey.encode(key, 0, 0),
              },
              childrenIs,
            ),
          );
          return nodes;
        };
        var getDraftRenderConfig = function getDraftRenderConfig(block, blockRenderMap) {
          var configForType = blockRenderMap.get(block.getType()) || blockRenderMap.get("unstyled");
          var wrapperTemplate = configForType.wrapper;
          var Element = configForType.element || blockRenderMap.get("unstyled").element;
          return {
            Element: Element,
            wrapperTemplate: wrapperTemplate,
          };
        };
        var getCustomRenderConfig = function getCustomRenderConfig(block, blockRendererFn) {
          var customRenderer = blockRendererFn(block);
          if (!customRenderer) return {};
          var CustomComponent = customRenderer.component,
            customProps = customRenderer.props,
            customEditable = customRenderer.editable;
          return {
            CustomComponent: CustomComponent,
            customProps: customProps,
            customEditable: customEditable,
          };
        };
        var getElementPropsConfig = function getElementPropsConfig(
          block,
          editorKey,
          offsetKey,
          blockStyleFn,
          customConfig,
          ref,
        ) {
          var elementProps = {
            "data-block": true,
            "data-editor": editorKey,
            "data-offset-key": offsetKey,
            key: block.getKey(),
            ref: ref,
          };
          var customClass = blockStyleFn(block);
          if (customClass) elementProps.className = customClass;
          if (customConfig.customEditable !== undefined)
            elementProps = _objectSpread({}, elementProps, {
              contentEditable: customConfig.customEditable,
              suppressContentEditableWarning: true,
            });
          return elementProps;
        };
        var DraftEditorBlockNode = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorBlockNode, _React$Component);
          function DraftEditorBlockNode() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
              args[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _defineProperty(_assertThisInitialized(_this), "wrapperRef", React.createRef());
            return _this;
          }
          var _proto = DraftEditorBlockNode.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            var _this$props = this.props,
              block = _this$props.block,
              direction = _this$props.direction,
              tree = _this$props.tree;
            var isContainerNode = !block.getChildKeys().isEmpty();
            var blockHasChanged =
              block !== nextProps.block ||
              tree !== nextProps.tree ||
              direction !== nextProps.direction ||
              (isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) &&
                nextProps.forceSelection); // if we have children at this stage we always re-render container nodes
            // else if its a root node we avoid re-rendering by checking for block updates
            return isContainerNode || blockHasChanged;
          }
          /**
           * When a block is mounted and overlaps the selection state, we need to make
           * sure that the cursor is visible to match native behavior. This may not
           * be the case if the user has pressed `RETURN` or pasted some content, since
           * programatically creating these new blocks and setting the DOM selection
           * will miss out on the browser natively scrolling to that position.
           *
           * To replicate native behavior, if the block overlaps the selection state
           * on mount, force the scroll position. Check the scroll state of the scroll
           * parent, and adjust it to align the entire block to the bottom of the
           * scroll parent.
           */;
          _proto.componentDidMount = function componentDidMount() {
            var selection = this.props.selection;
            var endKey = selection.getEndKey();
            if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) return;
            var blockNode = this.wrapperRef.current;
            if (!blockNode)
              // This Block Node was rendered without a wrapper element.
              return;
            var scrollParent = Style.getScrollParent(blockNode);
            var scrollPosition = getScrollPosition(scrollParent);
            var scrollDelta;
            if (scrollParent === window) {
              var nodePosition = getElementPosition(blockNode);
              var nodeBottom = nodePosition.y + nodePosition.height;
              var viewportHeight = getViewportDimensions().height;
              scrollDelta = nodeBottom - viewportHeight;
              if (scrollDelta > 0)
                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);
            } else {
              !isHTMLElement(blockNode) && invariant(false, "blockNode is not an HTMLElement");
              var htmlBlockNode = blockNode;
              var blockBottom = htmlBlockNode.offsetHeight + htmlBlockNode.offsetTop;
              var scrollBottom = scrollParent.offsetHeight + scrollPosition.y;
              scrollDelta = blockBottom - scrollBottom;
              if (scrollDelta > 0)
                Scroll.setTop(
                  scrollParent,
                  Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER,
                );
            }
          };
          _proto.render = function render() {
            var _this2 = this;
            var _this$props2 = this.props,
              block = _this$props2.block,
              blockRenderMap = _this$props2.blockRenderMap,
              blockRendererFn = _this$props2.blockRendererFn,
              blockStyleFn = _this$props2.blockStyleFn,
              contentState = _this$props2.contentState,
              decorator = _this$props2.decorator,
              editorKey = _this$props2.editorKey,
              editorState = _this$props2.editorState,
              customStyleFn = _this$props2.customStyleFn,
              customStyleMap = _this$props2.customStyleMap,
              direction = _this$props2.direction,
              forceSelection = _this$props2.forceSelection,
              selection = _this$props2.selection,
              tree = _this$props2.tree;
            var children = null;
            if (block.children.size)
              children = block.children.reduce(function (acc, key) {
                var offsetKey = DraftOffsetKey.encode(key, 0, 0);
                var child = contentState.getBlockForKey(key);
                var customConfig = getCustomRenderConfig(child, blockRendererFn);
                var Component = customConfig.CustomComponent || DraftEditorBlockNode;
                var _getDraftRenderConfig = getDraftRenderConfig(child, blockRenderMap),
                  Element = _getDraftRenderConfig.Element,
                  wrapperTemplate = _getDraftRenderConfig.wrapperTemplate;
                var elementProps = getElementPropsConfig(
                  child,
                  editorKey,
                  offsetKey,
                  blockStyleFn,
                  customConfig,
                  null,
                );
                var childProps = _objectSpread({}, _this2.props, {
                  tree: editorState.getBlockTree(key),
                  blockProps: customConfig.customProps,
                  offsetKey: offsetKey,
                  block: child,
                });
                acc.push(
                  React.createElement(
                    Element,
                    elementProps,
                    React.createElement(Component, childProps),
                  ),
                );
                if (!wrapperTemplate || shouldNotAddWrapperElement(child, contentState)) return acc;
                // if we are here it means we are the last block
                // that has a wrapperTemplate so we should wrap itself
                // and all other previous siblings that share the same wrapper
                applyWrapperElementToSiblings(wrapperTemplate, Element, acc);
                return acc;
              }, []);
            var blockKey = block.getKey();
            var offsetKey = DraftOffsetKey.encode(blockKey, 0, 0);
            var customConfig = getCustomRenderConfig(block, blockRendererFn);
            var Component = customConfig.CustomComponent;
            var blockNode =
              Component != null
                ? React.createElement(
                    Component,
                    _extends({}, this.props, {
                      tree: editorState.getBlockTree(blockKey),
                      blockProps: customConfig.customProps,
                      offsetKey: offsetKey,
                      block: block,
                    }),
                  )
                : React.createElement(DraftEditorNode, {
                    block: block,
                    children: children,
                    contentState: contentState,
                    customStyleFn: customStyleFn,
                    customStyleMap: customStyleMap,
                    decorator: decorator,
                    direction: direction,
                    forceSelection: forceSelection,
                    hasSelection: isBlockOnSelectionEdge(selection, blockKey),
                    selection: selection,
                    tree: tree,
                  });
            if (block.getParentKey()) return blockNode;
            var _getDraftRenderConfig2 = getDraftRenderConfig(block, blockRenderMap),
              Element = _getDraftRenderConfig2.Element;
            var elementProps = getElementPropsConfig(
              block,
              editorKey,
              offsetKey,
              blockStyleFn,
              customConfig,
              this.wrapperRef,
            ); // root block nodes needs to be wrapped
            return React.createElement(Element, elementProps, blockNode);
          };
          return DraftEditorBlockNode;
        })(React.Component);
        module.exports = DraftEditorBlockNode;
      },
      {
        "8b2919b6e8a7b300": "7OXxh",
        "41162913e223390": "inh5m",
        "1497809b9873a930": "3pjWp",
        e98e5e33174bd758: "21dqq",
        dc1cd15f0371d534: "2DSAK",
        "5ccc5c586532dde5": "1GeHz",
        "3a7300b28efa568": "6zIf7",
        "42e5a8844c80f01a": "9CX89",
        ea77cbaa7edb2ce6: "7IeDN",
        "92958234276fdcf7": "lhHDL",
        "7047aa7c09f1ce3e": "d6MgO",
        a9f85d0de5824aa9: "1UoK0",
      },
    ],
    inh5m: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var DraftEditorDecoratedLeaves = require("f317f1e9b820a9cd");
        var DraftEditorLeaf = require("beb378bae8a93979");
        var DraftOffsetKey = require("f37a6b825d174d9d");
        var Immutable = require("fa90e35ebda54001");
        var React = require("aa4b44b113482fe7");
        var cx = require("73793f45bfdd1d79");
        var List = Immutable.List;
        var DraftEditorNode = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorNode, _React$Component);
          function DraftEditorNode() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = DraftEditorNode.prototype;
          _proto.render = function render() {
            var _this$props = this.props,
              block = _this$props.block,
              contentState = _this$props.contentState,
              customStyleFn = _this$props.customStyleFn,
              customStyleMap = _this$props.customStyleMap,
              decorator = _this$props.decorator,
              direction = _this$props.direction,
              forceSelection = _this$props.forceSelection,
              hasSelection = _this$props.hasSelection,
              selection = _this$props.selection,
              tree = _this$props.tree;
            var blockKey = block.getKey();
            var text = block.getText();
            var lastLeafSet = tree.size - 1;
            var children =
              this.props.children ||
              tree
                .map(function (leafSet, ii) {
                  var decoratorKey = leafSet.get("decoratorKey");
                  var leavesForLeafSet = leafSet.get("leaves");
                  var lastLeaf = leavesForLeafSet.size - 1;
                  var Leaves = leavesForLeafSet
                    .map(function (leaf, jj) {
                      var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);
                      var start = leaf.get("start");
                      var end = leaf.get("end");
                      return React.createElement(DraftEditorLeaf, {
                        key: offsetKey,
                        offsetKey: offsetKey,
                        block: block,
                        start: start,
                        selection: hasSelection ? selection : null,
                        forceSelection: forceSelection,
                        text: text.slice(start, end),
                        styleSet: block.getInlineStyleAt(start),
                        customStyleMap: customStyleMap,
                        customStyleFn: customStyleFn,
                        isLast: decoratorKey === lastLeafSet && jj === lastLeaf,
                      });
                    })
                    .toArray();
                  if (!decoratorKey || !decorator) return Leaves;
                  return React.createElement(DraftEditorDecoratedLeaves, {
                    block: block,
                    children: Leaves,
                    contentState: contentState,
                    decorator: decorator,
                    decoratorKey: decoratorKey,
                    direction: direction,
                    leafSet: leafSet,
                    text: text,
                    key: ii,
                  });
                })
                .toArray();
            return React.createElement(
              "div",
              {
                "data-offset-key": DraftOffsetKey.encode(blockKey, 0, 0),
                className: cx({
                  "public/DraftStyleDefault/block": true,
                  "public/DraftStyleDefault/ltr": direction === "LTR",
                  "public/DraftStyleDefault/rtl": direction === "RTL",
                }),
              },
              children,
            );
          };
          return DraftEditorNode;
        })(React.Component);
        module.exports = DraftEditorNode;
      },
      {
        f317f1e9b820a9cd: "2I0p1",
        beb378bae8a93979: "hcEOT",
        f37a6b825d174d9d: "3pjWp",
        fa90e35ebda54001: "lhHDL",
        aa4b44b113482fe7: "21dqq",
        "73793f45bfdd1d79": "zRtOM",
      },
    ],
    "2I0p1": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ "use strict";
        var _assign = require("4e52dd56845e96ce");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var DraftOffsetKey = require("f3eedb478bf0fbe");
        var React = require("b148479c1e4f4f36");
        var UnicodeBidi = require("dfed7bf335af0188");
        var UnicodeBidiDirection = require("fe4c6948638d72fa");
        var DraftEditorDecoratedLeaves = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorDecoratedLeaves, _React$Component);
          function DraftEditorDecoratedLeaves() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = DraftEditorDecoratedLeaves.prototype;
          _proto.render = function render() {
            var _this$props = this.props,
              block = _this$props.block,
              children = _this$props.children,
              contentState = _this$props.contentState,
              decorator = _this$props.decorator,
              decoratorKey = _this$props.decoratorKey,
              direction = _this$props.direction,
              leafSet = _this$props.leafSet,
              text = _this$props.text;
            var blockKey = block.getKey();
            var leavesForLeafSet = leafSet.get("leaves");
            var DecoratorComponent = decorator.getComponentForKey(decoratorKey);
            var decoratorProps = decorator.getPropsForKey(decoratorKey);
            var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, parseInt(decoratorKey, 10), 0);
            var decoratedText = text.slice(
              leavesForLeafSet.first().get("start"),
              leavesForLeafSet.last().get("end"),
            ); // Resetting dir to the same value on a child node makes Chrome/Firefox
            // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/
            var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(
              UnicodeBidi.getDirection(decoratedText),
              direction,
            );
            return React.createElement(
              DecoratorComponent,
              _extends({}, decoratorProps, {
                contentState: contentState,
                decoratedText: decoratedText,
                dir: dir,
                key: decoratorOffsetKey,
                entityKey: block.getEntityAt(leafSet.get("start")),
                offsetKey: decoratorOffsetKey,
              }),
              children,
            );
          };
          return DraftEditorDecoratedLeaves;
        })(React.Component);
        module.exports = DraftEditorDecoratedLeaves;
      },
      {
        "4e52dd56845e96ce": "7OXxh",
        f3eedb478bf0fbe: "3pjWp",
        b148479c1e4f4f36: "21dqq",
        dfed7bf335af0188: "5uUXL",
        fe4c6948638d72fa: "bOUHt",
      },
    ],
    hcEOT: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var _assign = require("7e90a8607409027f");
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var DraftEditorTextNode = require("ce77b85056231364");
        var React = require("d01304812b1dbc07");
        var invariant = require("8eed999309f8ecdd");
        var isHTMLBRElement = require("e5285ba225786e2e");
        var setDraftEditorSelection = require("296f0ca034b3ee34").setDraftEditorSelection;
        /**
         * All leaf nodes in the editor are spans with single text nodes. Leaf
         * elements are styled based on the merging of an optional custom style map
         * and a default style map.
         *
         * `DraftEditorLeaf` also provides a wrapper for calling into the imperative
         * DOM Selection API. In this way, top-level components can declaratively
         * maintain the selection state.
         */ var DraftEditorLeaf = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorLeaf, _React$Component);
          function DraftEditorLeaf() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
              args[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _defineProperty(_assertThisInitialized(_this), "leaf", void 0);
            return _this;
          }
          var _proto = DraftEditorLeaf.prototype;
          _proto._setSelection = function _setSelection() {
            var selection = this.props.selection; // If selection state is irrelevant to the parent block, no-op.
            if (selection == null || !selection.getHasFocus()) return;
            var _this$props = this.props,
              block = _this$props.block,
              start = _this$props.start,
              text = _this$props.text;
            var blockKey = block.getKey();
            var end = start + text.length;
            if (!selection.hasEdgeWithin(blockKey, start, end)) return;
            // Determine the appropriate target node for selection. If the child
            // is not a text node, it is a <br /> spacer. In this case, use the
            // <span> itself as the selection target.
            var node = this.leaf;
            !node && invariant(false, "Missing node");
            var child = node.firstChild;
            !child && invariant(false, "Missing child");
            var targetNode;
            if (child.nodeType === Node.TEXT_NODE) targetNode = child;
            else if (isHTMLBRElement(child)) targetNode = node;
            else {
              targetNode = child.firstChild;
              !targetNode && invariant(false, "Missing targetNode");
            }
            setDraftEditorSelection(selection, targetNode, blockKey, start, end);
          };
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            var leafNode = this.leaf;
            !leafNode && invariant(false, "Missing leafNode");
            var shouldUpdate =
              leafNode.textContent !== nextProps.text ||
              nextProps.styleSet !== this.props.styleSet ||
              nextProps.forceSelection;
            return shouldUpdate;
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            this._setSelection();
          };
          _proto.componentDidMount = function componentDidMount() {
            this._setSelection();
          };
          _proto.render = function render() {
            var _this2 = this;
            var block = this.props.block;
            var text = this.props.text; // If the leaf is at the end of its block and ends in a soft newline, append
            // an extra line feed character. Browsers collapse trailing newline
            // characters, which leaves the cursor in the wrong place after a
            // shift+enter. The extra character repairs this.
            if (text.endsWith("\n") && this.props.isLast) text += "\n";
            var _this$props2 = this.props,
              customStyleMap = _this$props2.customStyleMap,
              customStyleFn = _this$props2.customStyleFn,
              offsetKey = _this$props2.offsetKey,
              styleSet = _this$props2.styleSet;
            var styleObj = styleSet.reduce(function (map, styleName) {
              var mergedStyles = {};
              var style = customStyleMap[styleName];
              if (style !== undefined && map.textDecoration !== style.textDecoration)
                // .trim() is necessary for IE9/10/11 and Edge
                mergedStyles.textDecoration = [map.textDecoration, style.textDecoration]
                  .join(" ")
                  .trim();
              return _assign(map, style, mergedStyles);
            }, {});
            if (customStyleFn) {
              var newStyles = customStyleFn(styleSet, block);
              styleObj = _assign(styleObj, newStyles);
            }
            return React.createElement(
              "span",
              {
                "data-offset-key": offsetKey,
                ref: function ref(_ref) {
                  return (_this2.leaf = _ref);
                },
                style: styleObj,
              },
              React.createElement(DraftEditorTextNode, null, text),
            );
          };
          return DraftEditorLeaf;
        })(React.Component);
        module.exports = DraftEditorLeaf;
      },
      {
        "7e90a8607409027f": "7OXxh",
        ce77b85056231364: "6Iq36",
        d01304812b1dbc07: "21dqq",
        "8eed999309f8ecdd": "d6MgO",
        e5285ba225786e2e: "7loVo",
        "296f0ca034b3ee34": "mgz7j",
      },
    ],
    "6Iq36": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var React = require("9a2a0c634b8c0def");
        var UserAgent = require("50d4a0a4c7f1a3e2");
        var invariant = require("efc2b4b5a75ea927");
        var isElement = require("7bbd038ee4da02ec"); // In IE, spans with <br> tags render as two newlines. By rendering a span
        // with only a newline character, we can be sure to render a single line.
        var useNewlineChar = UserAgent.isBrowser("IE <= 11");
        /**
         * Check whether the node should be considered a newline.
         */ function isNewline(node) {
          return useNewlineChar ? node.textContent === "\n" : node.tagName === "BR";
        }
        /**
         * Placeholder elements for empty text content.
         *
         * What is this `data-text` attribute, anyway? It turns out that we need to
         * put an attribute on the lowest-level text node in order to preserve correct
         * spellcheck handling. If the <span> is naked, Chrome and Safari may do
         * bizarre things to do the DOM -- split text nodes, create extra spans, etc.
         * If the <span> has an attribute, this appears not to happen.
         * See http://jsfiddle.net/9khdavod/ for the failure case, and
         * http://jsfiddle.net/7pg143f7/ for the fixed case.
         */ var NEWLINE_A = function NEWLINE_A(ref) {
          return useNewlineChar
            ? React.createElement(
                "span",
                {
                  key: "A",
                  "data-text": "true",
                  ref: ref,
                },
                "\n",
              )
            : React.createElement("br", {
                key: "A",
                "data-text": "true",
                ref: ref,
              });
        };
        var NEWLINE_B = function NEWLINE_B(ref) {
          return useNewlineChar
            ? React.createElement(
                "span",
                {
                  key: "B",
                  "data-text": "true",
                  ref: ref,
                },
                "\n",
              )
            : React.createElement("br", {
                key: "B",
                "data-text": "true",
                ref: ref,
              });
        };
        /**
         * The lowest-level component in a `DraftEditor`, the text node component
         * replaces the default React text node implementation. This allows us to
         * perform custom handling of newline behavior and avoid re-rendering text
         * nodes with DOM state that already matches the expectations of our immutable
         * editor state.
         */ var DraftEditorTextNode = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorTextNode, _React$Component);
          function DraftEditorTextNode(props) {
            var _this;
            _this = _React$Component.call(this, props) || this; // By flipping this flag, we also keep flipping keys which forces
            // React to remount this node every time it rerenders.
            _defineProperty(_assertThisInitialized(_this), "_forceFlag", void 0);
            _defineProperty(_assertThisInitialized(_this), "_node", void 0);
            _this._forceFlag = false;
            return _this;
          }
          var _proto = DraftEditorTextNode.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            var node = this._node;
            var shouldBeNewline = nextProps.children === "";
            !isElement(node) && invariant(false, "node is not an Element");
            var elementNode = node;
            if (shouldBeNewline) return !isNewline(elementNode);
            return elementNode.textContent !== nextProps.children;
          };
          _proto.componentDidMount = function componentDidMount() {
            this._forceFlag = !this._forceFlag;
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            this._forceFlag = !this._forceFlag;
          };
          _proto.render = function render() {
            var _this2 = this;
            if (this.props.children === "")
              return this._forceFlag
                ? NEWLINE_A(function (ref) {
                    return (_this2._node = ref);
                  })
                : NEWLINE_B(function (ref) {
                    return (_this2._node = ref);
                  });
            return React.createElement(
              "span",
              {
                key: this._forceFlag ? "A" : "B",
                "data-text": "true",
                ref: function ref(_ref) {
                  return (_this2._node = _ref);
                },
              },
              this.props.children,
            );
          };
          return DraftEditorTextNode;
        })(React.Component);
        module.exports = DraftEditorTextNode;
      },
      {
        "9a2a0c634b8c0def": "21dqq",
        "50d4a0a4c7f1a3e2": "c2opx",
        efc2b4b5a75ea927: "d6MgO",
        "7bbd038ee4da02ec": "wCJfe",
      },
    ],
    "7loVo": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var isElement = require("a0ad060af35cd1b9");
        function isHTMLBRElement(node) {
          if (!node || !node.ownerDocument) return false;
          return isElement(node) && node.nodeName === "BR";
        }
        module.exports = isHTMLBRElement;
      },
      { a0ad060af35cd1b9: "wCJfe" },
    ],
    mgz7j: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftEffects = require("11cf4b0db042f6ba");
        var DraftJsDebugLogging = require("7aa2b1256877e604");
        var UserAgent = require("f3b24720ab0be1a9");
        var containsNode = require("7c37fb3e6a72eda0");
        var getActiveElement = require("f15c230a34343db1");
        var getCorrectDocumentFromNode = require("5910db777b07511e");
        var invariant = require("84bff7c47dc728a7");
        var isElement = require("242b1662e7a7c56f");
        var isIE = UserAgent.isBrowser("IE");
        function getAnonymizedDOM(node, getNodeLabels) {
          if (!node) return "[empty]";
          var anonymized = anonymizeTextWithin(node, getNodeLabels);
          if (anonymized.nodeType === Node.TEXT_NODE) return anonymized.textContent;
          !isElement(anonymized) &&
            invariant(false, "Node must be an Element if it is not a text node.");
          var castedElement = anonymized;
          return castedElement.outerHTML;
        }
        function anonymizeTextWithin(node, getNodeLabels) {
          var labels = getNodeLabels !== undefined ? getNodeLabels(node) : [];
          if (node.nodeType === Node.TEXT_NODE) {
            var length = node.textContent.length;
            return getCorrectDocumentFromNode(node).createTextNode(
              "[text " + length + (labels.length ? " | " + labels.join(", ") : "") + "]",
            );
          }
          var clone = node.cloneNode();
          if (clone.nodeType === 1 && labels.length)
            clone.setAttribute("data-labels", labels.join(", "));
          var childNodes = node.childNodes;
          for (var ii = 0; ii < childNodes.length; ii++)
            clone.appendChild(anonymizeTextWithin(childNodes[ii], getNodeLabels));
          return clone;
        }
        function getAnonymizedEditorDOM(node, getNodeLabels) {
          // grabbing the DOM content of the Draft editor
          var currentNode = node; // this should only be used after checking with isElement
          var castedNode = currentNode;
          while (currentNode) {
            if (isElement(currentNode) && castedNode.hasAttribute("contenteditable"))
              // found the Draft editor container
              return getAnonymizedDOM(currentNode, getNodeLabels);
            else {
              currentNode = currentNode.parentNode;
              castedNode = currentNode;
            }
          }
          return "Could not find contentEditable parent of node";
        }
        function getNodeLength(node) {
          return node.nodeValue === null ? node.childNodes.length : node.nodeValue.length;
        }
        /**
         * In modern non-IE browsers, we can support both forward and backward
         * selections.
         *
         * Note: IE10+ supports the Selection object, but it does not support
         * the `extend` method, which means that even in modern IE, it's not possible
         * to programatically create a backward selection. Thus, for all IE
         * versions, we use the old IE API to create our selections.
         */ function setDraftEditorSelection(selectionState, node, blockKey, nodeStart, nodeEnd) {
          // It's possible that the editor has been removed from the DOM but
          // our selection code doesn't know it yet. Forcing selection in
          // this case may lead to errors, so just bail now.
          var documentObject = getCorrectDocumentFromNode(node);
          if (!containsNode(documentObject.documentElement, node)) return;
          var selection = documentObject.defaultView.getSelection();
          var anchorKey = selectionState.getAnchorKey();
          var anchorOffset = selectionState.getAnchorOffset();
          var focusKey = selectionState.getFocusKey();
          var focusOffset = selectionState.getFocusOffset();
          var isBackward = selectionState.getIsBackward(); // IE doesn't support backward selection. Swap key/offset pairs.
          if (!selection.extend && isBackward) {
            var tempKey = anchorKey;
            var tempOffset = anchorOffset;
            anchorKey = focusKey;
            anchorOffset = focusOffset;
            focusKey = tempKey;
            focusOffset = tempOffset;
            isBackward = false;
          }
          var hasAnchor =
            anchorKey === blockKey && nodeStart <= anchorOffset && nodeEnd >= anchorOffset;
          var hasFocus =
            focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset; // If the selection is entirely bound within this node, set the selection
          // and be done.
          if (hasAnchor && hasFocus) {
            selection.removeAllRanges();
            addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);
            addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);
            return;
          }
          if (!isBackward) {
            // If the anchor is within this node, set the range start.
            if (hasAnchor) {
              selection.removeAllRanges();
              addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);
            } // If the focus is within this node, we can assume that we have
            // already set the appropriate start range on the selection, and
            // can simply extend the selection.
            if (hasFocus)
              addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);
          } else {
            // If this node has the focus, set the selection range to be a
            // collapsed range beginning here. Later, when we encounter the anchor,
            // we'll use this information to extend the selection.
            if (hasFocus) {
              selection.removeAllRanges();
              addPointToSelection(selection, node, focusOffset - nodeStart, selectionState);
            } // If this node has the anchor, we may assume that the correct
            // focus information is already stored on the selection object.
            // We keep track of it, reset the selection range, and extend it
            // back to the focus point.
            if (hasAnchor) {
              var storedFocusNode = selection.focusNode;
              var storedFocusOffset = selection.focusOffset;
              selection.removeAllRanges();
              addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);
              addFocusToSelection(selection, storedFocusNode, storedFocusOffset, selectionState);
            }
          }
        }
        /**
         * Extend selection towards focus point.
         */ function addFocusToSelection(selection, node, offset, selectionState) {
          var activeElement = getActiveElement();
          var extend = selection.extend; // containsNode returns false if node is null.
          // Let's refine the type of this value out here so flow knows.
          if (extend && node != null && containsNode(activeElement, node)) {
            // If `extend` is called while another element has focus, an error is
            // thrown. We therefore disable `extend` if the active element is somewhere
            // other than the node we are selecting. This should only occur in Firefox,
            // since it is the only browser to support multiple selections.
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.
            // logging to catch bug that is being reported in t16250795
            if (offset > getNodeLength(node))
              // the call to 'selection.extend' is about to throw
              DraftJsDebugLogging.logSelectionStateFailure({
                anonymizedDom: getAnonymizedEditorDOM(node),
                extraParams: JSON.stringify({
                  offset: offset,
                }),
                selectionState: JSON.stringify(selectionState.toJS()),
              });
            // logging to catch bug that is being reported in t18110632
            var nodeWasFocus = node === selection.focusNode;
            try {
              // Fixes some reports of "InvalidStateError: Failed to execute 'extend' on
              // 'Selection': This Selection object doesn't have any Ranges."
              // Note: selection.extend does not exist in IE.
              if (selection.rangeCount > 0 && selection.extend) selection.extend(node, offset);
            } catch (e) {
              DraftJsDebugLogging.logSelectionStateFailure({
                anonymizedDom: getAnonymizedEditorDOM(node, function (n) {
                  var labels = [];
                  if (n === activeElement) labels.push("active element");
                  if (n === selection.anchorNode) labels.push("selection anchor node");
                  if (n === selection.focusNode) labels.push("selection focus node");
                  return labels;
                }),
                extraParams: JSON.stringify(
                  {
                    activeElementName: activeElement ? activeElement.nodeName : null,
                    nodeIsFocus: node === selection.focusNode,
                    nodeWasFocus: nodeWasFocus,
                    selectionRangeCount: selection.rangeCount,
                    selectionAnchorNodeName: selection.anchorNode
                      ? selection.anchorNode.nodeName
                      : null,
                    selectionAnchorOffset: selection.anchorOffset,
                    selectionFocusNodeName: selection.focusNode
                      ? selection.focusNode.nodeName
                      : null,
                    selectionFocusOffset: selection.focusOffset,
                    message: e ? "" + e : null,
                    offset: offset,
                  },
                  null,
                  2,
                ),
                selectionState: JSON.stringify(selectionState.toJS(), null, 2),
              }); // allow the error to be thrown -
              // better than continuing in a broken state
              throw e;
            }
          } // IE doesn't support extend. This will mean no backward selection.
          // Extract the existing selection range and add focus to it.
          // Additionally, clone the selection range. IE11 throws an
          // InvalidStateError when attempting to access selection properties
          // after the range is detached.
          else if (node && selection.rangeCount > 0) {
            var range = selection.getRangeAt(0);
            range.setEnd(node, offset);
            selection.addRange(range.cloneRange());
          }
        }
        function addPointToSelection(selection, node, offset, selectionState) {
          var range = getCorrectDocumentFromNode(node).createRange(); // logging to catch bug that is being reported in t16250795
          if (offset > getNodeLength(node)) {
            // in this case we know that the call to 'range.setStart' is about to throw
            DraftJsDebugLogging.logSelectionStateFailure({
              anonymizedDom: getAnonymizedEditorDOM(node),
              extraParams: JSON.stringify({
                offset: offset,
              }),
              selectionState: JSON.stringify(selectionState.toJS()),
            });
            DraftEffects.handleExtensionCausedError();
          }
          range.setStart(node, offset); // IE sometimes throws Unspecified Error when trying to addRange
          if (isIE)
            try {
              selection.addRange(range);
            } catch (e) {
              /* eslint-disable-next-line no-console */ console.warn(
                "Call to selection.addRange() threw exception: ",
                e,
              );
            }
          else selection.addRange(range);
        }
        module.exports = {
          setDraftEditorSelection: setDraftEditorSelection,
          addFocusToSelection: addFocusToSelection,
        };
      },
      {
        "11cf4b0db042f6ba": "4tFlR",
        "7aa2b1256877e604": "lEvg1",
        f3b24720ab0be1a9: "c2opx",
        "7c37fb3e6a72eda0": "4gmRO",
        f15c230a34343db1: "juVuR",
        "5910db777b07511e": "4aMz1",
        "84bff7c47dc728a7": "d6MgO",
        "242b1662e7a7c56f": "wCJfe",
      },
    ],
    "4tFlR": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        module.exports = {
          initODS: function initODS() {},
          handleExtensionCausedError: function handleExtensionCausedError() {},
        };
      },
      {},
    ],
    "4gmRO": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */ var isTextNode = require("bd05387e3537baaa");
        /*eslint-disable no-bitwise */ /**
         * Checks if a given DOM node contains or is another DOM node.
         */ function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) return false;
          else if (outerNode === innerNode) return true;
          else if (isTextNode(outerNode)) return false;
          else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
          else if ("contains" in outerNode) return outerNode.contains(innerNode);
          else if (outerNode.compareDocumentPosition)
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          else return false;
        }
        module.exports = containsNode;
      },
      { bd05387e3537baaa: "cBymo" },
    ],
    cBymo: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var isNode = require("f97a1966c2c98c76");
        /**
         * @param {*} object The object to check.
         * @return {boolean} Whether or not the object is a DOM text node.
         */ function isTextNode(object) {
          return isNode(object) && object.nodeType == 3;
        }
        module.exports = isTextNode;
      },
      { f97a1966c2c98c76: "5HSae" },
    ],
    "5HSae": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ /**
         * @param {*} object The object to check.
         * @return {boolean} Whether or not the object is a DOM node.
         */ function isNode(object) {
          var doc = object ? object.ownerDocument || object : document;
          var defaultView = doc.defaultView || window;
          return !!(
            object &&
            (typeof defaultView.Node === "function"
              ? object instanceof defaultView.Node
              : typeof object === "object" &&
                typeof object.nodeType === "number" &&
                typeof object.nodeName === "string")
          );
        }
        module.exports = isNode;
      },
      {},
    ],
    juVuR: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ /* eslint-disable fb-www/typeof-undefined */ /**
         * Same as document.activeElement but wraps in a try-catch block. In IE it is
         * not safe to call document.activeElement if there is nothing focused.
         *
         * The activeElement will be null only if the document or document body is not
         * yet defined.
         *
         * @param {?DOMDocument} doc Defaults to current document.
         * @return {?DOMElement}
         */ function getActiveElement(doc) /*?DOMElement*/ {
          doc = doc || (typeof document !== "undefined" ? document : undefined);
          if (typeof doc === "undefined") return null;
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        module.exports = getActiveElement;
      },
      {},
    ],
    "2DSAK": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ /**
         * @param {DOMElement} element
         * @param {DOMDocument} doc
         * @return {boolean}
         */ function _isViewportScrollElement(element, doc) {
          return !!doc && (element === doc.documentElement || element === doc.body);
        }
        /**
         * Scroll Module. This class contains 4 simple static functions
         * to be used to access Element.scrollTop/scrollLeft properties.
         * To solve the inconsistencies between browsers when either
         * document.body or document.documentElement is supplied,
         * below logic will be used to alleviate the issue:
         *
         * 1. If 'element' is either 'document.body' or 'document.documentElement,
         *    get whichever element's 'scroll{Top,Left}' is larger.
         * 2. If 'element' is either 'document.body' or 'document.documentElement',
         *    set the 'scroll{Top,Left}' on both elements.
         */ var Scroll = {
          /**
           * @param {DOMElement} element
           * @return {number}
           */ getTop: function getTop(element) {
            var doc = element.ownerDocument;
            return _isViewportScrollElement(element, doc) // or one will be zero and the other will be the scroll position
              ? // of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`
                doc.body.scrollTop || doc.documentElement.scrollTop
              : element.scrollTop;
          },
          /**
           * @param {DOMElement} element
           * @param {number} newTop
           */ setTop: function setTop(element, newTop) {
            var doc = element.ownerDocument;
            if (_isViewportScrollElement(element, doc))
              doc.body.scrollTop = doc.documentElement.scrollTop = newTop;
            else element.scrollTop = newTop;
          },
          /**
           * @param {DOMElement} element
           * @return {number}
           */ getLeft: function getLeft(element) {
            var doc = element.ownerDocument;
            return _isViewportScrollElement(element, doc)
              ? doc.body.scrollLeft || doc.documentElement.scrollLeft
              : element.scrollLeft;
          },
          /**
           * @param {DOMElement} element
           * @param {number} newLeft
           */ setLeft: function setLeft(element, newLeft) {
            var doc = element.ownerDocument;
            if (_isViewportScrollElement(element, doc))
              doc.body.scrollLeft = doc.documentElement.scrollLeft = newLeft;
            else element.scrollLeft = newLeft;
          },
        };
        module.exports = Scroll;
      },
      {},
    ],
    "1GeHz": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var getStyleProperty = require("5ed95ec14da76e35");
        /**
         * @param {DOMNode} element [description]
         * @param {string} name Overflow style property name.
         * @return {boolean} True if the supplied ndoe is scrollable.
         */ function _isNodeScrollable(element, name) {
          var overflow = Style.get(element, name);
          return overflow === "auto" || overflow === "scroll";
        }
        /**
         * Utilities for querying and mutating style properties.
         */ var Style = {
          /**
           * Gets the style property for the supplied node. This will return either the
           * computed style, if available, or the declared style.
           *
           * @param {DOMNode} node
           * @param {string} name Style property name.
           * @return {?string} Style property value.
           */ get: getStyleProperty,
          /**
           * Determines the nearest ancestor of a node that is scrollable.
           *
           * NOTE: This can be expensive if used repeatedly or on a node nested deeply.
           *
           * @param {?DOMNode} node Node from which to start searching.
           * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.
           */ getScrollParent: function getScrollParent(node) {
            if (!node) return null;
            var ownerDocument = node.ownerDocument;
            while (node && node !== ownerDocument.body) {
              if (
                _isNodeScrollable(node, "overflow") ||
                _isNodeScrollable(node, "overflowY") ||
                _isNodeScrollable(node, "overflowX")
              )
                return node;
              node = node.parentNode;
            }
            return ownerDocument.defaultView || ownerDocument.parentWindow;
          },
        };
        module.exports = Style;
      },
      { "5ed95ec14da76e35": "lb4Yr" },
    ],
    lb4Yr: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var camelize = require("f4a375a9a13ca285");
        var hyphenate = require("ab97d4d790540c96");
        function asString(value) /*?string*/ {
          return value == null ? value : String(value);
        }
        function getStyleProperty(/*DOMNode*/ node, /*string*/ name) /*?string*/ {
          var computedStyle; // W3C Standard
          if (window.getComputedStyle) {
            // In certain cases such as within an iframe in FF3, this returns null.
            computedStyle = window.getComputedStyle(node, null);
            if (computedStyle) return asString(computedStyle.getPropertyValue(hyphenate(name)));
          } // Safari
          if (document.defaultView && document.defaultView.getComputedStyle) {
            computedStyle = document.defaultView.getComputedStyle(node, null); // A Safari bug causes this to return null for `display: none` elements.
            if (computedStyle) return asString(computedStyle.getPropertyValue(hyphenate(name)));
            if (name === "display") return "none";
          } // Internet Explorer
          if (node.currentStyle) {
            if (name === "float")
              return asString(node.currentStyle.cssFloat || node.currentStyle.styleFloat);
            return asString(node.currentStyle[camelize(name)]);
          }
          return asString(node.style && node.style[camelize(name)]);
        }
        module.exports = getStyleProperty;
      },
      { f4a375a9a13ca285: "3HIbv", ab97d4d790540c96: "5wBzH" },
    ],
    "3HIbv": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var _hyphenPattern = /-(.)/g;
        /**
         * Camelcases a hyphenated string, for example:
         *
         *   > camelize('background-color')
         *   < "backgroundColor"
         *
         * @param {string} string
         * @return {string}
         */ function camelize(string) {
          return string.replace(_hyphenPattern, function (_, character) {
            return character.toUpperCase();
          });
        }
        module.exports = camelize;
      },
      {},
    ],
    "5wBzH": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var _uppercasePattern = /([A-Z])/g;
        /**
         * Hyphenates a camelcased string, for example:
         *
         *   > hyphenate('backgroundColor')
         *   < "background-color"
         *
         * For CSS style names, use `hyphenateStyleName` instead which works properly
         * with all vendor prefixes, including `ms`.
         *
         * @param {string} string
         * @return {string}
         */ function hyphenate(string) {
          return string.replace(_uppercasePattern, "-$1").toLowerCase();
        }
        module.exports = hyphenate;
      },
      {},
    ],
    "6zIf7": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var getElementRect = require("7513b545fd401dae");
        /**
         * Gets an element's position in pixels relative to the viewport. The returned
         * object represents the position of the element's top left corner.
         *
         * @param {DOMElement} element
         * @return {object}
         */ function getElementPosition(element) {
          var rect = getElementRect(element);
          return {
            x: rect.left,
            y: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top,
          };
        }
        module.exports = getElementPosition;
      },
      { "7513b545fd401dae": "cDcgr" },
    ],
    cDcgr: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var containsNode = require("ca7291d33244719a");
        /**
         * Gets an element's bounding rect in pixels relative to the viewport.
         *
         * @param {DOMElement} elem
         * @return {object}
         */ function getElementRect(elem) {
          var docElem = elem.ownerDocument.documentElement; // FF 2, Safari 3 and Opera 9.5- do not support getBoundingClientRect().
          // IE9- will throw if the element is not in the document.
          if (!("getBoundingClientRect" in elem) || !containsNode(docElem, elem))
            return {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0,
            };
          // Subtracts clientTop/Left because IE8- added a 2px border to the
          // <html> element (see http://fburl.com/1493213). IE 7 in
          // Quicksmode does not report clientLeft/clientTop so there
          // will be an unaccounted offset of 2px when in quirksmode
          var rect = elem.getBoundingClientRect();
          return {
            left: Math.round(rect.left) - docElem.clientLeft,
            right: Math.round(rect.right) - docElem.clientLeft,
            top: Math.round(rect.top) - docElem.clientTop,
            bottom: Math.round(rect.bottom) - docElem.clientTop,
          };
        }
        module.exports = getElementRect;
      },
      { ca7291d33244719a: "4gmRO" },
    ],
    "9CX89": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ "use strict";
        var getDocumentScrollElement = require("9cfe9642495ecee5");
        var getUnboundedScrollPosition = require("a14aba33dc781f8f");
        /**
         * Gets the scroll position of the supplied element or window.
         *
         * The return values are bounded. This means that if the scroll position is
         * negative or exceeds the element boundaries (which is possible using inertial
         * scrolling), you will get zero or the maximum scroll position, respectively.
         *
         * If you need the unbound scroll position, use `getUnboundedScrollPosition`.
         *
         * @param {DOMWindow|DOMElement} scrollable
         * @return {object} Map with `x` and `y` keys.
         */ function getScrollPosition(scrollable) {
          var documentScrollElement = getDocumentScrollElement(
            scrollable.ownerDocument || scrollable.document,
          );
          if (scrollable.Window && scrollable instanceof scrollable.Window)
            scrollable = documentScrollElement;
          var scrollPosition = getUnboundedScrollPosition(scrollable);
          var viewport =
            scrollable === documentScrollElement
              ? scrollable.ownerDocument.documentElement
              : scrollable;
          var xMax = scrollable.scrollWidth - viewport.clientWidth;
          var yMax = scrollable.scrollHeight - viewport.clientHeight;
          scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));
          scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));
          return scrollPosition;
        }
        module.exports = getScrollPosition;
      },
      { "9cfe9642495ecee5": "eLZaP", a14aba33dc781f8f: "EtPy4" },
    ],
    eLZaP: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ "use strict";
        var isWebkit =
          typeof navigator !== "undefined" && navigator.userAgent.indexOf("AppleWebKit") > -1;
        /**
         * Gets the element with the document scroll properties such as `scrollLeft` and
         * `scrollHeight`. This may differ across different browsers.
         *
         * NOTE: The return value can be null if the DOM is not yet ready.
         *
         * @param {?DOMDocument} doc Defaults to current document.
         * @return {?DOMElement}
         */ function getDocumentScrollElement(doc) {
          doc = doc || document;
          if (doc.scrollingElement) return doc.scrollingElement;
          return !isWebkit && doc.compatMode === "CSS1Compat" ? doc.documentElement : doc.body;
        }
        module.exports = getDocumentScrollElement;
      },
      {},
    ],
    EtPy4: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ "use strict";
        /**
         * Gets the scroll position of the supplied element or window.
         *
         * The return values are unbounded, unlike `getScrollPosition`. This means they
         * may be negative or exceed the element boundaries (which is possible using
         * inertial scrolling).
         *
         * @param {DOMWindow|DOMElement} scrollable
         * @return {object} Map with `x` and `y` keys.
         */ function getUnboundedScrollPosition(scrollable) {
          if (scrollable.Window && scrollable instanceof scrollable.Window)
            return {
              x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
              y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop,
            };
          return {
            x: scrollable.scrollLeft,
            y: scrollable.scrollTop,
          };
        }
        module.exports = getUnboundedScrollPosition;
      },
      {},
    ],
    "7IeDN": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         * @typechecks
         */ function getViewportWidth() {
          var width;
          if (document.documentElement) width = document.documentElement.clientWidth;
          if (!width && document.body) width = document.body.clientWidth;
          return width || 0;
        }
        function getViewportHeight() {
          var height;
          if (document.documentElement) height = document.documentElement.clientHeight;
          if (!height && document.body) height = document.body.clientHeight;
          return height || 0;
        }
        /**
         * Gets the viewport dimensions including any scrollbars.
         */ function getViewportDimensions() {
          return {
            width: window.innerWidth || getViewportWidth(),
            height: window.innerHeight || getViewportHeight(),
          };
        }
        /**
         * Gets the viewport dimensions excluding any scrollbars.
         */ getViewportDimensions.withoutScrollbars = function () {
          return {
            width: getViewportWidth(),
            height: getViewportHeight(),
          };
        };
        module.exports = getViewportDimensions;
      },
      {},
    ],
    "2iqjC": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var _assign = require("a93fd46a1a013b04");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var DraftEditorBlock = require("7dac56721cc1627c");
        var DraftOffsetKey = require("f8ceb16218a1376c");
        var React = require("18780780c42956f4");
        var cx = require("df92db9687fd9c35");
        var joinClasses = require("2a1023f93cd6f42c");
        var nullthrows = require("edaeca3da38a3f9c");
        /**
         * Provide default styling for list items. This way, lists will be styled with
         * proper counters and indentation even if the caller does not specify
         * their own styling at all. If more than five levels of nesting are needed,
         * the necessary CSS classes can be provided via `blockStyleFn` configuration.
         */ var getListItemClasses = function getListItemClasses(
          type,
          depth,
          shouldResetCount,
          direction,
        ) {
          return cx({
            "public/DraftStyleDefault/unorderedListItem": type === "unordered-list-item",
            "public/DraftStyleDefault/orderedListItem": type === "ordered-list-item",
            "public/DraftStyleDefault/reset": shouldResetCount,
            "public/DraftStyleDefault/depth0": depth === 0,
            "public/DraftStyleDefault/depth1": depth === 1,
            "public/DraftStyleDefault/depth2": depth === 2,
            "public/DraftStyleDefault/depth3": depth === 3,
            "public/DraftStyleDefault/depth4": depth >= 4,
            "public/DraftStyleDefault/listLTR": direction === "LTR",
            "public/DraftStyleDefault/listRTL": direction === "RTL",
          });
        };
        /**
         * `DraftEditorContents` is the container component for all block components
         * rendered for a `DraftEditor`. It is optimized to aggressively avoid
         * re-rendering blocks whenever possible.
         *
         * This component is separate from `DraftEditor` because certain props
         * (for instance, ARIA props) must be allowed to update without affecting
         * the contents of the editor.
         */ var DraftEditorContents = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorContents, _React$Component);
          function DraftEditorContents() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = DraftEditorContents.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            var prevEditorState = this.props.editorState;
            var nextEditorState = nextProps.editorState;
            var prevDirectionMap = prevEditorState.getDirectionMap();
            var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.
            if (prevDirectionMap !== nextDirectionMap) return true;
            var didHaveFocus = prevEditorState.getSelection().getHasFocus();
            var nowHasFocus = nextEditorState.getSelection().getHasFocus();
            if (didHaveFocus !== nowHasFocus) return true;
            var nextNativeContent = nextEditorState.getNativelyRenderedContent();
            var wasComposing = prevEditorState.isInCompositionMode();
            var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively
            // rendered state, there's nothing new to be done.
            if (
              prevEditorState === nextEditorState ||
              (nextNativeContent !== null &&
                nextEditorState.getCurrentContent() === nextNativeContent) ||
              (wasComposing && nowComposing)
            )
              return false;
            var prevContent = prevEditorState.getCurrentContent();
            var nextContent = nextEditorState.getCurrentContent();
            var prevDecorator = prevEditorState.getDecorator();
            var nextDecorator = nextEditorState.getDecorator();
            return (
              wasComposing !== nowComposing ||
              prevContent !== nextContent ||
              prevDecorator !== nextDecorator ||
              nextEditorState.mustForceSelection()
            );
          };
          _proto.render = function render() {
            var _this$props = this.props,
              blockRenderMap = _this$props.blockRenderMap,
              blockRendererFn = _this$props.blockRendererFn,
              blockStyleFn = _this$props.blockStyleFn,
              customStyleMap = _this$props.customStyleMap,
              customStyleFn = _this$props.customStyleFn,
              editorState = _this$props.editorState,
              editorKey = _this$props.editorKey,
              preventScroll = _this$props.preventScroll,
              textDirectionality = _this$props.textDirectionality;
            var content = editorState.getCurrentContent();
            var selection = editorState.getSelection();
            var forceSelection = editorState.mustForceSelection();
            var decorator = editorState.getDecorator();
            var directionMap = nullthrows(editorState.getDirectionMap());
            var blocksAsArray = content.getBlocksAsArray();
            var processedBlocks = [];
            var currentDepth = null;
            var lastWrapperTemplate = null;
            for (var ii = 0; ii < blocksAsArray.length; ii++) {
              var _block = blocksAsArray[ii];
              var key = _block.getKey();
              var blockType = _block.getType();
              var customRenderer = blockRendererFn(_block);
              var CustomComponent = void 0,
                customProps = void 0,
                customEditable = void 0;
              if (customRenderer) {
                CustomComponent = customRenderer.component;
                customProps = customRenderer.props;
                customEditable = customRenderer.editable;
              }
              var direction = textDirectionality ? textDirectionality : directionMap.get(key);
              var offsetKey = DraftOffsetKey.encode(key, 0, 0);
              var componentProps = {
                contentState: content,
                block: _block,
                blockProps: customProps,
                blockStyleFn: blockStyleFn,
                customStyleMap: customStyleMap,
                customStyleFn: customStyleFn,
                decorator: decorator,
                direction: direction,
                forceSelection: forceSelection,
                offsetKey: offsetKey,
                preventScroll: preventScroll,
                selection: selection,
                tree: editorState.getBlockTree(key),
              };
              var configForType = blockRenderMap.get(blockType) || blockRenderMap.get("unstyled");
              var wrapperTemplate = configForType.wrapper;
              var Element = configForType.element || blockRenderMap.get("unstyled").element;
              var depth = _block.getDepth();
              var _className = "";
              if (blockStyleFn) _className = blockStyleFn(_block);
              // List items are special snowflakes, since we handle nesting and
              // counters manually.
              if (Element === "li") {
                var shouldResetCount =
                  lastWrapperTemplate !== wrapperTemplate ||
                  currentDepth === null ||
                  depth > currentDepth;
                _className = joinClasses(
                  _className,
                  getListItemClasses(blockType, depth, shouldResetCount, direction),
                );
              }
              var Component = CustomComponent || DraftEditorBlock;
              var childProps = {
                className: _className,
                "data-block": true,
                "data-editor": editorKey,
                "data-offset-key": offsetKey,
                key: key,
              };
              if (customEditable !== undefined)
                childProps = _objectSpread({}, childProps, {
                  contentEditable: customEditable,
                  suppressContentEditableWarning: true,
                });
              var child = React.createElement(
                Element,
                childProps,
                /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This
                 * comment suppresses an error found when Flow v0.112 was deployed. To
                 * see the error delete this comment and run Flow. */ React.createElement(
                  Component,
                  _extends({}, componentProps, {
                    key: key,
                  }),
                ),
              );
              processedBlocks.push({
                block: child,
                wrapperTemplate: wrapperTemplate,
                key: key,
                offsetKey: offsetKey,
              });
              if (wrapperTemplate) currentDepth = _block.getDepth();
              else currentDepth = null;
              lastWrapperTemplate = wrapperTemplate;
            } // Group contiguous runs of blocks that have the same wrapperTemplate
            var outputBlocks = [];
            for (var _ii = 0; _ii < processedBlocks.length; ) {
              var info = processedBlocks[_ii];
              if (info.wrapperTemplate) {
                var blocks = [];
                do {
                  blocks.push(processedBlocks[_ii].block);
                  _ii++;
                } while (
                  _ii < processedBlocks.length &&
                  processedBlocks[_ii].wrapperTemplate === info.wrapperTemplate
                );
                var wrapperElement = React.cloneElement(
                  info.wrapperTemplate,
                  {
                    key: info.key + "-wrap",
                    "data-offset-key": info.offsetKey,
                  },
                  blocks,
                );
                outputBlocks.push(wrapperElement);
              } else {
                outputBlocks.push(info.block);
                _ii++;
              }
            }
            return React.createElement(
              "div",
              {
                "data-contents": "true",
              },
              outputBlocks,
            );
          };
          return DraftEditorContents;
        })(React.Component);
        module.exports = DraftEditorContents;
      },
      {
        a93fd46a1a013b04: "7OXxh",
        "7dac56721cc1627c": "9Lyys",
        f8ceb16218a1376c: "3pjWp",
        "18780780c42956f4": "21dqq",
        df92db9687fd9c35: "zRtOM",
        "2a1023f93cd6f42c": "eZftr",
        edaeca3da38a3f9c: "fwtV9",
      },
    ],
    "9Lyys": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var _assign = require("6a4c60cf3b45c12e");
        function _extends() {
          _extends =
            _assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var DraftEditorLeaf = require("c9ba66b36aec3d7e");
        var DraftOffsetKey = require("f7226337603393da");
        var React = require("af13a894d954424e");
        var Scroll = require("ba44a06d9d1002f4");
        var Style = require("5ed59a83fed2421");
        var UnicodeBidi = require("35eec4e714ec5818");
        var UnicodeBidiDirection = require("20ffdee572ce374b");
        var cx = require("9e70b375c6d6e887");
        var getElementPosition = require("1b1561cf612e3c91");
        var getScrollPosition = require("e3ef8d1e52bab4d4");
        var getViewportDimensions = require("4cf55cd51eecc83a");
        var invariant = require("71042e338ed7e491");
        var isHTMLElement = require("eb0b929f4a4064af");
        var nullthrows = require("487292442fae28b8");
        var SCROLL_BUFFER = 10;
        /**
         * Return whether a block overlaps with either edge of the `SelectionState`.
         */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {
          return selection.getAnchorKey() === key || selection.getFocusKey() === key;
        };
        /**
         * The default block renderer for a `DraftEditor` component.
         *
         * A `DraftEditorBlock` is able to render a given `ContentBlock` to its
         * appropriate decorator and inline style components.
         */ var DraftEditorBlock = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorBlock, _React$Component);
          function DraftEditorBlock() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
              args[_key] = arguments[_key];
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _defineProperty(_assertThisInitialized(_this), "_node", void 0);
            return _this;
          }
          var _proto = DraftEditorBlock.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            return (
              this.props.block !== nextProps.block ||
              this.props.tree !== nextProps.tree ||
              this.props.direction !== nextProps.direction ||
              (isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) &&
                nextProps.forceSelection)
            );
          }
          /**
           * When a block is mounted and overlaps the selection state, we need to make
           * sure that the cursor is visible to match native behavior. This may not
           * be the case if the user has pressed `RETURN` or pasted some content, since
           * programmatically creating these new blocks and setting the DOM selection
           * will miss out on the browser natively scrolling to that position.
           *
           * To replicate native behavior, if the block overlaps the selection state
           * on mount, force the scroll position. Check the scroll state of the scroll
           * parent, and adjust it to align the entire block to the bottom of the
           * scroll parent.
           */;
          _proto.componentDidMount = function componentDidMount() {
            if (this.props.preventScroll) return;
            var selection = this.props.selection;
            var endKey = selection.getEndKey();
            if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) return;
            var blockNode = this._node;
            if (blockNode == null) return;
            var scrollParent = Style.getScrollParent(blockNode);
            var scrollPosition = getScrollPosition(scrollParent);
            var scrollDelta;
            if (scrollParent === window) {
              var nodePosition = getElementPosition(blockNode);
              var nodeBottom = nodePosition.y + nodePosition.height;
              var viewportHeight = getViewportDimensions().height;
              scrollDelta = nodeBottom - viewportHeight;
              if (scrollDelta > 0)
                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);
            } else {
              !isHTMLElement(blockNode) && invariant(false, "blockNode is not an HTMLElement");
              var blockBottom = blockNode.offsetHeight + blockNode.offsetTop;
              var pOffset = scrollParent.offsetTop + scrollParent.offsetHeight;
              var scrollBottom = pOffset + scrollPosition.y;
              scrollDelta = blockBottom - scrollBottom;
              if (scrollDelta > 0)
                Scroll.setTop(
                  scrollParent,
                  Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER,
                );
            }
          };
          _proto._renderChildren = function _renderChildren() {
            var _this2 = this;
            var block = this.props.block;
            var blockKey = block.getKey();
            var text = block.getText();
            var lastLeafSet = this.props.tree.size - 1;
            var hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);
            return this.props.tree
              .map(function (leafSet, ii) {
                var leavesForLeafSet = leafSet.get("leaves"); // T44088704
                if (leavesForLeafSet.size === 0) return null;
                var lastLeaf = leavesForLeafSet.size - 1;
                var leaves = leavesForLeafSet
                  .map(function (leaf, jj) {
                    var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);
                    var start = leaf.get("start");
                    var end = leaf.get("end");
                    return React.createElement(DraftEditorLeaf, {
                      key: offsetKey,
                      offsetKey: offsetKey,
                      block: block,
                      start: start,
                      selection: hasSelection ? _this2.props.selection : null,
                      forceSelection: _this2.props.forceSelection,
                      text: text.slice(start, end),
                      styleSet: block.getInlineStyleAt(start),
                      customStyleMap: _this2.props.customStyleMap,
                      customStyleFn: _this2.props.customStyleFn,
                      isLast: ii === lastLeafSet && jj === lastLeaf,
                    });
                  })
                  .toArray();
                var decoratorKey = leafSet.get("decoratorKey");
                if (decoratorKey == null) return leaves;
                if (!_this2.props.decorator) return leaves;
                var decorator = nullthrows(_this2.props.decorator);
                var DecoratorComponent = decorator.getComponentForKey(decoratorKey);
                if (!DecoratorComponent) return leaves;
                var decoratorProps = decorator.getPropsForKey(decoratorKey);
                var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);
                var start = leavesForLeafSet.first().get("start");
                var end = leavesForLeafSet.last().get("end");
                var decoratedText = text.slice(start, end);
                var entityKey = block.getEntityAt(leafSet.get("start")); // Resetting dir to the same value on a child node makes Chrome/Firefox
                // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/
                var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(
                  UnicodeBidi.getDirection(decoratedText),
                  _this2.props.direction,
                );
                var commonProps = {
                  contentState: _this2.props.contentState,
                  decoratedText: decoratedText,
                  dir: dir,
                  start: start,
                  end: end,
                  blockKey: blockKey,
                  entityKey: entityKey,
                  offsetKey: decoratorOffsetKey,
                };
                return React.createElement(
                  DecoratorComponent,
                  _extends({}, decoratorProps, commonProps, {
                    key: decoratorOffsetKey,
                  }),
                  leaves,
                );
              })
              .toArray();
          };
          _proto.render = function render() {
            var _this3 = this;
            var _this$props = this.props,
              direction = _this$props.direction,
              offsetKey = _this$props.offsetKey;
            var className = cx({
              "public/DraftStyleDefault/block": true,
              "public/DraftStyleDefault/ltr": direction === "LTR",
              "public/DraftStyleDefault/rtl": direction === "RTL",
            });
            return React.createElement(
              "div",
              {
                "data-offset-key": offsetKey,
                className: className,
                ref: function ref(_ref) {
                  return (_this3._node = _ref);
                },
              },
              this._renderChildren(),
            );
          };
          return DraftEditorBlock;
        })(React.Component);
        module.exports = DraftEditorBlock;
      },
      {
        "6a4c60cf3b45c12e": "7OXxh",
        c9ba66b36aec3d7e: "hcEOT",
        f7226337603393da: "3pjWp",
        af13a894d954424e: "21dqq",
        ba44a06d9d1002f4: "2DSAK",
        "5ed59a83fed2421": "1GeHz",
        "35eec4e714ec5818": "5uUXL",
        "20ffdee572ce374b": "bOUHt",
        "9e70b375c6d6e887": "zRtOM",
        "1b1561cf612e3c91": "6zIf7",
        e3ef8d1e52bab4d4: "9CX89",
        "4cf55cd51eecc83a": "7IeDN",
        "71042e338ed7e491": "d6MgO",
        eb0b929f4a4064af: "1UoK0",
        "487292442fae28b8": "fwtV9",
      },
    ],
    eZftr: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         * @typechecks static-only
         */ "use strict";
        /**
         * Combines multiple className strings into one.
         */ function joinClasses(className) {
          var newClassName = className || "";
          var argLength = arguments.length;
          if (argLength > 1)
            for (var index = 1; index < argLength; index++) {
              var nextClass = arguments[index];
              if (nextClass) newClassName = (newClassName ? newClassName + " " : "") + nextClass;
            }
          return newClassName;
        }
        module.exports = joinClasses;
      },
      {},
    ],
    NcTHz: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DataTransfer = require("b31ca008f36ea279");
        var DraftModifier = require("6397eab8279dd37");
        var EditorState = require("7a07661163239c62");
        var findAncestorOffsetKey = require("e8760ef7c8dfd5be");
        var getCorrectDocumentFromNode = require("192fd48b839a9511");
        var getTextContentFromFiles = require("48a185193400cf50");
        var getUpdatedSelectionState = require("45f2cb000b21426b");
        var getWindowForNode = require("b10ae43b3b30b046");
        var isEventHandled = require("cc1518b243ae794e");
        var nullthrows = require("bad05d273cd27259");
        /**
         * Get a SelectionState for the supplied mouse event.
         */ function getSelectionForEvent(event, editorState) {
          var node = null;
          var offset = null;
          var eventTargetDocument = getCorrectDocumentFromNode(event.currentTarget);
          /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment
           * suppresses an error found when Flow v0.68 was deployed. To see the error
           * delete this comment and run Flow. */ if (
            typeof eventTargetDocument.caretRangeFromPoint === "function"
          ) {
            /* $FlowFixMe[incompatible-use] (>=0.68.0 site=www,mobile) This comment
             * suppresses an error found when Flow v0.68 was deployed. To see the error
             * delete this comment and run Flow. */ var dropRange =
              eventTargetDocument.caretRangeFromPoint(event.x, event.y);
            node = dropRange.startContainer;
            offset = dropRange.startOffset;
          } else if (event.rangeParent) {
            node = event.rangeParent;
            offset = event.rangeOffset;
          } else return null;
          node = nullthrows(node);
          offset = nullthrows(offset);
          var offsetKey = nullthrows(findAncestorOffsetKey(node));
          return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);
        }
        var DraftEditorDragHandler = {
          /**
           * Drag originating from input terminated.
           */ onDragEnd: function onDragEnd(editor) {
            editor.exitCurrentMode();
            endDrag(editor);
          },
          /**
           * Handle data being dropped.
           */ onDrop: function onDrop(editor, e) {
            var data = new DataTransfer(e.nativeEvent.dataTransfer);
            var editorState = editor._latestEditorState;
            var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);
            e.preventDefault();
            editor._dragCount = 0;
            editor.exitCurrentMode();
            if (dropSelection == null) return;
            var files = data.getFiles();
            if (files.length > 0) {
              if (
                editor.props.handleDroppedFiles &&
                isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))
              )
                return;
              /* $FlowFixMe[incompatible-call] This comment suppresses an error found
               * DataTransfer was typed. getFiles() returns an array of <Files extends
               * Blob>, not Blob */ getTextContentFromFiles(files, function (fileText) {
                fileText &&
                  editor.update(insertTextAtSelection(editorState, dropSelection, fileText));
              });
              return;
            }
            var dragType = editor._internalDrag ? "internal" : "external";
            if (
              editor.props.handleDrop &&
              isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))
            );
            else if (editor._internalDrag) editor.update(moveText(editorState, dropSelection));
            else editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));
            endDrag(editor);
          },
        };
        function endDrag(editor) {
          editor._internalDrag = false; // Fix issue #1383
          // Prior to React v16.5.0 onDrop breaks onSelect event:
          // https://github.com/facebook/react/issues/11379.
          // Dispatching a mouseup event on DOM node will make it go back to normal.
          var editorNode = editor.editorContainer;
          if (editorNode) {
            var mouseUpEvent = new MouseEvent("mouseup", {
              view: getWindowForNode(editorNode),
              bubbles: true,
              cancelable: true,
            });
            editorNode.dispatchEvent(mouseUpEvent);
          }
        }
        function moveText(editorState, targetSelection) {
          var newContentState = DraftModifier.moveText(
            editorState.getCurrentContent(),
            editorState.getSelection(),
            targetSelection,
          );
          return EditorState.push(editorState, newContentState, "insert-fragment");
        }
        /**
         * Insert text at a specified selection.
         */ function insertTextAtSelection(editorState, selection, text) {
          var newContentState = DraftModifier.insertText(
            editorState.getCurrentContent(),
            selection,
            text,
            editorState.getCurrentInlineStyle(),
          );
          return EditorState.push(editorState, newContentState, "insert-fragment");
        }
        module.exports = DraftEditorDragHandler;
      },
      {
        b31ca008f36ea279: "8Jv11",
        "6397eab8279dd37": "aeLN8",
        "7a07661163239c62": "2EY4X",
        e8760ef7c8dfd5be: "2PlIl",
        "192fd48b839a9511": "4aMz1",
        "48a185193400cf50": "gfFVN",
        "45f2cb000b21426b": "d0XHh",
        b10ae43b3b30b046: "OG7uI",
        cc1518b243ae794e: "6tb2I",
        bad05d273cd27259: "fwtV9",
      },
    ],
    "8Jv11": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var PhotosMimeType = require("bce9012e9aee6c74");
        var createArrayFromMixed = require("27d34bdefb9f8202");
        var emptyFunction = require("136bb6f5c1686891");
        var CR_LF_REGEX = new RegExp("\r\n", "g");
        var LF_ONLY = "\n";
        var RICH_TEXT_TYPES = {
          "text/rtf": 1,
          "text/html": 1,
        };
        /**
         * If DataTransferItem is a file then return the Blob of data.
         *
         * @param {object} item
         * @return {?blob}
         */ function getFileFromDataTransfer(item) {
          if (item.kind == "file") return item.getAsFile();
        }
        var DataTransfer = /*#__PURE__*/ (function () {
          /**
           * @param {object} data
           */ function DataTransfer(data) {
            this.data = data; // Types could be DOMStringList or array
            this.types = data.types ? createArrayFromMixed(data.types) : [];
          }
          /**
           * Is this likely to be a rich text data transfer?
           *
           * @return {boolean}
           */ var _proto = DataTransfer.prototype;
          _proto.isRichText = function isRichText() {
            // If HTML is available, treat this data as rich text. This way, we avoid
            // using a pasted image if it is packaged with HTML -- this may occur with
            // pastes from MS Word, for example.  However this is only rich text if
            // there's accompanying text.
            if (this.getHTML() && this.getText()) return true;
            // When an image is copied from a preview window, you end up with two
            // DataTransferItems one of which is a file's metadata as text.  Skip those.
            if (this.isImage()) return false;
            return this.types.some(function (type) {
              return RICH_TEXT_TYPES[type];
            });
          };
          /**
           * Get raw text.
           *
           * @return {?string}
           */ _proto.getText = function getText() {
            var text;
            if (this.data.getData) {
              if (!this.types.length) text = this.data.getData("Text");
              else if (this.types.indexOf("text/plain") != -1)
                text = this.data.getData("text/plain");
            }
            return text ? text.replace(CR_LF_REGEX, LF_ONLY) : null;
          };
          /**
           * Get HTML paste data
           *
           * @return {?string}
           */ _proto.getHTML = function getHTML() {
            if (this.data.getData) {
              if (!this.types.length) return this.data.getData("Text");
              else if (this.types.indexOf("text/html") != -1) return this.data.getData("text/html");
            }
          };
          /**
           * Is this a link data transfer?
           *
           * @return {boolean}
           */ _proto.isLink = function isLink() {
            return this.types.some(function (type) {
              return (
                type.indexOf("Url") != -1 ||
                type.indexOf("text/uri-list") != -1 ||
                type.indexOf("text/x-moz-url")
              );
            });
          };
          /**
           * Get a link url.
           *
           * @return {?string}
           */ _proto.getLink = function getLink() {
            if (this.data.getData) {
              if (this.types.indexOf("text/x-moz-url") != -1) {
                var url = this.data.getData("text/x-moz-url").split("\n");
                return url[0];
              }
              return this.types.indexOf("text/uri-list") != -1
                ? this.data.getData("text/uri-list")
                : this.data.getData("url");
            }
            return null;
          };
          /**
           * Is this an image data transfer?
           *
           * @return {boolean}
           */ _proto.isImage = function isImage() {
            var isImage = this.types.some(function (type) {
              // Firefox will have a type of application/x-moz-file for images during
              // dragging
              return type.indexOf("application/x-moz-file") != -1;
            });
            if (isImage) return true;
            var items = this.getFiles();
            for (var i = 0; i < items.length; i++) {
              var type = items[i].type;
              if (!PhotosMimeType.isImage(type)) return false;
            }
            return true;
          };
          _proto.getCount = function getCount() {
            if (this.data.hasOwnProperty("items")) return this.data.items.length;
            else if (this.data.hasOwnProperty("mozItemCount")) return this.data.mozItemCount;
            else if (this.data.files) return this.data.files.length;
            return null;
          };
          /**
           * Get files.
           *
           * @return {array}
           */ _proto.getFiles = function getFiles() {
            if (this.data.items)
              // createArrayFromMixed doesn't properly handle DataTransferItemLists.
              return Array.prototype.slice
                .call(this.data.items)
                .map(getFileFromDataTransfer)
                .filter(emptyFunction.thatReturnsArgument);
            else if (this.data.files) return Array.prototype.slice.call(this.data.files);
            else return [];
          };
          /**
           * Are there any files to fetch?
           *
           * @return {boolean}
           */ _proto.hasFiles = function hasFiles() {
            return this.getFiles().length > 0;
          };
          return DataTransfer;
        })();
        module.exports = DataTransfer;
      },
      { bce9012e9aee6c74: "7dCo2", "27d34bdefb9f8202": "1m2V5", "136bb6f5c1686891": "c8rUW" },
    ],
    "7dCo2": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ var PhotosMimeType = {
          isImage: function isImage(mimeString) {
            return getParts(mimeString)[0] === "image";
          },
          isJpeg: function isJpeg(mimeString) {
            var parts = getParts(mimeString);
            return (
              PhotosMimeType.isImage(mimeString) && (parts[1] === "jpeg" || parts[1] === "pjpeg")
            );
          },
        };
        function getParts(mimeString) {
          return mimeString.split("/");
        }
        module.exports = PhotosMimeType;
      },
      {},
    ],
    "1m2V5": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ var invariant = require("d343cbad6908c56b");
        /**
         * Convert array-like objects to arrays.
         *
         * This API assumes the caller knows the contents of the data type. For less
         * well defined inputs use createArrayFromMixed.
         *
         * @param {object|function|filelist} obj
         * @return {array}
         */ function toArray(obj) {
          var length = obj.length; // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
          // in old versions of Safari).
          !(!Array.isArray(obj) && (typeof obj === "object" || typeof obj === "function")) &&
            invariant(false, "toArray: Array-like object expected");
          !(typeof length === "number") &&
            invariant(false, "toArray: Object needs a length property");
          !(length === 0 || length - 1 in obj) &&
            invariant(false, "toArray: Object should have keys for indices");
          !(typeof obj.callee !== "function") &&
            invariant(
              false,
              "toArray: Object can't be `arguments`. Use rest params (function(...args) {}) or Array.from() instead.",
            ); // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
          // without method will throw during the slice call and skip straight to the
          // fallback.
          if (obj.hasOwnProperty)
            try {
              return Array.prototype.slice.call(obj);
            } catch (e) {}
          // Fall back to copying key by key. This assumes all keys have a value,
          // so will not preserve sparsely populated inputs.
          var ret = Array(length);
          for (var ii = 0; ii < length; ii++) ret[ii] = obj[ii];
          return ret;
        }
        /**
         * Perform a heuristic test to determine if an object is "array-like".
         *
         *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
         *   Joshu replied: "Mu."
         *
         * This function determines if its argument has "array nature": it returns
         * true if the argument is an actual array, an `arguments' object, or an
         * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
         *
         * It will return false for other array-like objects like Filelist.
         *
         * @param {*} obj
         * @return {boolean}
         */ function hasArrayNature(obj) {
          return (
            !!obj &&
            (typeof obj == "object" || typeof obj == "function") && // quacks like an array
            "length" in obj && // not window
            !("setInterval" in obj) && // no DOM node should be considered an array-like
            // a 'select' element has 'length' and 'item' properties on IE8
            typeof obj.nodeType != "number" &&
            (Array.isArray(obj) || // arguments
              "callee" in obj || // HTMLCollection/NodeList
              "item" in obj)
          );
        }
        /**
         * Ensure that the argument is an array by wrapping it in an array if it is not.
         * Creates a copy of the argument if it is already an array.
         *
         * This is mostly useful idiomatically:
         *
         *   var createArrayFromMixed = require('createArrayFromMixed');
         *
         *   function takesOneOrMoreThings(things) {
         *     things = createArrayFromMixed(things);
         *     ...
         *   }
         *
         * This allows you to treat `things' as an array, but accept scalars in the API.
         *
         * If you need to convert an array-like object, like `arguments`, into an array
         * use toArray instead.
         *
         * @param {*} obj
         * @return {array}
         */ function createArrayFromMixed(obj) {
          if (!hasArrayNature(obj)) return [obj];
          else if (Array.isArray(obj)) return obj.slice();
          else return toArray(obj);
        }
        module.exports = createArrayFromMixed;
      },
      { d343cbad6908c56b: "d6MgO" },
    ],
    c8rUW: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */ function makeEmptyFunction(arg) {
          return function () {
            return arg;
          };
        }
        /**
         * This function accepts and discards inputs; it has no side effects. This is
         * primarily useful idiomatically for overridable function endpoints which
         * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
         */ var emptyFunction = function emptyFunction() {};
        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function () {
          return this;
        };
        emptyFunction.thatReturnsArgument = function (arg) {
          return arg;
        };
        module.exports = emptyFunction;
      },
      {},
    ],
    gfFVN: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var global = arguments[3];
        ("use strict");
        var invariant = require("916ee45fa249d2bb");
        var TEXT_CLIPPING_REGEX = /\.textClipping$/;
        var TEXT_TYPES = {
          "text/plain": true,
          "text/html": true,
          "text/rtf": true,
        }; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.
        var TEXT_SIZE_UPPER_BOUND = 5000;
        /**
         * Extract the text content from a file list.
         */ function getTextContentFromFiles(files, callback) {
          var readCount = 0;
          var results = [];
          files.forEach(function (/*blob*/ file) {
            readFile(file, function (/*string*/ text) {
              readCount++;
              text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));
              if (readCount == files.length) callback(results.join("\r"));
            });
          });
        }
        /**
         * todo isaac: Do work to turn html/rtf into a content fragment.
         */ function readFile(file, callback) {
          if (!global.FileReader || (file.type && !(file.type in TEXT_TYPES))) {
            callback("");
            return;
          }
          if (file.type === "") {
            var _contents = ""; // Special-case text clippings, which have an empty type but include
            // `.textClipping` in the file name. `readAsText` results in an empty
            // string for text clippings, so we force the file name to serve
            // as the text value for the file.
            if (TEXT_CLIPPING_REGEX.test(file.name))
              _contents = file.name.replace(TEXT_CLIPPING_REGEX, "");
            callback(_contents);
            return;
          }
          var reader = new FileReader();
          reader.onload = function () {
            var result = reader.result;
            !(typeof result === "string") &&
              invariant(
                false,
                'We should be calling "FileReader.readAsText" which returns a string',
              );
            callback(result);
          };
          reader.onerror = function () {
            callback("");
          };
          reader.readAsText(file);
        }
        module.exports = getTextContentFromFiles;
      },
      { "916ee45fa249d2bb": "d6MgO" },
    ],
    "6tb2I": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Utility method for determining whether or not the value returned
         * from a handler indicates that it was handled.
         */ function isEventHandled(value) {
          return value === "handled" || value === true;
        }
        module.exports = isEventHandled;
      },
      {},
    ],
    "20E1C": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UserAgent = require("460e03752a34589b");
        var onBeforeInput = require("51dc8579b5e8d576");
        var onBlur = require("7360b7a2f8d1cdd9");
        var onCompositionStart = require("fc9eae85297994f1");
        var onCopy = require("5b82357f988031f0");
        var onCut = require("80acbecbb42f9fd5");
        var onDragOver = require("2c71d16cc8a80928");
        var onDragStart = require("b8f36b75274d77dc");
        var onFocus = require("669cd3fe3b668921");
        var onInput = require("4a6bddeb664e0966");
        var onKeyDown = require("79aafa85462a422d");
        var onPaste = require("4257d8bdbd2754db");
        var onSelect = require("6dbe254697addd05");
        var isChrome = UserAgent.isBrowser("Chrome");
        var isFirefox = UserAgent.isBrowser("Firefox");
        var selectionHandler = isChrome || isFirefox ? onSelect : function (e) {};
        var DraftEditorEditHandler = {
          onBeforeInput: onBeforeInput,
          onBlur: onBlur,
          onCompositionStart: onCompositionStart,
          onCopy: onCopy,
          onCut: onCut,
          onDragOver: onDragOver,
          onDragStart: onDragStart,
          onFocus: onFocus,
          onInput: onInput,
          onKeyDown: onKeyDown,
          onPaste: onPaste,
          onSelect: onSelect,
          // In certain cases, contenteditable on chrome does not fire the onSelect
          // event, causing problems with cursor positioning. Therefore, the selection
          // state update handler is added to more events to ensure that the selection
          // state is always synced with the actual cursor positions.
          onMouseUp: selectionHandler,
          onKeyUp: selectionHandler,
        };
        module.exports = DraftEditorEditHandler;
      },
      {
        "460e03752a34589b": "c2opx",
        "51dc8579b5e8d576": "JlBu6",
        "7360b7a2f8d1cdd9": "11w91",
        fc9eae85297994f1: "c6Cca",
        "5b82357f988031f0": "dvMCE",
        "80acbecbb42f9fd5": "k7KVM",
        "2c71d16cc8a80928": "aCZYc",
        b8f36b75274d77dc: "h5Uza",
        "669cd3fe3b668921": "4Q8fC",
        "4a6bddeb664e0966": "fa8v2",
        "79aafa85462a422d": "19VSQ",
        "4257d8bdbd2754db": "1vipJ",
        "6dbe254697addd05": "61qfE",
      },
    ],
    JlBu6: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("cd9909b760b89d8f");
        var EditorState = require("553926966c71de3c");
        var UserAgent = require("b73acbab2c2b8224");
        var getEntityKeyForSelection = require("517d3ef321417c1b");
        var isEventHandled = require("4d7f549114fa439a");
        var isSelectionAtLeafStart = require("46c1bc44e0c7a62e");
        var nullthrows = require("53ce4f6fc8df20bd");
        var setImmediate = require("dcb94ca2364f417d"); // When nothing is focused, Firefox regards two characters, `'` and `/`, as
        // commands that should open and focus the "quickfind" search bar. This should
        // *never* happen while a contenteditable is focused, but as of v28, it
        // sometimes does, even when the keypress event target is the contenteditable.
        // This breaks the input. Special case these characters to ensure that when
        // they are typed, we prevent default on the event to make sure not to
        // trigger quickfind.
        var FF_QUICKFIND_CHAR = "'";
        var FF_QUICKFIND_LINK_CHAR = "/";
        var isFirefox = UserAgent.isBrowser("Firefox");
        function mustPreventDefaultForCharacter(character) {
          return (
            isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR)
          );
        }
        /**
         * Replace the current selection with the specified text string, with the
         * inline style and entity key applied to the newly inserted text.
         */ function replaceText(editorState, text, inlineStyle, entityKey, forceSelection) {
          var contentState = DraftModifier.replaceText(
            editorState.getCurrentContent(),
            editorState.getSelection(),
            text,
            inlineStyle,
            entityKey,
          );
          return EditorState.push(editorState, contentState, "insert-characters", forceSelection);
        }
        /**
         * When `onBeforeInput` executes, the browser is attempting to insert a
         * character into the editor. Apply this character data to the document,
         * allowing native insertion if possible.
         *
         * Native insertion is encouraged in order to limit re-rendering and to
         * preserve spellcheck highlighting, which disappears or flashes if re-render
         * occurs on the relevant text nodes.
         */ function editOnBeforeInput(editor, e) {
          if (editor._pendingStateFromBeforeInput !== undefined) {
            editor.update(editor._pendingStateFromBeforeInput);
            editor._pendingStateFromBeforeInput = undefined;
          }
          var editorState = editor._latestEditorState;
          var chars = e.data; // In some cases (ex: IE ideographic space insertion) no character data
          // is provided. There's nothing to do when this happens.
          if (!chars) return;
          // Allow the top-level component to handle the insertion manually. This is
          // useful when triggering interesting behaviors for a character insertion,
          // Simple examples: replacing a raw text ':)' with a smile emoji or image
          // decorator, or setting a block to be a list item after typing '- ' at the
          // start of the block.
          if (
            editor.props.handleBeforeInput &&
            isEventHandled(editor.props.handleBeforeInput(chars, editorState, e.timeStamp))
          ) {
            e.preventDefault();
            return;
          } // If selection is collapsed, conditionally allow native behavior. This
          // reduces re-renders and preserves spellcheck highlighting. If the selection
          // is not collapsed, we will re-render.
          var selection = editorState.getSelection();
          var selectionStart = selection.getStartOffset();
          var anchorKey = selection.getAnchorKey();
          if (!selection.isCollapsed()) {
            e.preventDefault();
            editor.update(
              replaceText(
                editorState,
                chars,
                editorState.getCurrentInlineStyle(),
                getEntityKeyForSelection(
                  editorState.getCurrentContent(),
                  editorState.getSelection(),
                ),
                true,
              ),
            );
            return;
          }
          var newEditorState = replaceText(
            editorState,
            chars,
            editorState.getCurrentInlineStyle(),
            getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()),
            false,
          ); // Bunch of different cases follow where we need to prevent native insertion.
          var mustPreventNative = false;
          if (!mustPreventNative)
            // Browsers tend to insert text in weird places in the DOM when typing at
            // the start of a leaf, so we'll handle it ourselves.
            mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);
          if (!mustPreventNative) {
            // Let's say we have a decorator that highlights hashtags. In many cases
            // we need to prevent native behavior and rerender ourselves --
            // particularly, any case *except* where the inserted characters end up
            // anywhere except exactly where you put them.
            //
            // Using [] to denote a decorated leaf, some examples:
            //
            // 1. 'hi #' and append 'f'
            // desired rendering: 'hi [#f]'
            // native rendering would be: 'hi #f' (incorrect)
            //
            // 2. 'x [#foo]' and insert '#' before 'f'
            // desired rendering: 'x #[#foo]'
            // native rendering would be: 'x [##foo]' (incorrect)
            //
            // 3. '[#foobar]' and insert ' ' between 'foo' and 'bar'
            // desired rendering: '[#foo] bar'
            // native rendering would be: '[#foo bar]' (incorrect)
            //
            // 4. '[#foo]' and delete '#' [won't use this beforeinput codepath though]
            // desired rendering: 'foo'
            // native rendering would be: '[foo]' (incorrect)
            //
            // 5. '[#foo]' and append 'b'
            // desired rendering: '[#foob]'
            // native rendering would be: '[#foob]'
            // (native insertion here would be ok for decorators like simple spans,
            // but not more complex decorators. To be safe, we need to prevent it.)
            //
            // It is safe to allow native insertion if and only if the full list of
            // decorator ranges matches what we expect native insertion to give, and
            // the range lengths have not changed. We don't need to compare the content
            // because the only possible mutation to consider here is inserting plain
            // text and decorators can't affect text content.
            var oldBlockTree = editorState.getBlockTree(anchorKey);
            var newBlockTree = newEditorState.getBlockTree(anchorKey);
            mustPreventNative =
              oldBlockTree.size !== newBlockTree.size ||
              oldBlockTree.zip(newBlockTree).some(function (_ref) {
                var oldLeafSet = _ref[0],
                  newLeafSet = _ref[1];
                // selectionStart is guaranteed to be selectionEnd here
                var oldStart = oldLeafSet.get("start");
                var adjustedStart = oldStart + (oldStart >= selectionStart ? chars.length : 0);
                var oldEnd = oldLeafSet.get("end");
                var adjustedEnd = oldEnd + (oldEnd >= selectionStart ? chars.length : 0);
                var newStart = newLeafSet.get("start");
                var newEnd = newLeafSet.get("end");
                var newDecoratorKey = newLeafSet.get("decoratorKey");
                return (
                  oldLeafSet.get("decoratorKey") !== newDecoratorKey || // Different number of inline styles
                  oldLeafSet.get("leaves").size !== newLeafSet.get("leaves").size || // Different effective decorator position
                  adjustedStart !== newStart ||
                  adjustedEnd !== newEnd || // Decorator already existed and its length changed
                  (newDecoratorKey != null && newEnd - newStart !== oldEnd - oldStart)
                );
              });
          }
          if (!mustPreventNative) mustPreventNative = mustPreventDefaultForCharacter(chars);
          if (!mustPreventNative)
            mustPreventNative =
              nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !==
              nullthrows(editorState.getDirectionMap()).get(anchorKey);
          if (mustPreventNative) {
            e.preventDefault();
            newEditorState = EditorState.set(newEditorState, {
              forceSelection: true,
            });
            editor.update(newEditorState);
            return;
          } // We made it all the way! Let the browser do its thing and insert the char.
          newEditorState = EditorState.set(newEditorState, {
            nativelyRenderedContent: newEditorState.getCurrentContent(),
          }); // The native event is allowed to occur. To allow user onChange handlers to
          // change the inserted text, we wait until the text is actually inserted
          // before we actually update our state. That way when we rerender, the text
          // we see in the DOM will already have been inserted properly.
          editor._pendingStateFromBeforeInput = newEditorState;
          setImmediate(function () {
            if (editor._pendingStateFromBeforeInput !== undefined) {
              editor.update(editor._pendingStateFromBeforeInput);
              editor._pendingStateFromBeforeInput = undefined;
            }
          });
        }
        module.exports = editOnBeforeInput;
      },
      {
        cd9909b760b89d8f: "aeLN8",
        "553926966c71de3c": "2EY4X",
        b73acbab2c2b8224: "c2opx",
        "517d3ef321417c1b": "eAypV",
        "4d7f549114fa439a": "6tb2I",
        "46c1bc44e0c7a62e": "kmnjL",
        "53ce4f6fc8df20bd": "fwtV9",
        dcb94ca2364f417d: "gfjyq",
      },
    ],
    kmnjL: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function isSelectionAtLeafStart(editorState) {
          var selection = editorState.getSelection();
          var anchorKey = selection.getAnchorKey();
          var blockTree = editorState.getBlockTree(anchorKey);
          var offset = selection.getStartOffset();
          var isAtStart = false;
          blockTree.some(function (leafSet) {
            if (offset === leafSet.get("start")) {
              isAtStart = true;
              return true;
            }
            if (offset < leafSet.get("end"))
              return leafSet.get("leaves").some(function (leaf) {
                var leafStart = leaf.get("start");
                if (offset === leafStart) {
                  isAtStart = true;
                  return true;
                }
                return false;
              });
            return false;
          });
          return isAtStart;
        }
        module.exports = isSelectionAtLeafStart;
      },
      {},
    ],
    gfjyq: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ var global = arguments[3];
        ("use strict"); // setimmediate adds setImmediate to the global. We want to make sure we export
        // the actual function.
        require("3c9f1c984a979fff");
        module.exports = global.setImmediate;
      },
      { "3c9f1c984a979fff": "g4k8b" },
    ],
    g4k8b: [
      function (require, module, exports) {
        var process = require("96b87729426a727d");
        var global = arguments[3];
        (function (global, undefined) {
          "use strict";
          if (global.setImmediate) return;
          var nextHandle = 1; // Spec says greater than zero
          var tasksByHandle = {};
          var currentlyRunningATask = false;
          var doc = global.document;
          var registerImmediate;
          function setImmediate(callback) {
            // Callback can either be a function or a string
            if (typeof callback !== "function") callback = new Function("" + callback);
            // Copy function arguments
            var args = new Array(arguments.length - 1);
            for (var i = 0; i < args.length; i++) args[i] = arguments[i + 1];
            // Store and register the task
            var task = {
              callback: callback,
              args: args,
            };
            tasksByHandle[nextHandle] = task;
            registerImmediate(nextHandle);
            return nextHandle++;
          }
          function clearImmediate(handle) {
            delete tasksByHandle[handle];
          }
          function run(task) {
            var callback = task.callback;
            var args = task.args;
            switch (args.length) {
              case 0:
                callback();
                break;
              case 1:
                callback(args[0]);
                break;
              case 2:
                callback(args[0], args[1]);
                break;
              case 3:
                callback(args[0], args[1], args[2]);
                break;
              default:
                callback.apply(undefined, args);
                break;
            }
          }
          function runIfPresent(handle) {
            // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
            // So if we're currently running a task, we'll need to delay this invocation.
            if (currentlyRunningATask)
              // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
              // "too much recursion" error.
              setTimeout(runIfPresent, 0, handle);
            else {
              var task = tasksByHandle[handle];
              if (task) {
                currentlyRunningATask = true;
                try {
                  run(task);
                } finally {
                  clearImmediate(handle);
                  currentlyRunningATask = false;
                }
              }
            }
          }
          function installNextTickImplementation() {
            registerImmediate = function (handle) {
              process.nextTick(function () {
                runIfPresent(handle);
              });
            };
          }
          function canUsePostMessage() {
            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
            // where `global.postMessage` means something completely different and can't be used for this purpose.
            if (global.postMessage && !global.importScripts) {
              var postMessageIsAsynchronous = true;
              var oldOnMessage = global.onmessage;
              global.onmessage = function () {
                postMessageIsAsynchronous = false;
              };
              global.postMessage("", "*");
              global.onmessage = oldOnMessage;
              return postMessageIsAsynchronous;
            }
          }
          function installPostMessageImplementation() {
            // Installs an event handler on `global` for the `message` event: see
            // * https://developer.mozilla.org/en/DOM/window.postMessage
            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
            var messagePrefix = "setImmediate$" + Math.random() + "$";
            var onGlobalMessage = function (event) {
              if (
                event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0
              )
                runIfPresent(+event.data.slice(messagePrefix.length));
            };
            if (global.addEventListener) global.addEventListener("message", onGlobalMessage, false);
            else global.attachEvent("onmessage", onGlobalMessage);
            registerImmediate = function (handle) {
              global.postMessage(messagePrefix + handle, "*");
            };
          }
          function installMessageChannelImplementation() {
            var channel = new MessageChannel();
            channel.port1.onmessage = function (event) {
              var handle = event.data;
              runIfPresent(handle);
            };
            registerImmediate = function (handle) {
              channel.port2.postMessage(handle);
            };
          }
          function installReadyStateChangeImplementation() {
            var html = doc.documentElement;
            registerImmediate = function (handle) {
              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
              var script = doc.createElement("script");
              script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
              };
              html.appendChild(script);
            };
          }
          function installSetTimeoutImplementation() {
            registerImmediate = function (handle) {
              setTimeout(runIfPresent, 0, handle);
            };
          }
          // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
          attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
          // Don't get fooled by e.g. browserify environments.
          if ({}.toString.call(global.process) === "[object process]")
            // For Node.js before 0.9
            installNextTickImplementation();
          else if (canUsePostMessage())
            // For non-IE10 modern browsers
            installPostMessageImplementation();
          else if (global.MessageChannel)
            // For web workers, where supported
            installMessageChannelImplementation();
          else if (doc && "onreadystatechange" in doc.createElement("script"))
            // For IE 6–8
            installReadyStateChangeImplementation();
          // For older browsers
          else installSetTimeoutImplementation();
          attachTo.setImmediate = setImmediate;
          attachTo.clearImmediate = clearImmediate;
        })(typeof self === "undefined" ? (typeof global === "undefined" ? this : global) : self);
      },
      { "96b87729426a727d": "d5jf4" },
    ],
    "11w91": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("c15b27dfac7d1f18");
        var containsNode = require("e07a116911e4ef95");
        var getActiveElement = require("d69c09ccc11b1d8d");
        function editOnBlur(editor, e) {
          // In a contentEditable element, when you select a range and then click
          // another active element, this does trigger a `blur` event but will not
          // remove the DOM selection from the contenteditable.
          // This is consistent across all browsers, but we prefer that the editor
          // behave like a textarea, where a `blur` event clears the DOM selection.
          // We therefore force the issue to be certain, checking whether the active
          // element is `body` to force it when blurring occurs within the window (as
          // opposed to clicking to another tab or window).
          var ownerDocument = e.currentTarget.ownerDocument;
          if (
            // eslint-disable-next-line no-extra-boolean-cast
            !Boolean(editor.props.preserveSelectionOnBlur) &&
            getActiveElement(ownerDocument) === ownerDocument.body
          ) {
            var _selection = ownerDocument.defaultView.getSelection();
            var editorNode = editor.editor;
            if (
              _selection.rangeCount === 1 &&
              containsNode(editorNode, _selection.anchorNode) &&
              containsNode(editorNode, _selection.focusNode)
            )
              _selection.removeAllRanges();
          }
          var editorState = editor._latestEditorState;
          var currentSelection = editorState.getSelection();
          if (!currentSelection.getHasFocus()) return;
          var selection = currentSelection.set("hasFocus", false);
          editor.props.onBlur && editor.props.onBlur(e);
          editor.update(EditorState.acceptSelection(editorState, selection));
        }
        module.exports = editOnBlur;
      },
      { c15b27dfac7d1f18: "2EY4X", e07a116911e4ef95: "4gmRO", d69c09ccc11b1d8d: "juVuR" },
    ],
    c6Cca: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("c646e12cabc9e460");
        /**
         * The user has begun using an IME input system. Switching to `composite` mode
         * allows handling composition input and disables other edit behavior.
         */ function editOnCompositionStart(editor, e) {
          editor.setMode("composite");
          editor.update(
            EditorState.set(editor._latestEditorState, {
              inCompositionMode: true,
            }),
          ); // Allow composition handler to interpret the compositionstart event
          editor._onCompositionStart(e);
        }
        module.exports = editOnCompositionStart;
      },
      { c646e12cabc9e460: "2EY4X" },
    ],
    dvMCE: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getFragmentFromSelection = require("a21d7557cb2343dc");
        /**
         * If we have a selection, create a ContentState fragment and store
         * it in our internal clipboard. Subsequent paste events will use this
         * fragment if no external clipboard data is supplied.
         */ function editOnCopy(editor, e) {
          var editorState = editor._latestEditorState;
          var selection = editorState.getSelection(); // No selection, so there's nothing to copy.
          if (selection.isCollapsed()) {
            e.preventDefault();
            return;
          }
          editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));
        }
        module.exports = editOnCopy;
      },
      { a21d7557cb2343dc: "a4vIL" },
    ],
    a4vIL: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getContentStateFragment = require("a8511509829e1d36");
        function getFragmentFromSelection(editorState) {
          var selectionState = editorState.getSelection();
          if (selectionState.isCollapsed()) return null;
          return getContentStateFragment(editorState.getCurrentContent(), selectionState);
        }
        module.exports = getFragmentFromSelection;
      },
      { a8511509829e1d36: "kdkQl" },
    ],
    k7KVM: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("52644d2f2d8807b6");
        var EditorState = require("c9384512b02b04df");
        var Style = require("53d3f59f00845a50");
        var getFragmentFromSelection = require("6d946397dcec3a6b");
        var getScrollPosition = require("76979fe0e4228e2c");
        var isNode = require("156409f0cbfe36ea");
        /**
         * On `cut` events, native behavior is allowed to occur so that the system
         * clipboard is set properly. This means that we need to take steps to recover
         * the editor DOM state after the `cut` has occurred in order to maintain
         * control of the component.
         *
         * In addition, we can keep a copy of the removed fragment, including all
         * styles and entities, for use as an internal paste.
         */ function editOnCut(editor, e) {
          var editorState = editor._latestEditorState;
          var selection = editorState.getSelection();
          var element = e.target;
          var scrollPosition; // No selection, so there's nothing to cut.
          if (selection.isCollapsed()) {
            e.preventDefault();
            return;
          } // Track the current scroll position so that it can be forced back in place
          // after the editor regains control of the DOM.
          if (isNode(element)) {
            var node = element;
            scrollPosition = getScrollPosition(Style.getScrollParent(node));
          }
          var fragment = getFragmentFromSelection(editorState);
          editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.
          editor.setMode("cut"); // Let native `cut` behavior occur, then recover control.
          setTimeout(function () {
            editor.restoreEditorDOM(scrollPosition);
            editor.exitCurrentMode();
            editor.update(removeFragment(editorState));
          }, 0);
        }
        function removeFragment(editorState) {
          var newContent = DraftModifier.removeRange(
            editorState.getCurrentContent(),
            editorState.getSelection(),
            "forward",
          );
          return EditorState.push(editorState, newContent, "remove-range");
        }
        module.exports = editOnCut;
      },
      {
        "52644d2f2d8807b6": "aeLN8",
        c9384512b02b04df: "2EY4X",
        "53d3f59f00845a50": "1GeHz",
        "6d946397dcec3a6b": "a4vIL",
        "76979fe0e4228e2c": "9CX89",
        "156409f0cbfe36ea": "7HfkR",
      },
    ],
    "7HfkR": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ function isInstanceOfNode(target) {
          // we changed the name because of having duplicate module provider (fbjs)
          if (!target || !("ownerDocument" in target)) return false;
          if ("ownerDocument" in target) {
            var node = target;
            if (!node.ownerDocument.defaultView) return node instanceof Node;
            if (node instanceof node.ownerDocument.defaultView.Node) return true;
          }
          return false;
        }
        module.exports = isInstanceOfNode;
      },
      {},
    ],
    aCZYc: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * Drag behavior has begun from outside the editor element.
         */ function editOnDragOver(editor, e) {
          editor.setMode("drag");
          e.preventDefault();
        }
        module.exports = editOnDragOver;
      },
      {},
    ],
    h5Uza: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        /**
         * A `dragstart` event has begun within the text editor component.
         */ function editOnDragStart(editor) {
          editor._internalDrag = true;
          editor.setMode("drag");
        }
        module.exports = editOnDragStart;
      },
      {},
    ],
    "4Q8fC": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("b3e8a0f46d878ef");
        var UserAgent = require("7c750e1b3027bfbe");
        function editOnFocus(editor, e) {
          var editorState = editor._latestEditorState;
          var currentSelection = editorState.getSelection();
          if (currentSelection.getHasFocus()) return;
          var selection = currentSelection.set("hasFocus", true);
          editor.props.onFocus && editor.props.onFocus(e); // When the tab containing this text editor is hidden and the user does a
          // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the
          // selection was right after sending this focus event and (if you let it)
          // moves the cursor back to the beginning of the editor, so we force the
          // selection here instead of simply accepting it in order to preserve the
          // old cursor position. See https://crbug.com/540004.
          // But it looks like this is fixed in Chrome 60.0.3081.0.
          // Other browsers also don't have this bug, so we prefer to acceptSelection
          // when possible, to ensure that unfocusing and refocusing a Draft editor
          // doesn't preserve the selection, matching how textareas work.
          if (UserAgent.isBrowser("Chrome < 60.0.3081.0"))
            editor.update(EditorState.forceSelection(editorState, selection));
          else editor.update(EditorState.acceptSelection(editorState, selection));
        }
        module.exports = editOnFocus;
      },
      { b3e8a0f46d878ef: "2EY4X", "7c750e1b3027bfbe": "c2opx" },
    ],
    fa8v2: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("c52ccb51dd588f1");
        var DraftOffsetKey = require("bea6bae01e7b6e2c");
        var EditorState = require("1b444f4a9b1654a8");
        var UserAgent = require("44b64d809ad73484");
        var _require = require("6f28d19e360498e7"),
          notEmptyKey = _require.notEmptyKey;
        var findAncestorOffsetKey = require("6096f5b5f06c726a");
        var keyCommandPlainBackspace = require("cbeed70b8196a79b");
        var nullthrows = require("a98ea536b31a40c9");
        var isGecko = UserAgent.isEngine("Gecko");
        var DOUBLE_NEWLINE = "\n\n";
        function onInputType(inputType, editorState) {
          switch (inputType) {
            case "deleteContentBackward":
              return keyCommandPlainBackspace(editorState);
          }
          return editorState;
        }
        /**
         * This function serves two purposes
         *
         * 1. To update the editorState and call onChange method with the new
         * editorState. This editorState is calculated in editOnBeforeInput but the
         * onChange method is not called with the new state until this method does it.
         * It is done to handle a specific case where certain character inputs might
         * be replaced with something else. E.g. snippets ('rc' might be replaced
         * with boilerplate code for react component). More information on the
         * exact problem can be found here -
         * https://github.com/facebook/draft-js/commit/07892ba479bd4dfc6afd1e0ed179aaf51cd138b1
         *
         * 2. intended to handle spellcheck and autocorrect changes,
         * which occur in the DOM natively without any opportunity to observe or
         * interpret the changes before they occur.
         *
         * The `input` event fires in contentEditable elements reliably for non-IE
         * browsers, immediately after changes occur to the editor DOM. Since our other
         * handlers override or otherwise handle cover other varieties of text input,
         * the DOM state should match the model in all controlled input cases. Thus,
         * when an `input` change leads to a DOM/model mismatch, the change should be
         * due to a spellcheck change, and we can incorporate it into our model.
         */ function editOnInput(editor, e) {
          if (editor._pendingStateFromBeforeInput !== undefined) {
            editor.update(editor._pendingStateFromBeforeInput);
            editor._pendingStateFromBeforeInput = undefined;
          } // at this point editor is not null for sure (after input)
          var castedEditorElement = editor.editor;
          var domSelection = castedEditorElement.ownerDocument.defaultView.getSelection();
          var anchorNode = domSelection.anchorNode,
            isCollapsed = domSelection.isCollapsed;
          var isNotTextOrElementNode =
            (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !==
              Node.TEXT_NODE &&
            (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !==
              Node.ELEMENT_NODE;
          if (anchorNode == null || isNotTextOrElementNode)
            // TODO: (t16149272) figure out context for this change
            return;
          if (
            anchorNode.nodeType === Node.TEXT_NODE &&
            (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)
          ) {
            // When typing at the beginning of a visual line, Chrome splits the text
            // nodes into two. Why? No one knows. This commit is suspicious:
            // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724
            // To work around, we'll merge the sibling text nodes back into this one.
            var span = anchorNode.parentNode;
            if (span == null)
              // Handle null-parent case.
              return;
            anchorNode.nodeValue = span.textContent;
            for (var child = span.firstChild; child != null; child = child.nextSibling)
              if (child !== anchorNode) span.removeChild(child);
          }
          var domText = anchorNode.textContent;
          var editorState = editor._latestEditorState;
          var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));
          var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),
            blockKey = _DraftOffsetKey$decod.blockKey,
            decoratorKey = _DraftOffsetKey$decod.decoratorKey,
            leafKey = _DraftOffsetKey$decod.leafKey;
          var _editorState$getBlock = editorState
              .getBlockTree(blockKey)
              .getIn([decoratorKey, "leaves", leafKey]),
            start = _editorState$getBlock.start,
            end = _editorState$getBlock.end;
          var content = editorState.getCurrentContent();
          var block = content.getBlockForKey(blockKey);
          var modelText = block.getText().slice(start, end); // Special-case soft newlines here. If the DOM text ends in a soft newline,
          // we will have manually inserted an extra soft newline in DraftEditorLeaf.
          // We want to remove this extra newline for the purpose of our comparison
          // of DOM and model text.
          if (domText.endsWith(DOUBLE_NEWLINE)) domText = domText.slice(0, -1);
          // No change -- the DOM is up to date. Nothing to do here.
          if (domText === modelText) {
            // This can be buggy for some Android keyboards because they don't fire
            // standard onkeydown/pressed events and only fired editOnInput
            // so domText is already changed by the browser and ends up being equal
            // to modelText unexpectedly.
            // Newest versions of Android support the dom-inputevent-inputtype
            // and we can use the `inputType` to properly apply the state changes.
            /* $FlowFixMe[prop-missing] inputType is only defined on a draft of a
             * standard. https://w3c.github.io/input-events/#dom-inputevent-inputtype
             */ var inputType = e.nativeEvent.inputType;
            if (inputType) {
              var newEditorState = onInputType(inputType, editorState);
              if (newEditorState !== editorState) {
                editor.restoreEditorDOM();
                editor.update(newEditorState);
                return;
              }
            }
            return;
          }
          var selection = editorState.getSelection(); // We'll replace the entire leaf with the text content of the target.
          var targetRange = selection.merge({
            anchorOffset: start,
            focusOffset: end,
            isBackward: false,
          });
          var entityKey = block.getEntityAt(start);
          var entity = notEmptyKey(entityKey) ? content.getEntity(entityKey) : null;
          var entityType = entity != null ? entity.getMutability() : null;
          var preserveEntity = entityType === "MUTABLE"; // Immutable or segmented entities cannot properly be handled by the
          // default browser undo, so we have to use a different change type to
          // force using our internal undo method instead of falling through to the
          // native browser undo.
          var changeType = preserveEntity ? "spellcheck-change" : "apply-entity";
          var newContent = DraftModifier.replaceText(
            content,
            targetRange,
            domText,
            block.getInlineStyleAt(start),
            preserveEntity ? block.getEntityAt(start) : null,
          );
          var anchorOffset, focusOffset, startOffset, endOffset;
          if (isGecko) {
            // Firefox selection does not change while the context menu is open, so
            // we preserve the anchor and focus values of the DOM selection.
            anchorOffset = domSelection.anchorOffset;
            focusOffset = domSelection.focusOffset;
            startOffset = start + Math.min(anchorOffset, focusOffset);
            endOffset = startOffset + Math.abs(anchorOffset - focusOffset);
            anchorOffset = startOffset;
            focusOffset = endOffset;
          } else {
            // Browsers other than Firefox may adjust DOM selection while the context
            // menu is open, and Safari autocorrect is prone to providing an inaccurate
            // DOM selection. Don't trust it. Instead, use our existing SelectionState
            // and adjust it based on the number of characters changed during the
            // mutation.
            var charDelta = domText.length - modelText.length;
            startOffset = selection.getStartOffset();
            endOffset = selection.getEndOffset();
            anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;
            focusOffset = endOffset + charDelta;
          } // Segmented entities are completely or partially removed when their
          // text content changes. For this case we do not want any text to be selected
          // after the change, so we are not merging the selection.
          var contentWithAdjustedDOMSelection = newContent.merge({
            selectionBefore: content.getSelectionAfter(),
            selectionAfter: selection.merge({
              anchorOffset: anchorOffset,
              focusOffset: focusOffset,
            }),
          });
          editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));
        }
        module.exports = editOnInput;
      },
      {
        c52ccb51dd588f1: "aeLN8",
        bea6bae01e7b6e2c: "3pjWp",
        "1b444f4a9b1654a8": "2EY4X",
        "44b64d809ad73484": "c2opx",
        "6f28d19e360498e7": "Ci3yX",
        "6096f5b5f06c726a": "2PlIl",
        cbeed70b8196a79b: "97wNJ",
        a98ea536b31a40c9: "fwtV9",
      },
    ],
    "97wNJ": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("8a3845d76cbba29b");
        var UnicodeUtils = require("58ed06f2d0f6297c");
        var moveSelectionBackward = require("2b232402b9d14ce7");
        var removeTextWithStrategy = require("dfb5cfd08dafa37f");
        /**
         * Remove the selected range. If the cursor is collapsed, remove the preceding
         * character. This operation is Unicode-aware, so removing a single character
         * will remove a surrogate pair properly as well.
         */ function keyCommandPlainBackspace(editorState) {
          var afterRemoval = removeTextWithStrategy(
            editorState,
            function (strategyState) {
              var selection = strategyState.getSelection();
              var content = strategyState.getCurrentContent();
              var key = selection.getAnchorKey();
              var offset = selection.getAnchorOffset();
              var charBehind = content.getBlockForKey(key).getText()[offset - 1];
              return moveSelectionBackward(
                strategyState,
                charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1,
              );
            },
            "backward",
          );
          if (afterRemoval === editorState.getCurrentContent()) return editorState;
          var selection = editorState.getSelection();
          return EditorState.push(
            editorState,
            afterRemoval.set("selectionBefore", selection),
            selection.isCollapsed() ? "backspace-character" : "remove-range",
          );
        }
        module.exports = keyCommandPlainBackspace;
      },
      {
        "8a3845d76cbba29b": "2EY4X",
        "58ed06f2d0f6297c": "8JHYo",
        "2b232402b9d14ce7": "hqv6P",
        dfb5cfd08dafa37f: "aZxhD",
      },
    ],
    "8JHYo": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         */ /**
         * Unicode-enabled replacesments for basic String functions.
         *
         * All the functions in this module assume that the input string is a valid
         * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior
         * will be undefined.
         *
         * WARNING: Since this module is typechecks-enforced, you may find new bugs
         * when replacing normal String functions with ones provided here.
         */ "use strict";
        var invariant = require("fc03c823a51cf652"); // These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a
        // surrogate code unit.
        var SURROGATE_HIGH_START = 0xd800;
        var SURROGATE_HIGH_END = 0xdbff;
        var SURROGATE_LOW_START = 0xdc00;
        var SURROGATE_LOW_END = 0xdfff;
        var SURROGATE_UNITS_REGEX = /[\uD800-\uDFFF]/;
        /**
         * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]
         * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range
         */ function isCodeUnitInSurrogateRange(codeUnit) {
          return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;
        }
        /**
         * Returns whether the two characters starting at `index` form a surrogate pair.
         * For example, given the string s = "\uD83D\uDE0A", (s, 0) returns true and
         * (s, 1) returns false.
         *
         * @param {string} str
         * @param {number} index
         * @return {boolean}
         */ function isSurrogatePair(str, index) {
          !(0 <= index && index < str.length) &&
            invariant(
              false,
              "isSurrogatePair: Invalid index %s for string length %s.",
              index,
              str.length,
            );
          if (index + 1 === str.length) return false;
          var first = str.charCodeAt(index);
          var second = str.charCodeAt(index + 1);
          return (
            SURROGATE_HIGH_START <= first &&
            first <= SURROGATE_HIGH_END &&
            SURROGATE_LOW_START <= second &&
            second <= SURROGATE_LOW_END
          );
        }
        /**
         * @param {string} str  Non-empty string
         * @return {boolean}    True if the input includes any surrogate code units
         */ function hasSurrogateUnit(str) {
          return SURROGATE_UNITS_REGEX.test(str);
        }
        /**
         * Return the length of the original Unicode character at given position in the
         * String by looking into the UTF-16 code unit; that is equal to 1 for any
         * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and
         * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact
         * representing non-BMP characters ([U+10000..U+10FFFF]).
         *
         * Examples:
         * - '\u0020' => 1
         * - '\u3020' => 1
         * - '\uD835' => 2
         * - '\uD835\uDDEF' => 2
         * - '\uDDEF' => 2
         *
         * @param {string} str  Non-empty string
         * @param {number} pos  Position in the string to look for one code unit
         * @return {number}      Number 1 or 2
         */ function getUTF16Length(str, pos) {
          return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));
        }
        /**
         * Fully Unicode-enabled replacement for String#length
         *
         * @param {string} str  Valid Unicode string
         * @return {number}     The number of Unicode characters in the string
         */ function strlen(str) {
          // Call the native functions if there's no surrogate char
          if (!hasSurrogateUnit(str)) return str.length;
          var len = 0;
          for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) len++;
          return len;
        }
        /**
         * Fully Unicode-enabled replacement for String#substr()
         *
         * @param {string} str      Valid Unicode string
         * @param {number} start    Location in Unicode sequence to begin extracting
         * @param {?number} length  The number of Unicode characters to extract
         *                          (default: to the end of the string)
         * @return {string}         Extracted sub-string
         */ function substr(str, start, length) {
          start = start || 0;
          length = length === undefined ? Infinity : length || 0; // Call the native functions if there's no surrogate char
          if (!hasSurrogateUnit(str)) return str.substr(start, length);
          // Obvious cases
          var size = str.length;
          if (size <= 0 || start > size || length <= 0) return "";
          // Find the actual starting position
          var posA = 0;
          if (start > 0) {
            for (; start > 0 && posA < size; start--) posA += getUTF16Length(str, posA);
            if (posA >= size) return "";
          } else if (start < 0) {
            for (posA = size; start < 0 && 0 < posA; start++) posA -= getUTF16Length(str, posA - 1);
            if (posA < 0) posA = 0;
          } // Find the actual ending position
          var posB = size;
          if (length < size)
            for (posB = posA; length > 0 && posB < size; length--)
              posB += getUTF16Length(str, posB);
          return str.substring(posA, posB);
        }
        /**
         * Fully Unicode-enabled replacement for String#substring()
         *
         * @param {string} str    Valid Unicode string
         * @param {number} start  Location in Unicode sequence to begin extracting
         * @param {?number} end   Location in Unicode sequence to end extracting
         *                        (default: end of the string)
         * @return {string}       Extracted sub-string
         */ function substring(str, start, end) {
          start = start || 0;
          end = end === undefined ? Infinity : end || 0;
          if (start < 0) start = 0;
          if (end < 0) end = 0;
          var length = Math.abs(end - start);
          start = start < end ? start : end;
          return substr(str, start, length);
        }
        /**
         * Get a list of Unicode code-points from a String
         *
         * @param {string} str        Valid Unicode string
         * @return {array<number>}    A list of code-points in [0..0x10FFFF]
         */ function getCodePoints(str) {
          var codePoints = [];
          for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos))
            codePoints.push(str.codePointAt(pos));
          return codePoints;
        }
        var UnicodeUtils = {
          getCodePoints: getCodePoints,
          getUTF16Length: getUTF16Length,
          hasSurrogateUnit: hasSurrogateUnit,
          isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,
          isSurrogatePair: isSurrogatePair,
          strlen: strlen,
          substring: substring,
          substr: substr,
        };
        module.exports = UnicodeUtils;
      },
      { fc03c823a51cf652: "d6MgO" },
    ],
    hqv6P: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var warning = require("3339129e7502fec7");
        /**
         * Given a collapsed selection, move the focus `maxDistance` backward within
         * the selected block. If the selection will go beyond the start of the block,
         * move focus to the end of the previous block, but no further.
         *
         * This function is not Unicode-aware, so surrogate pairs will be treated
         * as having length 2.
         */ function moveSelectionBackward(editorState, maxDistance) {
          var selection = editorState.getSelection(); // Should eventually make this an invariant
          warning(
            selection.isCollapsed(),
            "moveSelectionBackward should only be called with a collapsed SelectionState",
          );
          var content = editorState.getCurrentContent();
          var key = selection.getStartKey();
          var offset = selection.getStartOffset();
          var focusKey = key;
          var focusOffset = 0;
          if (maxDistance > offset) {
            var keyBefore = content.getKeyBefore(key);
            if (keyBefore == null) focusKey = key;
            else {
              focusKey = keyBefore;
              var blockBefore = content.getBlockForKey(keyBefore);
              focusOffset = blockBefore.getText().length;
            }
          } else focusOffset = offset - maxDistance;
          return selection.merge({
            focusKey: focusKey,
            focusOffset: focusOffset,
            isBackward: true,
          });
        }
        module.exports = moveSelectionBackward;
      },
      { "3339129e7502fec7": "aqkSq" },
    ],
    aqkSq: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */ "use strict";
        var emptyFunction = require("e7639c803f14633c");
        /**
         * Similar to invariant but only logs a warning if the condition is not met.
         * This can be used to log issues in development environments in critical
         * paths. Removing the logging code for production environments will keep the
         * same logic and follow the same code paths.
         */ function printWarning(format) {
          for (
            var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
            _key < _len;
            _key++
          )
            args[_key - 1] = arguments[_key];
          var argIndex = 0;
          var message =
            "Warning: " +
            format.replace(/%s/g, function () {
              return args[argIndex++];
            });
          if (typeof console !== "undefined") console.error(message);
          try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
          } catch (x) {}
        }
        var warning = function (condition, format) {
          if (format === undefined)
            throw new Error(
              "`warning(condition, format, ...args)` requires a warning message argument",
            );
          if (!condition) {
            for (
              var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;
              _key2 < _len2;
              _key2++
            )
              args[_key2 - 2] = arguments[_key2];
            printWarning.apply(void 0, [format].concat(args));
          }
        };
        module.exports = warning;
      },
      { e7639c803f14633c: "c8rUW" },
    ],
    aZxhD: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("b59d73173ef30009");
        var gkx = require("9714f130e103c34c");
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        /**
         * For a collapsed selection state, remove text based on the specified strategy.
         * If the selection state is not collapsed, remove the entire selected range.
         */ function removeTextWithStrategy(editorState, strategy, direction) {
          var selection = editorState.getSelection();
          var content = editorState.getCurrentContent();
          var target = selection;
          var anchorKey = selection.getAnchorKey();
          var focusKey = selection.getFocusKey();
          var anchorBlock = content.getBlockForKey(anchorKey);
          if (experimentalTreeDataSupport) {
            if (direction === "forward") {
              if (anchorKey !== focusKey)
                // For now we ignore forward delete across blocks,
                // if there is demand for this we will implement it.
                return content;
            }
          }
          if (selection.isCollapsed()) {
            if (direction === "forward") {
              if (editorState.isSelectionAtEndOfContent()) return content;
              if (experimentalTreeDataSupport) {
                var isAtEndOfBlock =
                  selection.getAnchorOffset() === content.getBlockForKey(anchorKey).getLength();
                if (isAtEndOfBlock) {
                  var anchorBlockSibling = content.getBlockForKey(anchorBlock.nextSibling);
                  if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0)
                    // For now we ignore forward delete at the end of a block,
                    // if there is demand for this we will implement it.
                    return content;
                }
              }
            } else if (editorState.isSelectionAtStartOfContent()) return content;
            target = strategy(editorState);
            if (target === selection) return content;
          }
          return DraftModifier.removeRange(content, target, direction);
        }
        module.exports = removeTextWithStrategy;
      },
      { b59d73173ef30009: "aeLN8", "9714f130e103c34c": "l5VFU" },
    ],
    "19VSQ": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("7196706516e4284d");
        var EditorState = require("98531193c289d50b");
        var KeyBindingUtil = require("9e54736e8511d30e");
        var Keys = require("53b8d7802f78c2a0");
        var SecondaryClipboard = require("29c2a2e6a80047f7");
        var UserAgent = require("9fef8a5921e5f665");
        var isEventHandled = require("601ef9fba73e72c3");
        var keyCommandBackspaceToStartOfLine = require("ebdcdd4bb25e706e");
        var keyCommandBackspaceWord = require("d5a69eda51988308");
        var keyCommandDeleteWord = require("2e1445e2cc476954");
        var keyCommandInsertNewline = require("9cb4f1bb3553e80d");
        var keyCommandMoveSelectionToEndOfBlock = require("b4473da582be1770");
        var keyCommandMoveSelectionToStartOfBlock = require("bb2e52f8a345eae");
        var keyCommandPlainBackspace = require("62f257b89675bd7c");
        var keyCommandPlainDelete = require("5b4f991a73441efa");
        var keyCommandTransposeCharacters = require("1468760f579a709f");
        var keyCommandUndo = require("55569c5dc2e5b929");
        var isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;
        var isChrome = UserAgent.isBrowser("Chrome");
        /**
         * Map a `DraftEditorCommand` command value to a corresponding function.
         */ function onKeyCommand(command, editorState, e) {
          switch (command) {
            case "redo":
              return EditorState.redo(editorState);
            case "delete":
              return keyCommandPlainDelete(editorState);
            case "delete-word":
              return keyCommandDeleteWord(editorState);
            case "backspace":
              return keyCommandPlainBackspace(editorState);
            case "backspace-word":
              return keyCommandBackspaceWord(editorState);
            case "backspace-to-start-of-line":
              return keyCommandBackspaceToStartOfLine(editorState, e);
            case "split-block":
              return keyCommandInsertNewline(editorState);
            case "transpose-characters":
              return keyCommandTransposeCharacters(editorState);
            case "move-selection-to-start-of-block":
              return keyCommandMoveSelectionToStartOfBlock(editorState);
            case "move-selection-to-end-of-block":
              return keyCommandMoveSelectionToEndOfBlock(editorState);
            case "secondary-cut":
              return SecondaryClipboard.cut(editorState);
            case "secondary-paste":
              return SecondaryClipboard.paste(editorState);
            default:
              return editorState;
          }
        }
        /**
         * Intercept keydown behavior to handle keys and commands manually, if desired.
         *
         * Keydown combinations may be mapped to `DraftCommand` values, which may
         * correspond to command functions that modify the editor or its contents.
         *
         * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level
         * component may provide a custom mapping via the `keyBindingFn` prop.
         */ function editOnKeyDown(editor, e) {
          var keyCode = e.which;
          var editorState = editor._latestEditorState;
          function callDeprecatedHandler(handlerName) {
            var deprecatedHandler = editor.props[handlerName];
            if (deprecatedHandler) {
              deprecatedHandler(e);
              return true;
            } else return false;
          }
          switch (keyCode) {
            case Keys.RETURN:
              e.preventDefault(); // The top-level component may manually handle newline insertion. If
              // no special handling is performed, fall through to command handling.
              if (
                editor.props.handleReturn &&
                isEventHandled(editor.props.handleReturn(e, editorState))
              )
                return;
              break;
            case Keys.ESC:
              e.preventDefault();
              if (callDeprecatedHandler("onEscape")) return;
              break;
            case Keys.TAB:
              if (callDeprecatedHandler("onTab")) return;
              break;
            case Keys.UP:
              if (callDeprecatedHandler("onUpArrow")) return;
              break;
            case Keys.RIGHT:
              if (callDeprecatedHandler("onRightArrow")) return;
              break;
            case Keys.DOWN:
              if (callDeprecatedHandler("onDownArrow")) return;
              break;
            case Keys.LEFT:
              if (callDeprecatedHandler("onLeftArrow")) return;
              break;
            case Keys.SPACE:
              // Prevent Chrome on OSX behavior where option + space scrolls.
              if (isChrome && isOptionKeyCommand(e)) e.preventDefault();
          }
          var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.
          if (command == null || command === "") {
            if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {
              // The default keydown event has already been prevented in order to stop
              // Chrome from scrolling. Insert a nbsp into the editor as OSX would for
              // other browsers.
              var contentState = DraftModifier.replaceText(
                editorState.getCurrentContent(),
                editorState.getSelection(),
                "\xa0",
              );
              editor.update(EditorState.push(editorState, contentState, "insert-characters"));
            }
            return;
          }
          if (command === "undo") {
            // Since undo requires some special updating behavior to keep the editor
            // in sync, handle it separately.
            keyCommandUndo(e, editorState, editor.update);
            return;
          } // At this point, we know that we're handling a command of some kind, so
          // we don't want to insert a character following the keydown.
          e.preventDefault(); // Allow components higher up the tree to handle the command first.
          if (
            editor.props.handleKeyCommand &&
            isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))
          )
            return;
          var newState = onKeyCommand(command, editorState, e);
          if (newState !== editorState) editor.update(newState);
        }
        module.exports = editOnKeyDown;
      },
      {
        "7196706516e4284d": "aeLN8",
        "98531193c289d50b": "2EY4X",
        "9e54736e8511d30e": "68S9C",
        "53b8d7802f78c2a0": "aZASa",
        "29c2a2e6a80047f7": "4FrgO",
        "9fef8a5921e5f665": "c2opx",
        "601ef9fba73e72c3": "6tb2I",
        ebdcdd4bb25e706e: "1ECDf",
        d5a69eda51988308: "aix2i",
        "2e1445e2cc476954": "9cTPk",
        "9cb4f1bb3553e80d": "jpKkN",
        b4473da582be1770: "dGY8a",
        bb2e52f8a345eae: "amUhy",
        "62f257b89675bd7c": "97wNJ",
        "5b4f991a73441efa": "6nUfr",
        "1468760f579a709f": "h2ZRU",
        "55569c5dc2e5b929": "dB97o",
      },
    ],
    "68S9C": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UserAgent = require("3766a0e5c2b5dd29");
        var isSoftNewlineEvent = require("9bb4ba9b911caf0b");
        var isOSX = UserAgent.isPlatform("Mac OS X");
        var KeyBindingUtil = {
          /**
           * Check whether the ctrlKey modifier is *not* being used in conjunction with
           * the altKey modifier. If they are combined, the result is an `altGraph`
           * key modifier, which should not be handled by this set of key bindings.
           */ isCtrlKeyCommand: function isCtrlKeyCommand(e) {
            return !!e.ctrlKey && !e.altKey;
          },
          isOptionKeyCommand: function isOptionKeyCommand(e) {
            return isOSX && e.altKey;
          },
          usesMacOSHeuristics: function usesMacOSHeuristics() {
            return isOSX;
          },
          hasCommandModifier: function hasCommandModifier(e) {
            return isOSX ? !!e.metaKey && !e.altKey : KeyBindingUtil.isCtrlKeyCommand(e);
          },
          isSoftNewlineEvent: isSoftNewlineEvent,
        };
        module.exports = KeyBindingUtil;
      },
      { "3766a0e5c2b5dd29": "c2opx", "9bb4ba9b911caf0b": "auNgC" },
    ],
    auNgC: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var Keys = require("19bf3e9ac0e70d47");
        function isSoftNewlineEvent(e) {
          return (
            e.which === Keys.RETURN &&
            (e.getModifierState("Shift") ||
              e.getModifierState("Alt") ||
              e.getModifierState("Control"))
          );
        }
        module.exports = isSoftNewlineEvent;
      },
      { "19bf3e9ac0e70d47": "aZASa" },
    ],
    "4FrgO": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("fc55396ed9f3032c");
        var EditorState = require("27256eaf2afb9327");
        var getContentStateFragment = require("d0601838a4d8a693");
        var nullthrows = require("87da204959192923");
        var clipboard = null;
        /**
         * Some systems offer a "secondary" clipboard to allow quick internal cut
         * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).
         */ var SecondaryClipboard = {
          cut: function cut(editorState) {
            var content = editorState.getCurrentContent();
            var selection = editorState.getSelection();
            var targetRange = null;
            if (selection.isCollapsed()) {
              var anchorKey = selection.getAnchorKey();
              var blockEnd = content.getBlockForKey(anchorKey).getLength();
              if (blockEnd === selection.getAnchorOffset()) {
                var keyAfter = content.getKeyAfter(anchorKey);
                if (keyAfter == null) return editorState;
                targetRange = selection.set("focusKey", keyAfter).set("focusOffset", 0);
              } else targetRange = selection.set("focusOffset", blockEnd);
            } else targetRange = selection;
            targetRange = nullthrows(targetRange); // TODO: This should actually append to the current state when doing
            // successive ^K commands without any other cursor movement
            clipboard = getContentStateFragment(content, targetRange);
            var afterRemoval = DraftModifier.removeRange(content, targetRange, "forward");
            if (afterRemoval === content) return editorState;
            return EditorState.push(editorState, afterRemoval, "remove-range");
          },
          paste: function paste(editorState) {
            if (!clipboard) return editorState;
            var newContent = DraftModifier.replaceWithFragment(
              editorState.getCurrentContent(),
              editorState.getSelection(),
              clipboard,
            );
            return EditorState.push(editorState, newContent, "insert-fragment");
          },
        };
        module.exports = SecondaryClipboard;
      },
      {
        fc55396ed9f3032c: "aeLN8",
        "27256eaf2afb9327": "2EY4X",
        d0601838a4d8a693: "kdkQl",
        "87da204959192923": "fwtV9",
      },
    ],
    "1ECDf": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("4bf30a74f1be660f");
        var expandRangeToStartOfLine = require("33aa5e391062fceb");
        var getDraftEditorSelectionWithNodes = require("5ecf176f0f21ae6");
        var moveSelectionBackward = require("261b45809ff57d53");
        var removeTextWithStrategy = require("9f44f198288c5a20");
        function keyCommandBackspaceToStartOfLine(editorState, e) {
          var afterRemoval = removeTextWithStrategy(
            editorState,
            function (strategyState) {
              var selection = strategyState.getSelection();
              if (selection.isCollapsed() && selection.getAnchorOffset() === 0)
                return moveSelectionBackward(strategyState, 1);
              var ownerDocument = e.currentTarget.ownerDocument;
              var domSelection = ownerDocument.defaultView.getSelection(); // getRangeAt can technically throw if there's no selection, but we know
              // there is one here because text editor has focus (the cursor is a
              // selection of length 0). Therefore, we don't need to wrap this in a
              // try-catch block.
              var range = domSelection.getRangeAt(0);
              range = expandRangeToStartOfLine(range);
              return getDraftEditorSelectionWithNodes(
                strategyState,
                null,
                range.endContainer,
                range.endOffset,
                range.startContainer,
                range.startOffset,
              ).selectionState;
            },
            "backward",
          );
          if (afterRemoval === editorState.getCurrentContent()) return editorState;
          return EditorState.push(editorState, afterRemoval, "remove-range");
        }
        module.exports = keyCommandBackspaceToStartOfLine;
      },
      {
        "4bf30a74f1be660f": "2EY4X",
        "33aa5e391062fceb": "9Wjqs",
        "5ecf176f0f21ae6": "jfDPu",
        "261b45809ff57d53": "hqv6P",
        "9f44f198288c5a20": "aZxhD",
      },
    ],
    "9Wjqs": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var UnicodeUtils = require("9eaa9658d2693298");
        var getCorrectDocumentFromNode = require("2507922316bbfdfd");
        var getRangeClientRects = require("bc1ae0c5ac7782e2");
        var invariant = require("812a35af3ad92831");
        /**
         * Return the computed line height, in pixels, for the provided element.
         */ function getLineHeightPx(element) {
          var computed = getComputedStyle(element);
          var correctDocument = getCorrectDocumentFromNode(element);
          var div = correctDocument.createElement("div");
          div.style.fontFamily = computed.fontFamily;
          div.style.fontSize = computed.fontSize;
          div.style.fontStyle = computed.fontStyle;
          div.style.fontWeight = computed.fontWeight;
          div.style.lineHeight = computed.lineHeight;
          div.style.position = "absolute";
          div.textContent = "M";
          var documentBody = correctDocument.body;
          !documentBody && invariant(false, "Missing document.body"); // forced layout here
          documentBody.appendChild(div);
          var rect = div.getBoundingClientRect();
          documentBody.removeChild(div);
          return rect.height;
        }
        /**
         * Return whether every ClientRect in the provided list lies on the same line.
         *
         * We assume that the rects on the same line all contain the baseline, so the
         * lowest top line needs to be above the highest bottom line (i.e., if you were
         * to project the rects onto the y-axis, their intersection would be nonempty).
         *
         * In addition, we require that no two boxes are lineHeight (or more) apart at
         * either top or bottom, which helps protect against false positives for fonts
         * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino
         * produces rects of height 58px!).
         */ function areRectsOnOneLine(rects, lineHeight) {
          var minTop = Infinity;
          var minBottom = Infinity;
          var maxTop = -Infinity;
          var maxBottom = -Infinity;
          for (var ii = 0; ii < rects.length; ii++) {
            var rect = rects[ii];
            if (rect.width === 0 || rect.width === 1) continue;
            minTop = Math.min(minTop, rect.top);
            minBottom = Math.min(minBottom, rect.bottom);
            maxTop = Math.max(maxTop, rect.top);
            maxBottom = Math.max(maxBottom, rect.bottom);
          }
          return (
            maxTop <= minBottom &&
            maxTop - minTop < lineHeight &&
            maxBottom - minBottom < lineHeight
          );
        }
        /**
         * Return the length of a node, as used by Range offsets.
         */ function getNodeLength(node) {
          // http://www.w3.org/TR/dom/#concept-node-length
          switch (node.nodeType) {
            case Node.DOCUMENT_TYPE_NODE:
              return 0;
            case Node.TEXT_NODE:
            case Node.PROCESSING_INSTRUCTION_NODE:
            case Node.COMMENT_NODE:
              return node.length;
            default:
              return node.childNodes.length;
          }
        }
        /**
         * Given a collapsed range, move the start position backwards as far as
         * possible while the range still spans only a single line.
         */ function expandRangeToStartOfLine(range) {
          !range.collapsed &&
            invariant(false, "expandRangeToStartOfLine: Provided range is not collapsed.");
          range = range.cloneRange();
          var containingElement = range.startContainer;
          if (containingElement.nodeType !== 1) containingElement = containingElement.parentNode;
          var lineHeight = getLineHeightPx(containingElement); // Imagine our text looks like:
          //   <div><span>once upon a time, there was a <em>boy
          //   who lived</em> </span><q><strong>under^ the
          //   stairs</strong> in a small closet.</q></div>
          // where the caret represents the cursor. First, we crawl up the tree until
          // the range spans multiple lines (setting the start point to before
          // "<strong>", then before "<div>"), then at each level we do a search to
          // find the latest point which is still on a previous line. We'll find that
          // the break point is inside the span, then inside the <em>, then in its text
          // node child, the actual break point before "who".
          var bestContainer = range.endContainer;
          var bestOffset = range.endOffset;
          range.setStart(range.startContainer, 0);
          while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
            bestContainer = range.startContainer;
            bestOffset = range.startOffset;
            !bestContainer.parentNode &&
              invariant(false, "Found unexpected detached subtree when traversing.");
            range.setStartBefore(bestContainer);
            if (
              bestContainer.nodeType === 1 &&
              getComputedStyle(bestContainer).display !== "inline"
            )
              break;
          } // In the above example, range now spans from "<div>" to "under",
          // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].
          // Picking out which child to recurse into here is a special case since we
          // don't want to check past <q> -- once we find that the final range starts
          // in <span>, we can look at all of its children (and all of their children)
          // to find the break point.
          // At all times, (bestContainer, bestOffset) is the latest single-line start
          // point that we know of.
          var currentContainer = bestContainer;
          var maxIndexToConsider = bestOffset - 1;
          do {
            var nodeValue = currentContainer.nodeValue;
            var ii = maxIndexToConsider;
            for (; ii >= 0; ii--) {
              if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1))
                continue;
              range.setStart(currentContainer, ii);
              if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
                bestContainer = currentContainer;
                bestOffset = ii;
              } else break;
            }
            if (ii === -1 || currentContainer.childNodes.length === 0) break;
            currentContainer = currentContainer.childNodes[ii];
            maxIndexToConsider = getNodeLength(currentContainer);
          } while (true);
          range.setStart(bestContainer, bestOffset);
          return range;
        }
        module.exports = expandRangeToStartOfLine;
      },
      {
        "9eaa9658d2693298": "8JHYo",
        "2507922316bbfdfd": "4aMz1",
        bc1ae0c5ac7782e2: "hUpG5",
        "812a35af3ad92831": "d6MgO",
      },
    ],
    hUpG5: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UserAgent = require("9dd34a1acdad38b0");
        var invariant = require("966a9763b08ea262");
        var isChrome = UserAgent.isBrowser("Chrome"); // In Chrome, the client rects will include the entire bounds of all nodes that
        // begin (have a start tag) within the selection, even if the selection does
        // not overlap the entire node. To resolve this, we split the range at each
        // start tag and join the client rects together.
        // https://code.google.com/p/chromium/issues/detail?id=324437
        /* eslint-disable consistent-return */ function getRangeClientRectsChrome(range) {
          var tempRange = range.cloneRange();
          var clientRects = [];
          for (
            var ancestor = range.endContainer;
            ancestor != null;
            ancestor = ancestor.parentNode
          ) {
            // If we've climbed up to the common ancestor, we can now use the
            // original start point and stop climbing the tree.
            var atCommonAncestor = ancestor === range.commonAncestorContainer;
            if (atCommonAncestor) tempRange.setStart(range.startContainer, range.startOffset);
            else tempRange.setStart(tempRange.endContainer, 0);
            var rects = Array.from(tempRange.getClientRects());
            clientRects.push(rects);
            if (atCommonAncestor) {
              var _ref;
              clientRects.reverse();
              return (_ref = []).concat.apply(_ref, clientRects);
            }
            tempRange.setEndBefore(ancestor);
          }
          invariant(false, "Found an unexpected detached subtree when getting range client rects.");
        }
        /* eslint-enable consistent-return */ /**
         * Like range.getClientRects() but normalizes for browser bugs.
         */ var getRangeClientRects = isChrome
          ? getRangeClientRectsChrome
          : function (range) {
              return Array.from(range.getClientRects());
            };
        module.exports = getRangeClientRects;
      },
      { "9dd34a1acdad38b0": "c2opx", "966a9763b08ea262": "d6MgO" },
    ],
    aix2i: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftRemovableWord = require("ea7fe2e70de0b1c2");
        var EditorState = require("cc9c0404ece80a3f");
        var moveSelectionBackward = require("f76f67ab8806a440");
        var removeTextWithStrategy = require("5f374896db08a88d");
        /**
         * Delete the word that is left of the cursor, as well as any spaces or
         * punctuation after the word.
         */ function keyCommandBackspaceWord(editorState) {
          var afterRemoval = removeTextWithStrategy(
            editorState,
            function (strategyState) {
              var selection = strategyState.getSelection();
              var offset = selection.getStartOffset(); // If there are no words before the cursor, remove the preceding newline.
              if (offset === 0) return moveSelectionBackward(strategyState, 1);
              var key = selection.getStartKey();
              var content = strategyState.getCurrentContent();
              var text = content.getBlockForKey(key).getText().slice(0, offset);
              var toRemove = DraftRemovableWord.getBackward(text);
              return moveSelectionBackward(strategyState, toRemove.length || 1);
            },
            "backward",
          );
          if (afterRemoval === editorState.getCurrentContent()) return editorState;
          return EditorState.push(editorState, afterRemoval, "remove-range");
        }
        module.exports = keyCommandBackspaceWord;
      },
      {
        ea7fe2e70de0b1c2: "5Fz7J",
        cc9c0404ece80a3f: "2EY4X",
        f76f67ab8806a440: "hqv6P",
        "5f374896db08a88d": "aZxhD",
      },
    ],
    "5Fz7J": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var TokenizeUtil = require("e79e133dbf897c77");
        var punctuation = TokenizeUtil.getPunctuation(); // The apostrophe and curly single quotes behave in a curious way: when
        // surrounded on both sides by word characters, they behave as word chars; when
        // either neighbor is punctuation or an end of the string, they behave as
        // punctuation.
        var CHAMELEON_CHARS = "['\u2018\u2019]"; // Remove the underscore, which should count as part of the removable word. The
        // "chameleon chars" also count as punctuation in this regex.
        var WHITESPACE_AND_PUNCTUATION = "\\s|(?![_])" + punctuation;
        var DELETE_STRING =
          "^(?:" +
          WHITESPACE_AND_PUNCTUATION +
          ")*" +
          "(?:" +
          CHAMELEON_CHARS +
          "|(?!" +
          WHITESPACE_AND_PUNCTUATION +
          ").)*" +
          "(?:(?!" +
          WHITESPACE_AND_PUNCTUATION +
          ").)";
        var DELETE_REGEX = new RegExp(DELETE_STRING);
        var BACKSPACE_STRING =
          "(?:(?!" +
          WHITESPACE_AND_PUNCTUATION +
          ").)" +
          "(?:" +
          CHAMELEON_CHARS +
          "|(?!" +
          WHITESPACE_AND_PUNCTUATION +
          ").)*" +
          "(?:" +
          WHITESPACE_AND_PUNCTUATION +
          ")*" +
          "$";
        var BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);
        function getRemovableWord(text, isBackward) {
          var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);
          return matches ? matches[0] : text;
        }
        var DraftRemovableWord = {
          getBackward: function getBackward(text) {
            return getRemovableWord(text, true);
          },
          getForward: function getForward(text) {
            return getRemovableWord(text, false);
          },
        };
        module.exports = DraftRemovableWord;
      },
      { e79e133dbf897c77: "kcX3n" },
    ],
    kcX3n: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @typechecks
         * @stub
         *
         */ "use strict"; // \u00a1-\u00b1\u00b4-\u00b8\u00ba\u00bb\u00bf
        //             is latin supplement punctuation except fractions and superscript
        //             numbers
        // \u2010-\u2027\u2030-\u205e
        //             is punctuation from the general punctuation block:
        //             weird quotes, commas, bullets, dashes, etc.
        // \u30fb\u3001\u3002\u3008-\u3011\u3014-\u301f
        //             is CJK punctuation
        // \uff1a-\uff1f\uff01-\uff0f\uff3b-\uff40\uff5b-\uff65
        //             is some full-width/half-width punctuation
        // \u2E2E\u061f\u066a-\u066c\u061b\u060c\u060d\uFD3e\uFD3F
        //             is some Arabic punctuation marks
        // \u1801\u0964\u104a\u104b
        //             is misc. other language punctuation marks
        var PUNCTUATION =
          "[.,+*?$|#{}()'\\^\\-\\[\\]\\\\\\/!@%\"~=<>_:;\u30FB\u3001\u3002\u3008-\u3011\u3014-\u301F\uFF1A-\uFF1F\uFF01-\uFF0F\uFF3B-\uFF40\uFF5B-\uFF65\u2E2E\u061F\u066A-\u066C\u061B\u060C\u060D\uFD3E\uFD3F\u1801\u0964\u104A\u104B\u2010-\u2027\u2030-\u205E\xa1-\xb1\xb4-\xb8\xba\xbb\xbf]";
        module.exports = {
          getPunctuation: function getPunctuation() {
            return PUNCTUATION;
          },
        };
      },
      {},
    ],
    "9cTPk": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftRemovableWord = require("24ac5a12bcecdb50");
        var EditorState = require("cf1a0a6d9c461431");
        var moveSelectionForward = require("5daf62f149d880ac");
        var removeTextWithStrategy = require("713d555dc8ea08cd");
        /**
         * Delete the word that is right of the cursor, as well as any spaces or
         * punctuation before the word.
         */ function keyCommandDeleteWord(editorState) {
          var afterRemoval = removeTextWithStrategy(
            editorState,
            function (strategyState) {
              var selection = strategyState.getSelection();
              var offset = selection.getStartOffset();
              var key = selection.getStartKey();
              var content = strategyState.getCurrentContent();
              var text = content.getBlockForKey(key).getText().slice(offset);
              var toRemove = DraftRemovableWord.getForward(text); // If there are no words in front of the cursor, remove the newline.
              return moveSelectionForward(strategyState, toRemove.length || 1);
            },
            "forward",
          );
          if (afterRemoval === editorState.getCurrentContent()) return editorState;
          return EditorState.push(editorState, afterRemoval, "remove-range");
        }
        module.exports = keyCommandDeleteWord;
      },
      {
        "24ac5a12bcecdb50": "5Fz7J",
        cf1a0a6d9c461431: "2EY4X",
        "5daf62f149d880ac": "6CgKZ",
        "713d555dc8ea08cd": "aZxhD",
      },
    ],
    "6CgKZ": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var warning = require("cc9b8ecbf93fdff9");
        /**
         * Given a collapsed selection, move the focus `maxDistance` forward within
         * the selected block. If the selection will go beyond the end of the block,
         * move focus to the start of the next block, but no further.
         *
         * This function is not Unicode-aware, so surrogate pairs will be treated
         * as having length 2.
         */ function moveSelectionForward(editorState, maxDistance) {
          var selection = editorState.getSelection(); // Should eventually make this an invariant
          warning(
            selection.isCollapsed(),
            "moveSelectionForward should only be called with a collapsed SelectionState",
          );
          var key = selection.getStartKey();
          var offset = selection.getStartOffset();
          var content = editorState.getCurrentContent();
          var focusKey = key;
          var focusOffset;
          var block = content.getBlockForKey(key);
          if (maxDistance > block.getText().length - offset) {
            focusKey = content.getKeyAfter(key);
            focusOffset = 0;
          } else focusOffset = offset + maxDistance;
          return selection.merge({
            focusKey: focusKey,
            focusOffset: focusOffset,
          });
        }
        module.exports = moveSelectionForward;
      },
      { cc9b8ecbf93fdff9: "aqkSq" },
    ],
    jpKkN: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("b5d4572b3424b3f8");
        var EditorState = require("535ef30bf98d22c2");
        function keyCommandInsertNewline(editorState) {
          var contentState = DraftModifier.splitBlock(
            editorState.getCurrentContent(),
            editorState.getSelection(),
          );
          return EditorState.push(editorState, contentState, "split-block");
        }
        module.exports = keyCommandInsertNewline;
      },
      { b5d4572b3424b3f8: "aeLN8", "535ef30bf98d22c2": "2EY4X" },
    ],
    dGY8a: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("901460cd085877db");
        /**
         * See comment for `moveSelectionToStartOfBlock`.
         */ function keyCommandMoveSelectionToEndOfBlock(editorState) {
          var selection = editorState.getSelection();
          var endKey = selection.getEndKey();
          var content = editorState.getCurrentContent();
          var textLength = content.getBlockForKey(endKey).getLength();
          return EditorState.set(editorState, {
            selection: selection.merge({
              anchorKey: endKey,
              anchorOffset: textLength,
              focusKey: endKey,
              focusOffset: textLength,
              isBackward: false,
            }),
            forceSelection: true,
          });
        }
        module.exports = keyCommandMoveSelectionToEndOfBlock;
      },
      { "901460cd085877db": "2EY4X" },
    ],
    amUhy: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("2e757bb9c3973c3c");
        /**
         * Collapse selection at the start of the first selected block. This is used
         * for Firefox versions that attempt to navigate forward/backward instead of
         * moving the cursor. Other browsers are able to move the cursor natively.
         */ function keyCommandMoveSelectionToStartOfBlock(editorState) {
          var selection = editorState.getSelection();
          var startKey = selection.getStartKey();
          return EditorState.set(editorState, {
            selection: selection.merge({
              anchorKey: startKey,
              anchorOffset: 0,
              focusKey: startKey,
              focusOffset: 0,
              isBackward: false,
            }),
            forceSelection: true,
          });
        }
        module.exports = keyCommandMoveSelectionToStartOfBlock;
      },
      { "2e757bb9c3973c3c": "2EY4X" },
    ],
    "6nUfr": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("b16b2e4ed630284f");
        var UnicodeUtils = require("33fd32f4096cfa20");
        var moveSelectionForward = require("ba15af6a674057c5");
        var removeTextWithStrategy = require("9ae0005a1a48d67f");
        /**
         * Remove the selected range. If the cursor is collapsed, remove the following
         * character. This operation is Unicode-aware, so removing a single character
         * will remove a surrogate pair properly as well.
         */ function keyCommandPlainDelete(editorState) {
          var afterRemoval = removeTextWithStrategy(
            editorState,
            function (strategyState) {
              var selection = strategyState.getSelection();
              var content = strategyState.getCurrentContent();
              var key = selection.getAnchorKey();
              var offset = selection.getAnchorOffset();
              var charAhead = content.getBlockForKey(key).getText()[offset];
              return moveSelectionForward(
                strategyState,
                charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1,
              );
            },
            "forward",
          );
          if (afterRemoval === editorState.getCurrentContent()) return editorState;
          var selection = editorState.getSelection();
          return EditorState.push(
            editorState,
            afterRemoval.set("selectionBefore", selection),
            selection.isCollapsed() ? "delete-character" : "remove-range",
          );
        }
        module.exports = keyCommandPlainDelete;
      },
      {
        b16b2e4ed630284f: "2EY4X",
        "33fd32f4096cfa20": "8JHYo",
        ba15af6a674057c5: "6CgKZ",
        "9ae0005a1a48d67f": "aZxhD",
      },
    ],
    h2ZRU: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("499ca93230c78a3a");
        var EditorState = require("55510a6f0d17a7f2");
        var getContentStateFragment = require("75dc155b3b135642");
        /**
         * Transpose the characters on either side of a collapsed cursor, or
         * if the cursor is at the end of the block, transpose the last two
         * characters.
         */ function keyCommandTransposeCharacters(editorState) {
          var selection = editorState.getSelection();
          if (!selection.isCollapsed()) return editorState;
          var offset = selection.getAnchorOffset();
          if (offset === 0) return editorState;
          var blockKey = selection.getAnchorKey();
          var content = editorState.getCurrentContent();
          var block = content.getBlockForKey(blockKey);
          var length = block.getLength(); // Nothing to transpose if there aren't two characters.
          if (length <= 1) return editorState;
          var removalRange;
          var finalSelection;
          if (offset === length) {
            // The cursor is at the end of the block. Swap the last two characters.
            removalRange = selection.set("anchorOffset", offset - 1);
            finalSelection = selection;
          } else {
            removalRange = selection.set("focusOffset", offset + 1);
            finalSelection = removalRange.set("anchorOffset", offset + 1);
          } // Extract the character to move as a fragment. This preserves its
          // styling and entity, if any.
          var movedFragment = getContentStateFragment(content, removalRange);
          var afterRemoval = DraftModifier.removeRange(content, removalRange, "backward"); // After the removal, the insertion target is one character back.
          var selectionAfter = afterRemoval.getSelectionAfter();
          var targetOffset = selectionAfter.getAnchorOffset() - 1;
          var targetRange = selectionAfter.merge({
            anchorOffset: targetOffset,
            focusOffset: targetOffset,
          });
          var afterInsert = DraftModifier.replaceWithFragment(
            afterRemoval,
            targetRange,
            movedFragment,
          );
          var newEditorState = EditorState.push(editorState, afterInsert, "insert-fragment");
          return EditorState.acceptSelection(newEditorState, finalSelection);
        }
        module.exports = keyCommandTransposeCharacters;
      },
      { "499ca93230c78a3a": "aeLN8", "55510a6f0d17a7f2": "2EY4X", "75dc155b3b135642": "kdkQl" },
    ],
    dB97o: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var EditorState = require("cc5725152f484a2d");
        function keyCommandUndo(e, editorState, updateFn) {
          var undoneState = EditorState.undo(editorState); // If the last change to occur was a spellcheck change, allow the undo
          // event to fall through to the browser. This allows the browser to record
          // the unwanted change, which should soon lead it to learn not to suggest
          // the correction again.
          if (editorState.getLastChangeType() === "spellcheck-change") {
            var nativelyRenderedContent = undoneState.getCurrentContent();
            updateFn(
              EditorState.set(undoneState, {
                nativelyRenderedContent: nativelyRenderedContent,
              }),
            );
            return;
          } // Otheriwse, manage the undo behavior manually.
          e.preventDefault();
          if (!editorState.getNativelyRenderedContent()) {
            updateFn(undoneState);
            return;
          } // Trigger a re-render with the current content state to ensure that the
          // component tree has up-to-date props for comparison.
          updateFn(
            EditorState.set(editorState, {
              nativelyRenderedContent: null,
            }),
          ); // Wait to ensure that the re-render has occurred before performing
          // the undo action.
          setTimeout(function () {
            updateFn(undoneState);
          }, 0);
        }
        module.exports = keyCommandUndo;
      },
      { cc5725152f484a2d: "2EY4X" },
    ],
    "1vipJ": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var BlockMapBuilder = require("6f74a2cfa772434a");
        var CharacterMetadata = require("1fd47dc2c290d831");
        var DataTransfer = require("e51ba925804cd137");
        var DraftModifier = require("378c728a66589ae6");
        var DraftPasteProcessor = require("c2f601251b56fc74");
        var EditorState = require("ec41b313bf37962d");
        var RichTextEditorUtil = require("d1b75088d36086ee");
        var getEntityKeyForSelection = require("e56436ff6910ad13");
        var getTextContentFromFiles = require("aa5b40ccae806c79");
        var isEventHandled = require("1c7e00ec29169630");
        var splitTextIntoTextBlocks = require("d055ca8d2955ae67");
        /**
         * Paste content.
         */ function editOnPaste(editor, e) {
          e.preventDefault();
          var data = new DataTransfer(e.clipboardData); // Get files, unless this is likely to be a string the user wants inline.
          if (!data.isRichText()) {
            var files = data.getFiles();
            var defaultFileText = data.getText();
            if (files.length > 0) {
              // Allow customized paste handling for images, etc. Otherwise, fall
              // through to insert text contents into the editor.
              if (
                editor.props.handlePastedFiles &&
                isEventHandled(editor.props.handlePastedFiles(files))
              )
                return;
              /* $FlowFixMe[incompatible-call] This comment suppresses an error found
               * DataTransfer was typed. getFiles() returns an array of <Files extends
               * Blob>, not Blob */ getTextContentFromFiles(files, function (/*string*/ fileText) {
                fileText = fileText || defaultFileText;
                if (!fileText) return;
                var editorState = editor._latestEditorState;
                var blocks = splitTextIntoTextBlocks(fileText);
                var character = CharacterMetadata.create({
                  style: editorState.getCurrentInlineStyle(),
                  entity: getEntityKeyForSelection(
                    editorState.getCurrentContent(),
                    editorState.getSelection(),
                  ),
                });
                var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);
                var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);
                var fragment = BlockMapBuilder.createFromArray(text);
                var withInsertedText = DraftModifier.replaceWithFragment(
                  editorState.getCurrentContent(),
                  editorState.getSelection(),
                  fragment,
                );
                editor.update(EditorState.push(editorState, withInsertedText, "insert-fragment"));
              });
              return;
            }
          }
          var textBlocks = [];
          var text = data.getText();
          var html = data.getHTML();
          var editorState = editor._latestEditorState;
          if (editor.props.formatPastedText) {
            var _editor$props$formatP = editor.props.formatPastedText(text, html),
              formattedText = _editor$props$formatP.text,
              formattedHtml = _editor$props$formatP.html;
            text = formattedText;
            html = formattedHtml;
          }
          if (
            editor.props.handlePastedText &&
            isEventHandled(editor.props.handlePastedText(text, html, editorState))
          )
            return;
          if (text) textBlocks = splitTextIntoTextBlocks(text);
          if (!editor.props.stripPastedStyles) {
            // If the text from the paste event is rich content that matches what we
            // already have on the internal clipboard, assume that we should just use
            // the clipboard fragment for the paste. This will allow us to preserve
            // styling and entities, if any are present. Note that newlines are
            // stripped during comparison -- this is because copy/paste within the
            // editor in Firefox and IE will not include empty lines. The resulting
            // paste will preserve the newlines correctly.
            var internalClipboard = editor.getClipboard();
            if (!editor.props.formatPastedText && data.isRichText() && internalClipboard) {
              var _html;
              if (
                // assume this is an internal paste.
                ((_html = html) === null || _html === void 0
                  ? void 0
                  : _html.indexOf(editor.getEditorKey())) !== -1 || // The copy may have been made within a single block, in which case the
                // editor key won't be part of the paste. In this case, just check
                // whether the pasted text matches the internal clipboard.
                (textBlocks.length === 1 &&
                  internalClipboard.size === 1 &&
                  internalClipboard.first().getText() === text)
              ) {
                editor.update(insertFragment(editor._latestEditorState, internalClipboard));
                return;
              }
            } else if (
              internalClipboard &&
              data.types.includes("com.apple.webarchive") &&
              !data.types.includes("text/html") &&
              areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)
            ) {
              // Safari does not properly store text/html in some cases.
              // Use the internalClipboard if present and equal to what is on
              // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.
              editor.update(insertFragment(editor._latestEditorState, internalClipboard));
              return;
            } // If there is html paste data, try to parse that.
            if (html) {
              var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);
              if (htmlFragment) {
                var contentBlocks = htmlFragment.contentBlocks,
                  entityMap = htmlFragment.entityMap;
                if (contentBlocks) {
                  var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);
                  editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));
                  return;
                }
              }
            } // Otherwise, create a new fragment from our pasted text. Also
            // empty the internal clipboard, since it's no longer valid.
            editor.setClipboard(null);
          }
          if (textBlocks.length) {
            var character = CharacterMetadata.create({
              style: editorState.getCurrentInlineStyle(),
              entity: getEntityKeyForSelection(
                editorState.getCurrentContent(),
                editorState.getSelection(),
              ),
            });
            var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);
            var textFragment = DraftPasteProcessor.processText(
              textBlocks,
              character,
              currentBlockType,
            );
            var textMap = BlockMapBuilder.createFromArray(textFragment);
            editor.update(insertFragment(editor._latestEditorState, textMap));
          }
        }
        function insertFragment(editorState, fragment, entityMap) {
          var newContent = DraftModifier.replaceWithFragment(
            editorState.getCurrentContent(),
            editorState.getSelection(),
            fragment,
          ); // TODO: merge the entity map once we stop using DraftEntity
          // like this:
          // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);
          return EditorState.push(
            editorState,
            newContent.set("entityMap", entityMap),
            "insert-fragment",
          );
        }
        function areTextBlocksAndClipboardEqual(textBlocks, blockMap) {
          return (
            textBlocks.length === blockMap.size &&
            blockMap.valueSeq().every(function (block, ii) {
              return block.getText() === textBlocks[ii];
            })
          );
        }
        module.exports = editOnPaste;
      },
      {
        "6f74a2cfa772434a": "4sYuW",
        "1fd47dc2c290d831": "5sTZK",
        e51ba925804cd137: "8Jv11",
        "378c728a66589ae6": "aeLN8",
        c2f601251b56fc74: "eTGO1",
        ec41b313bf37962d: "2EY4X",
        d1b75088d36086ee: "e1uYw",
        e56436ff6910ad13: "eAypV",
        aa5b40ccae806c79: "gfFVN",
        "1c7e00ec29169630": "6tb2I",
        d055ca8d2955ae67: "bOqYA",
      },
    ],
    eTGO1: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var ContentBlock = require("96b7e73f66214197");
        var ContentBlockNode = require("9d0e4e696dad3519");
        var convertFromHTMLToContentBlocks = require("9cd6c07109653fb0");
        var generateRandomKey = require("77f83f507896c81b");
        var getSafeBodyFromHTML = require("6c02a06411967db2");
        var gkx = require("3fb778963441f3e4");
        var Immutable = require("3841b1c296dd1af4");
        var sanitizeDraftText = require("d37bce2677ca1ae6");
        var List = Immutable.List,
          Repeat = Immutable.Repeat;
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        var ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;
        var DraftPasteProcessor = {
          processHTML: function processHTML(html, blockRenderMap) {
            return convertFromHTMLToContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);
          },
          processText: function processText(textBlocks, character, type) {
            return textBlocks.reduce(function (acc, textLine, index) {
              textLine = sanitizeDraftText(textLine);
              var key = generateRandomKey();
              var blockNodeConfig = {
                key: key,
                type: type,
                text: textLine,
                characterList: List(Repeat(character, textLine.length)),
              }; // next block updates previous block
              if (experimentalTreeDataSupport && index !== 0) {
                var prevSiblingIndex = index - 1; // update previous block
                var previousBlock = (acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({
                  nextSibling: key,
                }));
                blockNodeConfig = _objectSpread({}, blockNodeConfig, {
                  prevSibling: previousBlock.getKey(),
                });
              }
              acc.push(new ContentBlockRecord(blockNodeConfig));
              return acc;
            }, []);
          },
        };
        module.exports = DraftPasteProcessor;
      },
      {
        "96b7e73f66214197": "hCjL2",
        "9d0e4e696dad3519": "ketXe",
        "9cd6c07109653fb0": "5vdps",
        "77f83f507896c81b": "fgtnr",
        "6c02a06411967db2": "77Sxy",
        "3fb778963441f3e4": "l5VFU",
        "3841b1c296dd1af4": "lhHDL",
        d37bce2677ca1ae6: "kVM1f",
      },
    ],
    "5vdps": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var _knownListItemDepthCl;
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var CharacterMetadata = require("4410afe0be18838c");
        var ContentBlock = require("c751a8094f569514");
        var ContentBlockNode = require("8160653ca46dd0f1");
        var DefaultDraftBlockRenderMap = require("23c6dbf9c6a40e20");
        var DraftEntity = require("908485a4941845ae");
        var URI = require("2b39dd5ee04c1e9b");
        var cx = require("fc6038f7f3ad7b7d");
        var generateRandomKey = require("a52d64a13759fd6c");
        var getSafeBodyFromHTML = require("fa5e54c95a61c5a6");
        var gkx = require("6c221ad5e752bdee");
        var _require = require("7e57d887476ae235"),
          List = _require.List,
          Map = _require.Map,
          OrderedSet = _require.OrderedSet;
        var isHTMLAnchorElement = require("bf2a55bbb2c88b59");
        var isHTMLBRElement = require("ca2739cc0f9dbab9");
        var isHTMLElement = require("b56104914c3983a2");
        var isHTMLImageElement = require("831af99a6eae2017");
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        var NBSP = "&nbsp;";
        var SPACE = " "; // used for replacing characters in HTML
        var REGEX_CR = new RegExp("\r", "g");
        var REGEX_LF = new RegExp("\n", "g");
        var REGEX_LEADING_LF = new RegExp("^\n", "g");
        var REGEX_NBSP = new RegExp(NBSP, "g");
        var REGEX_CARRIAGE = new RegExp("&#13;?", "g");
        var REGEX_ZWS = new RegExp("&#8203;?", "g"); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
        var boldValues = ["bold", "bolder", "500", "600", "700", "800", "900"];
        var notBoldValues = ["light", "lighter", "normal", "100", "200", "300", "400"];
        var anchorAttr = ["className", "href", "rel", "target", "title"];
        var imgAttr = ["alt", "className", "height", "src", "width"];
        var knownListItemDepthClasses =
          ((_knownListItemDepthCl = {}),
          _defineProperty(_knownListItemDepthCl, cx("public/DraftStyleDefault/depth0"), 0),
          _defineProperty(_knownListItemDepthCl, cx("public/DraftStyleDefault/depth1"), 1),
          _defineProperty(_knownListItemDepthCl, cx("public/DraftStyleDefault/depth2"), 2),
          _defineProperty(_knownListItemDepthCl, cx("public/DraftStyleDefault/depth3"), 3),
          _defineProperty(_knownListItemDepthCl, cx("public/DraftStyleDefault/depth4"), 4),
          _knownListItemDepthCl);
        var HTMLTagToRawInlineStyleMap = Map({
          b: "BOLD",
          code: "CODE",
          del: "STRIKETHROUGH",
          em: "ITALIC",
          i: "ITALIC",
          s: "STRIKETHROUGH",
          strike: "STRIKETHROUGH",
          strong: "BOLD",
          u: "UNDERLINE",
          mark: "HIGHLIGHT",
        });
        /**
         * Build a mapping from HTML tags to draftjs block types
         * out of a BlockRenderMap.
         *
         * The BlockTypeMap for the default BlockRenderMap looks like this:
         *   Map({
         *     h1: 'header-one',
         *     h2: 'header-two',
         *     h3: 'header-three',
         *     h4: 'header-four',
         *     h5: 'header-five',
         *     h6: 'header-six',
         *     blockquote: 'blockquote',
         *     figure: 'atomic',
         *     pre: ['code-block'],
         *     div: 'unstyled',
         *     p: 'unstyled',
         *     li: ['ordered-list-item', 'unordered-list-item'],
         *   })
         */ var buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {
          var blockTypeMap = {};
          blockRenderMap.mapKeys(function (blockType, desc) {
            var elements = [desc.element];
            if (desc.aliasedElements !== undefined)
              elements.push.apply(elements, desc.aliasedElements);
            elements.forEach(function (element) {
              if (blockTypeMap[element] === undefined) blockTypeMap[element] = blockType;
              else if (typeof blockTypeMap[element] === "string")
                blockTypeMap[element] = [blockTypeMap[element], blockType];
              else blockTypeMap[element].push(blockType);
            });
          });
          return Map(blockTypeMap);
        };
        var detectInlineStyle = function detectInlineStyle(node) {
          if (isHTMLElement(node)) {
            var element = node; // Currently only used to detect preformatted inline code
            if (element.style.fontFamily.includes("monospace")) return "CODE";
          }
          return null;
        };
        /**
         * If we're pasting from one DraftEditor to another we can check to see if
         * existing list item depth classes are being used and preserve this style
         */ var getListItemDepth = function getListItemDepth(node) {
          var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          Object.keys(knownListItemDepthClasses).some(function (depthClass) {
            if (node.classList.contains(depthClass)) depth = knownListItemDepthClasses[depthClass];
          });
          return depth;
        };
        /**
         * Return true if the provided HTML Element can be used to build a
         * Draftjs-compatible link.
         */ var isValidAnchor = function isValidAnchor(node) {
          if (!isHTMLAnchorElement(node)) return false;
          var anchorNode = node;
          if (
            !anchorNode.href ||
            (anchorNode.protocol !== "http:" &&
              anchorNode.protocol !== "https:" &&
              anchorNode.protocol !== "mailto:" &&
              anchorNode.protocol !== "tel:")
          )
            return false;
          try {
            // Just checking whether we can actually create a URI
            var _ = new URI(anchorNode.href);
            return true; // We need our catch statements to have arguments, else
            // UglifyJS (which we use for our OSS builds) will crash.
            // eslint-disable-next-line fb-www/no-unused-catch-bindings
          } catch (_) {
            return false;
          }
        };
        /**
         * Return true if the provided HTML Element can be used to build a
         * Draftjs-compatible image.
         */ var isValidImage = function isValidImage(node) {
          if (!isHTMLImageElement(node)) return false;
          var imageNode = node;
          return !!(
            imageNode.attributes.getNamedItem("src") &&
            imageNode.attributes.getNamedItem("src").value
          );
        };
        /**
         * Try to guess the inline style of an HTML element based on its css
         * styles (font-weight, font-style and text-decoration).
         */ var styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {
          if (!isHTMLElement(node)) return style;
          var htmlElement = node;
          var fontWeight = htmlElement.style.fontWeight;
          var fontStyle = htmlElement.style.fontStyle;
          var textDecoration = htmlElement.style.textDecoration;
          return style.withMutations(function (style) {
            if (boldValues.indexOf(fontWeight) >= 0) style.add("BOLD");
            else if (notBoldValues.indexOf(fontWeight) >= 0) style.remove("BOLD");
            if (fontStyle === "italic") style.add("ITALIC");
            else if (fontStyle === "normal") style.remove("ITALIC");
            if (textDecoration === "underline") style.add("UNDERLINE");
            if (textDecoration === "line-through") style.add("STRIKETHROUGH");
            if (textDecoration === "none") {
              style.remove("UNDERLINE");
              style.remove("STRIKETHROUGH");
            }
          });
        };
        /**
         * Determine if a nodeName is a list type, 'ul' or 'ol'
         */ var isListNode = function isListNode(nodeName) {
          return nodeName === "ul" || nodeName === "ol";
        };
        /**
         *  ContentBlockConfig is a mutable data structure that holds all
         *  the information required to build a ContentBlock and an array of
         *  all the child nodes (childConfigs).
         *  It is being used a temporary data structure by the
         *  ContentBlocksBuilder class.
         */ /**
         * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map
         * out of one (or several) HTMLElement(s).
         *
         * The algorithm has two passes: first it builds a tree of ContentBlockConfigs
         * by walking through the HTML nodes and their children, then it walks the
         * ContentBlockConfigs tree to compute parents/siblings and create
         * the actual ContentBlocks.
         *
         * Typical usage is:
         *     new ContentBlocksBuilder()
         *        .addDOMNode(someHTMLNode)
         *        .addDOMNode(someOtherHTMLNode)
         *       .getContentBlocks();
         *
         */ var ContentBlocksBuilder = /*#__PURE__*/ (function () {
          // Most of the method in the class depend on the state of the content builder
          // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may
          // be confusing at first, it made the code simpler than the alternative which
          // is to pass those values around in every call.
          // The following attributes are used to accumulate text and styles
          // as we are walking the HTML node tree.
          // Describes the future ContentState as a tree of content blocks
          // The content blocks generated from the blockConfigs
          // Entity map use to store links and images found in the HTML nodes
          // Map HTML tags to draftjs block types and disambiguation function
          function ContentBlocksBuilder(blockTypeMap, disambiguate) {
            _defineProperty(this, "characterList", List());
            _defineProperty(this, "currentBlockType", "unstyled");
            _defineProperty(this, "currentDepth", 0);
            _defineProperty(this, "currentEntity", null);
            _defineProperty(this, "currentText", "");
            _defineProperty(this, "wrapper", null);
            _defineProperty(this, "blockConfigs", []);
            _defineProperty(this, "contentBlocks", []);
            _defineProperty(this, "entityMap", DraftEntity);
            _defineProperty(this, "blockTypeMap", void 0);
            _defineProperty(this, "disambiguate", void 0);
            this.clear();
            this.blockTypeMap = blockTypeMap;
            this.disambiguate = disambiguate;
          }
          /**
           * Clear the internal state of the ContentBlocksBuilder
           */ var _proto = ContentBlocksBuilder.prototype;
          _proto.clear = function clear() {
            this.characterList = List();
            this.blockConfigs = [];
            this.currentBlockType = "unstyled";
            this.currentDepth = 0;
            this.currentEntity = null;
            this.currentText = "";
            this.entityMap = DraftEntity;
            this.wrapper = null;
            this.contentBlocks = [];
          }
          /**
           * Add an HTMLElement to the ContentBlocksBuilder
           */;
          _proto.addDOMNode = function addDOMNode(node) {
            var _this$blockConfigs;
            this.contentBlocks = [];
            this.currentDepth = 0; // Converts the HTML node to block config
            (_this$blockConfigs = this.blockConfigs).push.apply(
              _this$blockConfigs,
              this._toBlockConfigs([node], OrderedSet()),
            ); // There might be some left over text in the builder's
            // internal state, if so make a ContentBlock out of it.
            this._trimCurrentText();
            if (this.currentText !== "") this.blockConfigs.push(this._makeBlockConfig());
            // for chaining
            return this;
          }
          /**
           * Return the ContentBlocks and the EntityMap that corresponds
           * to the previously added HTML nodes.
           */;
          _proto.getContentBlocks = function getContentBlocks() {
            if (this.contentBlocks.length === 0) {
              if (experimentalTreeDataSupport) this._toContentBlocks(this.blockConfigs);
              else this._toFlatContentBlocks(this.blockConfigs);
            }
            return {
              contentBlocks: this.contentBlocks,
              entityMap: this.entityMap,
            };
          }; // ***********************************WARNING******************************
          /**
           * Generate a new ContentBlockConfig out of the current internal state
           * of the builder, then clears the internal state.
           */
          _proto._makeBlockConfig = function _makeBlockConfig() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var key = config.key || generateRandomKey();
            var block = _objectSpread(
              {
                key: key,
                type: this.currentBlockType,
                text: this.currentText,
                characterList: this.characterList,
                depth: this.currentDepth,
                parent: null,
                children: List(),
                prevSibling: null,
                nextSibling: null,
                childConfigs: [],
              },
              config,
            );
            this.characterList = List();
            this.currentBlockType = "unstyled";
            this.currentText = "";
            return block;
          }
          /**
           * Converts an array of HTML elements to a multi-root tree of content
           * block configs. Some text content may be left in the builders internal
           * state to enable chaining sucessive calls.
           */;
          _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {
            var blockConfigs = [];
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var nodeName = node.nodeName.toLowerCase();
              if (nodeName === "body" || isListNode(nodeName)) {
                // body, ol and ul are 'block' type nodes so create a block config
                // with the text accumulated so far (if any)
                this._trimCurrentText();
                if (this.currentText !== "") blockConfigs.push(this._makeBlockConfig());
                // body, ol and ul nodes are ignored, but their children are inlined in
                // the parent block config.
                var wasCurrentDepth = this.currentDepth;
                var wasWrapper = this.wrapper;
                if (isListNode(nodeName)) {
                  this.wrapper = nodeName;
                  if (isListNode(wasWrapper)) this.currentDepth++;
                }
                blockConfigs.push.apply(
                  blockConfigs,
                  this._toBlockConfigs(Array.from(node.childNodes), style),
                );
                this.currentDepth = wasCurrentDepth;
                this.wrapper = wasWrapper;
                continue;
              }
              var blockType = this.blockTypeMap.get(nodeName);
              if (blockType !== undefined) {
                // 'block' type node means we need to create a block config
                // with the text accumulated so far (if any)
                this._trimCurrentText();
                if (this.currentText !== "") blockConfigs.push(this._makeBlockConfig());
                var _wasCurrentDepth = this.currentDepth;
                var _wasWrapper = this.wrapper;
                this.wrapper = nodeName === "pre" ? "pre" : this.wrapper;
                if (typeof blockType !== "string")
                  blockType =
                    this.disambiguate(nodeName, this.wrapper) || blockType[0] || "unstyled";
                if (
                  !experimentalTreeDataSupport &&
                  isHTMLElement(node) &&
                  (blockType === "unordered-list-item" || blockType === "ordered-list-item")
                ) {
                  var htmlElement = node;
                  this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);
                }
                var key = generateRandomKey();
                var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);
                this._trimCurrentText();
                blockConfigs.push(
                  this._makeBlockConfig({
                    key: key,
                    childConfigs: childConfigs,
                    type: blockType,
                  }),
                );
                this.currentDepth = _wasCurrentDepth;
                this.wrapper = _wasWrapper;
                continue;
              }
              if (nodeName === "#text") {
                this._addTextNode(node, style);
                continue;
              }
              if (nodeName === "br") {
                this._addBreakNode(node, style);
                continue;
              }
              if (isValidImage(node)) {
                this._addImgNode(node, style);
                continue;
              }
              if (isValidAnchor(node)) {
                this._addAnchorNode(node, blockConfigs, style);
                continue;
              }
              var newStyle = style;
              if (HTMLTagToRawInlineStyleMap.has(nodeName))
                newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));
              newStyle = styleFromNodeAttributes(node, newStyle);
              var inlineStyle = detectInlineStyle(node);
              if (inlineStyle != null) newStyle = newStyle.add(inlineStyle);
              blockConfigs.push.apply(
                blockConfigs,
                this._toBlockConfigs(Array.from(node.childNodes), newStyle),
              );
            }
            return blockConfigs;
          }
          /**
           * Append a string of text to the internal buffer.
           */;
          _proto._appendText = function _appendText(text, style) {
            var _this$characterList;
            this.currentText += text;
            var characterMetadata = CharacterMetadata.create({
              style: style,
              entity: this.currentEntity,
            });
            this.characterList = (_this$characterList = this.characterList).push.apply(
              _this$characterList,
              Array(text.length).fill(characterMetadata),
            );
          }
          /**
           * Trim the text in the internal buffer.
           */;
          _proto._trimCurrentText = function _trimCurrentText() {
            var l = this.currentText.length;
            var begin = l - this.currentText.trimLeft().length;
            var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.
            var entity = this.characterList.findEntry(function (characterMetadata) {
              return characterMetadata.getEntity() !== null;
            });
            begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;
            entity = this.characterList.reverse().findEntry(function (characterMetadata) {
              return characterMetadata.getEntity() !== null;
            });
            end = entity !== undefined ? Math.max(end, l - entity[0]) : end;
            if (begin > end) {
              this.currentText = "";
              this.characterList = List();
            } else {
              this.currentText = this.currentText.slice(begin, end);
              this.characterList = this.characterList.slice(begin, end);
            }
          }
          /**
           * Add the content of an HTML text node to the internal state
           */;
          _proto._addTextNode = function _addTextNode(node, style) {
            var text = node.textContent;
            var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,
            // normalize to a single space.
            if (trimmedText === "" && this.wrapper !== "pre") text = " ";
            if (this.wrapper !== "pre") {
              // Trim leading line feed, which is invisible in HTML
              text = text.replace(REGEX_LEADING_LF, ""); // Can't use empty string because MSWord
              text = text.replace(REGEX_LF, SPACE);
            }
            this._appendText(text, style);
          };
          _proto._addBreakNode = function _addBreakNode(node, style) {
            if (!isHTMLBRElement(node)) return;
            this._appendText("\n", style);
          }
          /**
           * Add the content of an HTML img node to the internal state
           */;
          _proto._addImgNode = function _addImgNode(node, style) {
            if (!isHTMLImageElement(node)) return;
            var image = node;
            var entityConfig = {};
            imgAttr.forEach(function (attr) {
              var imageAttribute = image.getAttribute(attr);
              if (imageAttribute) entityConfig[attr] = imageAttribute;
            }); // TODO: T15530363 update this when we remove DraftEntity entirely
            this.currentEntity = this.entityMap.__create("IMAGE", "IMMUTABLE", entityConfig); // The child text node cannot just have a space or return as content (since
            // we strip those out), unless the image is for presentation only.
            // See https://github.com/facebook/draft-js/issues/231 for some context.
            if (gkx("draftjs_fix_paste_for_img")) {
              if (image.getAttribute("role") !== "presentation")
                this._appendText("\uD83D\uDCF7", style);
            } else this._appendText("\uD83D\uDCF7", style);
            this.currentEntity = null;
          }
          /**
           * Add the content of an HTML 'a' node to the internal state. Child nodes
           * (if any) are converted to Block Configs and appended to the provided
           * blockConfig array.
           */;
          _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {
            // The check has already been made by isValidAnchor but
            // we have to do it again to keep flow happy.
            if (!isHTMLAnchorElement(node)) return;
            var anchor = node;
            var entityConfig = {};
            anchorAttr.forEach(function (attr) {
              var anchorAttribute = anchor.getAttribute(attr);
              if (anchorAttribute) entityConfig[attr] = anchorAttribute;
            });
            entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely
            this.currentEntity = this.entityMap.__create("LINK", "MUTABLE", entityConfig || {});
            blockConfigs.push.apply(
              blockConfigs,
              this._toBlockConfigs(Array.from(node.childNodes), style),
            );
            this.currentEntity = null;
          }
          /**
           * Walk the BlockConfig tree, compute parent/children/siblings,
           * and generate the corresponding ContentBlockNode
           */;
          _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {
            var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var l = blockConfigs.length - 1;
            for (var i = 0; i <= l; i++) {
              var config = blockConfigs[i];
              config.parent = parent;
              config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;
              config.nextSibling = i < l ? blockConfigs[i + 1].key : null;
              config.children = List(
                config.childConfigs.map(function (child) {
                  return child.key;
                }),
              );
              this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));
              this._toContentBlocks(config.childConfigs, config.key);
            }
          }
          /**
           * Remove 'useless' container nodes from the block config hierarchy, by
           * replacing them with their children.
           */;
          _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(
            blockConfigs,
          ) {
            var _this = this;
            var hoisted = List(blockConfigs).flatMap(function (blockConfig) {
              // Don't mess with useful blocks
              if (blockConfig.type !== "unstyled" || blockConfig.text !== "") return [blockConfig];
              return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);
            });
            return hoisted;
          }; // ***********************************************************************
          /**
           * Same as _toContentBlocks but replaces nested blocks by their
           * text content.
           */
          _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {
            var _this2 = this;
            var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);
            cleanConfigs.forEach(function (config) {
              var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs),
                text = _this2$_extractTextFr.text,
                characterList = _this2$_extractTextFr.characterList;
              _this2.contentBlocks.push(
                new ContentBlock(
                  _objectSpread({}, config, {
                    text: config.text + text,
                    characterList: config.characterList.concat(characterList),
                  }),
                ),
              );
            });
          }
          /**
           * Extract the text and the associated inline styles form an
           * array of content block configs.
           */;
          _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(
            blockConfigs,
          ) {
            var l = blockConfigs.length - 1;
            var text = "";
            var characterList = List();
            for (var i = 0; i <= l; i++) {
              var config = blockConfigs[i];
              text += config.text;
              characterList = characterList.concat(config.characterList);
              if (text !== "" && config.type !== "unstyled") {
                text += "\n";
                characterList = characterList.push(characterList.last());
              }
              var children = this._extractTextFromBlockConfigs(config.childConfigs);
              text += children.text;
              characterList = characterList.concat(children.characterList);
            }
            return {
              text: text,
              characterList: characterList,
            };
          };
          return ContentBlocksBuilder;
        })();
        /**
         * Converts an HTML string to an array of ContentBlocks and an EntityMap
         * suitable to initialize the internal state of a Draftjs component.
         */ var convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {
          var DOMBuilder =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;
          var blockRenderMap =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : DefaultDraftBlockRenderMap;
          // Be ABSOLUTELY SURE that the dom builder you pass here won't execute
          // arbitrary code in whatever environment you're running this in. For an
          // example of how we try to do this in-browser, see getSafeBodyFromHTML.
          // Remove funky characters from the HTML string
          html = html
            .trim()
            .replace(REGEX_CR, "")
            .replace(REGEX_NBSP, SPACE)
            .replace(REGEX_CARRIAGE, "")
            .replace(REGEX_ZWS, ""); // Build a DOM tree out of the HTML string
          var safeBody = DOMBuilder(html);
          if (!safeBody) return null;
          // Build a BlockTypeMap out of the BlockRenderMap
          var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap
          // uses multiple block types for the same html tag.
          var disambiguate = function disambiguate(tag, wrapper) {
            if (tag === "li") return wrapper === "ol" ? "ordered-list-item" : "unordered-list-item";
            return null;
          };
          return new ContentBlocksBuilder(blockTypeMap, disambiguate)
            .addDOMNode(safeBody)
            .getContentBlocks();
        };
        module.exports = convertFromHTMLToContentBlocks;
      },
      {
        "4410afe0be18838c": "5sTZK",
        c751a8094f569514: "hCjL2",
        "8160653ca46dd0f1": "ketXe",
        "23c6dbf9c6a40e20": "67bzr",
        "908485a4941845ae": "7ZjY7",
        "2b39dd5ee04c1e9b": "siHow",
        fc6038f7f3ad7b7d: "zRtOM",
        a52d64a13759fd6c: "fgtnr",
        fa5e54c95a61c5a6: "77Sxy",
        "6c221ad5e752bdee": "l5VFU",
        "7e57d887476ae235": "lhHDL",
        bf2a55bbb2c88b59: "f0PBq",
        ca2739cc0f9dbab9: "7loVo",
        b56104914c3983a2: "1UoK0",
        "831af99a6eae2017": "3Vhhk",
      },
    ],
    siHow: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         *
         */ "use strict";
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var URI = /*#__PURE__*/ (function () {
          function URI(uri) {
            _defineProperty(this, "_uri", void 0);
            this._uri = uri;
          }
          var _proto = URI.prototype;
          _proto.toString = function toString() {
            return this._uri;
          };
          return URI;
        })();
        module.exports = URI;
      },
      {},
    ],
    "77Sxy": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UserAgent = require("4c27bac6b569e250");
        var invariant = require("e78f5345073edaa8");
        var isOldIE = UserAgent.isBrowser("IE <= 9"); // Provides a dom node that will not execute scripts
        // https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument
        // https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM
        function getSafeBodyFromHTML(html) {
          var doc;
          var root = null; // Provides a safe context
          if (!isOldIE && document.implementation && document.implementation.createHTMLDocument) {
            doc = document.implementation.createHTMLDocument("foo");
            !doc.documentElement && invariant(false, "Missing doc.documentElement");
            doc.documentElement.innerHTML = html;
            root = doc.getElementsByTagName("body")[0];
          }
          return root;
        }
        module.exports = getSafeBodyFromHTML;
      },
      { "4c27bac6b569e250": "c2opx", e78f5345073edaa8: "d6MgO" },
    ],
    f0PBq: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var isElement = require("11b5b3743a3b02fb");
        function isHTMLAnchorElement(node) {
          if (!node || !node.ownerDocument) return false;
          return isElement(node) && node.nodeName === "A";
        }
        module.exports = isHTMLAnchorElement;
      },
      { "11b5b3743a3b02fb": "wCJfe" },
    ],
    "3Vhhk": [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var isElement = require("a68c7ed2754e4de1");
        function isHTMLImageElement(node) {
          if (!node || !node.ownerDocument) return false;
          return isElement(node) && node.nodeName === "IMG";
        }
        module.exports = isHTMLImageElement;
      },
      { a68c7ed2754e4de1: "wCJfe" },
    ],
    e1uYw: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftModifier = require("972ba2b52a699994");
        var EditorState = require("26b01a7b32255b96");
        var adjustBlockDepthForContentState = require("f0f96937a9907a32");
        var nullthrows = require("c95244e623c9ee38");
        var RichTextEditorUtil = {
          currentBlockContainsLink: function currentBlockContainsLink(editorState) {
            var selection = editorState.getSelection();
            var contentState = editorState.getCurrentContent();
            var entityMap = contentState.getEntityMap();
            return contentState
              .getBlockForKey(selection.getAnchorKey())
              .getCharacterList()
              .slice(selection.getStartOffset(), selection.getEndOffset())
              .some(function (v) {
                var entity = v.getEntity();
                return !!entity && entityMap.__get(entity).getType() === "LINK";
              });
          },
          getCurrentBlockType: function getCurrentBlockType(editorState) {
            var selection = editorState.getSelection();
            return editorState
              .getCurrentContent()
              .getBlockForKey(selection.getStartKey())
              .getType();
          },
          getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {
            return {
              url: uri.toString(),
            };
          },
          handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {
            switch (command) {
              case "bold":
                return RichTextEditorUtil.toggleInlineStyle(editorState, "BOLD");
              case "italic":
                return RichTextEditorUtil.toggleInlineStyle(editorState, "ITALIC");
              case "underline":
                return RichTextEditorUtil.toggleInlineStyle(editorState, "UNDERLINE");
              case "code":
                return RichTextEditorUtil.toggleCode(editorState);
              case "backspace":
              case "backspace-word":
              case "backspace-to-start-of-line":
                return RichTextEditorUtil.onBackspace(editorState);
              case "delete":
              case "delete-word":
              case "delete-to-end-of-block":
                return RichTextEditorUtil.onDelete(editorState);
              default:
                // they may have custom editor commands; ignore those
                return null;
            }
          },
          insertSoftNewline: function insertSoftNewline(editorState) {
            var contentState = DraftModifier.insertText(
              editorState.getCurrentContent(),
              editorState.getSelection(),
              "\n",
              editorState.getCurrentInlineStyle(),
              null,
            );
            var newEditorState = EditorState.push(editorState, contentState, "insert-characters");
            return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());
          },
          /**
           * For collapsed selections at the start of styled blocks, backspace should
           * just remove the existing style.
           */ onBackspace: function onBackspace(editorState) {
            var selection = editorState.getSelection();
            if (
              !selection.isCollapsed() ||
              selection.getAnchorOffset() ||
              selection.getFocusOffset()
            )
              return null;
            // First, try to remove a preceding atomic block.
            var content = editorState.getCurrentContent();
            var startKey = selection.getStartKey();
            var blockBefore = content.getBlockBefore(startKey);
            if (blockBefore && blockBefore.getType() === "atomic") {
              var blockMap = content.getBlockMap()["delete"](blockBefore.getKey());
              var withoutAtomicBlock = content.merge({
                blockMap: blockMap,
                selectionAfter: selection,
              });
              if (withoutAtomicBlock !== content)
                return EditorState.push(editorState, withoutAtomicBlock, "remove-range");
            } // If that doesn't succeed, try to remove the current block style.
            var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);
            if (withoutBlockStyle)
              return EditorState.push(editorState, withoutBlockStyle, "change-block-type");
            return null;
          },
          onDelete: function onDelete(editorState) {
            var selection = editorState.getSelection();
            if (!selection.isCollapsed()) return null;
            var content = editorState.getCurrentContent();
            var startKey = selection.getStartKey();
            var block = content.getBlockForKey(startKey);
            var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.
            if (selection.getStartOffset() < length) return null;
            var blockAfter = content.getBlockAfter(startKey);
            if (!blockAfter || blockAfter.getType() !== "atomic") return null;
            var atomicBlockTarget = selection.merge({
              focusKey: blockAfter.getKey(),
              focusOffset: blockAfter.getLength(),
            });
            var withoutAtomicBlock = DraftModifier.removeRange(
              content,
              atomicBlockTarget,
              "forward",
            );
            if (withoutAtomicBlock !== content)
              return EditorState.push(editorState, withoutAtomicBlock, "remove-range");
            return null;
          },
          onTab: function onTab(event, editorState, maxDepth) {
            var selection = editorState.getSelection();
            var key = selection.getAnchorKey();
            if (key !== selection.getFocusKey()) return editorState;
            var content = editorState.getCurrentContent();
            var block = content.getBlockForKey(key);
            var type = block.getType();
            if (type !== "unordered-list-item" && type !== "ordered-list-item") return editorState;
            event.preventDefault();
            var depth = block.getDepth();
            if (!event.shiftKey && depth === maxDepth) return editorState;
            var withAdjustment = adjustBlockDepthForContentState(
              content,
              selection,
              event.shiftKey ? -1 : 1,
              maxDepth,
            );
            return EditorState.push(editorState, withAdjustment, "adjust-depth");
          },
          toggleBlockType: function toggleBlockType(editorState, blockType) {
            var selection = editorState.getSelection();
            var startKey = selection.getStartKey();
            var endKey = selection.getEndKey();
            var content = editorState.getCurrentContent();
            var target = selection; // Triple-click can lead to a selection that includes offset 0 of the
            // following block. The `SelectionState` for this case is accurate, but
            // we should avoid toggling block type for the trailing block because it
            // is a confusing interaction.
            if (startKey !== endKey && selection.getEndOffset() === 0) {
              var blockBefore = nullthrows(content.getBlockBefore(endKey));
              endKey = blockBefore.getKey();
              target = target.merge({
                anchorKey: startKey,
                anchorOffset: selection.getStartOffset(),
                focusKey: endKey,
                focusOffset: blockBefore.getLength(),
                isBackward: false,
              });
            }
            var hasAtomicBlock = content
              .getBlockMap()
              .skipWhile(function (_, k) {
                return k !== startKey;
              })
              .reverse()
              .skipWhile(function (_, k) {
                return k !== endKey;
              })
              .some(function (v) {
                return v.getType() === "atomic";
              });
            if (hasAtomicBlock) return editorState;
            var typeToSet =
              content.getBlockForKey(startKey).getType() === blockType ? "unstyled" : blockType;
            return EditorState.push(
              editorState,
              DraftModifier.setBlockType(content, target, typeToSet),
              "change-block-type",
            );
          },
          toggleCode: function toggleCode(editorState) {
            var selection = editorState.getSelection();
            var anchorKey = selection.getAnchorKey();
            var focusKey = selection.getFocusKey();
            if (selection.isCollapsed() || anchorKey !== focusKey)
              return RichTextEditorUtil.toggleBlockType(editorState, "code-block");
            return RichTextEditorUtil.toggleInlineStyle(editorState, "CODE");
          },
          /**
           * Toggle the specified inline style for the selection. If the
           * user's selection is collapsed, apply or remove the style for the
           * internal state. If it is not collapsed, apply the change directly
           * to the document state.
           */ toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {
            var selection = editorState.getSelection();
            var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and
            // set the result as the new inline style override. This will then be
            // used as the inline style for the next character to be inserted.
            if (selection.isCollapsed())
              return EditorState.setInlineStyleOverride(
                editorState,
                currentStyle.has(inlineStyle)
                  ? currentStyle.remove(inlineStyle)
                  : currentStyle.add(inlineStyle),
              );
            // If characters are selected, immediately apply or remove the
            // inline style on the document state itself.
            var content = editorState.getCurrentContent();
            var newContent; // If the style is already present for the selection range, remove it.
            // Otherwise, apply it.
            if (currentStyle.has(inlineStyle))
              newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);
            else newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);
            return EditorState.push(editorState, newContent, "change-inline-style");
          },
          toggleLink: function toggleLink(editorState, targetSelection, entityKey) {
            var withoutLink = DraftModifier.applyEntity(
              editorState.getCurrentContent(),
              targetSelection,
              entityKey,
            );
            return EditorState.push(editorState, withoutLink, "apply-entity");
          },
          /**
           * When a collapsed cursor is at the start of a styled block, changes block
           * type to 'unstyled'. Returns null if selection does not meet that criteria.
           */ tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {
            var selection = editorState.getSelection();
            var offset = selection.getAnchorOffset();
            if (selection.isCollapsed() && offset === 0) {
              var key = selection.getAnchorKey();
              var content = editorState.getCurrentContent();
              var block = content.getBlockForKey(key);
              var type = block.getType();
              var blockBefore = content.getBlockBefore(key);
              if (
                type === "code-block" &&
                blockBefore &&
                blockBefore.getType() === "code-block" &&
                blockBefore.getLength() !== 0
              )
                return null;
              if (type !== "unstyled")
                return DraftModifier.setBlockType(content, selection, "unstyled");
            }
            return null;
          },
        };
        module.exports = RichTextEditorUtil;
      },
      {
        "972ba2b52a699994": "aeLN8",
        "26b01a7b32255b96": "2EY4X",
        f0f96937a9907a32: "h2ctf",
        c95244e623c9ee38: "fwtV9",
      },
    ],
    h2ctf: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function adjustBlockDepthForContentState(
          contentState,
          selectionState,
          adjustment,
          maxDepth,
        ) {
          var startKey = selectionState.getStartKey();
          var endKey = selectionState.getEndKey();
          var blockMap = contentState.getBlockMap();
          var blocks = blockMap
            .toSeq()
            .skipUntil(function (_, k) {
              return k === startKey;
            })
            .takeUntil(function (_, k) {
              return k === endKey;
            })
            .concat([[endKey, blockMap.get(endKey)]])
            .map(function (block) {
              var depth = block.getDepth() + adjustment;
              depth = Math.max(0, Math.min(depth, maxDepth));
              return block.set("depth", depth);
            });
          blockMap = blockMap.merge(blocks);
          return contentState.merge({
            blockMap: blockMap,
            selectionBefore: selectionState,
            selectionAfter: selectionState,
          });
        }
        module.exports = adjustBlockDepthForContentState;
      },
      {},
    ],
    bOqYA: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var NEWLINE_REGEX = /\r\n?|\n/g;
        function splitTextIntoTextBlocks(text) {
          return text.split(NEWLINE_REGEX);
        }
        module.exports = splitTextIntoTextBlocks;
      },
      {},
    ],
    dgUmi: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ var ReactDOMComet = require("dba2c585f5e54949");
        var flushControlled = ReactDOMComet.unstable_flushControlled;
        module.exports = flushControlled;
      },
      { dba2c585f5e54949: "j6uA9" },
    ],
    h4auX: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var React = require("fdc63de99823463b");
        var cx = require("c328934163a6478");
        /**
         * This component is responsible for rendering placeholder text for the
         * `DraftEditor` component.
         *
         * Override placeholder style via CSS.
         */ var DraftEditorPlaceholder = /*#__PURE__*/ (function (_React$Component) {
          _inheritsLoose(DraftEditorPlaceholder, _React$Component);
          function DraftEditorPlaceholder() {
            return _React$Component.apply(this, arguments) || this;
          }
          var _proto = DraftEditorPlaceholder.prototype;
          _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
            return (
              this.props.text !== nextProps.text ||
              this.props.editorState.getSelection().getHasFocus() !==
                nextProps.editorState.getSelection().getHasFocus()
            );
          };
          _proto.render = function render() {
            var hasFocus = this.props.editorState.getSelection().getHasFocus();
            var className = cx({
              "public/DraftEditorPlaceholder/root": true,
              "public/DraftEditorPlaceholder/hasFocus": hasFocus,
            });
            var contentStyle = {
              whiteSpace: "pre-wrap",
            };
            return React.createElement(
              "div",
              {
                className: className,
              },
              React.createElement(
                "div",
                {
                  className: cx("public/DraftEditorPlaceholder/inner"),
                  id: this.props.accessibilityID,
                  style: contentStyle,
                },
                this.props.text,
              ),
            );
          };
          return DraftEditorPlaceholder;
        })(React.Component);
        module.exports = DraftEditorPlaceholder;
      },
      { fdc63de99823463b: "21dqq", c328934163a6478: "zRtOM" },
    ],
    gSyKU: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var KeyBindingUtil = require("82cd92926bb7a3ff");
        var Keys = require("bcdbc34d67af3742");
        var UserAgent = require("8c8465fd8d62142");
        var isOSX = UserAgent.isPlatform("Mac OS X"); // Firefox on OSX had a bug resulting in navigation instead of cursor movement.
        // This bug was fixed in Firefox 29. Feature detection is virtually impossible
        // so we just check the version number. See #342765.
        var shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser("Firefox < 29");
        var hasCommandModifier = KeyBindingUtil.hasCommandModifier,
          isCtrlKeyCommand = KeyBindingUtil.isCtrlKeyCommand;
        function shouldRemoveWord(e) {
          return (isOSX && e.altKey) || isCtrlKeyCommand(e);
        }
        /**
         * Get the appropriate undo/redo command for a Z key command.
         */ function getZCommand(e) {
          if (!hasCommandModifier(e)) return null;
          return e.shiftKey ? "redo" : "undo";
        }
        function getDeleteCommand(e) {
          // Allow default "cut" behavior for PCs on Shift + Delete.
          if (!isOSX && e.shiftKey) return null;
          return shouldRemoveWord(e) ? "delete-word" : "delete";
        }
        function getBackspaceCommand(e) {
          if (hasCommandModifier(e) && isOSX) return "backspace-to-start-of-line";
          return shouldRemoveWord(e) ? "backspace-word" : "backspace";
        }
        /**
         * Retrieve a bound key command for the given event.
         */ function getDefaultKeyBinding(e) {
          switch (e.keyCode) {
            case 66:
              // B
              return hasCommandModifier(e) ? "bold" : null;
            case 68:
              // D
              return isCtrlKeyCommand(e) ? "delete" : null;
            case 72:
              // H
              return isCtrlKeyCommand(e) ? "backspace" : null;
            case 73:
              // I
              return hasCommandModifier(e) ? "italic" : null;
            case 74:
              // J
              return hasCommandModifier(e) ? "code" : null;
            case 75:
              // K
              return isOSX && isCtrlKeyCommand(e) ? "secondary-cut" : null;
            case 77:
              // M
              return isCtrlKeyCommand(e) ? "split-block" : null;
            case 79:
              // O
              return isCtrlKeyCommand(e) ? "split-block" : null;
            case 84:
              // T
              return isOSX && isCtrlKeyCommand(e) ? "transpose-characters" : null;
            case 85:
              // U
              return hasCommandModifier(e) ? "underline" : null;
            case 87:
              // W
              return isOSX && isCtrlKeyCommand(e) ? "backspace-word" : null;
            case 89:
              // Y
              if (isCtrlKeyCommand(e)) return isOSX ? "secondary-paste" : "redo";
              return null;
            case 90:
              // Z
              return getZCommand(e) || null;
            case Keys.RETURN:
              return "split-block";
            case Keys.DELETE:
              return getDeleteCommand(e);
            case Keys.BACKSPACE:
              return getBackspaceCommand(e);
            // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.
            case Keys.LEFT:
              return shouldFixFirefoxMovement && hasCommandModifier(e)
                ? "move-selection-to-start-of-block"
                : null;
            case Keys.RIGHT:
              return shouldFixFirefoxMovement && hasCommandModifier(e)
                ? "move-selection-to-end-of-block"
                : null;
            default:
              return null;
          }
        }
        module.exports = getDefaultKeyBinding;
      },
      { "82cd92926bb7a3ff": "68S9C", bcdbc34d67af3742: "aZASa", "8c8465fd8d62142": "c2opx" },
    ],
    eIya8: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
      },
      {},
    ],
    "6HZuL": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var ContentBlock = require("6dc36aa5e831bbc2");
        var ContentBlockNode = require("ec5399aec2ffc0af");
        var DraftStringKey = require("a814fa8e810ae19a");
        var encodeEntityRanges = require("29eeeb2817125f4b");
        var encodeInlineStyleRanges = require("506d55b3ce7b2b5e");
        var invariant = require("7beb226e286c07d1");
        var createRawBlock = function createRawBlock(block, entityStorageMap) {
          return {
            key: block.getKey(),
            text: block.getText(),
            type: block.getType(),
            depth: block.getDepth(),
            inlineStyleRanges: encodeInlineStyleRanges(block),
            entityRanges: encodeEntityRanges(block, entityStorageMap),
            data: block.getData().toObject(),
          };
        };
        var insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {
          if (block instanceof ContentBlock) {
            rawBlocks.push(createRawBlock(block, entityMap));
            return;
          }
          !(block instanceof ContentBlockNode) && invariant(false, "block is not a BlockNode");
          var parentKey = block.getParentKey();
          var rawBlock = (blockCacheRef[block.getKey()] = _objectSpread(
            {},
            createRawBlock(block, entityMap),
            {
              children: [],
            },
          ));
          if (parentKey) {
            blockCacheRef[parentKey].children.push(rawBlock);
            return;
          }
          rawBlocks.push(rawBlock);
        };
        var encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {
          var entityMap = rawState.entityMap;
          var rawBlocks = [];
          var blockCacheRef = {};
          var entityCacheRef = {};
          var entityStorageKey = 0;
          contentState.getBlockMap().forEach(function (block) {
            block.findEntityRanges(
              function (character) {
                return character.getEntity() !== null;
              },
              function (start) {
                var entityKey = block.getEntityAt(start); // Stringify to maintain order of otherwise numeric keys.
                var stringifiedEntityKey = DraftStringKey.stringify(entityKey); // This makes this function resilient to two entities
                // erroneously having the same key
                if (entityCacheRef[stringifiedEntityKey]) return;
                entityCacheRef[stringifiedEntityKey] = entityKey; // we need the `any` casting here since this is a temporary state
                // where we will later on flip the entity map and populate it with
                // real entity, at this stage we just need to map back the entity
                // key used by the BlockNode
                entityMap[stringifiedEntityKey] = "".concat(entityStorageKey);
                entityStorageKey++;
              },
            );
            insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);
          });
          return {
            blocks: rawBlocks,
            entityMap: entityMap,
          };
        }; // Flip storage map so that our storage keys map to global
        // DraftEntity keys.
        var encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {
          var blocks = rawState.blocks,
            entityMap = rawState.entityMap;
          var rawEntityMap = {};
          Object.keys(entityMap).forEach(function (key, index) {
            var entity = contentState.getEntity(DraftStringKey.unstringify(key));
            rawEntityMap[index] = {
              type: entity.getType(),
              mutability: entity.getMutability(),
              data: entity.getData(),
            };
          });
          return {
            blocks: blocks,
            entityMap: rawEntityMap,
          };
        };
        var convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {
          var rawDraftContentState = {
            entityMap: {},
            blocks: [],
          }; // add blocks
          rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState); // add entities
          rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);
          return rawDraftContentState;
        };
        module.exports = convertFromDraftStateToRaw;
      },
      {
        "6dc36aa5e831bbc2": "hCjL2",
        ec5399aec2ffc0af: "ketXe",
        a814fa8e810ae19a: "lK0PC",
        "29eeeb2817125f4b": "bz1C7",
        "506d55b3ce7b2b5e": "8H4Ud",
        "7beb226e286c07d1": "d6MgO",
      },
    ],
    lK0PC: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftStringKey = {
          stringify: function stringify(key) {
            return "_" + String(key);
          },
          unstringify: function unstringify(key) {
            return key.slice(1);
          },
        };
        module.exports = DraftStringKey;
      },
      {},
    ],
    bz1C7: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var DraftStringKey = require("2221858353aa3a83");
        var UnicodeUtils = require("f8a4a45a98b3cc37");
        var strlen = UnicodeUtils.strlen;
        /**
         * Convert to UTF-8 character counts for storage.
         */ function encodeEntityRanges(block, storageMap) {
          var encoded = [];
          block.findEntityRanges(
            function (character) {
              return !!character.getEntity();
            },
            function (/*number*/ start, /*number*/ end) {
              var text = block.getText();
              var key = block.getEntityAt(start);
              encoded.push({
                offset: strlen(text.slice(0, start)),
                length: strlen(text.slice(start, end)),
                // Encode the key as a number for range storage.
                key: Number(storageMap[DraftStringKey.stringify(key)]),
              });
            },
          );
          return encoded;
        }
        module.exports = encodeEntityRanges;
      },
      { "2221858353aa3a83": "lK0PC", f8a4a45a98b3cc37: "8JHYo" },
    ],
    "8H4Ud": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UnicodeUtils = require("f9214334d1435ec1");
        var findRangesImmutable = require("8d2d65a350367c93");
        var areEqual = function areEqual(a, b) {
          return a === b;
        };
        var isTruthy = function isTruthy(a) {
          return !!a;
        };
        var EMPTY_ARRAY = [];
        /**
         * Helper function for getting encoded styles for each inline style. Convert
         * to UTF-8 character counts for storage.
         */ function getEncodedInlinesForType(block, styleList, styleToEncode) {
          var ranges = []; // Obtain an array with ranges for only the specified style.
          var filteredInlines = styleList
            .map(function (style) {
              return style.has(styleToEncode);
            })
            .toList();
          findRangesImmutable(filteredInlines, areEqual, isTruthy, function (start, end) {
            var text = block.getText();
            ranges.push({
              offset: UnicodeUtils.strlen(text.slice(0, start)),
              length: UnicodeUtils.strlen(text.slice(start, end)),
              style: styleToEncode,
            });
          });
          return ranges;
        }
        /*
         * Retrieve the encoded arrays of inline styles, with each individual style
         * treated separately.
         */ function encodeInlineStyleRanges(block) {
          var styleList = block
            .getCharacterList()
            .map(function (c) {
              return c.getStyle();
            })
            .toList();
          var ranges = styleList
            .flatten()
            .toSet()
            .map(function (style) {
              return getEncodedInlinesForType(block, styleList, style);
            });
          return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());
        }
        module.exports = encodeInlineStyleRanges;
      },
      { f9214334d1435ec1: "8JHYo", "8d2d65a350367c93": "1vrx7" },
    ],
    ep1XL: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var ContentBlock = require("4ca5ba9425886697");
        var ContentBlockNode = require("4f6bd57c75102df4");
        var ContentState = require("a63ef180e1523935");
        var DraftEntity = require("f80a1aa5a0c06547");
        var DraftTreeAdapter = require("958dfd9f9c9ed87f");
        var DraftTreeInvariants = require("da4df7df4e785eb4");
        var SelectionState = require("9d54081e65ea8e75");
        var createCharacterList = require("f17d07ce9048d1d2");
        var decodeEntityRanges = require("72606a52f9c910d4");
        var decodeInlineStyleRanges = require("f34f0184853db333");
        var generateRandomKey = require("345a50f89510fc6a");
        var gkx = require("2b76c449479b8130");
        var Immutable = require("3fd9514a1ad198eb");
        var invariant = require("ca367e75d4703e53");
        var experimentalTreeDataSupport = gkx("draft_tree_data_support");
        var List = Immutable.List,
          Map = Immutable.Map,
          OrderedMap = Immutable.OrderedMap;
        var decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {
          var key = block.key,
            type = block.type,
            data = block.data,
            text = block.text,
            depth = block.depth;
          var blockNodeConfig = {
            text: text,
            depth: depth || 0,
            type: type || "unstyled",
            key: key || generateRandomKey(),
            data: Map(data),
            characterList: decodeCharacterList(block, entityMap),
          };
          return blockNodeConfig;
        };
        var decodeCharacterList = function decodeCharacterList(block, entityMap) {
          var text = block.text,
            rawEntityRanges = block.entityRanges,
            rawInlineStyleRanges = block.inlineStyleRanges;
          var entityRanges = rawEntityRanges || [];
          var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.
          return createCharacterList(
            decodeInlineStyleRanges(text, inlineStyleRanges),
            decodeEntityRanges(
              text,
              entityRanges
                .filter(function (range) {
                  return entityMap.hasOwnProperty(range.key);
                })
                .map(function (range) {
                  return _objectSpread({}, range, {
                    key: entityMap[range.key],
                  });
                }),
            ),
          );
        };
        var addKeyIfMissing = function addKeyIfMissing(block) {
          return _objectSpread({}, block, {
            key: block.key || generateRandomKey(),
          });
        };
        /**
         * Node stack is responsible to ensure we traverse the tree only once
         * in depth order, while also providing parent refs to inner nodes to
         * construct their links.
         */ var updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {
          var nodesWithParentRef = nodes.map(function (block) {
            return _objectSpread({}, block, {
              parentRef: parentRef,
            });
          }); // since we pop nodes from the stack we need to insert them in reverse
          return stack.concat(nodesWithParentRef.reverse());
        };
        /**
         * This will build a tree draft content state by creating the node
         * reference links into a single tree walk. Each node has a link
         * reference to "parent", "children", "nextSibling" and "prevSibling"
         * blockMap will be created using depth ordering.
         */ var decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {
          return blocks // ensure children have valid keys to enable sibling links
            .map(addKeyIfMissing)
            .reduce(function (blockMap, block, index) {
              !Array.isArray(block.children) &&
                invariant(
                  false,
                  "invalid RawDraftContentBlock can not be converted to ContentBlockNode",
                ); // ensure children have valid keys to enable sibling links
              var children = block.children.map(addKeyIfMissing); // root level nodes
              var contentBlockNode = new ContentBlockNode(
                _objectSpread({}, decodeBlockNodeConfig(block, entityMap), {
                  prevSibling: index === 0 ? null : blocks[index - 1].key,
                  nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,
                  children: List(
                    children.map(function (child) {
                      return child.key;
                    }),
                  ),
                }),
              ); // push root node to blockMap
              blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering
              var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes
              while (stack.length > 0) {
                // we pop from the stack and start processing this node
                var node = stack.pop(); // parentRef already points to a converted ContentBlockNode
                var parentRef = node.parentRef;
                var siblings = parentRef.getChildKeys();
                var _index = siblings.indexOf(node.key);
                var isValidBlock = Array.isArray(node.children);
                if (!isValidBlock) {
                  !isValidBlock &&
                    invariant(
                      false,
                      "invalid RawDraftContentBlock can not be converted to ContentBlockNode",
                    );
                  break;
                } // ensure children have valid keys to enable sibling links
                var _children = node.children.map(addKeyIfMissing);
                var _contentBlockNode = new ContentBlockNode(
                  _objectSpread({}, decodeBlockNodeConfig(node, entityMap), {
                    parent: parentRef.getKey(),
                    children: List(
                      _children.map(function (child) {
                        return child.key;
                      }),
                    ),
                    prevSibling: _index === 0 ? null : siblings.get(_index - 1),
                    nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1),
                  }),
                ); // push node to blockMap
                blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering
                stack = updateNodeStack(stack, _children, _contentBlockNode);
              }
              return blockMap;
            }, OrderedMap());
        };
        var decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {
          return OrderedMap(
            blocks.map(function (block) {
              var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));
              return [contentBlock.getKey(), contentBlock];
            }),
          );
        };
        var decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {
          var isTreeRawBlock = rawState.blocks.find(function (block) {
            return Array.isArray(block.children) && block.children.length > 0;
          });
          var rawBlocks =
            experimentalTreeDataSupport && !isTreeRawBlock
              ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks
              : rawState.blocks;
          if (!experimentalTreeDataSupport)
            return decodeContentBlocks(
              isTreeRawBlock
                ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks
                : rawBlocks,
              entityMap,
            );
          var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met
          !DraftTreeInvariants.isValidTree(blockMap) && invariant(false, "Should be a valid tree");
          return blockMap;
        };
        var decodeRawEntityMap = function decodeRawEntityMap(rawState) {
          var rawEntityMap = rawState.entityMap;
          var entityMap = {}; // TODO: Update this once we completely remove DraftEntity
          Object.keys(rawEntityMap).forEach(function (rawEntityKey) {
            var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],
              type = _rawEntityMap$rawEnti.type,
              mutability = _rawEntityMap$rawEnti.mutability,
              data = _rawEntityMap$rawEnti.data; // get the key reference to created entity
            entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});
          });
          return entityMap;
        };
        var convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {
          !Array.isArray(rawState.blocks) && invariant(false, "invalid RawDraftContentState"); // decode entities
          var entityMap = decodeRawEntityMap(rawState); // decode blockMap
          var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection
          var selectionState = blockMap.isEmpty()
            ? new SelectionState()
            : SelectionState.createEmpty(blockMap.first().getKey());
          return new ContentState({
            blockMap: blockMap,
            entityMap: entityMap,
            selectionBefore: selectionState,
            selectionAfter: selectionState,
          });
        };
        module.exports = convertFromRawToDraftState;
      },
      {
        "4ca5ba9425886697": "hCjL2",
        "4f6bd57c75102df4": "ketXe",
        a63ef180e1523935: "2TRWx",
        f80a1aa5a0c06547: "7ZjY7",
        "958dfd9f9c9ed87f": "bpZny",
        da4df7df4e785eb4: "iM76T",
        "9d54081e65ea8e75": "5Aucl",
        f17d07ce9048d1d2: "fPYok",
        "72606a52f9c910d4": "a0K9k",
        f34f0184853db333: "2ZrTQ",
        "345a50f89510fc6a": "fgtnr",
        "2b76c449479b8130": "l5VFU",
        "3fd9514a1ad198eb": "lhHDL",
        ca367e75d4703e53: "d6MgO",
      },
    ],
    bpZny: [
      function (require, module, exports) {
        "use strict";
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function")
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }),
              );
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ var generateRandomKey = require("eafc8410cadddc5b");
        var invariant = require("b221b42162dfdfd1");
        var traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {
          var stack = [].concat(blocks).reverse();
          while (stack.length) {
            var _block = stack.pop();
            fn(_block);
            var children = _block.children;
            !Array.isArray(children) && invariant(false, "Invalid tree raw block");
            stack = stack.concat([].concat(children.reverse()));
          }
        };
        var isListBlock = function isListBlock(block) {
          if (!(block && block.type)) return false;
          var type = block.type;
          return type === "unordered-list-item" || type === "ordered-list-item";
        };
        var addDepthToChildren = function addDepthToChildren(block) {
          if (Array.isArray(block.children))
            block.children = block.children.map(function (child) {
              return child.type === block.type
                ? _objectSpread({}, child, {
                    depth: (block.depth || 0) + 1,
                  })
                : child;
            });
        };
        /**
         * This adapter is intended to be be used as an adapter to draft tree data
         *
         * draft state <=====> draft tree state
         */ var DraftTreeAdapter = {
          /**
           * Converts from a tree raw state back to draft raw state
           */ fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {
            var blocks = draftTreeState.blocks;
            var transformedBlocks = [];
            !Array.isArray(blocks) && invariant(false, "Invalid raw state");
            if (!Array.isArray(blocks) || !blocks.length) return draftTreeState;
            traverseInDepthOrder(blocks, function (block) {
              var newBlock = _objectSpread({}, block);
              if (isListBlock(block)) {
                newBlock.depth = newBlock.depth || 0;
                addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else
                if (block.children != null && block.children.length > 0) return;
              }
              delete newBlock.children;
              transformedBlocks.push(newBlock);
            });
            draftTreeState.blocks = transformedBlocks;
            return _objectSpread({}, draftTreeState, {
              blocks: transformedBlocks,
            });
          },
          /**
           * Converts from draft raw state to tree draft state
           */ fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {
            var transformedBlocks = [];
            var parentStack = [];
            draftState.blocks.forEach(function (block) {
              var isList = isListBlock(block);
              var depth = block.depth || 0;
              var treeBlock = _objectSpread({}, block, {
                children: [],
              });
              if (!isList) {
                transformedBlocks.push(treeBlock);
                return;
              }
              var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block
              if (lastParent == null && depth === 0)
                transformedBlocks.push(
                  treeBlock,
                ); // block is first nested block or previous nested block is at a lower level
              else if (lastParent == null || lastParent.depth < depth - 1) {
                // create new parent block
                var newParent = {
                  key: generateRandomKey(),
                  text: "",
                  depth: depth - 1,
                  type: block.type,
                  children: [],
                  entityRanges: [],
                  inlineStyleRanges: [],
                };
                parentStack.unshift(newParent);
                if (depth === 1)
                  // add as a root-level block
                  transformedBlocks.push(newParent);
                else if (lastParent != null)
                  // depth > 1 => also add as previous parent's child
                  lastParent.children.push(newParent);
                newParent.children.push(treeBlock);
              } else if (lastParent.depth === depth - 1)
                // add as child of last parent
                lastParent.children.push(treeBlock);
              else {
                // pop out parents at levels above this one from the parent stack
                while (lastParent != null && lastParent.depth >= depth) {
                  parentStack.shift();
                  lastParent = parentStack[0];
                }
                if (depth > 0) lastParent.children.push(treeBlock);
                else transformedBlocks.push(treeBlock);
              }
            });
            return _objectSpread({}, draftState, {
              blocks: transformedBlocks,
            });
          },
        };
        module.exports = DraftTreeAdapter;
      },
      { eafc8410cadddc5b: "fgtnr", b221b42162dfdfd1: "d6MgO" },
    ],
    iM76T: [
      function (require, module, exports) {
        "use strict";
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         *
         * This is unstable and not part of the public API and should not be used by
         * production systems. This file may be update/removed without notice.
         */ var warning = require("d59963551f5bb8bd");
        var DraftTreeInvariants = {
          /**
           * Check if the block is valid
           */ isValidBlock: function isValidBlock(block, blockMap) {
            var key = block.getKey(); // is its parent's child
            var parentKey = block.getParentKey();
            if (parentKey != null) {
              var parent = blockMap.get(parentKey);
              if (!parent.getChildKeys().includes(key)) {
                warning(true, "Tree is missing parent -> child pointer on %s", key);
                return false;
              }
            } // is its children's parent
            var children = block.getChildKeys().map(function (k) {
              return blockMap.get(k);
            });
            if (
              !children.every(function (c) {
                return c.getParentKey() === key;
              })
            ) {
              warning(true, "Tree is missing child -> parent pointer on %s", key);
              return false;
            } // is its previous sibling's next sibling
            var prevSiblingKey = block.getPrevSiblingKey();
            if (prevSiblingKey != null) {
              var prevSibling = blockMap.get(prevSiblingKey);
              if (prevSibling.getNextSiblingKey() !== key) {
                warning(true, "Tree is missing nextSibling pointer on %s's prevSibling", key);
                return false;
              }
            } // is its next sibling's previous sibling
            var nextSiblingKey = block.getNextSiblingKey();
            if (nextSiblingKey != null) {
              var nextSibling = blockMap.get(nextSiblingKey);
              if (nextSibling.getPrevSiblingKey() !== key) {
                warning(true, "Tree is missing prevSibling pointer on %s's nextSibling", key);
                return false;
              }
            } // no 2-node cycles
            if (nextSiblingKey !== null && prevSiblingKey !== null) {
              if (prevSiblingKey === nextSiblingKey) {
                warning(true, "Tree has a two-node cycle at %s", key);
                return false;
              }
            } // if it's a leaf node, it has text but no children
            if (block.text != "") {
              if (block.getChildKeys().size > 0) {
                warning(true, "Leaf node %s has children", key);
                return false;
              }
            }
            return true;
          },
          /**
           * Checks that this is a connected tree on all the blocks
           * starting from the first block, traversing nextSibling and child pointers
           * should be a tree (preorder traversal - parent, then children)
           * num of connected node === number of blocks
           */ isConnectedTree: function isConnectedTree(blockMap) {
            // exactly one node has no previous sibling + no parent
            var eligibleFirstNodes = blockMap.toArray().filter(function (block) {
              return block.getParentKey() == null && block.getPrevSiblingKey() == null;
            });
            if (eligibleFirstNodes.length !== 1) {
              warning(true, "Tree is not connected. More or less than one first node");
              return false;
            }
            var firstNode = eligibleFirstNodes.shift();
            var nodesSeen = 0;
            var currentKey = firstNode.getKey();
            var visitedStack = [];
            while (currentKey != null) {
              var currentNode = blockMap.get(currentKey);
              var childKeys = currentNode.getChildKeys();
              var nextSiblingKey = currentNode.getNextSiblingKey(); // if the node has children, add parent's next sibling to stack and go to children
              if (childKeys.size > 0) {
                if (nextSiblingKey != null) visitedStack.unshift(nextSiblingKey);
                var children = childKeys.map(function (k) {
                  return blockMap.get(k);
                });
                var _firstNode = children.find(function (block) {
                  return block.getPrevSiblingKey() == null;
                });
                if (_firstNode == null) {
                  warning(true, "%s has no first child", currentKey);
                  return false;
                }
                currentKey = _firstNode.getKey(); // TODO(T32490138): Deal with multi-node cycles here
              } else if (currentNode.getNextSiblingKey() != null)
                currentKey = currentNode.getNextSiblingKey();
              else currentKey = visitedStack.shift();
              nodesSeen++;
            }
            if (nodesSeen !== blockMap.size) {
              warning(
                true,
                "Tree is not connected. %s nodes were seen instead of %s",
                nodesSeen,
                blockMap.size,
              );
              return false;
            }
            return true;
          },
          /**
           * Checks that the block map is a connected tree with valid blocks
           */ isValidTree: function isValidTree(blockMap) {
            var _this = this;
            var blocks = blockMap.toArray();
            if (
              !blocks.every(function (block) {
                return _this.isValidBlock(block, blockMap);
              })
            )
              return false;
            return this.isConnectedTree(blockMap);
          },
        };
        module.exports = DraftTreeInvariants;
      },
      { d59963551f5bb8bd: "aqkSq" },
    ],
    fPYok: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var CharacterMetadata = require("e4a03b1478e088ed");
        var Immutable = require("cdea8e75854586ef");
        var List = Immutable.List;
        function createCharacterList(inlineStyles, entities) {
          var characterArray = inlineStyles.map(function (style, ii) {
            var entity = entities[ii];
            return CharacterMetadata.create({
              style: style,
              entity: entity,
            });
          });
          return List(characterArray);
        }
        module.exports = createCharacterList;
      },
      { e4a03b1478e088ed: "5sTZK", cdea8e75854586ef: "lhHDL" },
    ],
    a0K9k: [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UnicodeUtils = require("306a259e54971196");
        var substr = UnicodeUtils.substr;
        /**
         * Convert to native JavaScript string lengths to determine ranges.
         */ function decodeEntityRanges(text, ranges) {
          var entities = Array(text.length).fill(null);
          if (ranges)
            ranges.forEach(function (range) {
              // Using Unicode-enabled substrings converted to JavaScript lengths,
              // fill the output array with entity keys.
              var start = substr(text, 0, range.offset).length;
              var end = start + substr(text, range.offset, range.length).length;
              for (var ii = start; ii < end; ii++) entities[ii] = range.key;
            });
          return entities;
        }
        module.exports = decodeEntityRanges;
      },
      { "306a259e54971196": "8JHYo" },
    ],
    "2ZrTQ": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var UnicodeUtils = require("72bcd1797518f1f7");
        var _require = require("ba45ccf38ab67b0a"),
          OrderedSet = _require.OrderedSet;
        var substr = UnicodeUtils.substr;
        var EMPTY_SET = OrderedSet();
        /**
         * Convert to native JavaScript string lengths to determine ranges.
         */ function decodeInlineStyleRanges(text, ranges) {
          var styles = Array(text.length).fill(EMPTY_SET);
          if (ranges)
            ranges.forEach(function (range) {
              var cursor = substr(text, 0, range.offset).length;
              var end = cursor + substr(text, range.offset, range.length).length;
              while (cursor < end) {
                styles[cursor] = styles[cursor].add(range.style);
                cursor++;
              }
            });
          return styles;
        }
        module.exports = decodeInlineStyleRanges;
      },
      { "72bcd1797518f1f7": "8JHYo", ba45ccf38ab67b0a: "lhHDL" },
    ],
    "1jVDO": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getRangeBoundingClientRect = require("285328b4555cc679");
        /**
         * Return the bounding ClientRect for the visible DOM selection, if any.
         * In cases where there are no selected ranges or the bounding rect is
         * temporarily invalid, return null.
         *
         * When using from an iframe, you should pass the iframe window object
         */ function getVisibleSelectionRect(global) {
          var selection = global.getSelection();
          if (!selection.rangeCount) return null;
          var range = selection.getRangeAt(0);
          var boundingRect = getRangeBoundingClientRect(range);
          var top = boundingRect.top,
            right = boundingRect.right,
            bottom = boundingRect.bottom,
            left = boundingRect.left; // When a re-render leads to a node being removed, the DOM selection will
          // temporarily be placed on an ancestor node, which leads to an invalid
          // bounding rect. Discard this state.
          if (top === 0 && right === 0 && bottom === 0 && left === 0) return null;
          return boundingRect;
        }
        module.exports = getVisibleSelectionRect;
      },
      { "285328b4555cc679": "9LbyP" },
    ],
    "9LbyP": [
      function (require, module, exports) {
        /**
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         * @format
         *
         * @emails oncall+draft_js
         */ "use strict";
        var getRangeClientRects = require("fe4ad799fe7bdb6");
        /**
         * Like range.getBoundingClientRect() but normalizes for browser bugs.
         */ function getRangeBoundingClientRect(range) {
          // "Return a DOMRect object describing the smallest rectangle that includes
          // the first rectangle in list and all of the remaining rectangles of which
          // the height or width is not zero."
          // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect
          var rects = getRangeClientRects(range);
          var top = 0;
          var right = 0;
          var bottom = 0;
          var left = 0;
          if (rects.length) {
            // If the first rectangle has 0 width, we use the second, this is needed
            // because Chrome renders a 0 width rectangle when the selection contains
            // a line break.
            if (rects.length > 1 && rects[0].width === 0) {
              var _rects$ = rects[1];
              top = _rects$.top;
              right = _rects$.right;
              bottom = _rects$.bottom;
              left = _rects$.left;
            } else {
              var _rects$2 = rects[0];
              top = _rects$2.top;
              right = _rects$2.right;
              bottom = _rects$2.bottom;
              left = _rects$2.left;
            }
            for (var ii = 1; ii < rects.length; ii++) {
              var rect = rects[ii];
              if (rect.height !== 0 && rect.width !== 0) {
                top = Math.min(top, rect.top);
                right = Math.max(right, rect.right);
                bottom = Math.max(bottom, rect.bottom);
                left = Math.min(left, rect.left);
              }
            }
          }
          return {
            top: top,
            right: right,
            bottom: bottom,
            left: left,
            width: right - left,
            height: bottom - top,
          };
        }
        module.exports = getRangeBoundingClientRect;
      },
      { fe4ad799fe7bdb6: "hUpG5" },
    ],
    iUxJS: [function () {}, {}],
    lQogA: [function () {}, {}],
    "8F1sM": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$bae9 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$bae9.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AieStyleButtonRow", () => AieStyleButtonRow);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aieCss = require("./aie.css");
          var _aieStyleButton = require("./AieStyleButton");
          const AieStyleButtonRow = (props) => {
            const buttons = [];
            for (const style of props.styleList)
              buttons.push(
                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aieStyleButton.AieStyleButton),
                  {
                    id: `${props.id}-${style}`,
                    styleName: style,
                    currentStyle:
                      typeof props.currentStyle === "string"
                        ? style === props.currentStyle
                        : props.currentStyle,
                    applyStyleFunction: props.applyStyleFunction,
                    disabled: props.disabled && props.currentStyle !== "string",
                  },
                  style,
                  false,
                  {
                    fileName: "src/components/aie/AieStyleButtonRow.tsx",
                    lineNumber: 17,
                    columnNumber: 7,
                  },
                  undefined,
                ),
              );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: buttons,
              },
              void 0,
              false,
            );
          };
          _c = AieStyleButtonRow;
          var _c;
          $RefreshReg$(_c, "AieStyleButtonRow");

          $parcel$ReactRefreshHelpers$bae9.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aie.css": "lQogA",
        "./AieStyleButton": "6gAwA",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    lQogA: [function () {}, {}],
    "6gAwA": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$5919 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$5919.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AieStyleButton", () => AieStyleButton);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aieCss = require("./aie.css");
          const AieStyleButton = (props) => {
            // Apply style on click
            const aieClick = (e) => {
              e.preventDefault();
              props.applyStyleFunction(props.styleName);
            };
            const className =
              "aie-button" +
              ((typeof props.currentStyle === "boolean" && props.currentStyle === true) ||
              (typeof props.currentStyle !== "boolean" && props.currentStyle.has(props.styleName))
                ? " active"
                : "");
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "button",
              {
                id: props.id,
                className: className,
                onMouseDown: aieClick,
                disabled: props.disabled,
                children: props.styleName,
              },
              void 0,
              false,
              {
                fileName: "src/components/aie/AieStyleButton.tsx",
                lineNumber: 25,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _c = AieStyleButton;
          var _c;
          $RefreshReg$(_c, "AieStyleButton");

          $parcel$ReactRefreshHelpers$5919.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aie.css": "lQogA",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    lQogA: [function () {}, {}],
    gkKU3: [
      function (require, module, exports) {
        exports.interopDefault = function (a) {
          return a && a.__esModule
            ? a
            : {
                default: a,
              };
        };
        exports.defineInteropFlag = function (a) {
          Object.defineProperty(a, "__esModule", {
            value: true,
          });
        };
        exports.exportAll = function (source, dest) {
          Object.keys(source).forEach(function (key) {
            if (
              key === "default" ||
              key === "__esModule" ||
              Object.prototype.hasOwnProperty.call(dest, key)
            )
              return;
            Object.defineProperty(dest, key, {
              enumerable: true,
              get: function () {
                return source[key];
              },
            });
          });
          return dest;
        };
        exports.export = function (dest, destName, get) {
          Object.defineProperty(dest, destName, {
            enumerable: true,
            get: get,
          });
        };
      },
      {},
    ],
    km3Ru: [
      function (require, module, exports) {
        "use strict";
        var Refresh = require("7422ead32dcc1e6b");
        function debounce(func, delay) {
          {
            let timeout = undefined;
            let lastTime = 0;
            return function (args) {
              // Call immediately if last call was more than the delay ago.
              // Otherwise, set a timeout. This means the first call is fast
              // (for the common case of a single update), and subsequent updates
              // are batched.
              let now = Date.now();
              if (now - lastTime > delay) {
                lastTime = now;
                func.call(null, args);
              } else {
                clearTimeout(timeout);
                timeout = setTimeout(function () {
                  timeout = undefined;
                  lastTime = Date.now();
                  func.call(null, args);
                }, delay);
              }
            };
          }
        }
        var enqueueUpdate = debounce(function () {
          Refresh.performReactRefresh();
        }, 30);
        // Everthing below is either adapted or copied from
        // https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
        // MIT License - Copyright (c) Facebook, Inc. and its affiliates.
        module.exports.prelude = function (module1) {
          window.$RefreshReg$ = function (type, id) {
            Refresh.register(type, module1.id + " " + id);
          };
          window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
        };
        module.exports.postlude = function (module1) {
          if (isReactRefreshBoundary(module1.exports)) {
            registerExportsForReactRefresh(module1);
            if (module1.hot) {
              module1.hot.dispose(function (data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module1.exports;
              });
              module1.hot.accept(function (getParents) {
                var prevExports = module1.hot.data.prevExports;
                var nextExports = module1.exports;
                // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
                // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                  // We'll be conservative. The only case in which we won't do a full
                  // reload is if all parent modules are also refresh boundaries.
                  // In that case we'll add them to the current queue.
                  var parents = getParents();
                  if (parents.length === 0) {
                    // Looks like we bubbled to the root. Can't recover from that.
                    window.location.reload();
                    return;
                  }
                  return parents;
                }
                enqueueUpdate();
              });
            }
          }
        };
        function isReactRefreshBoundary(exports) {
          if (Refresh.isLikelyComponentType(exports)) return true;
          if (exports == null || typeof exports !== "object")
            // Exit if we can't iterate over exports.
            return false;
          var hasExports = false;
          var areAllExportsComponents = true;
          let isESM = "__esModule" in exports;
          for (var key in exports) {
            hasExports = true;
            if (key === "__esModule") continue;
            var desc = Object.getOwnPropertyDescriptor(exports, key);
            if (desc && desc.get && !isESM)
              // Don't invoke getters for CJS as they may have side effects.
              return false;
            var exportValue = exports[key];
            if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
          }
          return hasExports && areAllExportsComponents;
        }
        function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
          var prevSignature = getRefreshBoundarySignature(prevExports);
          var nextSignature = getRefreshBoundarySignature(nextExports);
          if (prevSignature.length !== nextSignature.length) return true;
          for (var i = 0; i < nextSignature.length; i++) {
            if (prevSignature[i] !== nextSignature[i]) return true;
          }
          return false;
        }
        // When this signature changes, it's unsafe to stop at this refresh boundary.
        function getRefreshBoundarySignature(exports) {
          var signature = [];
          signature.push(Refresh.getFamilyByType(exports));
          if (exports == null || typeof exports !== "object")
            // Exit if we can't iterate over exports.
            // (This is important for legacy environments.)
            return signature;
          let isESM = "__esModule" in exports;
          for (var key in exports) {
            if (key === "__esModule") continue;
            var desc = Object.getOwnPropertyDescriptor(exports, key);
            if (desc && desc.get && !isESM) continue;
            var exportValue = exports[key];
            signature.push(key);
            signature.push(Refresh.getFamilyByType(exportValue));
          }
          return signature;
        }
        function registerExportsForReactRefresh(module1) {
          var exports = module1.exports,
            id = module1.id;
          Refresh.register(exports, id + " %exports%");
          if (exports == null || typeof exports !== "object")
            // Exit if we can't iterate over exports.
            // (This is important for legacy environments.)
            return;
          let isESM = "__esModule" in exports;
          for (var key in exports) {
            var desc = Object.getOwnPropertyDescriptor(exports, key);
            if (desc && desc.get && !isESM) continue;
            var exportValue = exports[key];
            var typeID = id + " %exports% " + key;
            Refresh.register(exportValue, typeID);
          }
        }
      },
      { "7422ead32dcc1e6b": "786KC" },
    ],
    "90i5X": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$f14e = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$f14e.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "EditorV2", () => EditorV2);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aieStyleButtonRow = require("./AieStyleButtonRow");
          var _functions = require("./functions");
          var _getHTMLfromV2Text = require("./functions/getHTMLfromV2Text");
          var _getV2TextStyle = require("./functions/getV2TextStyle");
          var _aiev2Css = require("./aiev2.css");
          var _s = $RefreshSig$();
          const EditorV2 = ({
            id,
            text,
            setText,
            customStyleMap,
            allowNewLine = false,
            textAlignment = "decimal",
            decimalAlignPercent = 60,
          }) => {
            _s();
            // Set up reference to inner div
            const divRef = (0, _react.useRef)(null);
            const [currentText, setCurrentText] = (0, _react.useState)("");
            const [currentStyleName, setCurrentStyleName] = (0, _react.useState)("");
            const [currentStyle, setCurrentStyle] = (0, _react.useState)({});
            (0, _react.useEffect)(() => {
              const { newText, styleName } = (0, _getV2TextStyle.getV2TextStyle)(text);
              setCurrentText(newText);
              setCurrentStyleName(styleName);
              (0, _functions.drawInnerHtml)(
                divRef,
                setCurrentText,
                (0, _functions.getCaretPosition),
                textAlignment,
                decimalAlignPercent,
                newText,
              );
            }, [decimalAlignPercent, text, textAlignment]);
            const returnData = (0, _react.useCallback)(
              (ret) => {
                // Do nothing if there is nothing to do
                if (typeof setText !== "function") return;
                // Update via parent function
                setText(ret.text ?? text ?? "");
              },
              [setText, text],
            );
            // Work out backgroup colour and border
            const [inFocus, setInFocus] = (0, _react.useState)(false);
            const [backBorder, setBackBorder] = (0, _react.useState)({});
            (0, _react.useEffect)(() => {
              setBackBorder({
                background: inFocus ? "white" : "inherit",
                border: inFocus ? "1px solid grey" : "1px solid transparent",
              });
            }, [inFocus]);
            // Work out justification
            const [just, setJust] = (0, _react.useState)({});
            (0, _react.useEffect)(() => {
              switch (textAlignment) {
                case "right":
                  setJust({
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "end",
                  });
                  break;
                case "center":
                  setJust({
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "center",
                  });
                  break;
                case "decimal":
                  setJust({
                    display: "block",
                  });
                  break;
                case "left":
                default:
                  setJust({
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "start",
                  });
              }
            }, [textAlignment, currentText]);
            const handleFocus = (0, _react.useCallback)(() => {
              setInFocus(true);
            }, []);
            function handleKeyDown(e) {
              if (e.key === "Enter" && !allowNewLine) {
                e.stopPropagation();
                e.preventDefault();
              }
            }
            const handleKeyUp = (0, _react.useCallback)(
              (e) => {
                const sel = window.getSelection();
                if (sel && divRef.current) {
                  const range = sel.getRangeAt(0);
                  if (range.collapsed)
                    (0, _functions.drawInnerHtml)(
                      divRef,
                      setCurrentText,
                      (0, _functions.getCaretPosition),
                      textAlignment,
                      decimalAlignPercent,
                      undefined,
                      e,
                      range,
                    );
                }
              },
              [decimalAlignPercent, textAlignment],
            );
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            function handleSelect(e) {
              // console.log("Key select");
              // if (divRef.current) console.log(getCaretPosition(divRef.current));
            }
            const handleBlur = (0, _react.useCallback)(
              // eslint-disable-next-line @typescript-eslint/no-unused-vars
              (e) => {
                setInFocus(false);
                if (typeof setText === "function") {
                  const text = (0, _getHTMLfromV2Text.getHTMLfromV2Text)(
                    currentText,
                    currentStyleName,
                    currentStyle,
                  );
                  returnData({
                    text,
                  });
                }
              },
              [currentStyle, currentStyleName, currentText, returnData, setText],
            );
            (0, _react.useEffect)(() => {
              if (customStyleMap === undefined) return;
              const ix = Object.keys(customStyleMap).findIndex((c) => c === currentStyleName);
              if (ix === -1) {
                setCurrentStyle({});
                return;
              } else setCurrentStyle(customStyleMap[currentStyleName].css);
            }, [currentStyleName, customStyleMap]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                className: "aiev2-outer",
                id: id,
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      id: `${id}-line0-holder`,
                      className: "aiev2-line",
                      style: {
                        ...backBorder,
                        ...just,
                        ...currentStyle,
                      },
                      onFocusCapture: handleFocus,
                      onBlur: handleBlur,
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "div",
                        {
                          id: `${id}-line0-editable`,
                          className: "aiev2-editing",
                          contentEditable: typeof setText === "function",
                          suppressContentEditableWarning: true,
                          spellCheck: false,
                          ref: divRef,
                          onKeyUpCapture: handleKeyUp,
                          onSelectCapture: handleSelect,
                          onKeyDownCapture: handleKeyDown,
                          onBlurCapture: handleBlur,
                          onFocus: handleFocus,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/components/aie/EditorV2.tsx",
                          lineNumber: 177,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aie/EditorV2.tsx",
                      lineNumber: 166,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  inFocus &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aie-button-position center",
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            className: "aie-button-holder",
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _aieStyleButtonRow.AieStyleButtonRow),
                              {
                                id: `${id}-stylebuttons`,
                                styleList: Object.keys(customStyleMap || {}),
                                currentStyle: currentStyleName,
                                applyStyleFunction: (ret) => {
                                  const newStyle = ret === currentStyleName ? "" : ret;
                                  setCurrentStyleName(newStyle);
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aie/EditorV2.tsx",
                                lineNumber: 194,
                                columnNumber: 13,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aie/EditorV2.tsx",
                            lineNumber: 193,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aie/EditorV2.tsx",
                        lineNumber: 192,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aie/EditorV2.tsx",
                lineNumber: 162,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(EditorV2, "DC6RvSNeCdX56PjRf9pnEauimug=");
          _c = EditorV2;
          var _c;
          $RefreshReg$(_c, "EditorV2");

          $parcel$ReactRefreshHelpers$f14e.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./AieStyleButtonRow": "8F1sM",
        "./functions": "yYJLv",
        "./functions/getHTMLfromV2Text": "ggqyX",
        "./functions/getV2TextStyle": "kS5ps",
        "./aiev2.css": "jVspy",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    yYJLv: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "ColouredLine", () => (0, _colouredLine.ColouredLine));
        parcelHelpers.export(exports, "ColouredText", () => (0, _colouredText.ColouredText));
        parcelHelpers.export(exports, "explodeLine", () => (0, _explodeLine.explodeLine));
        parcelHelpers.export(exports, "implodeLine", () => (0, _implodeLine.implodeLine));
        parcelHelpers.export(exports, "getHtmlString", () => (0, _getHtmlString.getHtmlString));
        parcelHelpers.export(exports, "getV2TextStyle", () => (0, _getV2TextStyle.getV2TextStyle));
        parcelHelpers.export(
          exports,
          "getHTMLfromV2Text",
          () => (0, _getHTMLfromV2Text.getHTMLfromV2Text),
        );
        parcelHelpers.export(exports, "drawInnerHtml", () => (0, _drawInnerHtml.drawInnerHtml));
        parcelHelpers.export(
          exports,
          "getCaretPosition",
          () => (0, _getCaretPosition.getCaretPosition),
        );
        var _colouredLine = require("./ColouredLine");
        var _colouredText = require("./ColouredText");
        var _drawInnerHtml = require("./drawInnerHtml");
        var _explodeLine = require("./explodeLine");
        var _getCaretPosition = require("./getCaretPosition");
        var _getHTMLfromV2Text = require("./getHTMLfromV2Text");
        var _getHtmlString = require("./getHtmlString");
        var _getV2TextStyle = require("./getV2TextStyle");
        var _implodeLine = require("./implodeLine");
      },
      {
        "./ColouredLine": "hBgVy",
        "./ColouredText": "lK25B",
        "./drawInnerHtml": "04mlk",
        "./explodeLine": "bKvet",
        "./getCaretPosition": "7sQ2j",
        "./getHTMLfromV2Text": "ggqyX",
        "./getHtmlString": "kHpHe",
        "./getV2TextStyle": "kS5ps",
        "./implodeLine": "1hfjn",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    hBgVy: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "ColouredLine", () => ColouredLine);
        var _explodeLine = require("./explodeLine");
        var _getHtmlString = require("./getHtmlString");
        var _implodeLine = require("./implodeLine");
        class ColouredLine {
          // Read only variables
          get html() {
            const h = document.createDocumentFragment();
            (0, _implodeLine.implodeLine)(
              this.styleBlocks.map((b) => {
                // Remove bad styleNames here
                if (
                  !b.styleName ||
                  Object.keys(this.styles).findIndex((s) => s === b.styleName) === -1
                )
                  return {
                    start: b.start,
                    end: b.end,
                  };
                else return b;
              }),
            ).forEach((b) => {
              const s = document.createElement("span");
              s.className = "aie-block";
              s.textContent = this.text.replace(/[\u202F| ]/g, "\xa0").substring(b.start, b.end);
              if (
                b.styleName &&
                Object.keys(this.styles).findIndex((s) => s === b.styleName) >= 0
              ) {
                s.dataset.style = b.styleName;
                s.style.cssText = Object.entries(this.styles[b.styleName])
                  .map(([k, v]) => `${k.replace(/[A-Z]/g, "-$&").toLowerCase()}:${v}`)
                  .join(";");
              }
              h.appendChild(s);
            });
            return h;
          }
          get htmlString() {
            return (0, _getHtmlString.getHtmlString)(this.html, "aie-line");
          }
          constructor(arg, styles, styleBlocks) {
            if (typeof arg === "string") {
              this.text = arg;
              this.styles = styles ?? {};
              this.styleBlocks = (0, _explodeLine.explodeLine)(styleBlocks ?? [], arg.length);
            } else {
              this.text = arg.text;
              this.styles = arg.styles ?? styles ?? {};
              this.styleBlocks = (0, _explodeLine.explodeLine)(
                arg.styleBlocks ?? styleBlocks ?? [],
                arg.text.length,
              );
            }
          }
          applyStyle(styleName, start, end) {
            this.styleBlocks = (0, _explodeLine.explodeLine)(
              [
                {
                  styleName,
                  start,
                  end,
                },
                ...this.styleBlocks // Add existing styleBlocks
                  .filter((b) => b.start < start || b.end > end),
              ],
              this.text.length,
            );
          }
          removeStyle(start, end) {
            this.styleBlocks = (0, _explodeLine.explodeLine)(
              [
                {
                  start,
                  end,
                },
                ...this.styleBlocks // Add existing styleBlocks
                  .filter((b) => b.start < start || b.end > end),
              ],
              this.text.length,
            );
          }
        }
      },
      {
        "./explodeLine": "bKvet",
        "./getHtmlString": "kHpHe",
        "./implodeLine": "1hfjn",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    bKvet: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "explodeLine", () => explodeLine);
        const explodeLine = (styleBlocks, length) => {
          const ret = [];
          for (let i = 0; i < length; i++)
            ret.push({
              start: i,
              end: i + 1,
              styleName: styleBlocks.find((b) => b.start <= i && b.end > i)?.styleName,
            });
          return ret;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    kHpHe: [
      function (require, module, exports) {
        // Utility functions
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "getHtmlString", () => getHtmlString);
        const getHtmlString = (arg, className) => {
          const d = document.createElement("div");
          d.className = className;
          d.appendChild(arg);
          return d.outerHTML;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "1hfjn": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "implodeLine", () => implodeLine);
        const implodeLine = (styleBlocks) => {
          // Copy input
          const ret = [];
          let cStart, cEnd, cStyleName;
          styleBlocks
            .sort((a, b) => a.start - b.start)
            .forEach((b, i, all) => {
              // Start off
              if (i === 0) {
                cStart = b.start;
                cEnd = b.end;
                cStyleName = b.styleName;
              }
              // Add on
              if (b.styleName === cStyleName && b.start <= cEnd) cEnd = b.end;
              else {
                ret.push({
                  start: cStart,
                  end: cEnd,
                  styleName: cStyleName,
                });
                cStart = b.start;
                cEnd = b.end;
                cStyleName = b.styleName;
              }
              // Always output at the end
              if (i === all.length - 1)
                ret.push({
                  start: cStart,
                  end: cEnd,
                  styleName: cStyleName,
                });
            });
          return ret;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    lK25B: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        // Class
        parcelHelpers.export(exports, "ColouredText", () => ColouredText);
        var _colouredLine = require("./ColouredLine");
        var _getHtmlString = require("./getHtmlString");
        class ColouredText {
          // Read only variables
          get textArray() {
            return this.lines.map((line) => line.text.replace(/[\u202F|\u00A0]/g, " "));
          }
          get text() {
            return this.textArray.join("\n");
          }
          get html() {
            const h = new DocumentFragment();
            this.lines.forEach((l) => {
              const nl = document.createElement("div");
              nl.className = "aie-line";
              nl.append(l.html);
              h.appendChild(nl);
            });
            return h;
          }
          get htmlString() {
            return (0, _getHtmlString.getHtmlString)(this.html, "aie-text");
          }
          constructor(arg, styles) {
            // this.colouredText = colouredText;
            this.lines = [];
            if (typeof arg === "string")
              arg
                .replace(/[\u200B-\u200F\uFEFF\r]/g, "") // Remove undesirable non-printing chars
                .replace(/[\u202F| ]/g, "\xa0") // All spaces are non-breaking
                .split("\n") // Split on line break
                .forEach((t) => {
                  // Process each line
                  const l = new (0, _colouredLine.ColouredLine)(t, styles); // Create new Coloured line with the text
                  this.lines.push(l); // Add into the main array
                });
            else if (Array.isArray(arg)) {
              if (arg.every((a) => typeof a === "string"))
                arg.forEach((t) => {
                  const l = new (0, _colouredLine.ColouredLine)(
                    t
                      .replace(/[\u200B-\u200F\uFEFF\r]/g, "") // Remove undesirable non-printing chars
                      .replace(/[\u202F| ]/g, "\xa0"),
                    styles,
                  );
                  this.lines.push(l);
                });
              else this.lines.push(...arg);
            }
          }
        }
      },
      {
        "./ColouredLine": "hBgVy",
        "./getHtmlString": "kHpHe",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "04mlk": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$db15 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$db15.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "drawInnerHtml", () => drawInnerHtml);
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          function drawInnerHtml(
            divRef,
            setCurrentText,
            getCaretPosition,
            textAlignment,
            decimalAlignPercent,
            initialText,
            e,
            range,
          ) {
            if (!divRef.current) return;
            // Decode any HTML here too... we are going to set textContent so this is safe
            let fullText = (
              initialText !== undefined ? initialText : divRef.current.textContent ?? ""
            )
              .replace(/[\u202F|\u00A0]/g, " ")
              .trim();
            setCurrentText(fullText);
            // Get cursor position
            const caretPosn = getCaretPosition(divRef.current);
            let decimal = fullText.match(/\./)?.index;
            // Modification because of the key pressed
            if (e !== undefined) {
              if (e.key === "ArrowRight") caretPosn.end++;
              else if (e.key === "Home") caretPosn.end = 0;
              else if (e.key === "End") caretPosn.end = fullText.length;
              else if (e.key === "Delete" && caretPosn.end === decimal) {
                decimal = undefined;
                fullText = fullText.replace(/\./, "");
              } else if (
                e !== undefined &&
                e.key === "Delete" &&
                fullText?.match(/[\u200B]/) === null
              )
                fullText =
                  fullText.substring(0, caretPosn.end) + fullText.substring(caretPosn.end + 1);
              else if (e.key === "Backspace" && fullText?.match(/[\u200B]/) === null)
                fullText =
                  fullText.substring(0, caretPosn.end - 2) + fullText.substring(caretPosn.end);
            }
            // Set up new fragment
            const emptyNode = document.createTextNode("\u200B");
            const fragment = new DocumentFragment();
            // Get all boundaries in fullText
            const boundaries = [
              {
                type: "start",
                start: 0,
                end: caretPosn.end,
              },
              {
                type: "caret",
                start: caretPosn.end,
                end: caretPosn.end,
              },
              {
                type: "afterCaret",
                start: caretPosn.end,
                end: fullText.length,
              },
            ];
            if (decimal !== null && decimal !== undefined && textAlignment === "decimal")
              boundaries.push({
                type: "decimal",
                start: decimal,
              });
            // Fix ends for any inserted boundaries
            const fixedBoundaries = boundaries
              .sort((a, b) => a.start - b.start)
              .map((b, i, all) => {
                const newB = {
                  ...b,
                };
                if (i === all.length - 1) newB.end = fullText.length;
                else newB.end = all[i + 1].start;
                return newB;
              });
            // Split fulltext into spans at boundaries
            fixedBoundaries.forEach((b) => {
              // Add cursor if position is reached
              if (b.type === "caret") b.span = emptyNode;
              else if (b.end && b.end > b.start) {
                b.span = document.createElement("span");
                b.span.textContent = fullText
                  .substring(b.start, b.end)
                  .replace(/[\u200B-\u200F\uFEFF]/g, "") // Remove bad characters
                  .replace(/[ ]/g, "\xa0"); // Change space to nbsp
              }
            });
            // Create preceeding text if decimal aligned
            if (textAlignment === "decimal") {
              const line = document.createElement("div");
              line.className = "aiev2-decimal-line";
              fragment.append(line);
              // Set up space before decimal
              const prePoint = document.createElement("span");
              prePoint.className = "aiev2-span aiev2-span-point";
              prePoint.style.textAlign = "right";
              prePoint.style.right = `${100 - (decimalAlignPercent ?? 60)}%`;
              line.append(prePoint);
              // Set up space after (and including) decimal
              const postPoint = document.createElement("span");
              postPoint.className = "aiev2-span aiev2-span-point";
              postPoint.style.textAlign = "left";
              postPoint.style.left = `${decimalAlignPercent ?? 60}%`;
              line.append(postPoint);
              // Add spans with text if there is no decimal
              if (decimal === null || decimal === undefined)
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                prePoint.append(
                  ...fixedBoundaries.filter((b) => b.span !== undefined).map((b) => b.span),
                );
              else {
                const cut = fixedBoundaries.findIndex((b) => b.type === "decimal");
                prePoint.append(
                  ...fixedBoundaries
                    .slice(0, cut)
                    .filter((b) => b.span !== undefined) // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    .map((b) => b.span),
                );
                postPoint.append(
                  ...fixedBoundaries
                    .slice(cut)
                    .filter((b) => b.span !== undefined) // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    .map((b) => b.span),
                );
              }
            } else {
              // Create single span with text
              const innerSpan = document.createElement("span");
              innerSpan.className = "aiev2-span";
              innerSpan.style.textAlign = textAlignment ?? "left";
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              innerSpan.append(
                ...fixedBoundaries.filter((b) => b.span !== undefined).map((b) => b.span),
              );
              fragment.append(innerSpan);
            }
            divRef.current.innerHTML = "";
            divRef.current.appendChild(fragment);
            // Update height after being added to divRef for decimal lines
            Array.from(divRef.current.getElementsByClassName("aiev2-decimal-line")).forEach(
              (el) => {
                el.style.height = `${Math.max(
                  ...Array.from(el.getElementsByClassName("aiev2-span")).map(
                    (el) => el.clientHeight,
                  ),
                )}px`;
              },
            );
            // Update cursor position and live happily ever after
            if (range !== undefined) {
              range.setEnd(emptyNode, 0);
              range.collapse();
            }
            if (e !== undefined) {
              e.stopPropagation();
              e.preventDefault();
            }
          }

          $parcel$ReactRefreshHelpers$db15.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        react: "21dqq",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "7sQ2j": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "getCaretPosition", () => getCaretPosition);
        function getCaretPosition(element) {
          let end = 0;
          let start = 0;
          const sel = window.getSelection();
          if (sel && sel.rangeCount > 0) {
            const range = sel.getRangeAt(0);
            const preCaretRange = range.cloneRange();
            preCaretRange.selectNodeContents(element);
            preCaretRange.setEnd(range.endContainer, range.endOffset);
            end = preCaretRange.toString().length;
            if (element.contains(range.startContainer)) {
              preCaretRange.setStart(range.startContainer, range.startOffset);
              start = end - preCaretRange.toString().length;
            }
          }
          return {
            start,
            end,
          };
        }
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    ggqyX: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "getHTMLfromV2Text", () => getHTMLfromV2Text);
        var _tofromHtml = require("../../functions/tofromHtml");
        function getHTMLfromV2Text(text, styleName, style) {
          const isr = JSON.stringify([
            {
              length: text.length,
              offset: 0,
              style: styleName,
            },
          ]);
          const html = document.createElement("div");
          html.setAttribute("classname", "aie-text");
          html.dataset.inlineStyleRanges = isr;
          const span = document.createElement("span");
          if (styleName !== "") span.setAttribute("classname", styleName);
          html.appendChild(span);
          const cssString = Object.entries(style)
            .map(([k, v]) => `${k.replace(/[A-Z]/g, "-$&").toLowerCase()}:${v}`)
            .join(";");
          span.setAttribute("style", cssString);
          const textContent = document.createTextNode(
            (0, _tofromHtml.toHtml)(text.replace(/[\u200B-\u200F\uFEFF]/g, "")),
          );
          span.appendChild(textContent);
          return html.outerHTML;
        }
      },
      {
        "../../functions/tofromHtml": "7amRs",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "7amRs": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "toHtml", () => toHtml);
        parcelHelpers.export(exports, "fromHtml", () => fromHtml);
        const toHtml = (text) =>
          text
            .replace(/&/g, "&amp;")
            .replace(/>/g, "&gt;")
            .replace(/≥/g, "&ge;")
            .replace(/≤/g, "&le;")
            .replace(/</g, "&lt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&apos;")
            .replace(/\n/g, "<br/>")
            .replace(/\u00A0/g, "&nbsp;");
        const fromHtml = (text) =>
          text
            .replace(/&nbsp;/g, "\xa0")
            .replace(/<br\/>/g, "\n") // eslint-disable-next-line quotes
            .replace(/&apos;/g, "'")
            .replace(/&quot;/g, '"')
            .replace(/&lt;/g, "<")
            .replace(/&le;/g, "\u2264")
            .replace(/&ge;/g, "\u2265")
            .replace(/&gt;/g, ">")
            .replace(/&amp;/g, "&");
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    kS5ps: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "getV2TextStyle", () => getV2TextStyle);
        function getV2TextStyle(text) {
          // Do nothing if there is nothing to do
          if (!text.includes("classname"))
            return {
              newText: text,
              styleName: "",
            };
          // Create element so you can read the things
          const d = document.createElement("div");
          d.innerHTML = text;
          let styleName = "";
          // Any style info will have been in the first child dataset
          if (d.children[0].dataset.inlineStyleRanges) {
            // Get the inline style range, but only interested in the style name
            const isr = JSON.parse(d.children[0].dataset.inlineStyleRanges ?? "[]");
            // Add the style name
            if (Array.isArray(isr) && isr.length > 0) styleName = isr[0].style;
          }
          return {
            newText: d.textContent ?? "",
            styleName,
          };
        }
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    jVspy: [function () {}, {}],
    dyESa: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "loadFromHTML", () => loadFromHTML);
        var _draftJs = require("draft-js");
        const loadFromHTML = (s, editable) => {
          // Update ~ here if it is not a DIV
          const initialBlocks = (0, _draftJs.convertFromHTML)(
            editable === false ? s.replace(/~/g, "<br/>") : s,
          );
          // There are no spans to apply
          if (!s.match(/^<div classname=["']aie-text/i)) {
            const state = (0, _draftJs.ContentState).createFromBlockArray(
              initialBlocks.contentBlocks,
              initialBlocks.entityMap,
            );
            return state;
          } else {
            const htmlIn = document.createElement("template");
            htmlIn.innerHTML = s.trim();
            const rawBlocks = [];
            // There should be only one child
            for (let i = 0; i < htmlIn.content.children.length; i++) {
              const child = htmlIn.content.children[i];
              const rawBlock = {
                key: child.dataset.key ?? "",
                type: child.dataset.type ?? "unstyled",
                // Update ~ here if it is a DIV
                text: editable === false ? child.innerText.replace(/~/g, "\n") : child.innerText,
                depth: 0,
                // Style ranges from data
                inlineStyleRanges: JSON.parse(child.dataset.inlineStyleRanges ?? "[]"),
                entityRanges: [],
              };
              // Seems to be a problem here for testing, not sure why the if is required...
              if (rawBlocks !== undefined) rawBlocks.push(rawBlock);
            }
            const state = (0, _draftJs.convertFromRaw)({
              blocks: rawBlocks,
              entityMap: initialBlocks.entityMap,
            });
            return state;
          }
        };
      },
      { "draft-js": "80cnM", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    ju5wJ: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "saveToHTML", () => saveToHTML);
        var _htmlBlock = require("./htmlBlock");
        const saveToHTML = (d, dsm) => {
          return d.blocks.map((b) => (0, _htmlBlock.htmlBlock)(b, dsm)).join("");
        };
      },
      { "./htmlBlock": "jpb8H", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    jpb8H: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "htmlBlock", () => htmlBlock);
        var _functions = require("../../functions");
        const htmlBlock = (b, dsm) => {
          // Explode string
          let chars = b.text.split("");
          // Swap out HTML characters for safety
          chars = chars.map((c) => (0, _functions.toHtml)(c));
          // Add inline style starts and ends
          for (const s of b.inlineStyleRanges) {
            chars[s.offset] = `<span classname="${s.style}" style="${Object.entries(
              dsm[s.style] ?? {},
            )
              .map(([k, v]) => `${k.replace(/[A-Z]/g, "-$&").toLowerCase()}:${v}`)
              .join(";")}">${chars[s.offset]}`;
            chars[s.offset + s.length - 1] = `${chars[s.offset + s.length - 1]}</span>`;
          }
          const ret = document.createElement("div");
          ret.setAttribute("classname", "aie-text");
          ret.dataset.key = b.key;
          ret.dataset.type = b.type;
          ret.dataset.inlineStyleRanges = JSON.stringify(b.inlineStyleRanges);
          ret.innerHTML = chars.join("");
          return ret.outerHTML;
        };
      },
      { "../../functions": "gfVyL", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    gfVyL: [
      function (require, module, exports) {
        // import { assignSubListLevel } from "./assignSubListLevel";
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "fromHtml", () => (0, _tofromHtml.fromHtml));
        parcelHelpers.export(exports, "bodyPreProcess", () => (0, _bodyPreProcess.bodyPreProcess));
        parcelHelpers.export(
          exports,
          "headerPreProcess",
          () => (0, _headerPreProcess.headerPreProcess),
        );
        parcelHelpers.export(exports, "objEqual", () => (0, _objEqual.objEqual));
        parcelHelpers.export(exports, "newCell", () => (0, _newCell.newCell));
        parcelHelpers.export(
          exports,
          "newExternalReplacements",
          () => (0, _newExternalReplacements.newExternalReplacements),
        );
        parcelHelpers.export(
          exports,
          "newExternalSingle",
          () => (0, _newExternalSingle.newExternalSingle),
        );
        parcelHelpers.export(exports, "newReplacement", () => (0, _newReplacement.newReplacement));
        parcelHelpers.export(
          exports,
          "newReplacementValues",
          () => (0, _newReplacementValues.newReplacementValues),
        );
        parcelHelpers.export(exports, "newRow", () => (0, _newRow.newRow));
        parcelHelpers.export(exports, "newRowGroup", () => (0, _newRowGroup.newRowGroup));
        parcelHelpers.export(exports, "repeatHeaders", () => (0, _repeatHeaders.repeatHeaders));
        parcelHelpers.export(exports, "repeatRows", () => (0, _repeatRows.repeatRows));
        parcelHelpers.export(exports, "toHtml", () => (0, _tofromHtml.toHtml));
        parcelHelpers.export(
          exports,
          "updateReplacementVersion",
          () => (0, _updateReplacementVersion.updateReplacementVersion),
        );
        parcelHelpers.export(
          exports,
          "updateReplToExtl",
          () => (0, _updateReplacementVersion.updateReplToExtl),
        );
        parcelHelpers.export(
          exports,
          "updateTableDataVersion",
          () => (0, _updateTableDataVersion.updateTableDataVersion),
        );
        parcelHelpers.export(
          exports,
          "updateLineDisplayVersion",
          () => (0, _updateLineDisplayVersion.updateLineDisplayVersion),
        );
        var _bodyPreProcess = require("./bodyPreProcess");
        var _headerPreProcess = require("./headerPreProcess");
        var _newCell = require("./newCell");
        var _newExternalReplacements = require("./newExternalReplacements");
        var _newExternalSingle = require("./newExternalSingle");
        var _newReplacement = require("./newReplacement");
        var _newReplacementValues = require("./newReplacementValues");
        var _newRow = require("./newRow");
        var _newRowGroup = require("./newRowGroup");
        var _objEqual = require("./objEqual");
        var _repeatHeaders = require("./repeatHeaders");
        var _repeatRows = require("./repeatRows");
        var _tofromHtml = require("./tofromHtml");
        var _updateReplacementVersion = require("./updateReplacementVersion");
        var _updateTableDataVersion = require("./updateTableDataVersion");
        var _updateLineDisplayVersion = require("./UpdateLineDisplayVersion");
      },
      {
        "./bodyPreProcess": "gUarg",
        "./headerPreProcess": "gEAG0",
        "./newCell": "59Btz",
        "./newExternalReplacements": "Q9duY",
        "./newExternalSingle": "9SjNA",
        "./newReplacement": "6x9BR",
        "./newReplacementValues": "3Tubi",
        "./newRow": "6kPB4",
        "./newRowGroup": "jtvJj",
        "./objEqual": "vx8OT",
        "./repeatHeaders": "9LAss",
        "./repeatRows": "aWvvL",
        "./tofromHtml": "7amRs",
        "./updateReplacementVersion": "c57es",
        "./updateTableDataVersion": "jkXeV",
        "./UpdateLineDisplayVersion": "58RjM",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    gUarg: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "bodyPreProcess", () => bodyPreProcess);
        var _uuid = require("uuid");
        var _rowPreProcess = require("./rowPreProcess");
        const bodyPreProcess = (defaultCellWidth, rgs) => {
          if (rgs === undefined) return [];
          return rgs.map((rg) => {
            return {
              ...rg,
              rows: (0, _rowPreProcess.rowPreProcess)(defaultCellWidth, rg.rows),
              aitid: rg.aitid ?? (0, _uuid.v4)(),
            };
          });
        };
      },
      {
        uuid: "j4KJi",
        "./rowPreProcess": "8xnXU",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    j4KJi: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "v1", () => (0, _v1JsDefault.default));
        parcelHelpers.export(exports, "v3", () => (0, _v3JsDefault.default));
        parcelHelpers.export(exports, "v4", () => (0, _v4JsDefault.default));
        parcelHelpers.export(exports, "v5", () => (0, _v5JsDefault.default));
        parcelHelpers.export(exports, "NIL", () => (0, _nilJsDefault.default));
        parcelHelpers.export(exports, "version", () => (0, _versionJsDefault.default));
        parcelHelpers.export(exports, "validate", () => (0, _validateJsDefault.default));
        parcelHelpers.export(exports, "stringify", () => (0, _stringifyJsDefault.default));
        parcelHelpers.export(exports, "parse", () => (0, _parseJsDefault.default));
        var _v1Js = require("./v1.js");
        var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
        var _v3Js = require("./v3.js");
        var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
        var _v4Js = require("./v4.js");
        var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
        var _v5Js = require("./v5.js");
        var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
        var _nilJs = require("./nil.js");
        var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
        var _versionJs = require("./version.js");
        var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);
        var _validateJs = require("./validate.js");
        var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
        var _stringifyJs = require("./stringify.js");
        var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
        var _parseJs = require("./parse.js");
        var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
      },
      {
        "./v1.js": false,
        "./v3.js": false,
        "./v4.js": "8zJtu",
        "./v5.js": false,
        "./nil.js": false,
        "./version.js": false,
        "./validate.js": false,
        "./stringify.js": false,
        "./parse.js": false,
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "8zJtu": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        var _nativeJs = require("./native.js");
        var _nativeJsDefault = parcelHelpers.interopDefault(_nativeJs);
        var _rngJs = require("./rng.js");
        var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
        var _stringifyJs = require("./stringify.js");
        function v4(options, buf, offset) {
          if ((0, _nativeJsDefault.default).randomUUID && !buf && !options)
            return (0, _nativeJsDefault.default).randomUUID();
          options = options || {};
          const rnds = options.random || (options.rng || (0, _rngJsDefault.default))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
          rnds[6] = (rnds[6] & 0x0f) | 0x40;
          rnds[8] = (rnds[8] & 0x3f) | 0x80; // Copy bytes to buffer, if provided
          if (buf) {
            offset = offset || 0;
            for (let i = 0; i < 16; ++i) buf[offset + i] = rnds[i];
            return buf;
          }
          return (0, _stringifyJs.unsafeStringify)(rnds);
        }
        exports.default = v4;
      },
      {
        "./native.js": "lYayS",
        "./rng.js": "2psyE",
        "./stringify.js": "5Y9F1",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    lYayS: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        const randomUUID =
          typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
        exports.default = {
          randomUUID,
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "2psyE": [
      function (require, module, exports) {
        // Unique ID creation requires a high quality random # generator. In the browser we therefore
        // require the crypto API and do not support built-in fallback to lower quality random number
        // generators (like Math.random()).
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "default", () => rng);
        let getRandomValues;
        const rnds8 = new Uint8Array(16);
        function rng() {
          // lazy load so that environments that need to polyfill have a chance to do so
          if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
            getRandomValues =
              typeof crypto !== "undefined" &&
              crypto.getRandomValues &&
              crypto.getRandomValues.bind(crypto);
            if (!getRandomValues)
              throw new Error(
                "crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported",
              );
          }
          return getRandomValues(rnds8);
        }
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "5Y9F1": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "unsafeStringify", () => unsafeStringify);
        var _validateJs = require("./validate.js");
        var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
        /**
         * Convert array of 16 byte values to UUID string format of the form:
         * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
         */ const byteToHex = [];
        for (let i = 0; i < 256; ++i) byteToHex.push((i + 0x100).toString(16).slice(1));
        function unsafeStringify(arr, offset = 0) {
          // Note: Be careful editing this code!  It's been tuned for performance
          // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
          return (
            byteToHex[arr[offset + 0]] +
            byteToHex[arr[offset + 1]] +
            byteToHex[arr[offset + 2]] +
            byteToHex[arr[offset + 3]] +
            "-" +
            byteToHex[arr[offset + 4]] +
            byteToHex[arr[offset + 5]] +
            "-" +
            byteToHex[arr[offset + 6]] +
            byteToHex[arr[offset + 7]] +
            "-" +
            byteToHex[arr[offset + 8]] +
            byteToHex[arr[offset + 9]] +
            "-" +
            byteToHex[arr[offset + 10]] +
            byteToHex[arr[offset + 11]] +
            byteToHex[arr[offset + 12]] +
            byteToHex[arr[offset + 13]] +
            byteToHex[arr[offset + 14]] +
            byteToHex[arr[offset + 15]]
          );
        }
        function stringify(arr, offset = 0) {
          const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
          // of the following:
          // - One or more input array values don't map to a hex octet (leading to
          // "undefined" in the uuid)
          // - Invalid input values for the RFC `version` or `variant` fields
          if (!(0, _validateJsDefault.default)(uuid))
            throw TypeError("Stringified UUID is invalid");
          return uuid;
        }
        exports.default = stringify;
      },
      { "./validate.js": "eHPgI", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    eHPgI: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        var _regexJs = require("./regex.js");
        var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
        function validate(uuid) {
          return typeof uuid === "string" && (0, _regexJsDefault.default).test(uuid);
        }
        exports.default = validate;
      },
      { "./regex.js": "bUa5g", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    bUa5g: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        exports.default =
          /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "8xnXU": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "rowPreProcess", () => rowPreProcess);
        var _uuid = require("uuid");
        var _cellPreProcess = require("./cellPreProcess");
        var _newRow = require("./newRow");
        const rowPreProcess = (defaultCellWidth, rs) => {
          // Return an empty row if there is nothing
          if (rs === undefined) return [(0, _newRow.newRow)(0, defaultCellWidth)];
          // Check aitid
          return rs.map((r) => {
            return {
              ...r,
              cells: (0, _cellPreProcess.cellPreProcess)(defaultCellWidth, r.cells),
              aitid: r.aitid ?? (0, _uuid.v4)(),
            };
          });
        };
      },
      {
        uuid: "j4KJi",
        "./cellPreProcess": "4bjRF",
        "./newRow": "6kPB4",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "4bjRF": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "cellPreProcess", () => cellPreProcess);
        var _uuid = require("uuid");
        var _newCell = require("./newCell");
        const cellPreProcess = (defaultCellWidth, cs) => {
          if (cs === undefined) return [(0, _newCell.newCell)(defaultCellWidth)];
          // Check aitid
          return cs.map((c) => {
            return {
              ...c,
              colSpan: c.colSpan ?? 1,
              rowSpan: c.rowSpan ?? 1,
              colWidth: c.colWidth ?? defaultCellWidth,
              aitid: c.aitid && c.aitid.length > 4 ? c.aitid : (0, _uuid.v4)(),
            };
          });
        };
      },
      {
        uuid: "j4KJi",
        "./newCell": "59Btz",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "59Btz": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newCell", () => newCell);
        var _uuid = require("uuid");
        const newCell = (cellWidth) => {
          const cell = {
            aitid: (0, _uuid.v4)(),
            text: "",
            rowSpan: 1,
            colSpan: 1,
            colWidth: cellWidth,
          };
          return cell;
        };
      },
      { uuid: "j4KJi", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "6kPB4": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newRow", () => newRow);
        var _uuid = require("uuid");
        var _newCell = require("./newCell");
        const newRow = (defaultCellWidth, l) => {
          const newRow = {
            aitid: (0, _uuid.v4)(),
            cells: [],
          };
          // Add new cells in a loop to avoid duplicate aitid
          for (let i = 0; i < (l ?? 1); i++)
            newRow.cells.push((0, _newCell.newCell)(defaultCellWidth));
          return newRow;
        };
      },
      {
        uuid: "j4KJi",
        "./newCell": "59Btz",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    gEAG0: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "headerPreProcess", () => headerPreProcess);
        var _uuid = require("uuid");
        var _rowPreProcess = require("./rowPreProcess");
        const headerPreProcess = (defaultCellWidth, rg) => {
          if (rg === undefined)
            return {
              aitid: (0, _uuid.v4)(),
              rows: [],
            };
          if (rg === false) return false;
          return {
            ...rg,
            rows: (0, _rowPreProcess.rowPreProcess)(defaultCellWidth, rg.rows),
            aitid: rg.aitid ?? (0, _uuid.v4)(),
          };
        };
      },
      {
        uuid: "j4KJi",
        "./rowPreProcess": "8xnXU",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    Q9duY: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newExternalReplacements", () => newExternalReplacements);
        var _newReplacementValues = require("./newReplacementValues");
        const newExternalReplacements = () => {
          return {
            givenName: "",
            newTexts: [(0, _newReplacementValues.newReplacementValues)()],
          };
        };
      },
      {
        "./newReplacementValues": "3Tubi",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "3Tubi": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newReplacementValues", () => newReplacementValues);
        var _uuid = require("uuid");
        const newReplacementValues = () => {
          return {
            airid: (0, _uuid.v4)(),
            texts: [""],
            spaceAfter: false,
            subLists: [],
          };
        };
      },
      { uuid: "j4KJi", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "9SjNA": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newExternalSingle", () => newExternalSingle);
        var _uuid = require("uuid");
        const newExternalSingle = () => {
          return {
            airid: (0, _uuid.v4)(),
            oldText: "",
            newText: "",
          };
        };
      },
      { uuid: "j4KJi", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "6x9BR": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newReplacement", () => newReplacement);
        var _uuid = require("uuid");
        var _newReplacementValues = require("./newReplacementValues");
        const newReplacement = () => {
          return {
            airid: (0, _uuid.v4)(),
            oldText: "",
            newTexts: [(0, _newReplacementValues.newReplacementValues)()],
            includeTrailing: false,
          };
        };
      },
      {
        uuid: "j4KJi",
        "./newReplacementValues": "3Tubi",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    jtvJj: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newRowGroup", () => newRowGroup);
        var _uuid = require("uuid");
        var _newCell = require("./newCell");
        var _newRow = require("./newRow");
        const newRowGroup = (defaultCellWidth, l, newRowGroupTemplate) => {
          return {
            aitid: (0, _uuid.v4)(),
            replacements: newRowGroupTemplate?.replacements ?? [],
            rows: newRowGroupTemplate?.rows.map((row) => {
              const newCells = [];
              for (let ci = 0; ci < (l ?? 1); ci++)
                newCells.push(
                  row.cells[ci] !== undefined
                    ? {
                        ...row.cells[ci],
                        aitid: (0, _uuid.v4)(),
                      }
                    : (0, _newCell.newCell)(defaultCellWidth),
                );
              return {
                aitid: (0, _uuid.v4)(),
                cells: newCells,
              };
            }) ?? [(0, _newRow.newRow)(defaultCellWidth, l)],
            spaceAfter: true,
          };
        };
      },
      {
        uuid: "j4KJi",
        "./newCell": "59Btz",
        "./newRow": "6kPB4",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    vx8OT: [
      function (require, module, exports) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "objEqual", () => objEqual);
        const objEqual = (a, b, path) => {
          if (a === b) return [true, ""];
          if (typeof a !== "object" && typeof b !== "object" && a !== b)
            return [false, `${path}:notEqual:${a}<>${b}`];
          if (!a || !b || (typeof a !== "object" && typeof b !== "object"))
            return [a === b, a === b ? "" : `${path}:notMismatch:${a}<>${b}`];
          if (a === null || a === undefined || b === null || b === undefined)
            return [false, `${path}:nullMismatch:${a}<>${b}`];
          if (a.prototype !== b.prototype) return [false, `${path}:prototypeMismatch:${a}<>${b}`];
          const keys = Object.keys(a);
          if (keys.length !== Object.keys(b).length)
            return [false, `${path}:lengthMismatch:${keys.length}<>${Object.keys(b).length}`];
          const checkObject = keys.map((k) => objEqual(a[k], b[k], `${path}.${k}`));
          const checkObjectR = checkObject.reduce(
            ([overall, str], [b, s]) => {
              const tf = overall === true && b === true;
              const badPath = s !== "" ? `${str}${str !== "" ? "\n" : ""}${s}` : str;
              return [tf, badPath];
            },
            [true, ""],
          );
          return checkObjectR;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "9LAss": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "repeatHeaders", () => repeatHeaders);
        var _removeRowRepeatInfo = require("./removeRowRepeatInfo");
        var _replaceHeaders = require("./replaceHeaders");
        var _singleReplacements = require("./singleReplacements");
        var _updateExternals = require("./updateExternals");
        const repeatHeaders = (
          rows,
          replacements,
          defaultCellWidth,
          noProcessing,
          rowHeaderColumns,
          externalLists,
          externalSingles,
        ) => {
          // Start with blank slate, need to strip repeat inforation everytime!
          let newHeaderRows = (0, _removeRowRepeatInfo.removeRowRepeatInfo)(rows);
          let newColumnRepeats = Array.from(rows[rows.length - 1].cells.keys()).map((n) => {
            return {
              columnIndex: n,
            };
          });
          // Strip repeat data if flagged
          if (noProcessing)
            return {
              rows: newHeaderRows,
              columnRepeats: newColumnRepeats,
            };
          // Process replacements
          ((0, _updateExternals.updateExternals)(replacements, externalLists) ?? []).forEach(
            (rep) => {
              const afterReplacement = (0, _replaceHeaders.replaceHeaders)(
                rowHeaderColumns ?? 0,
                newHeaderRows,
                newColumnRepeats,
                defaultCellWidth,
                rep,
                undefined,
              );
              newHeaderRows = afterReplacement.newHeaderRows;
              newColumnRepeats = afterReplacement.newColumnRepeats;
            },
          );
          // Single post processing rep
          newHeaderRows = (0, _singleReplacements.singleReplacements)(
            externalSingles,
            newHeaderRows,
          );
          return {
            rows: newHeaderRows,
            columnRepeats: newColumnRepeats,
          };
        };
      },
      {
        "./removeRowRepeatInfo": "fkFzR",
        "./replaceHeaders": "8H1OY",
        "./singleReplacements": "5jwLn",
        "./updateExternals": "4S37G",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    fkFzR: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "removeRowRepeatInfo", () => removeRowRepeatInfo);
        const removeRowRepeatInfo = (rows) => {
          return rows.map((r) => {
            const ret = {
              aitid: r.aitid,
              cells: r.cells // .filter(c => !c.replacedText?.includes("__filler"))
                .map((c) => {
                  return {
                    aitid: c.aitid,
                    text: c.text,
                    justifyText: c.justifyText,
                    comments: c.comments,
                    colSpan: c.colSpan,
                    rowSpan: c.rowSpan,
                    colWidth: c.colWidth,
                    textIndents: c.textIndents,
                  };
                }),
            };
            return ret;
          });
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "8H1OY": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "replaceHeaders", () => replaceHeaders);
        var _getRawTextParts = require("../aie/functions/getRawTextParts");
        var _appendCells = require("./appendCells");
        var _flattenReplacements = require("./flattenReplacements");
        var _newCell = require("./newCell");
        var _replaceCellText = require("./replaceCellText");
        const replaceHeaders = (
          rowHeaderColumns,
          rows,
          columnRepeats,
          defaultCellWidth,
          replacement,
          externalLists,
        ) => {
          // Check there are rows
          if (rows.length === 0)
            return {
              newHeaderRows: [],
              newColumnRepeats: [],
            };
          // Set up holders
          let newHeaderRows = rows.map((r) => {
            return {
              aitid: r.aitid,
              cells: [],
            };
          });
          let newColumnRepeats = [];
          // Go through each column
          let colsProcessed = 1;
          let addedCols = 0;
          for (let ci = 0; ci < rows[0].cells.length; ci = ci + colsProcessed) {
            // Look for match, is there is one to find
            let found =
              replacement === undefined ||
              replacement.oldText === "" ||
              replacement.newTexts.length === 0 ||
              replacement.newTexts[0].texts.join("") === "";
            colsProcessed = 1;
            // Add next column if the text is already found
            if (found || ci < rowHeaderColumns) {
              newHeaderRows = (0, _appendCells.appendCells)(
                newHeaderRows,
                rows.map((r) => {
                  return {
                    aitid: r.aitid,
                    cells: [r.cells[ci]],
                  };
                }),
              );
              newColumnRepeats = [...newColumnRepeats, columnRepeats[ci]];
            } else {
              for (let ri = 0; ri < rows.length; ri++) {
                const cellTextParts = (0, _getRawTextParts.getRawTextParts)(
                  rows[ri].cells[ci].replacedText ?? rows[ri].cells[ci].text ?? "",
                );
                // React if found
                if (replacement && cellTextParts.some((t) => t.includes(replacement.oldText))) {
                  const targetCell = rows[ri].cells[ci];
                  found = true;
                  if (targetCell.colSpan === undefined) targetCell.colSpan = 1;
                  const repeatSpan = Math.max(...rows.map((r) => r.cells[ci].colSpan ?? 1));
                  let midRows = rows.slice(ri).map((r) => {
                    return {
                      aitid: r.aitid,
                      cells: [],
                    };
                  });
                  let midRepeats = [];
                  // Cycle through reach replacement value
                  for (let rvi = 0; rvi < replacement.newTexts.length; rvi++) {
                    const rv = replacement.newTexts[rvi];
                    // Process sublist
                    const lowerQuad = rows.slice(ri + 1).map((r) => {
                      return {
                        aitid: r.aitid,
                        cells: r.cells.slice(ci, ci + repeatSpan),
                      };
                    });
                    const nextReplacement = (0, _flattenReplacements.flattenReplacements)(
                      rv.subLists,
                      externalLists,
                    );
                    const { newHeaderRows: lowerProcessed, newColumnRepeats: lowerColumnRepeats } =
                      replaceHeaders(
                        0,
                        lowerQuad,
                        lowerQuad.length > 0 && lowerQuad[0].cells.length > 0
                          ? Array.from(lowerQuad[0].cells.keys()).map((n) => {
                              return {
                                columnIndex: n,
                              };
                            })
                          : [],
                        defaultCellWidth,
                        nextReplacement,
                      );
                    // Perform replacements for each text entry
                    for (let ti = 0; ti < rv.texts.length; ti++) {
                      const thisRepeat = (0, _replaceCellText.replaceCellText)(
                        targetCell,
                        replacement.oldText,
                        rv.texts[ti],
                      );
                      // Expand to cover all lower columns
                      if (lowerProcessed.length > 0 && lowerProcessed[0].cells.length > repeatSpan)
                        thisRepeat.repeatColSpan =
                          lowerProcessed[0].cells.length + repeatSpan - targetCell.colSpan;
                      // Add into mid cells
                      const targetRow = {
                        aitid: rows[ri].aitid,
                        cells: [thisRepeat],
                      };
                      // Add usual trailing cells
                      if ((thisRepeat.colSpan ?? 1) > 1)
                        targetRow.cells.push(
                          ...rows[ri].cells.slice(ci + 1, ci + targetCell.colSpan),
                        );
                      // Add new blank cells
                      if (
                        thisRepeat.colSpan !== undefined &&
                        thisRepeat.repeatColSpan !== undefined &&
                        thisRepeat.repeatColSpan > thisRepeat.colSpan
                      ) {
                        const nIns = thisRepeat.repeatColSpan - thisRepeat.colSpan;
                        for (let nci = 0; nci < nIns; nci++) {
                          const n = (0, _newCell.newCell)(defaultCellWidth);
                          n.colSpan = 0;
                          n.repeatColSpan = 0;
                          n.replacedText = "";
                          targetRow.cells.push(n);
                        }
                      }
                      // Add extra cells covered by repeatSpan
                      if (repeatSpan > targetCell.colSpan)
                        targetRow.cells.push(
                          ...rows[ri].cells.slice(ci + targetCell.colSpan, ci + repeatSpan),
                        );
                      // Add this repeat into the output
                      midRows = (0, _appendCells.appendCells)(midRows, [
                        targetRow,
                        ...lowerProcessed,
                      ]);
                      // Work out new repeat for this cell
                      if (lowerColumnRepeats.length > 0)
                        midRepeats = [
                          ...midRepeats,
                          ...(lowerColumnRepeats ?? []).map((crep) => {
                            return {
                              columnIndex: columnRepeats[ci].columnIndex + crep.columnIndex,
                              colRepeat: `${columnRepeats[ci].colRepeat ?? ""}${`[${rvi},${ti}]${
                                crep.colRepeat ?? ""
                              }`}`,
                            };
                          }),
                        ];
                      else
                        midRepeats = [
                          ...midRepeats,
                          ...Array.from(Array(repeatSpan).keys()).map((n) => {
                            return {
                              columnIndex: columnRepeats[ci + n].columnIndex,
                              colRepeat: `${columnRepeats[ci].colRepeat ?? ""}${`[${rvi},${ti}]`}`,
                            };
                          }),
                        ];
                    }
                  }
                  // Add full column
                  newHeaderRows = (0, _appendCells.appendCells)(
                    newHeaderRows,
                    rows.map((r, rj) => {
                      // Return row above
                      if (rj < ri)
                        return {
                          aitid: r.aitid,
                          cells: [...r.cells.slice(ci, ci + repeatSpan)],
                        };
                      else
                        return {
                          aitid: r.aitid,
                          cells: midRows[rj - ri].cells,
                        };
                    }),
                  );
                  newColumnRepeats = [...newColumnRepeats, ...midRepeats];
                  // Ensure that columns above cover the repeats
                  const nIns = midRows[0].cells.length - (repeatSpan ?? 1);
                  if (nIns > 0)
                    // Number of cells to insert / colSpan to increase
                    for (let rj = ri - 1; rj >= 0; rj--) {
                      let targetCellAbove = newHeaderRows[rj].cells[ci + addedCols];
                      // Update the target to have minimum repeatColSpan
                      if (targetCellAbove !== undefined) {
                        if (targetCellAbove.colSpan === undefined) targetCellAbove.colSpan = 1;
                        // Check that the target is showing
                        let lookup = 0;
                        while (targetCellAbove.colSpan === 0 && lookup < ci) {
                          // Move to previous cell
                          lookup++;
                          targetCellAbove = rows[rj].cells[ci - lookup];
                        }
                        // Calculated new colSpan and add in fillers
                        targetCellAbove.repeatColSpan =
                          (targetCellAbove.repeatColSpan ?? targetCellAbove.colSpan ?? 1) + nIns;
                        const newCells2 = [];
                        for (let nci = 0; nci < nIns; nci++) {
                          const n = (0, _newCell.newCell)(defaultCellWidth);
                          n.colSpan = 0;
                          n.repeatColSpan = 0;
                          n.replacedText = "";
                          newCells2.push(n);
                        }
                        newHeaderRows[rj].cells.splice(
                          ci + addedCols - lookup + 1,
                          0,
                          ...newCells2,
                        );
                      } else
                        console.warn(
                          "Have not found the target cell above the column header replacement",
                        );
                      // Update number of columns added so far
                      addedCols = addedCols + nIns;
                    }
                  colsProcessed = repeatSpan;
                  break;
                }
              }
              // Append the row if it was not found on this pass
              if (!found) {
                newHeaderRows = (0, _appendCells.appendCells)(
                  newHeaderRows,
                  rows.map((r) => {
                    return {
                      aitid: r.aitid,
                      cells: [r.cells[ci]],
                    };
                  }),
                );
                newColumnRepeats = [...newColumnRepeats, columnRepeats[ci]];
              }
            }
          }
          return {
            newHeaderRows,
            newColumnRepeats,
          };
        };
      },
      {
        "../aie/functions/getRawTextParts": "b1veE",
        "./appendCells": "9NvKw",
        "./flattenReplacements": "8MFaC",
        "./newCell": "59Btz",
        "./replaceCellText": "cgTjX",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    b1veE: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "getRawTextParts", () => getRawTextParts);
        var _tofromHtml = require("../../functions/tofromHtml");
        const getRawTextParts = (s) => {
          // Do standard replace if not aie-text or no inline styles
          if (!s.match(/^<div classname=["']aie-text/i) || !s.includes("data-inline-style-ranges"))
            return [(0, _tofromHtml.fromHtml)(s)];
          else {
            // Create element to manipulate
            const ret = [];
            const htmlIn = document.createElement("template");
            htmlIn.innerHTML = s.trim();
            // Cycle through elements
            htmlIn.content.childNodes.forEach((el) => {
              if (el.textContent !== null) ret.push(el.textContent);
            });
            return ret;
          }
        };
      },
      {
        "../../functions/tofromHtml": "7amRs",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "9NvKw": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "appendCells", () => appendCells);
        const appendCells = (base, append) => {
          return base.map((r, ri) => {
            return {
              aitid: r.aitid,
              cells: [...r.cells, ...append[ri].cells],
            };
          });
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "8MFaC": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "flattenReplacements", () => flattenReplacements);
        var _appendReplacement = require("./appendReplacement");
        var _newReplacement = require("./newReplacement");
        var _updateExternals = require("./updateExternals");
        const flattenReplacements = (reps, exts) => {
          // Do nothing if there is nothing to do
          if (reps === undefined || reps.length === 0) return undefined;
          // Create holder
          let newRep = (0, _newReplacement.newReplacement)();
          // Check append is ok
          reps.map((rep, repi) => {
            // First update any external list
            const uEx = (0, _updateExternals.updateExternals)(
              [
                {
                  ...rep,
                },
              ],
              exts,
            );
            if (!uEx || uEx.length === 0) return;
            const incoming = uEx[0];
            // First entry can be used as a base
            if (repi === 0) newRep = incoming;
            else
              newRep.newTexts = newRep.newTexts.map((nt) => {
                return {
                  ...nt,
                  subLists: (0, _appendReplacement.appendReplacement)(incoming, nt.subLists),
                };
              });
            return true;
          });
          return newRep;
        };
      },
      {
        "./appendReplacement": "5LuR4",
        "./newReplacement": "6x9BR",
        "./updateExternals": "4S37G",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "5LuR4": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "appendReplacement", () => appendReplacement);
        var _structuredClone = require("@ungap/structured-clone");
        var _structuredCloneDefault = parcelHelpers.interopDefault(_structuredClone);
        const appendReplacement = (incoming, subLists) => {
          let newSubLists = [];
          if (subLists === undefined || subLists.length === 0)
            newSubLists.push((0, _structuredCloneDefault.default)(incoming));
          else
            newSubLists = subLists.map((s) => {
              return {
                ...s,
                newTexts: s.newTexts.map((nt) => {
                  return {
                    ...nt,
                    subLists: appendReplacement(incoming, nt.subLists),
                  };
                }),
              };
            });
          return newSubLists;
        };
      },
      {
        "@ungap/structured-clone": "2vpyK",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "2vpyK": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        /* c8 ignore stop */ parcelHelpers.export(
          exports,
          "deserialize",
          () => (0, _deserializeJs.deserialize),
        );
        parcelHelpers.export(exports, "serialize", () => (0, _serializeJs.serialize));
        var _deserializeJs = require("./deserialize.js");
        var _serializeJs = require("./serialize.js");
        /**
         * @typedef {Array<string,any>} Record a type representation
         */ /**
         * Returns an array of serialized Records.
         * @param {any} any a serializable value.
         * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with
         * a transfer option (ignored when polyfilled) and/or non standard fields that
         * fallback to the polyfill if present.
         * @returns {Record[]}
         */ exports.default =
          typeof structuredClone === "function"
            ? /* c8 ignore start */ (any, options) =>
                options && ("json" in options || "lossy" in options)
                  ? (0, _deserializeJs.deserialize)((0, _serializeJs.serialize)(any, options))
                  : structuredClone(any)
            : (any, options) =>
                (0, _deserializeJs.deserialize)((0, _serializeJs.serialize)(any, options));
      },
      {
        "./deserialize.js": "lztg1",
        "./serialize.js": "jRuOc",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    lztg1: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "deserialize", () => deserialize);
        var _typesJs = require("./types.js");
        const env = typeof self === "object" ? self : globalThis;
        const deserializer = ($, _) => {
          const as = (out, index) => {
            $.set(index, out);
            return out;
          };
          const unpair = (index) => {
            if ($.has(index)) return $.get(index);
            const [type, value] = _[index];
            switch (type) {
              case (0, _typesJs.PRIMITIVE):
              case (0, _typesJs.VOID):
                return as(value, index);
              case (0, _typesJs.ARRAY): {
                const arr = as([], index);
                for (const index of value) arr.push(unpair(index));
                return arr;
              }
              case (0, _typesJs.OBJECT): {
                const object = as({}, index);
                for (const [key, index] of value) object[unpair(key)] = unpair(index);
                return object;
              }
              case (0, _typesJs.DATE):
                return as(new Date(value), index);
              case (0, _typesJs.REGEXP): {
                const { source, flags } = value;
                return as(new RegExp(source, flags), index);
              }
              case (0, _typesJs.MAP): {
                const map = as(new Map(), index);
                for (const [key, index] of value) map.set(unpair(key), unpair(index));
                return map;
              }
              case (0, _typesJs.SET): {
                const set = as(new Set(), index);
                for (const index of value) set.add(unpair(index));
                return set;
              }
              case (0, _typesJs.ERROR): {
                const { name, message } = value;
                return as(new env[name](message), index);
              }
              case (0, _typesJs.BIGINT):
                return as(BigInt(value), index);
              case "BigInt":
                return as(Object(BigInt(value)), index);
            }
            return as(new env[type](value), index);
          };
          return unpair;
        };
        const deserialize = (serialized) => deserializer(new Map(), serialized)(0);
      },
      { "./types.js": "65SZR", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "65SZR": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "VOID", () => VOID);
        parcelHelpers.export(exports, "PRIMITIVE", () => PRIMITIVE);
        parcelHelpers.export(exports, "ARRAY", () => ARRAY);
        parcelHelpers.export(exports, "OBJECT", () => OBJECT);
        parcelHelpers.export(exports, "DATE", () => DATE);
        parcelHelpers.export(exports, "REGEXP", () => REGEXP);
        parcelHelpers.export(exports, "MAP", () => MAP);
        parcelHelpers.export(exports, "SET", () => SET);
        parcelHelpers.export(exports, "ERROR", () => ERROR);
        parcelHelpers.export(exports, "BIGINT", () => BIGINT);
        const VOID = -1;
        const PRIMITIVE = 0;
        const ARRAY = 1;
        const OBJECT = 2;
        const DATE = 3;
        const REGEXP = 4;
        const MAP = 5;
        const SET = 6;
        const ERROR = 7;
        const BIGINT = 8; // export const SYMBOL = 9;
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    jRuOc: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "serialize", () => serialize);
        var _typesJs = require("./types.js");
        const EMPTY = "";
        const { toString } = {};
        const { keys } = Object;
        const typeOf = (value) => {
          const type = typeof value;
          if (type !== "object" || !value) return [(0, _typesJs.PRIMITIVE), type];
          const asString = toString.call(value).slice(8, -1);
          switch (asString) {
            case "Array":
              return [(0, _typesJs.ARRAY), EMPTY];
            case "Object":
              return [(0, _typesJs.OBJECT), EMPTY];
            case "Date":
              return [(0, _typesJs.DATE), EMPTY];
            case "RegExp":
              return [(0, _typesJs.REGEXP), EMPTY];
            case "Map":
              return [(0, _typesJs.MAP), EMPTY];
            case "Set":
              return [(0, _typesJs.SET), EMPTY];
          }
          if (asString.includes("Array")) return [(0, _typesJs.ARRAY), asString];
          if (asString.includes("Error")) return [(0, _typesJs.ERROR), asString];
          return [(0, _typesJs.OBJECT), asString];
        };
        const shouldSkip = ([TYPE, type]) =>
          TYPE === (0, _typesJs.PRIMITIVE) && (type === "function" || type === "symbol");
        const serializer = (strict, json, $, _) => {
          const as = (out, value) => {
            const index = _.push(out) - 1;
            $.set(value, index);
            return index;
          };
          const pair = (value) => {
            if ($.has(value)) return $.get(value);
            let [TYPE, type] = typeOf(value);
            switch (TYPE) {
              case (0, _typesJs.PRIMITIVE): {
                let entry = value;
                switch (type) {
                  case "bigint":
                    TYPE = (0, _typesJs.BIGINT);
                    entry = value.toString();
                    break;
                  case "function":
                  case "symbol":
                    if (strict) throw new TypeError("unable to serialize " + type);
                    entry = null;
                    break;
                  case "undefined":
                    return as([(0, _typesJs.VOID)], value);
                }
                return as([TYPE, entry], value);
              }
              case (0, _typesJs.ARRAY): {
                if (type) return as([type, [...value]], value);
                const arr = [];
                const index = as([TYPE, arr], value);
                for (const entry of value) arr.push(pair(entry));
                return index;
              }
              case (0, _typesJs.OBJECT): {
                if (type)
                  switch (type) {
                    case "BigInt":
                      return as([type, value.toString()], value);
                    case "Boolean":
                    case "Number":
                    case "String":
                      return as([type, value.valueOf()], value);
                  }
                if (json && "toJSON" in value) return pair(value.toJSON());
                const entries = [];
                const index = as([TYPE, entries], value);
                for (const key of keys(value))
                  if (strict || !shouldSkip(typeOf(value[key])))
                    entries.push([pair(key), pair(value[key])]);
                return index;
              }
              case (0, _typesJs.DATE):
                return as([TYPE, value.toISOString()], value);
              case (0, _typesJs.REGEXP): {
                const { source, flags } = value;
                return as(
                  [
                    TYPE,
                    {
                      source,
                      flags,
                    },
                  ],
                  value,
                );
              }
              case (0, _typesJs.MAP): {
                const entries = [];
                const index = as([TYPE, entries], value);
                for (const [key, entry] of value)
                  if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
                    entries.push([pair(key), pair(entry)]);
                return index;
              }
              case (0, _typesJs.SET): {
                const entries = [];
                const index = as([TYPE, entries], value);
                for (const entry of value)
                  if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));
                return index;
              }
            }
            const { message } = value;
            return as(
              [
                TYPE,
                {
                  name: type,
                  message,
                },
              ],
              value,
            );
          };
          return pair;
        };
        const serialize = (value, { json, lossy } = {}) => {
          const _ = [];
          return serializer(!(json || lossy), !!json, new Map(), _)(value), _;
        };
      },
      { "./types.js": "65SZR", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "4S37G": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "updateExternals", () => updateExternals);
        var _updateExternal = require("./updateExternal");
        const updateExternals = (reps, exts) => {
          if (reps === undefined) return undefined;
          return reps.map((rep) => (0, _updateExternal.updateExternal)(rep, exts));
        };
      },
      { "./updateExternal": "3AlRb", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "3AlRb": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "updateExternal", () => updateExternal);
        var _structuredClone = require("@ungap/structured-clone");
        var _structuredCloneDefault = parcelHelpers.interopDefault(_structuredClone);
        var _updateExternals = require("./updateExternals");
        const updateExternal = (rep, exts) => {
          const ix =
            rep.externalName !== undefined && exts !== undefined
              ? exts.findIndex((e) => e.givenName === rep.externalName)
              : -1;
          let found =
            ix > -1 && exts !== undefined && exts.length > ix
              ? (0, _structuredCloneDefault.default)(exts[ix].newTexts)
              : undefined;
          if (!found)
            found = rep.newTexts.some((nt) => nt.subLists !== undefined)
              ? rep.newTexts.map((nts) => {
                  const s1 =
                    nts.subLists === undefined
                      ? undefined
                      : (0, _updateExternals.updateExternals)(nts.subLists, exts);
                  const nt = {
                    ...nts,
                    subLists: s1,
                  };
                  return nt;
                })
              : rep.newTexts;
          const newR = {
            ...rep,
            newTexts: found,
          };
          return newR;
        };
      },
      {
        "@ungap/structured-clone": "2vpyK",
        "./updateExternals": "4S37G",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    cgTjX: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "replaceCellText", () => replaceCellText);
        var _newReplacedText = require("../aie/functions/newReplacedText");
        const replaceCellText = (cell, oldText, newText) => {
          const replacedText =
            cell.replacedText !== undefined
              ? (0, _newReplacedText.newReplacedText)(cell.replacedText, oldText, newText)
              : cell.text.includes(oldText)
              ? (0, _newReplacedText.newReplacedText)(cell.text, oldText, newText)
              : undefined;
          return {
            ...cell,
            replacedText: replacedText,
          };
        };
      },
      {
        "../aie/functions/newReplacedText": "jLgjW",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    jLgjW: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "newReplacedText", () => newReplacedText);
        var _tofromHtml = require("../../functions/tofromHtml");
        const newReplacedText = (s, oldPhrase, newPhrase) => {
          let ret;
          // Do standard replace if not aie-text or no inline styles
          if (!s.match(/^<div classname=["']aie-text/i) || !s.includes("data-inline-style-ranges"))
            ret = s.replaceAll(oldPhrase, newPhrase);
          else {
            // Create element to manipulate
            const htmlIn = document.createElement("template");
            htmlIn.innerHTML = s.trim();
            // Cycle through each block as a div
            for (let i = 0; i < htmlIn.content.children.length; i++) {
              // Set up for inlineStyle manipulation
              let pos = 0;
              const inlineStyleRanges = [];
              // Update element text
              const child = htmlIn.content.children[i];
              // Get new style lengths
              for (let j = 0; j < child.childNodes.length; j++) {
                child.childNodes[j].textContent =
                  child.childNodes[j].textContent?.replaceAll(
                    oldPhrase,
                    (0, _tofromHtml.fromHtml)(newPhrase),
                  ) ?? "";
                // Should only be possible to have span and #text
                if (child.childNodes[j].nodeName === "SPAN") {
                  const subchild = child.childNodes[j];
                  inlineStyleRanges.push({
                    offset: pos,
                    length: subchild.textContent?.length ?? 0,
                    style: subchild.attributes.getNamedItem("classname")?.value ?? "",
                  });
                  pos = pos + (subchild.textContent?.length ?? 0);
                } else pos = pos + child.childNodes[j].length;
              }
              // Replace block data
              child.dataset.inlineStyleRanges = JSON.stringify(inlineStyleRanges);
            }
            // Return processed element
            ret = htmlIn.innerHTML;
          }
          return ret;
        };
      },
      {
        "../../functions/tofromHtml": "7amRs",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "5jwLn": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "singleReplacements", () => singleReplacements);
        var _replaceCellText = require("./replaceCellText");
        function singleReplacements(externalSingles, newRows) {
          if (externalSingles !== undefined && externalSingles.length > 0)
            externalSingles.forEach((e) => {
              if (e.oldText !== undefined && e.oldText !== "" && e.newText !== undefined)
                newRows = newRows.map((r) => {
                  return {
                    ...r,
                    cells: r.cells.map((c) =>
                      (0, _replaceCellText.replaceCellText)(c, e.oldText ?? "", e.newText ?? ""),
                    ),
                  };
                });
            });
          return newRows;
        }
      },
      { "./replaceCellText": "cgTjX", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    aWvvL: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "repeatRows", () => repeatRows);
        var _removeRowRepeatInfo = require("./removeRowRepeatInfo");
        var _replaceRows = require("./replaceRows");
        var _singleReplacements = require("./singleReplacements");
        var _updateExternals = require("./updateExternals");
        const repeatRows = (
          rows,
          defaultCellWidth,
          replacements,
          spaceAfter,
          noProcessing,
          externalLists,
          externalSingles,
        ) => {
          // Create initial return
          let newRows = (0, _removeRowRepeatInfo.removeRowRepeatInfo)(rows);
          // Strip repeat data if flagged
          if (noProcessing) {
            newRows[newRows.length - 1].spaceAfter = spaceAfter;
            return newRows;
          }
          // Process rows if there are replacements
          const extReplacements = (0, _updateExternals.updateExternals)(
            replacements,
            externalLists,
          );
          // Check other spaceAfter if there are replacements
          if (extReplacements && extReplacements.length > 0)
            for (let si = 0; si < extReplacements.length; si++) {
              // Data fix
              if (si > 0 && extReplacements[si].includeTrailing)
                extReplacements[si].includeTrailing = false;
              // Run current replacement
              newRows = (0, _replaceRows.replaceRows)(
                newRows,
                defaultCellWidth,
                extReplacements[si],
              );
            }
          // Add spaceAfter for the group
          if (spaceAfter) newRows[newRows.length - 1].spaceAfter = true;
          // Post processing...
          newRows.forEach((r, ri) => {
            // Cycle through each column cell
            r.cells.forEach((c, ci) => {
              // Look for cells to check, rowSpan can have been increase by following repeats
              if ((c.repeatRowSpan ?? c.rowSpan ?? 1) > 0 && (c.rowSpan ?? 1) !== 0) {
                let actualSpan = newRows
                  .slice(ri + 1)
                  .map((r) => r.cells[ci])
                  .findIndex((c) => (c.rowSpan ?? 1) > 0);
                if (actualSpan === -1) actualSpan = newRows.length - ri - 1;
                // Check if changes need to be made
                if (actualSpan + 1 > (c.repeatRowSpan ?? c.rowSpan ?? 1))
                  c.repeatRowSpan = actualSpan + 1;
              }
              // Add spaceAfter to the correct cell
              if (c.spaceAfterRepeat)
                newRows[ri + (c.repeatRowSpan ?? c.rowSpan ?? 1) - 1].spaceAfter = true;
            });
          });
          // Look for spaceAfter on trailing rows now all spaceAfter calculated
          newRows.forEach((r, ri) => {
            r.cells
              .filter((c) => (c.repeatRowSpan ?? c.rowSpan ?? 1) > 1 && (c.rowSpan ?? 1) > 0)
              .forEach((c) => {
                c.spaceAfterSpan = newRows
                  .slice(ri, ri + (c.repeatRowSpan ?? c.rowSpan ?? 1))
                  .filter((r) => r.spaceAfter).length;
              });
          });
          // Add spaceAfter for the group
          if (spaceAfter) newRows[newRows.length - 1].spaceAfter = true;
          // Single post processing replacements
          newRows = (0, _singleReplacements.singleReplacements)(externalSingles, newRows);
          return newRows;
        };
      },
      {
        "./removeRowRepeatInfo": "fkFzR",
        "./replaceRows": "84por",
        "./singleReplacements": "5jwLn",
        "./updateExternals": "4S37G",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "84por": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "replaceRows", () => replaceRows);
        var _getRawTextParts = require("../aie/functions/getRawTextParts");
        var _prependCells = require("./prependCells");
        var _replaceCellText = require("./replaceCellText");
        var _tofromHtml = require("./tofromHtml");
        var _updateExternals = require("./updateExternals");
        const replaceRows = (rows, defaultCellWidth, replacement, externalLists) => {
          // Look for match, is there is one to find
          if (
            replacement === undefined ||
            replacement.oldText === "" ||
            replacement.newTexts.length === 0 ||
            replacement.newTexts[0].texts.join("") === ""
          )
            return rows;
          // Set up holders
          const newRows = [];
          let addedRows = 0;
          let found = false;
          // Look through each cell
          let ri = 0;
          let processedRows = 0;
          let emergencyExit = 0;
          while (ri < rows.length && emergencyExit < 10000) {
            if (
              ri >= rows.length ||
              rows[ri] === undefined ||
              rows[ri].cells.length === undefined
            ) {
              console.warn("High ri value somehow");
              console.log(`ri: ${ri}`);
              console.log(`${JSON.stringify(rows)}`);
            } else
              for (let ci = 0; ci < rows[ri].cells.length && !found; ci++) {
                const cellTextParts = (0, _getRawTextParts.getRawTextParts)(
                  rows[ri].cells[ci].replacedText ?? rows[ri].cells[ci].text ?? "",
                );
                if (
                  replacement !== undefined && // Compare as non-HTML text
                  cellTextParts.some((t) =>
                    t.includes((0, _tofromHtml.fromHtml)(replacement.oldText)),
                  )
                ) {
                  // Get targetCell
                  found = true;
                  const targetCell = rows[ri].cells[ci];
                  targetCell.rowSpan = targetCell.rowSpan ?? 1;
                  let midRows = [];
                  let midAddedRows = 0;
                  // Cycle through newTexts
                  for (let rvi = 0; rvi < replacement.newTexts.length; rvi++) {
                    const rv = replacement.newTexts[rvi];
                    // Perform replacements for each text entry
                    for (let ti = 0; ti < rv.texts.length; ti++) {
                      const thisRepeat = (0, _replaceCellText.replaceCellText)(
                        targetCell,
                        replacement.oldText,
                        rv.texts[ti],
                      );
                      // Process remaining cells, including target after replacement
                      let lowerQuad =
                        replacement.includeTrailing ?? false
                          ? rows.slice(ri).map((r, rj) => {
                              const cells =
                                rj === 0
                                  ? [
                                      thisRepeat,
                                      ...r.cells
                                        .slice(ci + 1)
                                        .map((c) =>
                                          (0, _replaceCellText.replaceCellText)(
                                            c,
                                            replacement.oldText,
                                            rv.texts[ti],
                                          ),
                                        ),
                                    ]
                                  : [
                                      ...r.cells
                                        .slice(ci)
                                        .map((c) =>
                                          (0, _replaceCellText.replaceCellText)(
                                            c,
                                            replacement.oldText,
                                            rv.texts[ti],
                                          ),
                                        ),
                                    ];
                              return {
                                aitid: r.aitid,
                                rowRepeat: `${r.rowRepeat ?? ""}${`[${rvi},${ti}]`}`,
                                cells: cells,
                              };
                            })
                          : targetCell.rowSpan > 1
                          ? rows.slice(ri, ri + targetCell.rowSpan).map((r, rj) => {
                              const cells =
                                rj === 0
                                  ? [
                                      thisRepeat,
                                      ...r.cells
                                        .slice(ci + 1)
                                        .map((c) =>
                                          (0, _replaceCellText.replaceCellText)(
                                            c,
                                            replacement.oldText,
                                            rv.texts[ti],
                                          ),
                                        ),
                                    ]
                                  : [
                                      ...r.cells
                                        .slice(ci)
                                        .map((c) =>
                                          (0, _replaceCellText.replaceCellText)(
                                            c,
                                            replacement.oldText,
                                            rv.texts[ti],
                                          ),
                                        ),
                                    ];
                              return {
                                aitid: r.aitid,
                                rowRepeat: `${r.rowRepeat ?? ""}${`[${rvi},${ti}]`}`,
                                cells: cells,
                              };
                            })
                          : [
                              {
                                aitid: rows[ri].aitid,
                                rowRepeat: `${rows[ri].rowRepeat ?? ""}${`[${rvi},${ti}]`}`,
                                cells: [
                                  thisRepeat,
                                  ...rows[ri].cells
                                    .slice(ci + 1)
                                    .map((c) =>
                                      (0, _replaceCellText.replaceCellText)(
                                        c,
                                        replacement.oldText,
                                        rv.texts[ti],
                                      ),
                                    ),
                                ],
                              },
                            ];
                      // Find amount to move row cursor
                      processedRows = lowerQuad.length;
                      // Process lowerQuad if there are subLists
                      const subLists = (0, _updateExternals.updateExternals)(
                        rv.subLists,
                        externalLists,
                      );
                      if (subLists && subLists.length > 0)
                        for (let si = 0; si < subLists.length; si++)
                          lowerQuad = replaceRows(lowerQuad, defaultCellWidth, subLists[si]);
                      // Add spaceAfter to bottom left cell in the block
                      if (rv.spaceAfter && replacement.includeTrailing) {
                        let lookup = 0;
                        while (
                          lookup < lowerQuad.length - 1 &&
                          (lowerQuad[lowerQuad.length - 1 - lookup].cells[0].rowSpan ?? 1) === 0
                        )
                          lookup++;
                        lowerQuad[lowerQuad.length - 1 - lookup].cells[0].spaceAfterRepeat = true;
                      } else if (rv.spaceAfter) lowerQuad[0].cells[0].spaceAfterRepeat = true;
                      // Expand to cover rest of the row
                      midRows.push(...lowerQuad);
                    }
                  }
                  // Add preceeding cells from current row
                  if (midRows.length > 0)
                    for (let lookleft = 1; lookleft <= ci; lookleft++) {
                      midAddedRows = midRows.length - processedRows;
                      midRows = (0, _prependCells.prependCell)(
                        rows[ri].cells[ci - lookleft],
                        defaultCellWidth,
                        midRows,
                        midAddedRows,
                      );
                    }
                  // Add returned rows
                  newRows.push(...midRows);
                  // Update number of rows for further lookups
                  addedRows = addedRows + midAddedRows;
                }
              }
            // Add the row if it was not found on this pass
            if (!found) {
              newRows.push(rows[ri]);
              ri++;
            }
            if (found) {
              ri = ri + processedRows;
              found = false;
            }
            emergencyExit++;
          }
          return newRows;
        };
      },
      {
        "../aie/functions/getRawTextParts": "b1veE",
        "./prependCells": "bvLZl",
        "./replaceCellText": "cgTjX",
        "./tofromHtml": "7amRs",
        "./updateExternals": "4S37G",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    bvLZl: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "prependCell", () => prependCell);
        var _newCell = require("./newCell");
        var _newRow = require("./newRow");
        const prependCell = (pre, defaultCellWidth, post, rowsAdded) => {
          if (!post) {
            const r = (0, _newRow.newRow)(1, defaultCellWidth);
            r.cells = [pre];
            return [r];
          }
          const newRows = [];
          // Cycle through post rows
          for (let ri = 0; ri < post.length; ri++)
            newRows.push({
              aitid: post[ri].aitid,
              cells: [
                ri === 0
                  ? {
                      ...pre,
                      repeatRowSpan:
                        (pre.repeatRowSpan ?? pre.rowSpan ?? 1) + (rowsAdded ?? post.length ?? 0),
                    }
                  : {
                      ...(0, _newCell.newCell)(defaultCellWidth),
                      rowSpan: 0,
                      repeatRowSpan: 0,
                      replacedText: "",
                    },
                ...post[ri].cells,
              ],
              rowRepeat: post[ri].rowRepeat,
            });
          return newRows;
        };
      },
      {
        "./newCell": "59Btz",
        "./newRow": "6kPB4",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    c57es: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "updateReplacementVersion", () => updateReplacementVersion);
        parcelHelpers.export(exports, "updateReplToExtl", () => updateReplToExtl);
        var _uuid = require("uuid");
        function updateReplacementVersion(reps) {
          // Check processing required
          if (reps === undefined || reps.length === 0) return [];
          if (reps[0].oldText !== undefined) return reps;
          // Create the new object
          const oldReps = reps;
          const newReps = [];
          for (let i = 0; i < oldReps.length; i++) {
            const oldRep = oldReps[i];
            if (!oldRep.replacementValues.some((rv) => (rv.subList?.length ?? 0) > 0)) {
              const newRV = {
                airid: (0, _uuid.v4)(),
                texts: oldRep.replacementValues.map((rv) => rv.newText),
                spaceAfter: oldRep.replacementTexts[0]?.spaceAfter ?? false,
                subLists: [],
              };
              const newRep = {
                airid: (0, _uuid.v4)(),
                oldText: oldRep.replacementTexts[0].text ?? "",
                newTexts: [newRV],
                includeTrailing: false,
                externalName: oldRep.externalName,
              };
              newReps.push(newRep);
            } else {
              const newRep = {
                airid: (0, _uuid.v4)(),
                oldText: oldRep.replacementTexts[0].text,
                newTexts: [],
                includeTrailing: false,
                externalName: oldRep.externalName,
              };
              for (let j = 0; j < oldRep.replacementValues.length; j++) {
                const nextLevel = {
                  replacementTexts: oldRep.replacementTexts.slice(1),
                  replacementValues: oldRep.replacementValues[j].subList ?? [],
                };
                const newRV = {
                  airid: (0, _uuid.v4)(),
                  texts: [oldRep.replacementValues[j].newText],
                  spaceAfter: oldRep.replacementTexts[0].spaceAfter,
                  subLists:
                    nextLevel.replacementTexts.length > 0
                      ? updateReplacementVersion([nextLevel])
                      : undefined,
                };
                newRep.newTexts.push(newRV);
              }
              newReps.push(newRep);
            }
          }
          return newReps;
        }
        function updateReplToExtl(reps) {
          // Check processing required
          if (reps === undefined || reps.length === 0) return [];
          if (reps[0].givenName !== undefined) return reps;
          // Change from old to new
          let oldReps;
          if (reps[0].name !== undefined) oldReps = reps.map((r) => r.list).flat();
          else oldReps = reps;
          // Extract
          const newExl = [];
          newExl.push(
            ...oldReps
              .filter((o) => o.givenName !== undefined)
              .map((oRep) => {
                const nReps = updateReplacementVersion([oRep]);
                const nRvs = nReps
                  .map((nRep) => {
                    return nRep.newTexts;
                  })
                  .flat();
                return {
                  givenName: oRep.givenName,
                  newTexts: nRvs,
                };
              }),
          );
          return newExl;
        }
      },
      { uuid: "j4KJi", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    jkXeV: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "updateTableDataVersion", () => updateTableDataVersion);
        var _updateCellTextVersion = require("./updateCellTextVersion");
        var _updateReplacementVersion = require("./updateReplacementVersion");
        const updateTableDataVersion = (inData, defaultCellWidth) => {
          const headerData =
            inData.headerData === false
              ? false
              : inData.headerData !== undefined
              ? {
                  ...inData.headerData,
                  replacements:
                    inData.headerData?.replacements !== undefined
                      ? (0, _updateReplacementVersion.updateReplacementVersion)(
                          inData.headerData?.replacements,
                        )
                      : undefined,
                }
              : undefined;
          const outData = {
            ...inData,
            headerData: headerData,
            bodyData: inData.bodyData?.map((rg) => {
              const org = {
                ...rg,
                replacements:
                  rg.replacements !== undefined
                    ? (0, _updateReplacementVersion.updateReplacementVersion)(rg.replacements)
                    : undefined,
              };
              if (rg.replacements === undefined) delete org.replacements;
              return org;
            }),
          };
          // Ensure all column widths are consistent
          if (
            outData.bodyData?.some((rg) =>
              rg.rows.map((r) => r.cells.some((c) => c.colWidth === undefined)),
            )
          ) {
            const colWidths = // Get all column widths
              (
                outData.headerData
                  ? outData.headerData.rows.map((r) => r.cells.map((c) => c.colWidth))
                  : outData.bodyData.flatMap((rg) =>
                      rg.rows.map((r) => r.cells.map((c) => c.colWidth)),
                    )
              ) // Get max, or zero if totally undefined
                .reduce(
                  (prev, cur) =>
                    cur.map((w, i) =>
                      (w ?? 9999) < (prev[i] ?? 9999) ? w ?? 9999 : prev[i] ?? 9999,
                    ),
                  [],
                ) // Replace zeros with default
                .map((w) => (w === 9999 ? defaultCellWidth : w));
            if (outData.headerData)
              outData.headerData?.rows.forEach((r) =>
                r.cells.forEach((c, ci) => (c.colWidth = colWidths[ci])),
              );
            outData.bodyData?.forEach((rg) =>
              rg.rows.forEach((r) => r.cells.forEach((c, ci) => (c.colWidth = colWidths[ci]))),
            );
          }
          // Look for text to change to HTML, row and col span as zero
          if (outData.headerData)
            outData.headerData.rows.forEach(
              (r, ri) =>
                (r.cells = r.cells.map((c, ci, cells) => {
                  const newCell = {
                    ...(0, _updateCellTextVersion.UpdateCellTextVersion)(c),
                  };
                  // Work out which direction the span is in
                  if (newCell.colSpan === 0 && newCell.rowSpan === 0) {
                    if (ci === 0) newCell.colSpan = 1;
                    else if (ri === 0) newCell.rowSpan = 1;
                    else if (cells[ci - 1].colSpan === 1) newCell.colSpan = 1;
                    else newCell.rowSpan = 0;
                  }
                  return newCell;
                })),
            );
          outData.bodyData?.forEach((rg) =>
            rg.rows.forEach(
              (r) =>
                (r.cells = r.cells.map((c) => {
                  const newCell = {
                    ...(0, _updateCellTextVersion.UpdateCellTextVersion)(c),
                  };
                  if (newCell.colSpan === 0) newCell.colSpan = 1;
                  return newCell;
                })),
            ),
          );
          return outData;
        };
      },
      {
        "./updateCellTextVersion": "7fQzo",
        "./updateReplacementVersion": "c57es",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "7fQzo": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "UpdateCellTextVersion", () => UpdateCellTextVersion);
        const UpdateCellTextVersion = (cell) => {
          return {
            ...cell,
            text:
              !cell.text.startsWith("<div") && cell.text !== ""
                ? `<div classname="aie-text"><span>${cell.text}</span></div>`
                : cell.text,
          };
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "58RjM": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "updateLineDisplayVersion", () => updateLineDisplayVersion);
        const updateLineDisplayVersion = (inArray) => {
          return inArray.map((inData) => {
            // Check options for new center
            let newCenter = null;
            if (typeof inData.centre === "string") newCenter = inData.centre;
            else if (typeof inData.center === "string") newCenter = inData.center;
            // Ensure at least one is present
            if (
              !inData.left &&
              inData.left !== "" &&
              !newCenter &&
              !inData.right &&
              inData.right !== ""
            )
              newCenter = "";
            return {
              aifid: inData.aifid,
              left: inData.left === false ? null : inData.left ?? null,
              center: newCenter,
              right: inData.right === false ? null : inData.right ?? null,
              addBelow: inData.addBelow,
              canEdit: inData.canEdit,
              canRemove: inData.canRemove,
              canMove: inData.canMove,
            };
          });
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    hKOZV: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "styleMapToDraft", () => styleMapToDraft);
        const styleMapToDraft = (styleMap) => {
          const d = {};
          if (styleMap !== undefined) for (const s of Object.keys(styleMap)) d[s] = styleMap[s].css;
          return d;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    lO8pD: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "styleMapToExclude", () => styleMapToExclude);
        const styleMapToExclude = (styleMap) => {
          const e = {};
          if (styleMap !== undefined)
            for (const s of Object.keys(styleMap)) e[s] = styleMap[s].aieExclude;
          return e;
        };
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    l4Y1o: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AsupInternalBlock",
          () => (0, _asupInternalBlock.AsupInternalBlock),
        );
        parcelHelpers.export(exports, "AifLineType", () => (0, _aifInterface.AifLineType));
        var _aifInterface = require("./aifInterface");
        var _asupInternalBlock = require("./AsupInternalBlock");
      },
      {
        "./aifInterface": "jmvhP",
        "./AsupInternalBlock": "7zNZw",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    jmvhP: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "AifLineType", () => AifLineType);
        var AifLineType;
        (function (AifLineType) {
          AifLineType["leftOnly"] = "Left only";
          AifLineType["centerOnly"] = "Center only";
          AifLineType["leftAndRight"] = "Left and Right";
          AifLineType["leftCenterAndRight"] = "Left, Center and Right";
        })(AifLineType || (AifLineType = {}));
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "7zNZw": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$b964 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$b964.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AsupInternalBlock", () => AsupInternalBlock);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _uuid = require("uuid");
          var _aifCss = require("./aif.css");
          var _aifInterface = require("./aifInterface");
          var _aifLineDisplay = require("./aifLineDisplay");
          var _s = $RefreshSig$();
          const AsupInternalBlock = ({
            id,
            lines,
            setLines,
            minLines,
            maxLines,
            externalSingles,
            styleMap,
            defaultType,
            canChangeType = false,
            style,
          }) => {
            _s();
            // General function to return complied object
            const returnData = (0, _react.useCallback)(
              (linesUpdate) => {
                if (typeof setLines !== "function") return;
                const r = [...linesUpdate.lines];
                setLines(r);
              },
              [setLines],
            );
            /** Check lines object min/max rule */ (0, _react.useEffect)(() => {
              let newLines = [...lines];
              if (newLines.length < Math.min(minLines ?? 1, maxLines ?? 1)) {
                const reqlines = (minLines ?? 1) - lines.length;
                for (let i = 0; i < reqlines; i++) {
                  const newLine = {
                    aifid: (0, _uuid.v4)(),
                    left: "",
                    center: "",
                    right: "",
                    canEdit: true,
                    canMove: true,
                    canRemove: true,
                  };
                  newLines.push(newLine);
                  returnData({
                    lines: newLines,
                  });
                }
              } else if (newLines.length > Math.max(minLines ?? 10, maxLines ?? 10)) {
                newLines = newLines.slice(0, maxLines ?? 10);
                returnData({
                  lines: newLines,
                });
              }
            }, [lines, maxLines, minLines, returnData]);
            // Update row
            const updateLine = (0, _react.useCallback)(
              (ret, li) => {
                // Do nothing if readonly
                if (typeof setLines !== "function") return;
                // Create new object to send back
                const newLines = [...lines];
                newLines[li] = ret;
                returnData({
                  lines: newLines,
                });
              },
              [setLines, lines, returnData],
            );
            const addLine = (0, _react.useCallback)(
              (li) => {
                const newLines = [...lines];
                const newLine = {
                  aifid: (0, _uuid.v4)(),
                  left: "",
                  center: "",
                  right: "",
                  canEdit: true,
                  canMove: true,
                  canRemove: true,
                  canChangeType: canChangeType,
                };
                if (defaultType !== undefined)
                  switch (defaultType) {
                    case (0, _aifInterface.AifLineType).leftOnly:
                      newLine.right = null;
                      newLine.center = null;
                      break;
                    case (0, _aifInterface.AifLineType).leftAndRight:
                      newLine.center = null;
                      break;
                    case (0, _aifInterface.AifLineType).centerOnly:
                      newLine.left = null;
                      newLine.right = null;
                      break;
                    case (0, _aifInterface.AifLineType).leftCenterAndRight:
                    default:
                      break;
                  }
                newLines.splice(li + 1, 0, newLine);
                returnData({
                  lines: newLines,
                });
              },
              [canChangeType, defaultType, lines, returnData],
            );
            const removeLine = (0, _react.useCallback)(
              (li) => {
                const newLines = [...lines];
                newLines.splice(li, 1);
                returnData({
                  lines: newLines,
                });
              },
              [lines, returnData],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                id: id,
                className: "aif-block",
                children: lines.map((l, li) => {
                  return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aifLineDisplay.AifLineDisplay),
                    {
                      id: `${id}-line-${li}`,
                      aifid: l.aifid,
                      left: l.left,
                      center: l.center,
                      right: l.right,
                      addBelow: l.addBelow,
                      canEdit: l.canEdit,
                      canMove: l.canMove,
                      canRemove: l.canRemove,
                      canChangeType: l.canChangeType,
                      externalSingles: externalSingles,
                      setLine: l.canEdit !== false ? (ret) => updateLine(ret, li) : undefined,
                      addLine:
                        l.addBelow !== false && lines.length < (maxLines ?? 10)
                          ? () => addLine(li)
                          : undefined,
                      removeLine:
                        lines.length > (minLines ?? 1) &&
                        l.canEdit !== false &&
                        l.canRemove !== false
                          ? () => removeLine(li)
                          : undefined,
                      styleMap: styleMap,
                      style: style,
                    },
                    `${li}-${l.aifid}`,
                    false,
                    {
                      fileName: "src/components/aif/AsupInternalBlock.tsx",
                      lineNumber: 134,
                      columnNumber: 11,
                    },
                    undefined,
                  );
                }),
              },
              void 0,
              false,
              {
                fileName: "src/components/aif/AsupInternalBlock.tsx",
                lineNumber: 128,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AsupInternalBlock, "v/5tfp4Xt5rCziyPe+MfjVq8bOo=");
          _c = AsupInternalBlock;
          var _c;
          $RefreshReg$(_c, "AsupInternalBlock");

          $parcel$ReactRefreshHelpers$b964.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        uuid: "j4KJi",
        "./aif.css": "9RhwM",
        "./aifInterface": "jmvhP",
        "./aifLineDisplay": "9wUad",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "9RhwM": [function () {}, {}],
    "9wUad": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$1aac = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$1aac.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AifLineDisplay", () => AifLineDisplay);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aie = require("../aie");
          var _aio = require("../aio");
          var _aifCss = require("./aif.css");
          var _aifOptionsWindow = require("./aifOptionsWindow");
          var _replaceBlockText = require("./replaceBlockText");
          var _s = $RefreshSig$();
          const AifLineDisplay = ({
            id,
            aifid,
            left,
            center,
            right,
            externalSingles,
            addBelow,
            canEdit,
            canRemove,
            canMove,
            canChangeType = false,
            setLine,
            addLine,
            removeLine,
            style,
            styleMap,
          }) => {
            _s();
            const [showOptions, setShowOptions] = (0, _react.useState)(false);
            const returnData = (0, _react.useCallback)(
              (lineUpdate) => {
                if (typeof setLine !== "function") return;
                const newLine = {
                  aifid: aifid,
                  left: lineUpdate.left !== undefined ? lineUpdate.left : left,
                  center: lineUpdate.center !== undefined ? lineUpdate.center : center,
                  right: lineUpdate.right !== undefined ? lineUpdate.right : right,
                  addBelow: addBelow,
                  canEdit: canEdit,
                  canRemove: canRemove,
                  canMove: canMove,
                  canChangeType: canChangeType,
                };
                setLine(newLine);
              },
              [
                addBelow,
                aifid,
                canChangeType,
                canEdit,
                canMove,
                canRemove,
                center,
                left,
                right,
                setLine,
              ],
            );
            // Update for replacements
            const processReplacement = (0, _react.useCallback)(
              (text) => {
                if (typeof text !== "string") return null;
                // Process external replacements
                if (externalSingles !== undefined && externalSingles.length > 0)
                  externalSingles.forEach((repl) => {
                    if (
                      repl.oldText !== undefined &&
                      repl.oldText !== "" &&
                      repl.newText !== undefined
                    ) {
                      const { newText, updated } = (0, _replaceBlockText.replaceBlockText)(
                        text,
                        repl,
                      );
                      if (updated) text = newText;
                    }
                  });
                return text;
              },
              [externalSingles],
            );
            // Set up post replacement view
            const displayLeft = (0, _react.useMemo)(
              () => processReplacement(left),
              [left, processReplacement],
            );
            const displayCenter = (0, _react.useMemo)(
              () => processReplacement(center),
              [center, processReplacement],
            );
            const displayRight = (0, _react.useMemo)(
              () => processReplacement(right),
              [right, processReplacement],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                className: `aif-line ${
                  canEdit === false || typeof setLine !== "function" ? "aif-readonly" : ""
                }`,
                children: [
                  showOptions &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aifOptionsWindow.AifOptionsWindow),
                      {
                        id: `${id}-options-window`,
                        onClose: () => setShowOptions(false),
                        left: left,
                        center: center,
                        right: right,
                        returnData: typeof setLine === "function" ? returnData : undefined,
                        canChangeType: canChangeType,
                        styleMap: styleMap,
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aif/aifLineDisplay.tsx",
                        lineNumber: 96,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aif-line-buttons",
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aif/aifLineDisplay.tsx",
                      lineNumber: 108,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aif-line-item-holder",
                      style: {
                        ...style,
                      },
                      children: [
                        typeof displayLeft === "string" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: `aif-line-item ${
                                displayLeft !== left ? "aif-readonly" : ""
                              }`,
                              style: {
                                width:
                                  typeof center !== "string" && typeof right !== "string"
                                    ? "100%"
                                    : typeof center !== "string"
                                    ? "50%"
                                    : "33%",
                              },
                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _aie.AsupInternalEditor),
                                {
                                  id: `${id}-left-text`,
                                  value: displayLeft,
                                  setValue:
                                    typeof setLine === "function" && displayLeft === left
                                      ? (ret) =>
                                          returnData({
                                            left: ret,
                                          })
                                      : undefined,
                                  showStyleButtons: true,
                                  styleMap: styleMap,
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aif/aifLineDisplay.tsx",
                                  lineNumber: 125,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aif/aifLineDisplay.tsx",
                              lineNumber: 114,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        typeof displayCenter === "string" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: `aif-line-item ${
                                displayCenter !== center ? "aif-readonly" : ""
                              }`,
                              style: {
                                flexGrow: 1,
                              },
                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _aie.AsupInternalEditor),
                                {
                                  id: `${id}-center-text`,
                                  value: displayCenter,
                                  setValue:
                                    typeof setLine === "function" && displayCenter === center
                                      ? (ret) =>
                                          returnData({
                                            center: ret,
                                          })
                                      : undefined,
                                  textAlignment: "center",
                                  showStyleButtons: true,
                                  styleMap: styleMap,
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aif/aifLineDisplay.tsx",
                                  lineNumber: 143,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aif/aifLineDisplay.tsx",
                              lineNumber: 139,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        typeof displayRight === "string" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: `aif-line-item ${
                                displayRight !== right ? "aif-readonly" : ""
                              }`,
                              style: {
                                width:
                                  typeof center !== "string" && typeof left !== "string"
                                    ? "100%"
                                    : typeof center !== "string"
                                    ? "50%"
                                    : "33%",
                              },
                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _aie.AsupInternalEditor),
                                {
                                  id: `${id}-right-text`,
                                  value: displayRight,
                                  setValue:
                                    typeof setLine === "function" && displayRight === right
                                      ? (ret) =>
                                          returnData({
                                            right: ret,
                                          })
                                      : undefined,
                                  textAlignment: "right",
                                  showStyleButtons: styleMap !== undefined,
                                  styleMap: styleMap,
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aif/aifLineDisplay.tsx",
                                  lineNumber: 169,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aif/aifLineDisplay.tsx",
                              lineNumber: 158,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aif/aifLineDisplay.tsx",
                      lineNumber: 109,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aif-line-buttons",
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _aio.AioIconButton),
                          {
                            id: `${id}-show-options`,
                            onClick: () => setShowOptions(!showOptions),
                            iconName: "aio-button-row-options",
                            tipText: "Options",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aif/aifLineDisplay.tsx",
                            lineNumber: 186,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        typeof addLine === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _aio.AioIconButton),
                              {
                                id: `${id}-add-line`,
                                onClick: addLine,
                                iconName: "aiox-plus",
                                tipText: "Add line",
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aif/aifLineDisplay.tsx",
                                lineNumber: 193,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                style: {
                                  width: "18px",
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aif/aifLineDisplay.tsx",
                                lineNumber: 200,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                        typeof removeLine === "function" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _aio.AioIconButton),
                            {
                              id: `${id}-remove-line`,
                              onClick: removeLine,
                              iconName: "aiox-minus",
                              tipText: "Remove line",
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aif/aifLineDisplay.tsx",
                              lineNumber: 203,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aif/aifLineDisplay.tsx",
                      lineNumber: 185,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aif/aifLineDisplay.tsx",
                lineNumber: 90,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AifLineDisplay, "4BzSeq1Pm0pM7yGE9FHG8xuA/YQ=");
          _c = AifLineDisplay;
          var _c;
          $RefreshReg$(_c, "AifLineDisplay");

          $parcel$ReactRefreshHelpers$1aac.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aie": "lfTjR",
        "../aio": "2DzvE",
        "./aif.css": "9RhwM",
        "./aifOptionsWindow": "93xCY",
        "./replaceBlockText": "fbS7v",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "2DzvE": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "AioBoolean", () => (0, _aioBoolean.AioBoolean));
        parcelHelpers.export(exports, "AioComment", () => (0, _aioComment.AioComment));
        parcelHelpers.export(exports, "AioDropSelect", () => (0, _aioDropSelect.AioDropSelect));
        parcelHelpers.export(exports, "AioExpander", () => (0, _aioExpander.AioExpander));
        parcelHelpers.export(exports, "AioIconButton", () => (0, _aioIconButton.AioIconButton));
        parcelHelpers.export(exports, "AioNumber", () => (0, _aioNumber.AioNumber));
        parcelHelpers.export(
          exports,
          "AioReplacementList",
          () => (0, _aioReplacementList.AioReplacementList),
        );
        parcelHelpers.export(
          exports,
          "AioReplacementDisplay",
          () => (0, _aioReplacementDisplay.AioReplacementDisplay),
        );
        parcelHelpers.export(
          exports,
          "AioReplacementValuesDisplay",
          () => (0, _aioReplacementValuesDisplay.AioReplacementValuesDisplay),
        );
        parcelHelpers.export(exports, "AioSelect", () => (0, _aioSelect.AioSelect));
        parcelHelpers.export(exports, "AioString", () => (0, _aioString.AioString));
        var _aioBoolean = require("./aioBoolean");
        var _aioComment = require("./aioComment");
        var _aioDropSelect = require("./aioDropSelect");
        var _aioExpander = require("./aioExpander");
        var _aioIconButton = require("./aioIconButton");
        var _aioNumber = require("./aioNumber");
        var _aioReplacementDisplay = require("./aioReplacementDisplay");
        var _aioReplacementValuesDisplay = require("./aioReplacementValuesDisplay");
        var _aioReplacementList = require("./aioReplacementList");
        var _aioSelect = require("./aioSelect");
        var _aioString = require("./aioString");
      },
      {
        "./aioBoolean": "3IBcV",
        "./aioComment": "eaVrC",
        "./aioDropSelect": "feLJ2",
        "./aioExpander": "63PKo",
        "./aioIconButton": "40L1H",
        "./aioNumber": "23gZp",
        "./aioReplacementDisplay": "3mTPO",
        "./aioReplacementValuesDisplay": "dvqfm",
        "./aioReplacementList": "5rGjv",
        "./aioSelect": "gQ1GT",
        "./aioString": "lAE49",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "3IBcV": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$a103 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$a103.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioBoolean", () => AioBoolean);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aioLabel = require("./aioLabel");
          const AioBoolean = (props) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${props.id}-label`,
                      label: props.label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioBoolean.tsx",
                      lineNumber: 14,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-input-holder",
                      children:
                        typeof props.setValue !== "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "span",
                              {
                                id: props.id,
                                children: props.value,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioBoolean.tsx",
                                lineNumber: 20,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "input",
                              {
                                id: props.id,
                                className: "aio-input-checkbox",
                                checked: props.value,
                                type: "checkbox",
                                onChange:
                                  typeof props.setValue === "function"
                                    ? (e) => {
                                        if (props.setValue) props.setValue(e.currentTarget.checked);
                                      }
                                    : undefined,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioBoolean.tsx",
                                lineNumber: 22,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioBoolean.tsx",
                      lineNumber: 18,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _c = AioBoolean;
          var _c;
          $RefreshReg$(_c, "AioBoolean");

          $parcel$ReactRefreshHelpers$a103.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioLabel": "4cCtf",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "4cCtf": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$efd1 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$efd1.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioLabel", () => AioLabel);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          const AioLabel = (props) => {
            if (props.label === undefined)
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {},
                void 0,
                false,
              );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                id: props.id,
                className: "aio-label",
                children: `${props.label}${!props.noColon && props.label ? ":" : ""}`,
              },
              void 0,
              false,
              {
                fileName: "src/components/aio/aioLabel.tsx",
                lineNumber: 13,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _c = AioLabel;
          var _c;
          $RefreshReg$(_c, "AioLabel");

          $parcel$ReactRefreshHelpers$efd1.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    eaVrC: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$5ecb = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$5ecb.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioComment", () => AioComment);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aie = require("../aie");
          var _aioLabel = require("./aioLabel");
          const AioComment = ({ id, label, value, setValue, commentStyles }) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${id}-label`,
                      label: label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioComment.tsx",
                      lineNumber: 22,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-input-holder",
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _aie.AsupInternalEditor),
                        {
                          id: `${id}-editor`,
                          showStyleButtons: typeof commentStyles === "object",
                          value: value,
                          editable: typeof setValue === "function",
                          setValue:
                            typeof setValue === "function" ? (ret) => setValue(ret) : undefined,
                          styleMap: commentStyles,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/components/aio/aioComment.tsx",
                          lineNumber: 27,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioComment.tsx",
                      lineNumber: 26,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _c = AioComment;
          var _c;
          $RefreshReg$(_c, "AioComment");

          $parcel$ReactRefreshHelpers$5ecb.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aie": "lfTjR",
        "./aioLabel": "4cCtf",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    feLJ2: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$a46b = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$a46b.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioDropSelect", () => AioDropSelect);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioIconButton = require("./aioIconButton");
          const AioDropSelect = ({ id, value, setValue, availableValues }) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  "div",
                  {
                    id: id,
                    style: {
                      display: "flex",
                      flexDirection: "row",
                      alignItems: "center",
                    },
                    children: [
                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "span",
                        {
                          id: `${id}-value`,
                          style: {
                            marginRight: value !== undefined ? "0.25rem" : "0",
                          },
                          children: value,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/components/aio/aioDropSelect.tsx",
                          lineNumber: 26,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                      typeof setValue === "function" &&
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _aioIconButton.AioIconButton),
                          {
                            id: `${id}-button`,
                            onClick: (ret) => {
                              setValue(ret);
                            },
                            menuItems: availableValues,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aio/aioDropSelect.tsx",
                            lineNumber: 35,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                    ],
                  },
                  void 0,
                  true,
                  {
                    fileName: "src/components/aio/aioDropSelect.tsx",
                    lineNumber: 22,
                    columnNumber: 7,
                  },
                  undefined,
                ),
              },
              void 0,
              false,
            );
          };
          _c = AioDropSelect;
          var _c;
          $RefreshReg$(_c, "AioDropSelect");

          $parcel$ReactRefreshHelpers$a46b.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioIconButton": "40L1H",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "40L1H": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$3b07 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$3b07.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioIconButton", () => AioIconButton);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioIconButtonCss = require("./aioIconButton.css");
          var _aioCss = require("./aio.css");
          var _aioTipCss = require("./aioTip.css");
          var _s = $RefreshSig$();
          const AioIconButton = ({
            id,
            onClick,
            iconName,
            tipText,
            popUpTip = false,
            menuItems,
            leftMenuOffset,
            style,
          }) => {
            _s();
            // Boolean to show menu
            const [showDrop, setShowDrop] = (0, _react.useState)(false);
            // Set up outsideClick handler
            const menuRef = (0, _react.useRef)(null);
            // Handle click off the menu
            const handleClick = (0, _react.useCallback)((e) => {
              if (
                menuRef.current &&
                ((e.target instanceof Element && !menuRef.current?.contains(e.target)) ||
                  !(e.target instanceof Element))
              )
                setShowDrop(false);
            }, []);
            // Update the document click handler
            (0, _react.useEffect)(() => {
              if (showDrop) document.addEventListener("mousedown", handleClick);
              else document.removeEventListener("mousedown", handleClick);
            }, [handleClick, showDrop]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                className: "aio-button-holder",
                style: style,
                id: id ? `${id}-holder` : undefined,
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-tip",
                      style: {
                        display: "flex",
                        alignContent: "flex-center",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            id: id,
                            className: `aiox-button ${iconName ?? "aiox-down"}`,
                            "aria-label": tipText,
                            title: tipText,
                            onClick: (e) => {
                              e.stopPropagation();
                              e.preventDefault();
                              if (typeof onClick !== "function") return;
                              // Just click if there is no drop down
                              if (!menuItems || menuItems.length <= 1)
                                onClick(menuItems?.length === 1 ? menuItems[0] : "");
                              else setShowDrop(!showDrop);
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aio/aioIconButton.tsx",
                            lineNumber: 60,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        popUpTip &&
                          tipText &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "span",
                            {
                              className: "aio-tiptext aio-tip-top",
                              children: tipText,
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aio/aioIconButton.tsx",
                              lineNumber: 79,
                              columnNumber: 33,
                            },
                            undefined,
                          ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aio/aioIconButton.tsx",
                      lineNumber: 56,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  showDrop &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        ref: menuRef,
                        className: "aio-drop-items-holder",
                        style: {
                          left: leftMenuOffset ?? "1.25rem",
                        },
                        id: id ? `${id}-drop-items-holder` : undefined,
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            className: "aio-drop-items-inner-holder",
                            children: menuItems?.map((a, i) =>
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  id: id ? `${id}-drop-item-${i}` : undefined,
                                  className: "aio-drop-item",
                                  onClick: () => {
                                    if (typeof onClick !== "function") return;
                                    onClick(a);
                                    setShowDrop(false);
                                  },
                                  children: a.replace(/ /g, "\xa0"),
                                },
                                i,
                                false,
                                {
                                  fileName: "src/components/aio/aioIconButton.tsx",
                                  lineNumber: 90,
                                  columnNumber: 15,
                                },
                                undefined,
                              ),
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aio/aioIconButton.tsx",
                            lineNumber: 88,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioIconButton.tsx",
                        lineNumber: 82,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aio/aioIconButton.tsx",
                lineNumber: 51,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AioIconButton, "+QsXbrYhZGpC3aIEAZC+5mqvt4w=");
          _c = AioIconButton;
          var _c;
          $RefreshReg$(_c, "AioIconButton");

          $parcel$ReactRefreshHelpers$3b07.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioIconButton.css": "fPFgX",
        "./aio.css": "17daG",
        "./aioTip.css": "1QVRO",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    fPFgX: [function () {}, {}],
    "17daG": [function () {}, {}],
    "1QVRO": [function () {}, {}],
    "63PKo": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$348e = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$348e.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioExpander", () => AioExpander);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _asupInternalWindow = require("../aiw/AsupInternalWindow");
          var _aioArraySortable = require("./aioArraySortable");
          var _aioInterface = require("./aioInterface");
          var _aioLabel = require("./aioLabel");
          var _aioOptionDisplay = require("./aioOptionDisplay");
          var _aioPrintOption = require("./aioPrintOption");
          var _s = $RefreshSig$();
          const AioExpander = (props) => {
            _s();
            const [isExpanded, setIsExpanded] = (0, _react.useState)(false);
            const [showNewItemWindow, setShowNewItemWindow] = (0, _react.useState)(false);
            const onClickAdd = (ret) => {
              if (props.inputObject === undefined) return;
              // Check value is ok
              if (
                ret[0].value !== "" &&
                Object.keys(props.inputObject).indexOf(ret[0].value) === -1 &&
                props.updateObject
              ) {
                let newItem;
                switch (ret[1].value) {
                  case "number":
                    newItem = 0;
                    break;
                  case "array":
                    newItem = [];
                    break;
                  case "object":
                    newItem = {};
                    break;
                  case "string":
                  default:
                    newItem = "";
                }
                const newObject = {
                  ...props.inputObject,
                };
                newObject[ret[0].value] = newItem;
                props.updateObject(newObject);
                setShowNewItemWindow(false);
              }
            };
            // Show nothing
            if (
              !props.inputObject &&
              (props.inputObject === undefined || props.inputObject === null)
            )
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {},
                void 0,
                false,
              );
            // Small view
            if (!isExpanded)
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {
                  children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aioLabel.AioLabel),
                      {
                        id: `${props.id}-label`,
                        label: props.label,
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioExpander.tsx",
                        lineNumber: 65,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        id: props.id,
                        className: "aio-input-holder",
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            id: `${props.id}-expander`,
                            className: "aiox closed",
                            children: [
                              typeof props.inputObject === "object" &&
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    id: `${props.id}-expanderbutton`,
                                    className: "aiox-button aiox-open-close",
                                    onClick: () => setIsExpanded(true),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/aioExpander.tsx",
                                    lineNumber: 78,
                                    columnNumber: 15,
                                  },
                                  undefined,
                                ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "span",
                                {
                                  id: `${props.id}-valueholder`,
                                  className: "aiox-value",
                                  children: Array.isArray(props.inputObject)
                                    ? Object.values(props.inputObject).filter(
                                        (el) => typeof el === "object",
                                      ).length > 0
                                      ? `${props.inputObject.length} item${
                                          props.inputObject.length !== 1 ? "s" : ""
                                        }`
                                      : Object.values(props.inputObject).join(", ")
                                    : typeof props.inputObject === "object" &&
                                      props.inputObject !== undefined &&
                                      props.inputObject !== null
                                    ? Object.keys(props.inputObject)
                                        .map((a) => {
                                          return props.inputObject &&
                                            typeof props.inputObject[a] === "object"
                                            ? a
                                            : props.inputObject !== undefined
                                            ? props.inputObject[a]
                                            : a;
                                        })
                                        .join(", ")
                                    : props.inputObject !== undefined && props.inputObject !== null
                                    ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _aioPrintOption.AioPrintOption),
                                        {
                                          id: `${props.id}-one`,
                                          value: props.inputObject,
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/components/aio/aioExpander.tsx",
                                          lineNumber: 108,
                                          columnNumber: 17,
                                        },
                                        undefined,
                                      )
                                    : "Input object is not defined",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aio/aioExpander.tsx",
                                  lineNumber: 84,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/components/aio/aioExpander.tsx",
                            lineNumber: 73,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioExpander.tsx",
                        lineNumber: 69,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  ],
                },
                void 0,
                true,
              );
            else
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {
                  children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aioLabel.AioLabel),
                      {
                        id: `${props.id}-label`,
                        label: props.label,
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioExpander.tsx",
                        lineNumber: 126,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        id: `${props.id}`,
                        className: "aio-input-holder",
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            id: `${props.id}-expander`,
                            className: "aiox open",
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  id: `${props.id}-expanderbutton`,
                                  className: "aiox-button aiox-open-close",
                                  onClick: () => setIsExpanded(false),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aio/aioExpander.tsx",
                                  lineNumber: 138,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: `aiox-table ${props.showBorders && "show-borders"}`,
                                  children: Array.isArray(props.inputObject)
                                    ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _aioArraySortable.AioArraySortable),
                                        {
                                          id: `${props.id}-arraysortable`,
                                          inputArray: props.inputObject,
                                          updateArray: props.updateObject,
                                          canRemoveItems: props.canRemoveItems,
                                          canAddItems: props.canAddItems,
                                          canMoveItems: props.canMoveItems,
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/components/aio/aioExpander.tsx",
                                          lineNumber: 145,
                                          columnNumber: 17,
                                        },
                                        undefined,
                                      )
                                    : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _jsxDevRuntime.Fragment),
                                        {
                                          children: [
                                            Object.keys(props.inputObject).length === 0 &&
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  id: `${props.id}-empty`,
                                                  className: "aio-body-row",
                                                  children: /*#__PURE__*/ (0,
                                                  _jsxDevRuntime.jsxDEV)(
                                                    "div",
                                                    {
                                                      className: "aio-label",
                                                      children: /*#__PURE__*/ (0,
                                                      _jsxDevRuntime.jsxDEV)(
                                                        "em",
                                                        {
                                                          children: "Empty object",
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/aio/aioExpander.tsx",
                                                          lineNumber: 161,
                                                          columnNumber: 25,
                                                        },
                                                        undefined,
                                                      ),
                                                    },
                                                    void 0,
                                                    false,
                                                    {
                                                      fileName:
                                                        "src/components/aio/aioExpander.tsx",
                                                      lineNumber: 160,
                                                      columnNumber: 23,
                                                    },
                                                    undefined,
                                                  ),
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/aio/aioExpander.tsx",
                                                  lineNumber: 156,
                                                  columnNumber: 21,
                                                },
                                                undefined,
                                              ),
                                            Object.keys(props.inputObject).map((k, i) => {
                                              if (!props.inputObject)
                                                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  (0, _jsxDevRuntime.Fragment),
                                                  {},
                                                  void 0,
                                                  false,
                                                );
                                              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-body-row",
                                                  children: /*#__PURE__*/ (0,
                                                  _jsxDevRuntime.jsxDEV)(
                                                    (0, _aioPrintOption.AioPrintOption),
                                                    {
                                                      id: `${props.id}-${k}`,
                                                      label: k,
                                                      value: props.inputObject[k],
                                                      setValue: props.updateObject
                                                        ? (ret) => {
                                                            const newObject = {
                                                              ...props.inputObject,
                                                            };
                                                            newObject[k] = ret;
                                                            if (props.updateObject)
                                                              props.updateObject(newObject);
                                                          }
                                                        : undefined,
                                                      removeItem:
                                                        props.canRemoveItems && props.updateObject
                                                          ? () => {
                                                              const newObject = {
                                                                ...props.inputObject,
                                                              };
                                                              delete newObject[k];
                                                              if (props.updateObject)
                                                                props.updateObject(newObject);
                                                            }
                                                          : undefined,
                                                      canAddItems: props.canAddItems,
                                                      canMoveItems: props.canMoveItems,
                                                      canRemoveItems: props.canRemoveItems,
                                                    },
                                                    void 0,
                                                    false,
                                                    {
                                                      fileName:
                                                        "src/components/aio/aioExpander.tsx",
                                                      lineNumber: 172,
                                                      columnNumber: 25,
                                                    },
                                                    undefined,
                                                  ),
                                                },
                                                i,
                                                false,
                                                {
                                                  fileName: "src/components/aio/aioExpander.tsx",
                                                  lineNumber: 168,
                                                  columnNumber: 23,
                                                },
                                                undefined,
                                              );
                                            }),
                                            props.canAddItems && props.updateObject
                                              ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  "div",
                                                  {
                                                    className: "aio-body-row",
                                                    children: [
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          className: "aio-label",
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/aio/aioExpander.tsx",
                                                          lineNumber: 206,
                                                          columnNumber: 23,
                                                        },
                                                        undefined,
                                                      ),
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          className: "aio-input-holder",
                                                          style: {
                                                            borderLeft: "0",
                                                          },
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/aio/aioExpander.tsx",
                                                          lineNumber: 207,
                                                          columnNumber: 23,
                                                        },
                                                        undefined,
                                                      ),
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          className: "aiox-button-holder",
                                                          children: [
                                                            /*#__PURE__*/ (0,
                                                            _jsxDevRuntime.jsxDEV)(
                                                              "div",
                                                              {
                                                                className: "aiox-button aiox-plus",
                                                                onClick: () => {
                                                                  setShowNewItemWindow(
                                                                    !showNewItemWindow,
                                                                  );
                                                                },
                                                              },
                                                              void 0,
                                                              false,
                                                              {
                                                                fileName:
                                                                  "src/components/aio/aioExpander.tsx",
                                                                lineNumber: 212,
                                                                columnNumber: 25,
                                                              },
                                                              undefined,
                                                            ),
                                                            showNewItemWindow &&
                                                              /*#__PURE__*/ (0,
                                                              _jsxDevRuntime.jsxDEV)(
                                                                (0,
                                                                _asupInternalWindow.AsupInternalWindow),
                                                                {
                                                                  id: `${props.id}-newitemwindow`,
                                                                  title: "Add item",
                                                                  visible: showNewItemWindow,
                                                                  onClose: () =>
                                                                    setShowNewItemWindow(false),
                                                                  style: {
                                                                    minHeight: "120px",
                                                                  },
                                                                  children: /*#__PURE__*/ (0,
                                                                  _jsxDevRuntime.jsxDEV)(
                                                                    (0,
                                                                    _aioOptionDisplay.AioOptionDisplay),
                                                                    {
                                                                      id: `${props.id}-optiondisplay`,
                                                                      options: [
                                                                        {
                                                                          type: (0,
                                                                          _aioInterface.AioOptionType)
                                                                            .string,
                                                                          optionName: (0,
                                                                          _aioInterface.AioNewItem)
                                                                            .newKey,
                                                                          value: "",
                                                                          label: "New key",
                                                                        },
                                                                        {
                                                                          type: (0,
                                                                          _aioInterface.AioOptionType)
                                                                            .select,
                                                                          optionName: (0,
                                                                          _aioInterface.AioNewItem)
                                                                            .newType,
                                                                          value: "",
                                                                          label: "New type",
                                                                          availableValues: [
                                                                            "string",
                                                                            "number",
                                                                            "array",
                                                                            "object",
                                                                          ],
                                                                        },
                                                                      ],
                                                                      setOptions: onClickAdd,
                                                                    },
                                                                    void 0,
                                                                    false,
                                                                    {
                                                                      fileName:
                                                                        "src/components/aio/aioExpander.tsx",
                                                                      lineNumber: 226,
                                                                      columnNumber: 29,
                                                                    },
                                                                    undefined,
                                                                  ),
                                                                },
                                                                void 0,
                                                                false,
                                                                {
                                                                  fileName:
                                                                    "src/components/aio/aioExpander.tsx",
                                                                  lineNumber: 219,
                                                                  columnNumber: 27,
                                                                },
                                                                undefined,
                                                              ),
                                                          ],
                                                        },
                                                        void 0,
                                                        true,
                                                        {
                                                          fileName:
                                                            "src/components/aio/aioExpander.tsx",
                                                          lineNumber: 211,
                                                          columnNumber: 23,
                                                        },
                                                        undefined,
                                                      ),
                                                    ],
                                                  },
                                                  "n",
                                                  true,
                                                  {
                                                    fileName: "src/components/aio/aioExpander.tsx",
                                                    lineNumber: 202,
                                                    columnNumber: 21,
                                                  },
                                                  undefined,
                                                )
                                              : undefined,
                                          ],
                                        },
                                        void 0,
                                        true,
                                      ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aio/aioExpander.tsx",
                                  lineNumber: 143,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/components/aio/aioExpander.tsx",
                            lineNumber: 134,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioExpander.tsx",
                        lineNumber: 130,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  ],
                },
                void 0,
                true,
              );
          };
          _s(AioExpander, "rM98ABSIo2jGITI3bvCmH5fgQK8=");
          _c = AioExpander;
          var _c;
          $RefreshReg$(_c, "AioExpander");

          $parcel$ReactRefreshHelpers$348e.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aiw/AsupInternalWindow": "aNCiW",
        "./aioArraySortable": "3JKWZ",
        "./aioInterface": "5k15Y",
        "./aioLabel": "4cCtf",
        "./aioOptionDisplay": "cijgj",
        "./aioPrintOption": "lvlQ0",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    aNCiW: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$c413 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$c413.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AsupInternalWindow", () => AsupInternalWindow);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _aitContext = require("components/ait/aitContext");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _reactRnd = require("react-rnd");
          var _aiwCss = require("./aiw.css");
          var _chkPosition = require("./chkPosition");
          var _s = $RefreshSig$();
          const AsupInternalWindow = (props) => {
            _s();
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            const [zIndex, setZIndex] = (0, _react.useState)(null);
            const [showWindow, setShowWindow] = (0, _react.useState)(props.visible);
            const rndRef = (0, _react.useRef)(null);
            // Position
            const [x, setX] = (0, _react.useState)();
            const [y, setY] = (0, _react.useState)();
            const chkTop = (0, _react.useCallback)(
              (force) => {
                if (zIndex === null || (force && zIndex < tableSettings.windowZIndex)) {
                  const nextIndex = tableSettings.windowZIndex + 1;
                  setZIndex(nextIndex);
                  if (typeof tableSettings.setWindowZIndex === "function")
                    tableSettings.setWindowZIndex(nextIndex);
                }
              },
              [tableSettings, zIndex],
            );
            (0, _react.useEffect)(() => chkTop(false), [chkTop]);
            // Update visibility
            (0, _react.useEffect)(() => {
              setShowWindow(props.visible);
              if (props.visible && rndRef.current) {
                const { newX, newY } = (0, _chkPosition.chkPosition)(rndRef);
                setX(newX);
                setY(newY);
              }
            }, [props.visible]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _reactRnd.Rnd),
                  {
                    id: props.id,
                    style: {
                      visibility: showWindow ? "visible" : "hidden",
                      display: "flex",
                      zIndex: zIndex ?? 1,
                      ...props.style,
                      position: "fixed",
                    },
                    ref: rndRef,
                    position:
                      x !== undefined && y !== undefined
                        ? {
                            x,
                            y,
                          }
                        : undefined,
                    onDragStop: (e, d) => {
                      if (e instanceof MouseEvent) {
                        let newX = d.x;
                        let newY = d.y;
                        ({ newX, newY } = (0, _chkPosition.chkPosition)(rndRef, newX, newY));
                        setX(newX);
                        setY(newY);
                      }
                    },
                    minHeight: (props.style && props.style.minHeight) ?? "150px",
                    minWidth: (props.style && props.style.minWidth) ?? "400px",
                    maxHeight: (props.style && props.style?.maxHeight) ?? "1000px",
                    maxWidth: (props.style && props.style?.maxWidth) ?? "1000px",
                    className: "aiw-holder",
                    dragHandleClassName: "aiw-title",
                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aiw-inner",
                        onClick: () => chkTop(true),
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: "aiw-title",
                              children: [
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    id: `${props.id}-title`,
                                    className: "aiw-title-text",
                                    children: props.title,
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aiw/AsupInternalWindow.tsx",
                                    lineNumber: 83,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    id: `${props.id}-close`,
                                    className: "aiw-title-close",
                                    onClick: () => {
                                      setShowWindow(false);
                                      if (typeof props.onClose === "function") props.onClose();
                                    },
                                    children: "x",
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aiw/AsupInternalWindow.tsx",
                                    lineNumber: 89,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                              ],
                            },
                            void 0,
                            true,
                            {
                              fileName: "src/components/aiw/AsupInternalWindow.tsx",
                              lineNumber: 82,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              id: `${props.id}-body`,
                              className: "aiw-body",
                              children: props.children,
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aiw/AsupInternalWindow.tsx",
                              lineNumber: 102,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/aiw/AsupInternalWindow.tsx",
                        lineNumber: 78,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aiw/AsupInternalWindow.tsx",
                    lineNumber: 51,
                    columnNumber: 7,
                  },
                  undefined,
                ),
              },
              void 0,
              false,
            );
          };
          _s(AsupInternalWindow, "FDyPVRNcovkVs/5Qlnn257FHnzs=");
          _c = AsupInternalWindow;
          var _c;
          $RefreshReg$(_c, "AsupInternalWindow");

          $parcel$ReactRefreshHelpers$c413.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "components/ait/aitContext": "i4VKL",
        react: "21dqq",
        "react-rnd": "93ZzX",
        "./aiw.css": "ew1VT",
        "./chkPosition": "jiVa4",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    i4VKL: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$1bb3 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$1bb3.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "TableSettingsContext", () => TableSettingsContext);
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          const defaultSettings = {
            noRepeatProcessing: false,
            showCellBorders: true,
            windowZIndex: 10000,
            colWidthMod: 1.5,
            decimalAlignPercent: 60,
            defaultCellWidth: 60,
            editable: true,
          };
          const TableSettingsContext = (0, _reactDefault.default).createContext(defaultSettings);

          $parcel$ReactRefreshHelpers$1bb3.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        react: "21dqq",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "93ZzX": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "Rnd", () => Rnd);
        var _react = require("react");
        var _reactDraggable = require("react-draggable");
        var _reactDraggableDefault = parcelHelpers.interopDefault(_reactDraggable);
        var _reResizable = require("re-resizable");
        /*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics =
          function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({
                __proto__: [],
              } instanceof Array &&
                function (d, b) {
                  d.__proto__ = b;
                }) ||
              function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
            return extendStatics(d, b);
          };
        function __extends(d, b) {
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        }
        var __assign = function () {
          __assign =
            Object.assign ||
            function __assign(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign.apply(this, arguments);
        };
        function __rest(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function") {
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
          }
          return t;
        }
        var Draggable = (0, _reactDraggableDefault.default);
        var resizableStyle = {
          width: "auto",
          height: "auto",
          display: "inline-block",
          position: "absolute",
          top: 0,
          left: 0,
        };
        var getEnableResizingByFlag = function (flag) {
          return {
            bottom: flag,
            bottomLeft: flag,
            bottomRight: flag,
            left: flag,
            right: flag,
            top: flag,
            topLeft: flag,
            topRight: flag,
          };
        };
        var Rnd = /** @class */ (function (_super) {
          __extends(Rnd, _super);
          function Rnd(props) {
            var _this = _super.call(this, props) || this;
            _this.resizingPosition = {
              x: 0,
              y: 0,
            };
            _this.offsetFromParent = {
              left: 0,
              top: 0,
            };
            _this.resizableElement = {
              current: null,
            };
            _this.originalPosition = {
              x: 0,
              y: 0,
            };
            _this.refDraggable = function (c) {
              if (!c) return;
              _this.draggable = c;
            };
            _this.refResizable = function (c) {
              if (!c) return;
              _this.resizable = c;
              _this.resizableElement.current = c.resizable;
            };
            _this.state = {
              resizing: false,
              bounds: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0,
              },
              maxWidth: props.maxWidth,
              maxHeight: props.maxHeight,
            };
            _this.onResizeStart = _this.onResizeStart.bind(_this);
            _this.onResize = _this.onResize.bind(_this);
            _this.onResizeStop = _this.onResizeStop.bind(_this);
            _this.onDragStart = _this.onDragStart.bind(_this);
            _this.onDrag = _this.onDrag.bind(_this);
            _this.onDragStop = _this.onDragStop.bind(_this);
            _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);
            return _this;
          }
          Rnd.prototype.componentDidMount = function () {
            this.updateOffsetFromParent();
            var _a = this.offsetFromParent,
              left = _a.left,
              top = _a.top;
            var _b = this.getDraggablePosition(),
              x = _b.x,
              y = _b.y;
            this.draggable.setState({
              x: x - left,
              y: y - top,
            });
            // HACK: Apply position adjustment
            this.forceUpdate();
          };
          // HACK: To get `react-draggable` state x and y.
          Rnd.prototype.getDraggablePosition = function () {
            var _a = this.draggable.state,
              x = _a.x,
              y = _a.y;
            return {
              x: x,
              y: y,
            };
          };
          Rnd.prototype.getParent = function () {
            return this.resizable && this.resizable.parentNode;
          };
          Rnd.prototype.getParentSize = function () {
            return this.resizable.getParentSize();
          };
          Rnd.prototype.getMaxSizesFromProps = function () {
            var maxWidth =
              typeof this.props.maxWidth === "undefined"
                ? Number.MAX_SAFE_INTEGER
                : this.props.maxWidth;
            var maxHeight =
              typeof this.props.maxHeight === "undefined"
                ? Number.MAX_SAFE_INTEGER
                : this.props.maxHeight;
            return {
              maxWidth: maxWidth,
              maxHeight: maxHeight,
            };
          };
          Rnd.prototype.getSelfElement = function () {
            return this.resizable && this.resizable.resizable;
          };
          Rnd.prototype.getOffsetHeight = function (boundary) {
            var scale = this.props.scale;
            switch (this.props.bounds) {
              case "window":
                return window.innerHeight / scale;
              case "body":
                return document.body.offsetHeight / scale;
              default:
                return boundary.offsetHeight;
            }
          };
          Rnd.prototype.getOffsetWidth = function (boundary) {
            var scale = this.props.scale;
            switch (this.props.bounds) {
              case "window":
                return window.innerWidth / scale;
              case "body":
                return document.body.offsetWidth / scale;
              default:
                return boundary.offsetWidth;
            }
          };
          Rnd.prototype.onDragStart = function (e, data) {
            if (this.props.onDragStart) this.props.onDragStart(e, data);
            var pos = this.getDraggablePosition();
            this.originalPosition = pos;
            if (!this.props.bounds) return;
            var parent = this.getParent();
            var scale = this.props.scale;
            var boundary;
            if (this.props.bounds === "parent") boundary = parent;
            else if (this.props.bounds === "body") {
              var parentRect_1 = parent.getBoundingClientRect();
              var parentLeft_1 = parentRect_1.left;
              var parentTop_1 = parentRect_1.top;
              var bodyRect = document.body.getBoundingClientRect();
              var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;
              var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;
              var right =
                (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;
              var bottom =
                (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;
              return this.setState({
                bounds: {
                  top: top_1,
                  right: right,
                  bottom: bottom,
                  left: left_1,
                },
              });
            } else if (this.props.bounds === "window") {
              if (!this.resizable) return;
              var parentRect_2 = parent.getBoundingClientRect();
              var parentLeft_2 = parentRect_2.left;
              var parentTop_2 = parentRect_2.top;
              var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;
              var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;
              var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;
              var bottom =
                (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;
              return this.setState({
                bounds: {
                  top: top_2,
                  right: right,
                  bottom: bottom,
                  left: left_2,
                },
              });
            } else if (typeof this.props.bounds === "string")
              boundary = document.querySelector(this.props.bounds);
            else if (this.props.bounds instanceof HTMLElement) boundary = this.props.bounds;
            if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) return;
            var boundaryRect = boundary.getBoundingClientRect();
            var boundaryLeft = boundaryRect.left;
            var boundaryTop = boundaryRect.top;
            var parentRect = parent.getBoundingClientRect();
            var parentLeft = parentRect.left;
            var parentTop = parentRect.top;
            var left = (boundaryLeft - parentLeft) / scale;
            var top = boundaryTop - parentTop;
            if (!this.resizable) return;
            this.updateOffsetFromParent();
            var offset = this.offsetFromParent;
            this.setState({
              bounds: {
                top: top - offset.top,
                right:
                  left + (boundary.offsetWidth - this.resizable.size.width) - offset.left / scale,
                bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset.top,
                left: left - offset.left / scale,
              },
            });
          };
          Rnd.prototype.onDrag = function (e, data) {
            if (!this.props.onDrag) return;
            var _a = this.offsetFromParent,
              left = _a.left,
              top = _a.top;
            if (!this.props.dragAxis || this.props.dragAxis === "both")
              return this.props.onDrag(
                e,
                __assign(__assign({}, data), {
                  x: data.x - left,
                  y: data.y - top,
                }),
              );
            else if (this.props.dragAxis === "x")
              return this.props.onDrag(
                e,
                __assign(__assign({}, data), {
                  x: data.x + left,
                  y: this.originalPosition.y + top,
                  deltaY: 0,
                }),
              );
            else if (this.props.dragAxis === "y")
              return this.props.onDrag(
                e,
                __assign(__assign({}, data), {
                  x: this.originalPosition.x + left,
                  y: data.y + top,
                  deltaX: 0,
                }),
              );
          };
          Rnd.prototype.onDragStop = function (e, data) {
            if (!this.props.onDragStop) return;
            var _a = this.offsetFromParent,
              left = _a.left,
              top = _a.top;
            if (!this.props.dragAxis || this.props.dragAxis === "both")
              return this.props.onDragStop(
                e,
                __assign(__assign({}, data), {
                  x: data.x + left,
                  y: data.y + top,
                }),
              );
            else if (this.props.dragAxis === "x")
              return this.props.onDragStop(
                e,
                __assign(__assign({}, data), {
                  x: data.x + left,
                  y: this.originalPosition.y + top,
                  deltaY: 0,
                }),
              );
            else if (this.props.dragAxis === "y")
              return this.props.onDragStop(
                e,
                __assign(__assign({}, data), {
                  x: this.originalPosition.x + left,
                  y: data.y + top,
                  deltaX: 0,
                }),
              );
          };
          Rnd.prototype.onResizeStart = function (e, dir, elementRef) {
            e.stopPropagation();
            this.setState({
              resizing: true,
            });
            var scale = this.props.scale;
            var offset = this.offsetFromParent;
            var pos = this.getDraggablePosition();
            this.resizingPosition = {
              x: pos.x + offset.left,
              y: pos.y + offset.top,
            };
            this.originalPosition = pos;
            if (this.props.bounds) {
              var parent_1 = this.getParent();
              var boundary = void 0;
              if (this.props.bounds === "parent") boundary = parent_1;
              else if (this.props.bounds === "body") boundary = document.body;
              else if (this.props.bounds === "window") boundary = window;
              else if (typeof this.props.bounds === "string")
                boundary = document.querySelector(this.props.bounds);
              else if (this.props.bounds instanceof HTMLElement) boundary = this.props.bounds;
              var self_1 = this.getSelfElement();
              if (
                self_1 instanceof Element &&
                (boundary instanceof HTMLElement || boundary === window) &&
                parent_1 instanceof HTMLElement
              ) {
                var _a = this.getMaxSizesFromProps(),
                  maxWidth = _a.maxWidth,
                  maxHeight = _a.maxHeight;
                var parentSize = this.getParentSize();
                if (maxWidth && typeof maxWidth === "string") {
                  if (maxWidth.endsWith("%")) {
                    var ratio = Number(maxWidth.replace("%", "")) / 100;
                    maxWidth = parentSize.width * ratio;
                  } else if (maxWidth.endsWith("px")) maxWidth = Number(maxWidth.replace("px", ""));
                }
                if (maxHeight && typeof maxHeight === "string") {
                  if (maxHeight.endsWith("%")) {
                    var ratio = Number(maxHeight.replace("%", "")) / 100;
                    maxHeight = parentSize.width * ratio;
                  } else if (maxHeight.endsWith("px"))
                    maxHeight = Number(maxHeight.replace("px", ""));
                }
                var selfRect = self_1.getBoundingClientRect();
                var selfLeft = selfRect.left;
                var selfTop = selfRect.top;
                var boundaryRect =
                  this.props.bounds === "window"
                    ? {
                        left: 0,
                        top: 0,
                      }
                    : boundary.getBoundingClientRect();
                var boundaryLeft = boundaryRect.left;
                var boundaryTop = boundaryRect.top;
                var offsetWidth = this.getOffsetWidth(boundary);
                var offsetHeight = this.getOffsetHeight(boundary);
                var hasLeft = dir.toLowerCase().endsWith("left");
                var hasRight = dir.toLowerCase().endsWith("right");
                var hasTop = dir.startsWith("top");
                var hasBottom = dir.startsWith("bottom");
                if ((hasLeft || hasTop) && this.resizable) {
                  var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;
                  this.setState({
                    maxWidth: max > Number(maxWidth) ? maxWidth : max,
                  });
                }
                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.
                if (hasRight || (this.props.lockAspectRatio && !hasLeft && !hasTop)) {
                  var max = offsetWidth + (boundaryLeft - selfLeft) / scale;
                  this.setState({
                    maxWidth: max > Number(maxWidth) ? maxWidth : max,
                  });
                }
                if ((hasTop || hasLeft) && this.resizable) {
                  var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;
                  this.setState({
                    maxHeight: max > Number(maxHeight) ? maxHeight : max,
                  });
                }
                // INFO: To set bounds in `lock aspect ratio with bounds` case. See also that story.
                if (hasBottom || (this.props.lockAspectRatio && !hasTop && !hasLeft)) {
                  var max = offsetHeight + (boundaryTop - selfTop) / scale;
                  this.setState({
                    maxHeight: max > Number(maxHeight) ? maxHeight : max,
                  });
                }
              }
            } else
              this.setState({
                maxWidth: this.props.maxWidth,
                maxHeight: this.props.maxHeight,
              });
            if (this.props.onResizeStart) this.props.onResizeStart(e, dir, elementRef);
          };
          Rnd.prototype.onResize = function (e, direction, elementRef, delta) {
            // INFO: Apply x and y position adjustments caused by resizing to draggable
            var newPos = {
              x: this.originalPosition.x,
              y: this.originalPosition.y,
            };
            var left = -delta.width;
            var top = -delta.height;
            var directions = ["top", "left", "topLeft", "bottomLeft", "topRight"];
            if (directions.indexOf(direction) !== -1) {
              if (direction === "bottomLeft") newPos.x += left;
              else if (direction === "topRight") newPos.y += top;
              else {
                newPos.x += left;
                newPos.y += top;
              }
            }
            if (newPos.x !== this.draggable.state.x || newPos.y !== this.draggable.state.y)
              this.draggable.setState(newPos);
            this.updateOffsetFromParent();
            var offset = this.offsetFromParent;
            var x = this.getDraggablePosition().x + offset.left;
            var y = this.getDraggablePosition().y + offset.top;
            this.resizingPosition = {
              x: x,
              y: y,
            };
            if (!this.props.onResize) return;
            this.props.onResize(e, direction, elementRef, delta, {
              x: x,
              y: y,
            });
          };
          Rnd.prototype.onResizeStop = function (e, direction, elementRef, delta) {
            this.setState({
              resizing: false,
            });
            var _a = this.getMaxSizesFromProps(),
              maxWidth = _a.maxWidth,
              maxHeight = _a.maxHeight;
            this.setState({
              maxWidth: maxWidth,
              maxHeight: maxHeight,
            });
            if (this.props.onResizeStop)
              this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);
          };
          Rnd.prototype.updateSize = function (size) {
            if (!this.resizable) return;
            this.resizable.updateSize({
              width: size.width,
              height: size.height,
            });
          };
          Rnd.prototype.updatePosition = function (position) {
            this.draggable.setState(position);
          };
          Rnd.prototype.updateOffsetFromParent = function () {
            var scale = this.props.scale;
            var parent = this.getParent();
            var self = this.getSelfElement();
            if (!parent || self === null)
              return {
                top: 0,
                left: 0,
              };
            var parentRect = parent.getBoundingClientRect();
            var parentLeft = parentRect.left;
            var parentTop = parentRect.top;
            var selfRect = self.getBoundingClientRect();
            var position = this.getDraggablePosition();
            var scrollLeft = parent.scrollLeft;
            var scrollTop = parent.scrollTop;
            this.offsetFromParent = {
              left: selfRect.left - parentLeft + scrollLeft - position.x * scale,
              top: selfRect.top - parentTop + scrollTop - position.y * scale,
            };
          };
          Rnd.prototype.render = function () {
            var _a = this.props,
              disableDragging = _a.disableDragging,
              style = _a.style,
              dragHandleClassName = _a.dragHandleClassName,
              position = _a.position,
              onMouseDown = _a.onMouseDown,
              onMouseUp = _a.onMouseUp,
              dragAxis = _a.dragAxis,
              dragGrid = _a.dragGrid,
              bounds = _a.bounds,
              enableUserSelectHack = _a.enableUserSelectHack,
              cancel = _a.cancel,
              children = _a.children,
              onResizeStart = _a.onResizeStart,
              onResize = _a.onResize,
              onResizeStop = _a.onResizeStop,
              onDragStart = _a.onDragStart,
              onDrag = _a.onDrag,
              onDragStop = _a.onDragStop,
              resizeHandleStyles = _a.resizeHandleStyles,
              resizeHandleClasses = _a.resizeHandleClasses,
              resizeHandleComponent = _a.resizeHandleComponent,
              enableResizing = _a.enableResizing,
              resizeGrid = _a.resizeGrid,
              resizeHandleWrapperClass = _a.resizeHandleWrapperClass,
              resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle,
              scale = _a.scale,
              allowAnyClick = _a.allowAnyClick,
              resizableProps = __rest(_a, [
                "disableDragging",
                "style",
                "dragHandleClassName",
                "position",
                "onMouseDown",
                "onMouseUp",
                "dragAxis",
                "dragGrid",
                "bounds",
                "enableUserSelectHack",
                "cancel",
                "children",
                "onResizeStart",
                "onResize",
                "onResizeStop",
                "onDragStart",
                "onDrag",
                "onDragStop",
                "resizeHandleStyles",
                "resizeHandleClasses",
                "resizeHandleComponent",
                "enableResizing",
                "resizeGrid",
                "resizeHandleWrapperClass",
                "resizeHandleWrapperStyle",
                "scale",
                "allowAnyClick",
              ]);
            var defaultValue = this.props.default ? __assign({}, this.props.default) : undefined;
            // Remove unknown props, see also https://reactjs.org/warnings/unknown-prop.html
            delete resizableProps.default;
            var cursorStyle =
              disableDragging || dragHandleClassName
                ? {
                    cursor: "auto",
                  }
                : {
                    cursor: "move",
                  };
            var innerStyle = __assign(__assign(__assign({}, resizableStyle), cursorStyle), style);
            var _b = this.offsetFromParent,
              left = _b.left,
              top = _b.top;
            var draggablePosition;
            if (position)
              draggablePosition = {
                x: position.x - left,
                y: position.y - top,
              };
            // INFO: Make uncontorolled component when resizing to control position by setPostion.
            var pos = this.state.resizing ? undefined : draggablePosition;
            var dragAxisOrUndefined = this.state.resizing ? "both" : dragAxis;
            return (0, _react.createElement)(
              Draggable,
              {
                ref: this.refDraggable,
                handle: dragHandleClassName ? ".".concat(dragHandleClassName) : undefined,
                defaultPosition: defaultValue,
                onMouseDown: onMouseDown,
                onMouseUp: onMouseUp,
                onStart: this.onDragStart,
                onDrag: this.onDrag,
                onStop: this.onDragStop,
                axis: dragAxisOrUndefined,
                disabled: disableDragging,
                grid: dragGrid,
                bounds: bounds ? this.state.bounds : undefined,
                position: pos,
                enableUserSelectHack: enableUserSelectHack,
                cancel: cancel,
                scale: scale,
                allowAnyClick: allowAnyClick,
                nodeRef: this.resizableElement,
              },
              (0, _react.createElement)(
                (0, _reResizable.Resizable),
                __assign({}, resizableProps, {
                  ref: this.refResizable,
                  defaultSize: defaultValue,
                  size: this.props.size,
                  enable:
                    typeof enableResizing === "boolean"
                      ? getEnableResizingByFlag(enableResizing)
                      : enableResizing,
                  onResizeStart: this.onResizeStart,
                  onResize: this.onResize,
                  onResizeStop: this.onResizeStop,
                  style: innerStyle,
                  minWidth: this.props.minWidth,
                  minHeight: this.props.minHeight,
                  maxWidth: this.state.resizing ? this.state.maxWidth : this.props.maxWidth,
                  maxHeight: this.state.resizing ? this.state.maxHeight : this.props.maxHeight,
                  grid: resizeGrid,
                  handleWrapperClass: resizeHandleWrapperClass,
                  handleWrapperStyle: resizeHandleWrapperStyle,
                  lockAspectRatio: this.props.lockAspectRatio,
                  lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth,
                  lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight,
                  handleStyles: resizeHandleStyles,
                  handleClasses: resizeHandleClasses,
                  handleComponent: resizeHandleComponent,
                  scale: this.props.scale,
                }),
                children,
              ),
            );
          };
          Rnd.defaultProps = {
            maxWidth: Number.MAX_SAFE_INTEGER,
            maxHeight: Number.MAX_SAFE_INTEGER,
            scale: 1,
            onResizeStart: function () {},
            onResize: function () {},
            onResizeStop: function () {},
            onDragStart: function () {},
            onDrag: function () {},
            onDragStop: function () {},
          };
          return Rnd;
        })((0, _react.PureComponent));
      },
      {
        react: "21dqq",
        "react-draggable": "873Tn",
        "re-resizable": "b1nW1",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "873Tn": [
      function (require, module, exports) {
        "use strict";
        var _require = require("39b5312b4b7f8b31"),
          Draggable = _require.default,
          DraggableCore = _require.DraggableCore; // Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.
        // See https://github.com/mzabriskie/react-draggable/pull/254
        // and https://github.com/mzabriskie/react-draggable/issues/266
        module.exports = Draggable;
        module.exports.default = Draggable;
        module.exports.DraggableCore = DraggableCore;
      },
      { "39b5312b4b7f8b31": "dPnSS" },
    ],
    dPnSS: [
      function (require, module, exports) {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          return (
            (_typeof =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (obj) {
                    return typeof obj;
                  }
                : function (obj) {
                    return obj &&
                      "function" == typeof Symbol &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  }),
            _typeof(obj)
          );
        }
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        Object.defineProperty(exports, "DraggableCore", {
          enumerable: true,
          get: function get() {
            return _DraggableCore.default;
          },
        });
        exports.default = void 0;
        var React = _interopRequireWildcard(require("f06ad358256d46ae"));
        var _propTypes = _interopRequireDefault(require("9f8816d66633a995"));
        var _reactDom = _interopRequireDefault(require("fd97d82c5bf54e9d"));
        var _clsx2 = _interopRequireDefault(require("26060e24796bfa96"));
        var _domFns = require("4e40e768124450c6");
        var _positionFns = require("6ac2262d9826d85d");
        var _shims = require("2838a27078c4cbed");
        var _DraggableCore = _interopRequireDefault(require("2ae804dc0d7f535c"));
        var _log = _interopRequireDefault(require("6e73015298a24ef9"));
        var _excluded = [
          "axis",
          "bounds",
          "children",
          "defaultPosition",
          "defaultClassName",
          "defaultClassNameDragging",
          "defaultClassNameDragged",
          "position",
          "positionOffset",
          "scale",
        ];
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj,
              };
        }
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) return obj;
          if (obj === null || (_typeof(obj) !== "object" && typeof obj !== "function"))
            return {
              default: obj,
            };
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) return cache.get(obj);
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj)
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
              else newObj[key] = obj[key];
            }
          newObj.default = obj;
          if (cache) cache.set(obj, newObj);
          return newObj;
        }
        function _extends() {
          _extends =
            Object.assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
              }
              return target;
            };
          return _extends.apply(this, arguments);
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly &&
              (symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              })),
              keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2
              ? ownKeys(Object(source), !0).forEach(function (key) {
                  _defineProperty(target, key, source[key]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
              : ownKeys(Object(source)).forEach(function (key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
          }
          return target;
        }
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _unsupportedIterableToArray(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
          );
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
          return arr2;
        }
        function _iterableToArrayLimit(arr, i) {
          var _i =
            arr == null
              ? null
              : (typeof Symbol !== "undefined" && arr[Symbol.iterator]) || arr["@@iterator"];
          if (_i == null) return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor))
            throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false,
          });
          return Constructor;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null)
            throw new TypeError("Super expression must either be null or a function");
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          });
          Object.defineProperty(subClass, "prototype", {
            writable: false,
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }
        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
          };
        }
        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
          else if (call !== void 0)
            throw new TypeError("Derived constructors may only return object or undefined");
          return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        //
        // Define <Draggable>
        //
        var Draggable = /*#__PURE__*/ (function (_React$Component) {
          _inherits(Draggable, _React$Component);
          var _super = _createSuper(Draggable);
          function Draggable(props) {
            var _this;
            _classCallCheck(this, Draggable);
            _this = _super.call(this, props);
            _defineProperty(_assertThisInitialized(_this), "onDragStart", function (e, coreData) {
              (0, _log.default)("Draggable: onDragStart: %j", coreData); // Short-circuit if user's callback killed it.
              var shouldStart = _this.props.onStart(
                e,
                (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData),
              ); // Kills start event on core as well, so move handlers are never bound.
              if (shouldStart === false) return false;
              _this.setState({
                dragging: true,
                dragged: true,
              });
            });
            _defineProperty(_assertThisInitialized(_this), "onDrag", function (e, coreData) {
              if (!_this.state.dragging) return false;
              (0, _log.default)("Draggable: onDrag: %j", coreData);
              var uiData = (0, _positionFns.createDraggableData)(
                _assertThisInitialized(_this),
                coreData,
              );
              var newState = {
                x: uiData.x,
                y: uiData.y,
              }; // Keep within bounds.
              if (_this.props.bounds) {
                // Save original x and y.
                var x = newState.x,
                  y = newState.y; // Add slack to the values used to calculate bound position. This will ensure that if
                // we start removing slack, the element won't react to it right away until it's been
                // completely removed.
                newState.x += _this.state.slackX;
                newState.y += _this.state.slackY; // Get bound position. This will ceil/floor the x and y within the boundaries.
                var _getBoundPosition = (0, _positionFns.getBoundPosition)(
                    _assertThisInitialized(_this),
                    newState.x,
                    newState.y,
                  ),
                  _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2),
                  newStateX = _getBoundPosition2[0],
                  newStateY = _getBoundPosition2[1];
                newState.x = newStateX;
                newState.y = newStateY; // Recalculate slack by noting how much was shaved by the boundPosition handler.
                newState.slackX = _this.state.slackX + (x - newState.x);
                newState.slackY = _this.state.slackY + (y - newState.y); // Update the event we fire to reflect what really happened after bounds took effect.
                uiData.x = newState.x;
                uiData.y = newState.y;
                uiData.deltaX = newState.x - _this.state.x;
                uiData.deltaY = newState.y - _this.state.y;
              } // Short-circuit if user's callback killed it.
              var shouldUpdate = _this.props.onDrag(e, uiData);
              if (shouldUpdate === false) return false;
              _this.setState(newState);
            });
            _defineProperty(_assertThisInitialized(_this), "onDragStop", function (e, coreData) {
              if (!_this.state.dragging) return false; // Short-circuit if user's callback killed it.
              var shouldContinue = _this.props.onStop(
                e,
                (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData),
              );
              if (shouldContinue === false) return false;
              (0, _log.default)("Draggable: onDragStop: %j", coreData);
              var newState = {
                dragging: false,
                slackX: 0,
                slackY: 0,
              }; // If this is a controlled component, the result of this operation will be to
              // revert back to the old position. We expect a handler on `onDragStop`, at the least.
              var controlled = Boolean(_this.props.position);
              if (controlled) {
                var _this$props$position = _this.props.position,
                  x = _this$props$position.x,
                  y = _this$props$position.y;
                newState.x = x;
                newState.y = y;
              }
              _this.setState(newState);
            });
            _this.state = {
              // Whether or not we are currently dragging.
              dragging: false,
              // Whether or not we have been dragged before.
              dragged: false,
              // Current transform x and y.
              x: props.position ? props.position.x : props.defaultPosition.x,
              y: props.position ? props.position.y : props.defaultPosition.y,
              prevPropsPosition: _objectSpread({}, props.position),
              // Used for compensating for out-of-bounds drags
              slackX: 0,
              slackY: 0,
              // Can only determine if SVG after mounting
              isElementSVG: false,
            };
            if (props.position && !(props.onDrag || props.onStop))
              // eslint-disable-next-line no-console
              console.warn(
                "A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.",
              );
            return _this;
          }
          _createClass(
            Draggable,
            [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  // Check to see if the element passed is an instanceof SVGElement
                  if (
                    typeof window.SVGElement !== "undefined" &&
                    this.findDOMNode() instanceof window.SVGElement
                  )
                    this.setState({
                      isElementSVG: true,
                    });
                },
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  this.setState({
                    dragging: false,
                  }); // prevents invariant if unmounted while dragging
                }, // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
              },
              {
                key: "findDOMNode",
                value: function findDOMNode() /*: ?HTMLElement*/ {
                  var _this$props$nodeRef$c, _this$props, _this$props$nodeRef;
                  return (_this$props$nodeRef$c =
                    (_this$props = this.props) === null || _this$props === void 0
                      ? void 0
                      : (_this$props$nodeRef = _this$props.nodeRef) === null ||
                        _this$props$nodeRef === void 0
                      ? void 0
                      : _this$props$nodeRef.current) !== null && _this$props$nodeRef$c !== void 0
                    ? _this$props$nodeRef$c
                    : _reactDom.default.findDOMNode(this);
                },
              },
              {
                key: "render",
                value: function render() /*: ReactElement<any>*/ {
                  var _clsx;
                  var _this$props2 = this.props,
                    axis = _this$props2.axis,
                    bounds = _this$props2.bounds,
                    children = _this$props2.children,
                    defaultPosition = _this$props2.defaultPosition,
                    defaultClassName = _this$props2.defaultClassName,
                    defaultClassNameDragging = _this$props2.defaultClassNameDragging,
                    defaultClassNameDragged = _this$props2.defaultClassNameDragged,
                    position = _this$props2.position,
                    positionOffset = _this$props2.positionOffset,
                    scale = _this$props2.scale,
                    draggableCoreProps = _objectWithoutProperties(_this$props2, _excluded);
                  var style = {};
                  var svgTransform = null; // If this is controlled, we don't want to move it - unless it's dragging.
                  var controlled = Boolean(position);
                  var draggable = !controlled || this.state.dragging;
                  var validPosition = position || defaultPosition;
                  var transformOpts = {
                    // Set left if horizontal drag is enabled
                    x:
                      (0, _positionFns.canDragX)(this) && draggable
                        ? this.state.x
                        : validPosition.x,
                    // Set top if vertical drag is enabled
                    y:
                      (0, _positionFns.canDragY)(this) && draggable
                        ? this.state.y
                        : validPosition.y,
                  }; // If this element was SVG, we use the `transform` attribute.
                  if (this.state.isElementSVG)
                    svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);
                  // Add a CSS transform to move the element around. This allows us to move the element around
                  // without worrying about whether or not it is relatively or absolutely positioned.
                  // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
                  // has a clean slate.
                  else style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);
                  // Mark with class while dragging
                  var className = (0, _clsx2.default)(
                    children.props.className || "",
                    defaultClassName,
                    ((_clsx = {}),
                    _defineProperty(_clsx, defaultClassNameDragging, this.state.dragging),
                    _defineProperty(_clsx, defaultClassNameDragged, this.state.dragged),
                    _clsx),
                  ); // Reuse the child provided
                  // This makes it flexible to use whatever element is wanted (div, ul, etc)
                  return /*#__PURE__*/ React.createElement(
                    _DraggableCore.default,
                    _extends({}, draggableCoreProps, {
                      onStart: this.onDragStart,
                      onDrag: this.onDrag,
                      onStop: this.onDragStop,
                    }),
                    /*#__PURE__*/ React.cloneElement(React.Children.only(children), {
                      className: className,
                      style: _objectSpread(_objectSpread({}, children.props.style), style),
                      transform: svgTransform,
                    }),
                  );
                },
              },
            ],
            [
              {
                key: "getDerivedStateFromProps",
                // Arity (props, state)
                value: function getDerivedStateFromProps(
                  _ref,
                  _ref2,
                ) /*: ?$Shape<DraggableState>*/ {
                  var position = _ref.position;
                  var prevPropsPosition = _ref2.prevPropsPosition;
                  // Set x/y if a new position is provided in props that is different than the previous.
                  if (
                    position &&
                    (!prevPropsPosition ||
                      position.x !== prevPropsPosition.x ||
                      position.y !== prevPropsPosition.y)
                  ) {
                    (0, _log.default)("Draggable: getDerivedStateFromProps %j", {
                      position: position,
                      prevPropsPosition: prevPropsPosition,
                    });
                    return {
                      x: position.x,
                      y: position.y,
                      prevPropsPosition: _objectSpread({}, position),
                    };
                  }
                  return null;
                },
              },
            ],
          );
          return Draggable;
        })(React.Component);
        exports.default = Draggable;
        _defineProperty(Draggable, "displayName", "Draggable");
        _defineProperty(
          Draggable,
          "propTypes",
          _objectSpread(
            _objectSpread({}, _DraggableCore.default.propTypes),
            {},
            {
              /**
               * `axis` determines which axis the draggable can move.
               *
               *  Note that all callbacks will still return data as normal. This only
               *  controls flushing to the DOM.
               *
               * 'both' allows movement horizontally and vertically.
               * 'x' limits movement to horizontal axis.
               * 'y' limits movement to vertical axis.
               * 'none' limits all movement.
               *
               * Defaults to 'both'.
               */ axis: _propTypes.default.oneOf(["both", "x", "y", "none"]),
              /**
               * `bounds` determines the range of movement available to the element.
               * Available values are:
               *
               * 'parent' restricts movement within the Draggable's parent node.
               *
               * Alternatively, pass an object with the following properties, all of which are optional:
               *
               * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
               *
               * All values are in px.
               *
               * Example:
               *
               * ```jsx
               *   let App = React.createClass({
               *       render: function () {
               *         return (
               *            <Draggable bounds={{right: 300, bottom: 300}}>
               *              <div>Content</div>
               *           </Draggable>
               *         );
               *       }
               *   });
               * ```
               */ bounds: _propTypes.default.oneOfType([
                _propTypes.default.shape({
                  left: _propTypes.default.number,
                  right: _propTypes.default.number,
                  top: _propTypes.default.number,
                  bottom: _propTypes.default.number,
                }),
                _propTypes.default.string,
                _propTypes.default.oneOf([false]),
              ]),
              defaultClassName: _propTypes.default.string,
              defaultClassNameDragging: _propTypes.default.string,
              defaultClassNameDragged: _propTypes.default.string,
              /**
               * `defaultPosition` specifies the x and y that the dragged item should start at
               *
               * Example:
               *
               * ```jsx
               *      let App = React.createClass({
               *          render: function () {
               *              return (
               *                  <Draggable defaultPosition={{x: 25, y: 25}}>
               *                      <div>I start with transformX: 25px and transformY: 25px;</div>
               *                  </Draggable>
               *              );
               *          }
               *      });
               * ```
               */ defaultPosition: _propTypes.default.shape({
                x: _propTypes.default.number,
                y: _propTypes.default.number,
              }),
              positionOffset: _propTypes.default.shape({
                x: _propTypes.default.oneOfType([
                  _propTypes.default.number,
                  _propTypes.default.string,
                ]),
                y: _propTypes.default.oneOfType([
                  _propTypes.default.number,
                  _propTypes.default.string,
                ]),
              }),
              /**
               * `position`, if present, defines the current position of the element.
               *
               *  This is similar to how form elements in React work - if no `position` is supplied, the component
               *  is uncontrolled.
               *
               * Example:
               *
               * ```jsx
               *      let App = React.createClass({
               *          render: function () {
               *              return (
               *                  <Draggable position={{x: 25, y: 25}}>
               *                      <div>I start with transformX: 25px and transformY: 25px;</div>
               *                  </Draggable>
               *              );
               *          }
               *      });
               * ```
               */ position: _propTypes.default.shape({
                x: _propTypes.default.number,
                y: _propTypes.default.number,
              }),
              /**
               * These properties should be defined on the child, not here.
               */ className: _shims.dontSetMe,
              style: _shims.dontSetMe,
              transform: _shims.dontSetMe,
            },
          ),
        );
        _defineProperty(
          Draggable,
          "defaultProps",
          _objectSpread(
            _objectSpread({}, _DraggableCore.default.defaultProps),
            {},
            {
              axis: "both",
              bounds: false,
              defaultClassName: "react-draggable",
              defaultClassNameDragging: "react-draggable-dragging",
              defaultClassNameDragged: "react-draggable-dragged",
              defaultPosition: {
                x: 0,
                y: 0,
              },
              scale: 1,
            },
          ),
        );
      },
      {
        f06ad358256d46ae: "21dqq",
        "9f8816d66633a995": "7wKI2",
        fd97d82c5bf54e9d: "j6uA9",
        "26060e24796bfa96": "83C22",
        "4e40e768124450c6": "22uqW",
        "6ac2262d9826d85d": "lAU1D",
        "2838a27078c4cbed": "5ZCCm",
        "2ae804dc0d7f535c": "1F8Q7",
        "6e73015298a24ef9": "5EzfF",
      },
    ],
    "7wKI2": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ var ReactIs = require("96e34ae03f5a2631");
        // By explicitly using `prop-types` you are opting into new development behavior.
        // http://fb.me/prop-types-in-prod
        var throwOnDirectAccess = true;
        module.exports = require("cb216452e2171041")(ReactIs.isElement, throwOnDirectAccess);
      },
      { "96e34ae03f5a2631": "gfIo3", cb216452e2171041: "bBUgD" },
    ],
    gfIo3: [
      function (require, module, exports) {
        "use strict";
        module.exports = require("ad47820528c6facb");
      },
      { ad47820528c6facb: "7GE9i" },
    ],
    "7GE9i": [
      function (require, module, exports) {
        /** @license React v16.13.1
         * react-is.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        (function () {
          "use strict";
          // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
          // nor polyfill, then a plain number is used for performance.
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 0xeacc;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
          // (unstable) APIs that have been removed. Can we remove the symbols?
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 0xeacf;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 0xeacf;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 0xead0;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 0xead8;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 0xead9;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 0xead5;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 0xead6;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 0xead7;
          function isValidElementType(type) {
            return (
              typeof type === "string" ||
              typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
              type === REACT_FRAGMENT_TYPE ||
              type === REACT_CONCURRENT_MODE_TYPE ||
              type === REACT_PROFILER_TYPE ||
              type === REACT_STRICT_MODE_TYPE ||
              type === REACT_SUSPENSE_TYPE ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              (typeof type === "object" &&
                type !== null &&
                (type.$$typeof === REACT_LAZY_TYPE ||
                  type.$$typeof === REACT_MEMO_TYPE ||
                  type.$$typeof === REACT_PROVIDER_TYPE ||
                  type.$$typeof === REACT_CONTEXT_TYPE ||
                  type.$$typeof === REACT_FORWARD_REF_TYPE ||
                  type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                  type.$$typeof === REACT_RESPONDER_TYPE ||
                  type.$$typeof === REACT_SCOPE_TYPE ||
                  type.$$typeof === REACT_BLOCK_TYPE))
            );
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return undefined;
          } // AsyncMode is deprecated along with isAsyncMode
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
          function isAsyncMode(object) {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
              console["warn"](
                "The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.",
              );
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return (
              typeof object === "object" &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            );
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      },
      {},
    ],
    bBUgD: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        var ReactIs = require("c437388b089702c3");
        var assign = require("c067a60101d8520c");
        var ReactPropTypesSecret = require("74a0f89a70b9f3c2");
        var has = require("18441b11647bc78");
        var checkPropTypes = require("bec3f6ff89f0b072");
        var printWarning = function () {};
        printWarning = function (text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") console.error(message);
          try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
          } catch (x) {}
        };
        function emptyFunctionThatReturnsNull() {
          return null;
        }
        module.exports = function (isValidElement, throwOnDirectAccess) {
          /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator"; // Before Symbol spec.
          /**
           * Returns the iterator method function contained on the iterable object.
           *
           * Be sure to invoke the function with the iterable as context:
           *
           *     var iteratorFn = getIteratorFn(myIterable);
           *     if (iteratorFn) {
           *       var iterator = iteratorFn.call(myIterable);
           *       ...
           *     }
           *
           * @param {?object} maybeIterable
           * @return {?function}
           */ function getIteratorFn(maybeIterable) {
            var iteratorFn =
              maybeIterable &&
              ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
                maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") return iteratorFn;
          }
          /**
           * Collection of methods that allow declaration and validation of props that are
           * supplied to React components. Example usage:
           *
           *   var Props = require('ReactPropTypes');
           *   var MyArticle = React.createClass({
           *     propTypes: {
           *       // An optional string prop named "description".
           *       description: Props.string,
           *
           *       // A required enum prop named "category".
           *       category: Props.oneOf(['News','Photos']).isRequired,
           *
           *       // A prop named "dialog" that requires an instance of Dialog.
           *       dialog: Props.instanceOf(Dialog).isRequired
           *     },
           *     render: function() { ... }
           *   });
           *
           * A more formal specification of how these methods are used:
           *
           *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
           *   decl := ReactPropTypes.{type}(.isRequired)?
           *
           * Each and every declaration produces a function with the same signature. This
           * allows the creation of custom validation functions. For example:
           *
           *  var MyLink = React.createClass({
           *    propTypes: {
           *      // An optional string or URI prop named "href".
           *      href: function(props, propName, componentName) {
           *        var propValue = props[propName];
           *        if (propValue != null && typeof propValue !== 'string' &&
           *            !(propValue instanceof URI)) {
           *          return new Error(
           *            'Expected a string or an URI for ' + propName + ' in ' +
           *            componentName
           *          );
           *        }
           *      }
           *    },
           *    render: function() {...}
           *  });
           *
           * @internal
           */ var ANONYMOUS = "<<anonymous>>";
          // Important!
          // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
          var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bigint: createPrimitiveTypeChecker("bigint"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),
            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            elementType: createElementTypeTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker,
          };
          /**
           * inlined Object.is polyfill to avoid requiring consumers ship their own
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
           */ /*eslint-disable no-self-compare*/ function is(x, y) {
            // SameValue algorithm
            if (x === y)
              // Steps 1-5, 7-10
              // Steps 6.b-6.e: +0 != -0
              return x !== 0 || 1 / x === 1 / y;
            // Step 6.a: NaN == NaN
            else return x !== x && y !== y;
          }
          /*eslint-enable no-self-compare*/ /**
           * We use an Error-like object for backward compatibility as people may call
           * PropTypes directly and inspect their output. However, we don't use real
           * Errors anymore. We don't inspect their stack anyway, and creating them
           * is prohibitively expensive if they are created too often, such as what
           * happens in oneOfType() for any type before the one that matched.
           */ function PropTypeError(message, data) {
            this.message = message;
            this.data = data && typeof data === "object" ? data : {};
            this.stack = "";
          }
          // Make `instanceof Error` still work for returned errors.
          PropTypeError.prototype = Error.prototype;
          function createChainableTypeChecker(validate) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
            function checkType(
              isRequired,
              props,
              propName,
              componentName,
              location,
              propFullName,
              secret,
            ) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;
              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                  // New behavior only for users of `prop-types` package
                  var err = new Error(
                    "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types",
                  );
                  err.name = "Invariant Violation";
                  throw err;
                } else if (typeof console !== "undefined") {
                  // Old behavior for people using React.PropTypes
                  var cacheKey = componentName + ":" + propName;
                  if (
                    !manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3
                  ) {
                    printWarning(
                      "You are manually calling a React.PropTypes validation function for the `" +
                        propFullName +
                        "` prop on `" +
                        componentName +
                        "`. This is deprecated " +
                        "and will throw in the standalone `prop-types` package. " +
                        "You may be seeing this warning due to a third-party PropTypes " +
                        "library. See https://fb.me/react-warning-dont-call-proptypes " +
                        "for details.",
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }
              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null)
                    return new PropTypeError(
                      "The " +
                        location +
                        " `" +
                        propFullName +
                        "` is marked as required " +
                        ("in `" + componentName + "`, but its value is `null`."),
                    );
                  return new PropTypeError(
                    "The " +
                      location +
                      " `" +
                      propFullName +
                      "` is marked as required in " +
                      ("`" + componentName + "`, but its value is `undefined`."),
                  );
                }
                return null;
              } else return validate(props, propName, componentName, location, propFullName);
            }
            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);
            return chainedCheckType;
          }
          function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") +
                    ("`" + expectedType + "`."),
                  {
                    expectedType: expectedType,
                  },
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
          }
          function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function")
                return new PropTypeError(
                  "Property `" +
                    propFullName +
                    "` of component `" +
                    componentName +
                    "` has invalid PropType notation inside arrayOf.",
                );
              var propValue = props[propName];
              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" + propType + "` supplied to `" + componentName + "`, expected an array."),
                );
              }
              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(
                  propValue,
                  i,
                  componentName,
                  location,
                  propFullName + "[" + i + "]",
                  ReactPropTypesSecret,
                );
                if (error instanceof Error) return error;
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      propType +
                      "` supplied to `" +
                      componentName +
                      "`, expected a single ReactElement."),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createElementTypeTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" +
                      propType +
                      "` supplied to `" +
                      componentName +
                      "`, expected a single ReactElement type."),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") +
                    ("instance of `" + expectedClassName + "`."),
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              {
                if (arguments.length > 1)
                  printWarning(
                    "Invalid arguments supplied to oneOf, expected an array, got " +
                      arguments.length +
                      " arguments. " +
                      "A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).",
                  );
                else printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
              return emptyFunctionThatReturnsNull;
            }
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) return null;
              }
              var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === "symbol") return String(value);
                return value;
              });
              return new PropTypeError(
                "Invalid " +
                  location +
                  " `" +
                  propFullName +
                  "` of value `" +
                  String(propValue) +
                  "` " +
                  ("supplied to `" + componentName + "`, expected one of " + valuesString + "."),
              );
            }
            return createChainableTypeChecker(validate);
          }
          function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function")
                return new PropTypeError(
                  "Property `" +
                    propFullName +
                    "` of component `" +
                    componentName +
                    "` has invalid PropType notation inside objectOf.",
                );
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object")
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type " +
                    ("`" + propType + "` supplied to `" + componentName + "`, expected an object."),
                );
              for (var key in propValue)
                if (has(propValue, key)) {
                  var error = typeChecker(
                    propValue,
                    key,
                    componentName,
                    location,
                    propFullName + "." + key,
                    ReactPropTypesSecret,
                  );
                  if (error instanceof Error) return error;
                }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              printWarning(
                "Invalid argument supplied to oneOfType, expected an instance of array.",
              );
              return emptyFunctionThatReturnsNull;
            }
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];
              if (typeof checker !== "function") {
                printWarning(
                  "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " +
                    getPostfixForTypeWarning(checker) +
                    " at index " +
                    i +
                    ".",
                );
                return emptyFunctionThatReturnsNull;
              }
            }
            function validate(props, propName, componentName, location, propFullName) {
              var expectedTypes = [];
              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName,
                  ReactPropTypesSecret,
                );
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, "expectedType"))
                  expectedTypes.push(checkerResult.data.expectedType);
              }
              var expectedTypesMessage =
                expectedTypes.length > 0
                  ? ", expected one of type [" + expectedTypes.join(", ") + "]"
                  : "";
              return new PropTypeError(
                "Invalid " +
                  location +
                  " `" +
                  propFullName +
                  "` supplied to " +
                  ("`" + componentName + "`" + expectedTypesMessage + "."),
              );
            }
            return createChainableTypeChecker(validate);
          }
          function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              if (!isNode(props[propName]))
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` supplied to " +
                    ("`" + componentName + "`, expected a ReactNode."),
                );
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function invalidValidatorError(componentName, location, propFullName, key, type) {
            return new PropTypeError(
              (componentName || "React class") +
                ": " +
                location +
                " type `" +
                propFullName +
                "." +
                key +
                "` is invalid; " +
                "it must be a function, usually from the `prop-types` package, but received `" +
                type +
                "`.",
            );
          }
          function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object")
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type `" +
                    propType +
                    "` " +
                    ("supplied to `" + componentName + "`, expected `object`."),
                );
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (typeof checker !== "function")
                  return invalidValidatorError(
                    componentName,
                    location,
                    propFullName,
                    key,
                    getPreciseType(checker),
                  );
                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + "." + key,
                  ReactPropTypesSecret,
                );
                if (error) return error;
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createStrictShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object")
                return new PropTypeError(
                  "Invalid " +
                    location +
                    " `" +
                    propFullName +
                    "` of type `" +
                    propType +
                    "` " +
                    ("supplied to `" + componentName + "`, expected `object`."),
                );
              // We need to check all keys in case some are required but missing from props.
              var allKeys = assign({}, props[propName], shapeTypes);
              for (var key in allKeys) {
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== "function")
                  return invalidValidatorError(
                    componentName,
                    location,
                    propFullName,
                    key,
                    getPreciseType(checker),
                  );
                if (!checker)
                  return new PropTypeError(
                    "Invalid " +
                      location +
                      " `" +
                      propFullName +
                      "` key `" +
                      key +
                      "` supplied to `" +
                      componentName +
                      "`." +
                      "\nBad object: " +
                      JSON.stringify(props[propName], null, "  ") +
                      "\nValid keys: " +
                      JSON.stringify(Object.keys(shapeTypes), null, "  "),
                  );
                var error = checker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + "." + key,
                  ReactPropTypesSecret,
                );
                if (error) return error;
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function isNode(propValue) {
            switch (typeof propValue) {
              case "number":
              case "string":
              case "undefined":
                return true;
              case "boolean":
                return !propValue;
              case "object":
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                  var iterator = iteratorFn.call(propValue);
                  var step;
                  if (iteratorFn !== propValue.entries)
                    while (!(step = iterator.next()).done) {
                      if (!isNode(step.value)) return false;
                    }
                  // Iterator will provide entry [k,v] tuples rather than values.
                  else
                    while (!(step = iterator.next()).done) {
                      var entry = step.value;
                      if (entry) {
                        if (!isNode(entry[1])) return false;
                      }
                    }
                } else return false;
                return true;
              default:
                return false;
            }
          }
          function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === "symbol") return true;
            // falsy value can't be a Symbol
            if (!propValue) return false;
            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue["@@toStringTag"] === "Symbol") return true;
            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === "function" && propValue instanceof Symbol) return true;
            return false;
          }
          // Equivalent of `typeof` but with special handling for array and regexp.
          function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) return "array";
            if (propValue instanceof RegExp)
              // Old webkits (at least until Android 4.0) return 'function' rather than
              // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
              // passes PropTypes.object.
              return "object";
            if (isSymbol(propType, propValue)) return "symbol";
            return propType;
          }
          // This handles more types than `getPropType`. Only used for error messages.
          // See `createPrimitiveTypeChecker`.
          function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) return "" + propValue;
            var propType = getPropType(propValue);
            if (propType === "object") {
              if (propValue instanceof Date) return "date";
              else if (propValue instanceof RegExp) return "regexp";
            }
            return propType;
          }
          // Returns a string that is postfixed to a warning about an invalid type.
          // For example, "undefined" or "of type array"
          function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
              case "array":
              case "object":
                return "an " + type;
              case "boolean":
              case "date":
              case "regexp":
                return "a " + type;
              default:
                return type;
            }
          }
          // Returns class name of the object, if any.
          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
            return propValue.constructor.name;
          }
          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
      },
      {
        c437388b089702c3: "gfIo3",
        c067a60101d8520c: "7OXxh",
        "74a0f89a70b9f3c2": "jZTZJ",
        "18441b11647bc78": "fqKuf",
        bec3f6ff89f0b072: "5VwyJ",
      },
    ],
    jZTZJ: [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        module.exports = ReactPropTypesSecret;
      },
      {},
    ],
    fqKuf: [
      function (require, module, exports) {
        module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
      },
      {},
    ],
    "5VwyJ": [
      function (require, module, exports) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */ "use strict";
        var printWarning = function () {};
        var ReactPropTypesSecret = require("24ba1e58d167a82c");
        var loggedTypeFailures = {};
        var has = require("898bc82f39d83f7c");
        printWarning = function (text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") console.error(message);
          try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
          } catch (x) {}
        };
        /**
         * Assert that the values match with the type specs.
         * Error messages are memorized and will only be shown once.
         *
         * @param {object} typeSpecs Map of name to a ReactPropType
         * @param {object} values Runtime values that need to be type-checked
         * @param {string} location e.g. "prop", "context", "child context"
         * @param {string} componentName Name of the component for error messages.
         * @param {?Function} getStack Returns the component stack.
         * @private
         */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error;
              // Prop type validation may throw. In case they do, we don't want to
              // fail the render phase where it didn't fail before. So we log it.
              // After these have been cleaned up, we'll let them throw.
              try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") +
                      ": " +
                      location +
                      " type `" +
                      typeSpecName +
                      "` is invalid; " +
                      "it must be a function, usually from the `prop-types` package, but received `" +
                      typeof typeSpecs[typeSpecName] +
                      "`." +
                      "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.",
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](
                  values,
                  typeSpecName,
                  componentName,
                  location,
                  null,
                  ReactPropTypesSecret,
                );
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error))
                printWarning(
                  (componentName || "React class") +
                    ": type specification of " +
                    location +
                    " `" +
                    typeSpecName +
                    "` is invalid; the type checker " +
                    "function must return `null` or an `Error` but returned a " +
                    typeof error +
                    ". " +
                    "You may have forgotten to pass an argument to the type checker " +
                    "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " +
                    "shape all require an argument).",
                );
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : ""),
                );
              }
            }
        }
        /**
         * Resets warning cache when testing.
         *
         * @private
         */ checkPropTypes.resetWarningCache = function () {
          loggedTypeFailures = {};
        };
        module.exports = checkPropTypes;
      },
      { "24ba1e58d167a82c": "jZTZJ", "898bc82f39d83f7c": "fqKuf" },
    ],
    "83C22": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "clsx", () => clsx);
        function r(e) {
          var t,
            f,
            n = "";
          if ("string" == typeof e || "number" == typeof e) n += e;
          else if ("object" == typeof e) {
            if (Array.isArray(e))
              for (t = 0; t < e.length; t++) e[t] && (f = r(e[t])) && (n && (n += " "), (n += f));
            else for (t in e) e[t] && (n && (n += " "), (n += t));
          }
          return n;
        }
        function clsx() {
          for (var e, t, f = 0, n = ""; f < arguments.length; )
            (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), (n += t));
          return n;
        }
        exports.default = clsx;
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "22uqW": [
      function (require, module, exports) {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          return (
            (_typeof =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (obj) {
                    return typeof obj;
                  }
                : function (obj) {
                    return obj &&
                      "function" == typeof Symbol &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  }),
            _typeof(obj)
          );
        }
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.addClassName = addClassName;
        exports.addEvent = addEvent;
        exports.addUserSelectStyles = addUserSelectStyles;
        exports.createCSSTransform = createCSSTransform;
        exports.createSVGTransform = createSVGTransform;
        exports.getTouch = getTouch;
        exports.getTouchIdentifier = getTouchIdentifier;
        exports.getTranslation = getTranslation;
        exports.innerHeight = innerHeight;
        exports.innerWidth = innerWidth;
        exports.matchesSelector = matchesSelector;
        exports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;
        exports.offsetXYFromParent = offsetXYFromParent;
        exports.outerHeight = outerHeight;
        exports.outerWidth = outerWidth;
        exports.removeClassName = removeClassName;
        exports.removeEvent = removeEvent;
        exports.removeUserSelectStyles = removeUserSelectStyles;
        var _shims = require("af60d0462ec484c0");
        var _getPrefix = _interopRequireWildcard(require("25bee73a12bb5ee8"));
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) return obj;
          if (obj === null || (_typeof(obj) !== "object" && typeof obj !== "function"))
            return {
              default: obj,
            };
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) return cache.get(obj);
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj)
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
              else newObj[key] = obj[key];
            }
          newObj.default = obj;
          if (cache) cache.set(obj, newObj);
          return newObj;
        }
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly &&
              (symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              })),
              keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2
              ? ownKeys(Object(source), !0).forEach(function (key) {
                  _defineProperty(target, key, source[key]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
              : ownKeys(Object(source)).forEach(function (key) {
                  Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        var matchesSelectorFunc = "";
        function matchesSelector(el, selector) /*: boolean*/ {
          if (!matchesSelectorFunc)
            matchesSelectorFunc = (0, _shims.findInArray)(
              [
                "matches",
                "webkitMatchesSelector",
                "mozMatchesSelector",
                "msMatchesSelector",
                "oMatchesSelector",
              ],
              function (method) {
                // $FlowIgnore: Doesn't think elements are indexable
                return (0, _shims.isFunction)(el[method]);
              },
            );
          // Might not be found entirely (not an Element?) - in that case, bail
          // $FlowIgnore: Doesn't think elements are indexable
          if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false; // $FlowIgnore: Doesn't think elements are indexable
          return el[matchesSelectorFunc](selector);
        } // Works up the tree to the draggable itself attempting to match selector.
        function matchesSelectorAndParentsTo(el, selector, baseNode) /*: boolean*/ {
          var node = el;
          do {
            if (matchesSelector(node, selector)) return true;
            if (node === baseNode) return false;
            node = node.parentNode;
          } while (node);
          return false;
        }
        function addEvent(el, event, handler, inputOptions) /*: void*/ {
          if (!el) return;
          var options = _objectSpread(
            {
              capture: true,
            },
            inputOptions,
          ); // $FlowIgnore[method-unbinding]
          if (el.addEventListener) el.addEventListener(event, handler, options);
          else if (el.attachEvent) el.attachEvent("on" + event, handler);
          // $FlowIgnore: Doesn't think elements are indexable
          else el["on" + event] = handler;
        }
        function removeEvent(el, event, handler, inputOptions) /*: void*/ {
          if (!el) return;
          var options = _objectSpread(
            {
              capture: true,
            },
            inputOptions,
          ); // $FlowIgnore[method-unbinding]
          if (el.removeEventListener) el.removeEventListener(event, handler, options);
          else if (el.detachEvent) el.detachEvent("on" + event, handler);
          // $FlowIgnore: Doesn't think elements are indexable
          else el["on" + event] = null;
        }
        function outerHeight(node) /*: number*/ {
          // This is deliberately excluding margin for our calculations, since we are using
          // offsetTop which is including margin. See getBoundPosition
          var height = node.clientHeight;
          var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
          height += (0, _shims.int)(computedStyle.borderTopWidth);
          height += (0, _shims.int)(computedStyle.borderBottomWidth);
          return height;
        }
        function outerWidth(node) /*: number*/ {
          // This is deliberately excluding margin for our calculations, since we are using
          // offsetLeft which is including margin. See getBoundPosition
          var width = node.clientWidth;
          var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
          width += (0, _shims.int)(computedStyle.borderLeftWidth);
          width += (0, _shims.int)(computedStyle.borderRightWidth);
          return width;
        }
        function innerHeight(node) /*: number*/ {
          var height = node.clientHeight;
          var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
          height -= (0, _shims.int)(computedStyle.paddingTop);
          height -= (0, _shims.int)(computedStyle.paddingBottom);
          return height;
        }
        function innerWidth(node) /*: number*/ {
          var width = node.clientWidth;
          var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
          width -= (0, _shims.int)(computedStyle.paddingLeft);
          width -= (0, _shims.int)(computedStyle.paddingRight);
          return width;
        }
        /*:: interface EventWithOffset {
  clientX: number, clientY: number
}*/ // Get from offsetParent
        function offsetXYFromParent(evt, offsetParent, scale) /*: ControlPosition*/ {
          var isBody = offsetParent === offsetParent.ownerDocument.body;
          var offsetParentRect = isBody
            ? {
                left: 0,
                top: 0,
              }
            : offsetParent.getBoundingClientRect();
          var x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;
          var y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;
          return {
            x: x,
            y: y,
          };
        }
        function createCSSTransform(controlPos, positionOffset) /*: Object*/ {
          var translation = getTranslation(controlPos, positionOffset, "px");
          return _defineProperty(
            {},
            (0, _getPrefix.browserPrefixToKey)("transform", _getPrefix.default),
            translation,
          );
        }
        function createSVGTransform(controlPos, positionOffset) /*: string*/ {
          var translation = getTranslation(controlPos, positionOffset, "");
          return translation;
        }
        function getTranslation(_ref2, positionOffset, unitSuffix) /*: string*/ {
          var x = _ref2.x,
            y = _ref2.y;
          var translation = "translate("
            .concat(x)
            .concat(unitSuffix, ",")
            .concat(y)
            .concat(unitSuffix, ")");
          if (positionOffset) {
            var defaultX = "".concat(
              typeof positionOffset.x === "string"
                ? positionOffset.x
                : positionOffset.x + unitSuffix,
            );
            var defaultY = "".concat(
              typeof positionOffset.y === "string"
                ? positionOffset.y
                : positionOffset.y + unitSuffix,
            );
            translation = "translate(".concat(defaultX, ", ").concat(defaultY, ")") + translation;
          }
          return translation;
        }
        function getTouch(e, identifier) /*: ?{clientX: number, clientY: number}*/ {
          return (
            (e.targetTouches &&
              (0, _shims.findInArray)(e.targetTouches, function (t) {
                return identifier === t.identifier;
              })) ||
            (e.changedTouches &&
              (0, _shims.findInArray)(e.changedTouches, function (t) {
                return identifier === t.identifier;
              }))
          );
        }
        function getTouchIdentifier(e) /*: ?number*/ {
          if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
          if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
        } // User-select Hacks:
        //
        // Useful for preventing blue highlights all over everything when dragging.
        // Note we're passing `document` b/c we could be iframed
        function addUserSelectStyles(doc) {
          if (!doc) return;
          var styleEl = doc.getElementById("react-draggable-style-el");
          if (!styleEl) {
            styleEl = doc.createElement("style");
            styleEl.type = "text/css";
            styleEl.id = "react-draggable-style-el";
            styleEl.innerHTML =
              ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n";
            styleEl.innerHTML +=
              ".react-draggable-transparent-selection *::selection {all: inherit;}\n";
            doc.getElementsByTagName("head")[0].appendChild(styleEl);
          }
          if (doc.body) addClassName(doc.body, "react-draggable-transparent-selection");
        }
        function removeUserSelectStyles(doc) {
          if (!doc) return;
          try {
            if (doc.body) removeClassName(doc.body, "react-draggable-transparent-selection"); // $FlowIgnore: IE
            if (doc.selection)
              // $FlowIgnore: IE
              doc.selection.empty();
            else {
              // Remove selection caused by scroll, unless it's a focused input
              // (we use doc.defaultView in case we're in an iframe)
              var selection = (doc.defaultView || window).getSelection();
              if (selection && selection.type !== "Caret") selection.removeAllRanges();
            }
          } catch (e) {}
        }
        function addClassName(el, className) {
          if (el.classList) el.classList.add(className);
          else if (!el.className.match(new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"))))
            el.className += " ".concat(className);
        }
        function removeClassName(el, className) {
          if (el.classList) el.classList.remove(className);
          else
            el.className = el.className.replace(
              new RegExp("(?:^|\\s)".concat(className, "(?!\\S)"), "g"),
              "",
            );
        }
      },
      { af60d0462ec484c0: "5ZCCm", "25bee73a12bb5ee8": "39kct" },
    ],
    "5ZCCm": [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.dontSetMe = dontSetMe;
        exports.findInArray = findInArray;
        exports.int = int;
        exports.isFunction = isFunction;
        exports.isNum = isNum;
        // @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
        function findInArray(array, callback) /*: any*/ {
          for (var i = 0, length = array.length; i < length; i++) {
            if (callback.apply(callback, [array[i], i, array])) return array[i];
          }
        }
        function isFunction(func) /*: boolean %checks*/ {
          // $FlowIgnore[method-unbinding]
          return (
            typeof func === "function" ||
            Object.prototype.toString.call(func) === "[object Function]"
          );
        }
        function isNum(num) /*: boolean %checks*/ {
          return typeof num === "number" && !isNaN(num);
        }
        function int(a) /*: number*/ {
          return parseInt(a, 10);
        }
        function dontSetMe(props, propName, componentName) /*: ?Error*/ {
          if (props[propName])
            return new Error(
              "Invalid prop "
                .concat(propName, " passed to ")
                .concat(componentName, " - do not set this, set it on the child."),
            );
        }
      },
      {},
    ],
    "39kct": [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.browserPrefixToKey = browserPrefixToKey;
        exports.browserPrefixToStyle = browserPrefixToStyle;
        exports.default = void 0;
        exports.getPrefix = getPrefix;
        var prefixes = ["Moz", "Webkit", "O", "ms"];
        function getPrefix() /*: string*/ {
          var _window$document, _window$document$docu;
          var prop =
            arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "transform";
          // Ensure we're running in an environment where there is actually a global
          // `window` obj
          if (typeof window === "undefined") return ""; // If we're in a pseudo-browser server-side environment, this access
          // path may not exist, so bail out if it doesn't.
          var style =
            (_window$document = window.document) === null || _window$document === void 0
              ? void 0
              : (_window$document$docu = _window$document.documentElement) === null ||
                _window$document$docu === void 0
              ? void 0
              : _window$document$docu.style;
          if (!style) return "";
          if (prop in style) return "";
          for (var i = 0; i < prefixes.length; i++) {
            if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
          }
          return "";
        }
        function browserPrefixToKey(prop, prefix) /*: string*/ {
          return prefix ? "".concat(prefix).concat(kebabToTitleCase(prop)) : prop;
        }
        function browserPrefixToStyle(prop, prefix) /*: string*/ {
          return prefix ? "-".concat(prefix.toLowerCase(), "-").concat(prop) : prop;
        }
        function kebabToTitleCase(str) /*: string*/ {
          var out = "";
          var shouldCapitalize = true;
          for (var i = 0; i < str.length; i++) {
            if (shouldCapitalize) {
              out += str[i].toUpperCase();
              shouldCapitalize = false;
            } else if (str[i] === "-") shouldCapitalize = true;
            else out += str[i];
          }
          return out;
        } // Default export is the prefix itself, like 'Moz', 'Webkit', etc
        // Note that you may have to re-test for certain things; for instance, Chrome 50
        // can handle unprefixed `transform`, but not unprefixed `user-select`
        var _default = getPrefix();
        exports.default = _default;
      },
      {},
    ],
    lAU1D: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.canDragX = canDragX;
        exports.canDragY = canDragY;
        exports.createCoreData = createCoreData;
        exports.createDraggableData = createDraggableData;
        exports.getBoundPosition = getBoundPosition;
        exports.getControlPosition = getControlPosition;
        exports.snapToGrid = snapToGrid;
        var _shims = require("44bb88b39f2262ab");
        var _domFns = require("6d8383fdeb613c7c");
        function getBoundPosition(draggable, x, y) /*: [number, number]*/ {
          // If no bounds, short-circuit and move on
          if (!draggable.props.bounds) return [x, y]; // Clone new bounds
          var bounds = draggable.props.bounds;
          bounds = typeof bounds === "string" ? bounds : cloneBounds(bounds);
          var node = findDOMNode(draggable);
          if (typeof bounds === "string") {
            var ownerDocument = node.ownerDocument;
            var ownerWindow = ownerDocument.defaultView;
            var boundNode;
            if (bounds === "parent") boundNode = node.parentNode;
            else boundNode = ownerDocument.querySelector(bounds);
            if (!(boundNode instanceof ownerWindow.HTMLElement))
              throw new Error('Bounds selector "' + bounds + '" could not find an element.');
            var boundNodeEl = boundNode; // for Flow, can't seem to refine correctly
            var nodeStyle = ownerWindow.getComputedStyle(node);
            var boundNodeStyle = ownerWindow.getComputedStyle(boundNodeEl); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
            bounds = {
              left:
                -node.offsetLeft +
                (0, _shims.int)(boundNodeStyle.paddingLeft) +
                (0, _shims.int)(nodeStyle.marginLeft),
              top:
                -node.offsetTop +
                (0, _shims.int)(boundNodeStyle.paddingTop) +
                (0, _shims.int)(nodeStyle.marginTop),
              right:
                (0, _domFns.innerWidth)(boundNodeEl) -
                (0, _domFns.outerWidth)(node) -
                node.offsetLeft +
                (0, _shims.int)(boundNodeStyle.paddingRight) -
                (0, _shims.int)(nodeStyle.marginRight),
              bottom:
                (0, _domFns.innerHeight)(boundNodeEl) -
                (0, _domFns.outerHeight)(node) -
                node.offsetTop +
                (0, _shims.int)(boundNodeStyle.paddingBottom) -
                (0, _shims.int)(nodeStyle.marginBottom),
            };
          } // Keep x and y below right and bottom limits...
          if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);
          if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.
          if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);
          if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);
          return [x, y];
        }
        function snapToGrid(grid, pendingX, pendingY) /*: [number, number]*/ {
          var x = Math.round(pendingX / grid[0]) * grid[0];
          var y = Math.round(pendingY / grid[1]) * grid[1];
          return [x, y];
        }
        function canDragX(draggable) /*: boolean*/ {
          return draggable.props.axis === "both" || draggable.props.axis === "x";
        }
        function canDragY(draggable) /*: boolean*/ {
          return draggable.props.axis === "both" || draggable.props.axis === "y";
        } // Get {x, y} positions from event.
        function getControlPosition(e, touchIdentifier, draggableCore) /*: ?ControlPosition*/ {
          var touchObj =
            typeof touchIdentifier === "number" ? (0, _domFns.getTouch)(e, touchIdentifier) : null;
          if (typeof touchIdentifier === "number" && !touchObj) return null; // not the right touch
          var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.
          var offsetParent =
            draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
          return (0, _domFns.offsetXYFromParent)(
            touchObj || e,
            offsetParent,
            draggableCore.props.scale,
          );
        } // Create an data object exposed by <DraggableCore>'s events
        function createCoreData(draggable, x, y) /*: DraggableData*/ {
          var state = draggable.state;
          var isStart = !(0, _shims.isNum)(state.lastX);
          var node = findDOMNode(draggable);
          if (isStart)
            // If this is our first move, use the x and y as last coords.
            return {
              node: node,
              deltaX: 0,
              deltaY: 0,
              lastX: x,
              lastY: y,
              x: x,
              y: y,
            };
          // Otherwise calculate proper values.
          else
            return {
              node: node,
              deltaX: x - state.lastX,
              deltaY: y - state.lastY,
              lastX: state.lastX,
              lastY: state.lastY,
              x: x,
              y: y,
            };
        } // Create an data exposed by <Draggable>'s events
        function createDraggableData(draggable, coreData) /*: DraggableData*/ {
          var scale = draggable.props.scale;
          return {
            node: coreData.node,
            x: draggable.state.x + coreData.deltaX / scale,
            y: draggable.state.y + coreData.deltaY / scale,
            deltaX: coreData.deltaX / scale,
            deltaY: coreData.deltaY / scale,
            lastX: draggable.state.x,
            lastY: draggable.state.y,
          };
        } // A lot faster than stringify/parse
        function cloneBounds(bounds) /*: Bounds*/ {
          return {
            left: bounds.left,
            top: bounds.top,
            right: bounds.right,
            bottom: bounds.bottom,
          };
        }
        function findDOMNode(draggable) /*: HTMLElement*/ {
          var node = draggable.findDOMNode();
          if (!node) throw new Error("<DraggableCore>: Unmounted during event!");
          // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME
          return node;
        }
      },
      { "44bb88b39f2262ab": "5ZCCm", "6d8383fdeb613c7c": "22uqW" },
    ],
    "1F8Q7": [
      function (require, module, exports) {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          return (
            (_typeof =
              "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                ? function (obj) {
                    return typeof obj;
                  }
                : function (obj) {
                    return obj &&
                      "function" == typeof Symbol &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  }),
            _typeof(obj)
          );
        }
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = void 0;
        var React = _interopRequireWildcard(require("d830172ba8d01674"));
        var _propTypes = _interopRequireDefault(require("936051a0e8f63cef"));
        var _reactDom = _interopRequireDefault(require("51e89cac1fd8612a"));
        var _domFns = require("a60a19bd70f37cbe");
        var _positionFns = require("32cd453cf02f7977");
        var _shims = require("b3ef123d6f743aa4");
        var _log = _interopRequireDefault(require("71bc142b940fef0c"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj,
              };
        }
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) return obj;
          if (obj === null || (_typeof(obj) !== "object" && typeof obj !== "function"))
            return {
              default: obj,
            };
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) return cache.get(obj);
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj)
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
              else newObj[key] = obj[key];
            }
          newObj.default = obj;
          if (cache) cache.set(obj, newObj);
          return newObj;
        }
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _unsupportedIterableToArray(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
          );
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
          return arr2;
        }
        function _iterableToArrayLimit(arr, i) {
          var _i =
            arr == null
              ? null
              : (typeof Symbol !== "undefined" && arr[Symbol.iterator]) || arr["@@iterator"];
          if (_i == null) return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor))
            throw new TypeError("Cannot call a class as a function");
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false,
          });
          return Constructor;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null)
            throw new TypeError("Super expression must either be null or a function");
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          });
          Object.defineProperty(subClass, "prototype", {
            writable: false,
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };
          return _setPrototypeOf(o, p);
        }
        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
          };
        }
        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
          else if (call !== void 0)
            throw new TypeError("Derived constructors may only return object or undefined");
          return _assertThisInitialized(self);
        }
        function _assertThisInitialized(self) {
          if (self === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self;
        }
        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }
        function _defineProperty(obj, key, value) {
          if (key in obj)
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          else obj[key] = value;
          return obj;
        }
        // Simple abstraction for dragging events names.
        var eventsFor = {
          touch: {
            start: "touchstart",
            move: "touchmove",
            stop: "touchend",
          },
          mouse: {
            start: "mousedown",
            move: "mousemove",
            stop: "mouseup",
          },
        }; // Default to mouse events.
        var dragEventFor = eventsFor.mouse;
        /*:: type DraggableCoreState = {
  dragging: boolean,
  lastX: number,
  lastY: number,
  touchIdentifier: ?number
};*/ /*:: export type DraggableData = {
  node: HTMLElement,
  x: number, y: number,
  deltaX: number, deltaY: number,
  lastX: number, lastY: number,
};*/ /*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/ /*:: export type ControlPosition = {x: number, y: number};*/ /*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/ /*:: export type DraggableCoreDefaultProps = {
  allowAnyClick: boolean,
  disabled: boolean,
  enableUserSelectHack: boolean,
  onStart: DraggableEventHandler,
  onDrag: DraggableEventHandler,
  onStop: DraggableEventHandler,
  onMouseDown: (e: MouseEvent) => void,
  scale: number,
};*/ /*:: export type DraggableCoreProps = {
  ...DraggableCoreDefaultProps,
  cancel: string,
  children: ReactElement<any>,
  offsetParent: HTMLElement,
  grid: [number, number],
  handle: string,
  nodeRef?: ?React.ElementRef<any>,
};*/ //
        // Define <DraggableCore>.
        //
        // <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
        // work well with libraries that require more control over the element.
        //
        var DraggableCore = /*#__PURE__*/ (function (_React$Component) {
          _inherits(DraggableCore, _React$Component);
          var _super = _createSuper(DraggableCore);
          function DraggableCore() {
            var _this;
            _classCallCheck(this, DraggableCore);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
              args[_key] = arguments[_key];
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty(_assertThisInitialized(_this), "state", {
              dragging: false,
              // Used while dragging to determine deltas.
              lastX: NaN,
              lastY: NaN,
              touchIdentifier: null,
            });
            _defineProperty(_assertThisInitialized(_this), "mounted", false);
            _defineProperty(_assertThisInitialized(_this), "handleDragStart", function (e) {
              // Make it possible to attach event handlers on top of this one.
              _this.props.onMouseDown(e); // Only accept left-clicks.
              if (!_this.props.allowAnyClick && typeof e.button === "number" && e.button !== 0)
                return false; // Get nodes. Be sure to grab relative document (could be iframed)
              var thisNode = _this.findDOMNode();
              if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body)
                throw new Error("<DraggableCore> not mounted on DragStart!");
              var ownerDocument = thisNode.ownerDocument; // Short circuit if handle or cancel prop was provided and selector doesn't match.
              if (
                _this.props.disabled ||
                !(e.target instanceof ownerDocument.defaultView.Node) ||
                (_this.props.handle &&
                  !(0, _domFns.matchesSelectorAndParentsTo)(
                    e.target,
                    _this.props.handle,
                    thisNode,
                  )) ||
                (_this.props.cancel &&
                  (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode))
              )
                return;
              // Prevent scrolling on mobile devices, like ipad/iphone.
              // Important that this is after handle/cancel.
              if (e.type === "touchstart") e.preventDefault(); // Set touch identifier in component state if this is a touch event. This allows us to
              // distinguish between individual touches on multitouch screens by identifying which
              // touchpoint was set to this element.
              var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);
              _this.setState({
                touchIdentifier: touchIdentifier,
              }); // Get the current drag point from the event. This is used as the offset.
              var position = (0, _positionFns.getControlPosition)(
                e,
                touchIdentifier,
                _assertThisInitialized(_this),
              );
              if (position == null) return; // not possible but satisfies flow
              var x = position.x,
                y = position.y; // Create an event object with all the data parents need to make a decision here.
              var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
              (0, _log.default)("DraggableCore: handleDragStart: %j", coreEvent); // Call event handler. If it returns explicit false, cancel.
              (0, _log.default)("calling", _this.props.onStart);
              var shouldUpdate = _this.props.onStart(e, coreEvent);
              if (shouldUpdate === false || _this.mounted === false) return; // Add a style to the body to disable user-select. This prevents text from
              // being selected all over the page.
              if (_this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument); // Initiate dragging. Set the current x and y as offsets
              // so we know how much we've moved during the drag. This allows us
              // to drag elements around even if they have been moved, without issue.
              _this.setState({
                dragging: true,
                lastX: x,
                lastY: y,
              }); // Add events to the document directly so we catch when the user's mouse/touch moves outside of
              // this element. We use different events depending on whether or not we have detected that this
              // is a touch-capable device.
              (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);
              (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);
            });
            _defineProperty(_assertThisInitialized(_this), "handleDrag", function (e) {
              // Get the current drag point from the event. This is used as the offset.
              var position = (0, _positionFns.getControlPosition)(
                e,
                _this.state.touchIdentifier,
                _assertThisInitialized(_this),
              );
              if (position == null) return;
              var x = position.x,
                y = position.y; // Snap to grid if prop has been provided
              if (Array.isArray(_this.props.grid)) {
                var deltaX = x - _this.state.lastX,
                  deltaY = y - _this.state.lastY;
                var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
                var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);
                deltaX = _snapToGrid2[0];
                deltaY = _snapToGrid2[1];
                if (!deltaX && !deltaY) return; // skip useless drag
                (x = _this.state.lastX + deltaX), (y = _this.state.lastY + deltaY);
              }
              var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);
              (0, _log.default)("DraggableCore: handleDrag: %j", coreEvent); // Call event handler. If it returns explicit false, trigger end.
              var shouldUpdate = _this.props.onDrag(e, coreEvent);
              if (shouldUpdate === false || _this.mounted === false) {
                try {
                  // $FlowIgnore
                  _this.handleDragStop(new MouseEvent("mouseup"));
                } catch (err) {
                  // Old browsers
                  var event = document.createEvent("MouseEvents"); // I see why this insanity was deprecated
                  // $FlowIgnore
                  event.initMouseEvent(
                    "mouseup",
                    true,
                    true,
                    window,
                    0,
                    0,
                    0,
                    0,
                    0,
                    false,
                    false,
                    false,
                    false,
                    0,
                    null,
                  );
                  _this.handleDragStop(event);
                }
                return;
              }
              _this.setState({
                lastX: x,
                lastY: y,
              });
            });
            _defineProperty(_assertThisInitialized(_this), "handleDragStop", function (e) {
              if (!_this.state.dragging) return;
              var position = (0, _positionFns.getControlPosition)(
                e,
                _this.state.touchIdentifier,
                _assertThisInitialized(_this),
              );
              if (position == null) return;
              var x = position.x,
                y = position.y; // Snap to grid if prop has been provided
              if (Array.isArray(_this.props.grid)) {
                var deltaX = x - _this.state.lastX || 0;
                var deltaY = y - _this.state.lastY || 0;
                var _snapToGrid3 = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);
                var _snapToGrid4 = _slicedToArray(_snapToGrid3, 2);
                deltaX = _snapToGrid4[0];
                deltaY = _snapToGrid4[1];
                (x = _this.state.lastX + deltaX), (y = _this.state.lastY + deltaY);
              }
              var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y); // Call event handler
              var shouldContinue = _this.props.onStop(e, coreEvent);
              if (shouldContinue === false || _this.mounted === false) return false;
              var thisNode = _this.findDOMNode();
              if (thisNode) {
                // Remove user-select hack
                if (_this.props.enableUserSelectHack)
                  (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);
              }
              (0, _log.default)("DraggableCore: handleDragStop: %j", coreEvent); // Reset the el.
              _this.setState({
                dragging: false,
                lastX: NaN,
                lastY: NaN,
              });
              if (thisNode) {
                // Remove event handlers
                (0, _log.default)("DraggableCore: Removing handlers");
                (0, _domFns.removeEvent)(
                  thisNode.ownerDocument,
                  dragEventFor.move,
                  _this.handleDrag,
                );
                (0, _domFns.removeEvent)(
                  thisNode.ownerDocument,
                  dragEventFor.stop,
                  _this.handleDragStop,
                );
              }
            });
            _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (e) {
              dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse
              return _this.handleDragStart(e);
            });
            _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
              dragEventFor = eventsFor.mouse;
              return _this.handleDragStop(e);
            });
            _defineProperty(_assertThisInitialized(_this), "onTouchStart", function (e) {
              // We're on a touch device now, so change the event handlers
              dragEventFor = eventsFor.touch;
              return _this.handleDragStart(e);
            });
            _defineProperty(_assertThisInitialized(_this), "onTouchEnd", function (e) {
              // We're on a touch device now, so change the event handlers
              dragEventFor = eventsFor.touch;
              return _this.handleDragStop(e);
            });
            return _this;
          }
          _createClass(DraggableCore, [
            {
              key: "componentDidMount",
              value: function componentDidMount() {
                this.mounted = true; // Touch handlers must be added with {passive: false} to be cancelable.
                // https://developers.google.com/web/updates/2017/01/scrolling-intervention
                var thisNode = this.findDOMNode();
                if (thisNode)
                  (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
                    passive: false,
                  });
              },
            },
            {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                this.mounted = false; // Remove any leftover event handlers. Remove both touch and mouse handlers in case
                // some browser quirk caused a touch event to fire during a mouse move, or vice versa.
                var thisNode = this.findDOMNode();
                if (thisNode) {
                  var ownerDocument = thisNode.ownerDocument;
                  (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);
                  (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);
                  (0, _domFns.removeEvent)(
                    ownerDocument,
                    eventsFor.mouse.stop,
                    this.handleDragStop,
                  );
                  (0, _domFns.removeEvent)(
                    ownerDocument,
                    eventsFor.touch.stop,
                    this.handleDragStop,
                  );
                  (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {
                    passive: false,
                  });
                  if (this.props.enableUserSelectHack)
                    (0, _domFns.removeUserSelectStyles)(ownerDocument);
                }
              }, // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find
            },
            {
              key: "findDOMNode",
              value: function findDOMNode() /*: ?HTMLElement*/ {
                var _this$props, _this$props2, _this$props2$nodeRef;
                return (_this$props = this.props) !== null &&
                  _this$props !== void 0 &&
                  _this$props.nodeRef
                  ? (_this$props2 = this.props) === null || _this$props2 === void 0
                    ? void 0
                    : (_this$props2$nodeRef = _this$props2.nodeRef) === null ||
                      _this$props2$nodeRef === void 0
                    ? void 0
                    : _this$props2$nodeRef.current
                  : _reactDom.default.findDOMNode(this);
              },
            },
            {
              key: "render",
              value: function render() /*: React.Element<any>*/ {
                // Reuse the child provided
                // This makes it flexible to use whatever element is wanted (div, ul, etc)
                return /*#__PURE__*/ React.cloneElement(React.Children.only(this.props.children), {
                  // Note: mouseMove handler is attached to document so it will still function
                  // when the user drags quickly and leaves the bounds of the element.
                  onMouseDown: this.onMouseDown,
                  onMouseUp: this.onMouseUp,
                  // onTouchStart is added on `componentDidMount` so they can be added with
                  // {passive: false}, which allows it to cancel. See
                  // https://developers.google.com/web/updates/2017/01/scrolling-intervention
                  onTouchEnd: this.onTouchEnd,
                });
              },
            },
          ]);
          return DraggableCore;
        })(React.Component);
        exports.default = DraggableCore;
        _defineProperty(DraggableCore, "displayName", "DraggableCore");
        _defineProperty(DraggableCore, "propTypes", {
          /**
           * `allowAnyClick` allows dragging using any mouse button.
           * By default, we only accept the left button.
           *
           * Defaults to `false`.
           */ allowAnyClick: _propTypes.default.bool,
          /**
           * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
           * with the exception of `onMouseDown`, will not fire.
           */ disabled: _propTypes.default.bool,
          /**
           * By default, we add 'user-select:none' attributes to the document body
           * to prevent ugly text selection during drag. If this is causing problems
           * for your app, set this to `false`.
           */ enableUserSelectHack: _propTypes.default.bool,
          /**
           * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
           * instead of using the parent node.
           */ offsetParent: function offsetParent(props, propName) {
            if (props[propName] && props[propName].nodeType !== 1)
              throw new Error("Draggable's offsetParent must be a DOM Node.");
          },
          /**
           * `grid` specifies the x and y that dragging should snap to.
           */ grid: _propTypes.default.arrayOf(_propTypes.default.number),
          /**
           * `handle` specifies a selector to be used as the handle that initiates drag.
           *
           * Example:
           *
           * ```jsx
           *   let App = React.createClass({
           *       render: function () {
           *         return (
           *            <Draggable handle=".handle">
           *              <div>
           *                  <div className="handle">Click me to drag</div>
           *                  <div>This is some other content</div>
           *              </div>
           *           </Draggable>
           *         );
           *       }
           *   });
           * ```
           */ handle: _propTypes.default.string,
          /**
           * `cancel` specifies a selector to be used to prevent drag initialization.
           *
           * Example:
           *
           * ```jsx
           *   let App = React.createClass({
           *       render: function () {
           *           return(
           *               <Draggable cancel=".cancel">
           *                   <div>
           *                     <div className="cancel">You can't drag from here</div>
           *                     <div>Dragging here works fine</div>
           *                   </div>
           *               </Draggable>
           *           );
           *       }
           *   });
           * ```
           */ cancel: _propTypes.default.string,
          /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
           * Unfortunately, in order for <Draggable> to work properly, we need raw access
           * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
           * as in this example:
           *
           * function MyComponent() {
           *   const nodeRef = React.useRef(null);
           *   return (
           *     <Draggable nodeRef={nodeRef}>
           *       <div ref={nodeRef}>Example Target</div>
           *     </Draggable>
           *   );
           * }
           *
           * This can be used for arbitrarily nested components, so long as the ref ends up
           * pointing to the actual child DOM node and not a custom component.
           */ nodeRef: _propTypes.default.object,
          /**
           * Called when dragging starts.
           * If this function returns the boolean false, dragging will be canceled.
           */ onStart: _propTypes.default.func,
          /**
           * Called while dragging.
           * If this function returns the boolean false, dragging will be canceled.
           */ onDrag: _propTypes.default.func,
          /**
           * Called when dragging stops.
           * If this function returns the boolean false, the drag will remain active.
           */ onStop: _propTypes.default.func,
          /**
           * A workaround option which can be passed if onMouseDown needs to be accessed,
           * since it'll always be blocked (as there is internal use of onMouseDown)
           */ onMouseDown: _propTypes.default.func,
          /**
           * `scale`, if set, applies scaling while dragging an element
           */ scale: _propTypes.default.number,
          /**
           * These properties should be defined on the child, not here.
           */ className: _shims.dontSetMe,
          style: _shims.dontSetMe,
          transform: _shims.dontSetMe,
        });
        _defineProperty(DraggableCore, "defaultProps", {
          allowAnyClick: false,
          // by default only accept left click
          disabled: false,
          enableUserSelectHack: true,
          onStart: function onStart() {},
          onDrag: function onDrag() {},
          onStop: function onStop() {},
          onMouseDown: function onMouseDown() {},
          scale: 1,
        });
      },
      {
        d830172ba8d01674: "21dqq",
        "936051a0e8f63cef": "7wKI2",
        "51e89cac1fd8612a": "j6uA9",
        a60a19bd70f37cbe: "22uqW",
        "32cd453cf02f7977": "lAU1D",
        b3ef123d6f743aa4: "5ZCCm",
        "71bc142b940fef0c": "5EzfF",
      },
    ],
    "5EzfF": [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.default = log;
        /*eslint no-console:0*/ function log() {
          var _console;
        }
      },
      {},
    ],
    b1nW1: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "Resizable", () => Resizable);
        var _react = require("react");
        var _resizer = require("./resizer");
        var _fastMemoize = require("fast-memoize");
        var _fastMemoizeDefault = parcelHelpers.interopDefault(_fastMemoize);
        var __extends =
          (undefined && undefined.__extends) ||
          (function () {
            var extendStatics = function (d, b) {
              extendStatics =
                Object.setPrototypeOf ||
                ({
                  __proto__: [],
                } instanceof Array &&
                  function (d, b) {
                    d.__proto__ = b;
                  }) ||
                function (d, b) {
                  for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
              return extendStatics(d, b);
            };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
          })();
        var __assign =
          (undefined && undefined.__assign) ||
          function () {
            __assign =
              Object.assign ||
              function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];
                  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
              };
            return __assign.apply(this, arguments);
          };
        var DEFAULT_SIZE = {
          width: "auto",
          height: "auto",
        };
        var clamp = (0, _fastMemoizeDefault.default)(function (n, min, max) {
          return Math.max(Math.min(n, max), min);
        });
        var snap = (0, _fastMemoizeDefault.default)(function (n, size) {
          return Math.round(n / size) * size;
        });
        var hasDirection = (0, _fastMemoizeDefault.default)(function (dir, target) {
          return new RegExp(dir, "i").test(target);
        });
        // INFO: In case of window is a Proxy and does not porxy Events correctly, use isTouchEvent & isMouseEvent to distinguish event type instead of `instanceof`.
        var isTouchEvent = function (event) {
          return Boolean(event.touches && event.touches.length);
        };
        var isMouseEvent = function (event) {
          return Boolean(
            (event.clientX || event.clientX === 0) && (event.clientY || event.clientY === 0),
          );
        };
        var findClosestSnap = (0, _fastMemoizeDefault.default)(function (n, snapArray, snapGap) {
          if (snapGap === void 0) snapGap = 0;
          var closestGapIndex = snapArray.reduce(function (prev, curr, index) {
            return Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev;
          }, 0);
          var gap = Math.abs(snapArray[closestGapIndex] - n);
          return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
        });
        var endsWith = (0, _fastMemoizeDefault.default)(function (str, searchStr) {
          return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
        });
        var getStringSize = (0, _fastMemoizeDefault.default)(function (n) {
          n = n.toString();
          if (n === "auto") return n;
          if (endsWith(n, "px")) return n;
          if (endsWith(n, "%")) return n;
          if (endsWith(n, "vh")) return n;
          if (endsWith(n, "vw")) return n;
          if (endsWith(n, "vmax")) return n;
          if (endsWith(n, "vmin")) return n;
          return n + "px";
        });
        var getPixelSize = function (size, parentSize, innerWidth, innerHeight) {
          if (size && typeof size === "string") {
            if (endsWith(size, "px")) return Number(size.replace("px", ""));
            if (endsWith(size, "%")) {
              var ratio = Number(size.replace("%", "")) / 100;
              return parentSize * ratio;
            }
            if (endsWith(size, "vw")) {
              var ratio = Number(size.replace("vw", "")) / 100;
              return innerWidth * ratio;
            }
            if (endsWith(size, "vh")) {
              var ratio = Number(size.replace("vh", "")) / 100;
              return innerHeight * ratio;
            }
          }
          return size;
        };
        var calculateNewMax = (0, _fastMemoizeDefault.default)(function (
          parentSize,
          innerWidth,
          innerHeight,
          maxWidth,
          maxHeight,
          minWidth,
          minHeight,
        ) {
          maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
          maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
          minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
          minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
          return {
            maxWidth: typeof maxWidth === "undefined" ? undefined : Number(maxWidth),
            maxHeight: typeof maxHeight === "undefined" ? undefined : Number(maxHeight),
            minWidth: typeof minWidth === "undefined" ? undefined : Number(minWidth),
            minHeight: typeof minHeight === "undefined" ? undefined : Number(minHeight),
          };
        });
        var definedProps = [
          "as",
          "style",
          "className",
          "grid",
          "snap",
          "bounds",
          "boundsByDirection",
          "size",
          "defaultSize",
          "minWidth",
          "minHeight",
          "maxWidth",
          "maxHeight",
          "lockAspectRatio",
          "lockAspectRatioExtraWidth",
          "lockAspectRatioExtraHeight",
          "enable",
          "handleStyles",
          "handleClasses",
          "handleWrapperStyle",
          "handleWrapperClass",
          "children",
          "onResizeStart",
          "onResize",
          "onResizeStop",
          "handleComponent",
          "scale",
          "resizeRatio",
          "snapGap",
        ];
        // HACK: This class is used to calculate % size.
        var baseClassName = "__resizable_base__";
        var Resizable = /** @class */ (function (_super) {
          __extends(Resizable, _super);
          function Resizable(props) {
            var _this = _super.call(this, props) || this;
            _this.ratio = 1;
            _this.resizable = null;
            // For parent boundary
            _this.parentLeft = 0;
            _this.parentTop = 0;
            // For boundary
            _this.resizableLeft = 0;
            _this.resizableRight = 0;
            _this.resizableTop = 0;
            _this.resizableBottom = 0;
            // For target boundary
            _this.targetLeft = 0;
            _this.targetTop = 0;
            _this.appendBase = function () {
              if (!_this.resizable || !_this.window) return null;
              var parent = _this.parentNode;
              if (!parent) return null;
              var element = _this.window.document.createElement("div");
              element.style.width = "100%";
              element.style.height = "100%";
              element.style.position = "absolute";
              element.style.transform = "scale(0, 0)";
              element.style.left = "0";
              element.style.flex = "0 0 100%";
              if (element.classList) element.classList.add(baseClassName);
              else element.className += baseClassName;
              parent.appendChild(element);
              return element;
            };
            _this.removeBase = function (base) {
              var parent = _this.parentNode;
              if (!parent) return;
              parent.removeChild(base);
            };
            _this.ref = function (c) {
              if (c) _this.resizable = c;
            };
            _this.state = {
              isResizing: false,
              width:
                typeof (_this.propsSize && _this.propsSize.width) === "undefined"
                  ? "auto"
                  : _this.propsSize && _this.propsSize.width,
              height:
                typeof (_this.propsSize && _this.propsSize.height) === "undefined"
                  ? "auto"
                  : _this.propsSize && _this.propsSize.height,
              direction: "right",
              original: {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
              },
              backgroundStyle: {
                height: "100%",
                width: "100%",
                backgroundColor: "rgba(0,0,0,0)",
                cursor: "auto",
                opacity: 0,
                position: "fixed",
                zIndex: 9999,
                top: "0",
                left: "0",
                bottom: "0",
                right: "0",
              },
              flexBasis: undefined,
            };
            _this.onResizeStart = _this.onResizeStart.bind(_this);
            _this.onMouseMove = _this.onMouseMove.bind(_this);
            _this.onMouseUp = _this.onMouseUp.bind(_this);
            return _this;
          }
          Object.defineProperty(Resizable.prototype, "parentNode", {
            get: function () {
              if (!this.resizable) return null;
              return this.resizable.parentNode;
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(Resizable.prototype, "window", {
            get: function () {
              if (!this.resizable) return null;
              if (!this.resizable.ownerDocument) return null;
              return this.resizable.ownerDocument.defaultView;
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(Resizable.prototype, "propsSize", {
            get: function () {
              return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(Resizable.prototype, "size", {
            get: function () {
              var width = 0;
              var height = 0;
              if (this.resizable && this.window) {
                var orgWidth = this.resizable.offsetWidth;
                var orgHeight = this.resizable.offsetHeight;
                // HACK: Set position `relative` to get parent size.
                //       This is because when re-resizable set `absolute`, I can not get base width correctly.
                var orgPosition = this.resizable.style.position;
                if (orgPosition !== "relative") this.resizable.style.position = "relative";
                // INFO: Use original width or height if set auto.
                width =
                  this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
                height =
                  this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
                // Restore original position
                this.resizable.style.position = orgPosition;
              }
              return {
                width: width,
                height: height,
              };
            },
            enumerable: false,
            configurable: true,
          });
          Object.defineProperty(Resizable.prototype, "sizeStyle", {
            get: function () {
              var _this = this;
              var size = this.props.size;
              var getSize = function (key) {
                if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto")
                  return "auto";
                if (
                  _this.propsSize &&
                  _this.propsSize[key] &&
                  endsWith(_this.propsSize[key].toString(), "%")
                ) {
                  if (endsWith(_this.state[key].toString(), "%"))
                    return _this.state[key].toString();
                  var parentSize = _this.getParentSize();
                  var value = Number(_this.state[key].toString().replace("px", ""));
                  var percent = (value / parentSize[key]) * 100;
                  return percent + "%";
                }
                return getStringSize(_this.state[key]);
              };
              var width =
                size && typeof size.width !== "undefined" && !this.state.isResizing
                  ? getStringSize(size.width)
                  : getSize("width");
              var height =
                size && typeof size.height !== "undefined" && !this.state.isResizing
                  ? getStringSize(size.height)
                  : getSize("height");
              return {
                width: width,
                height: height,
              };
            },
            enumerable: false,
            configurable: true,
          });
          Resizable.prototype.getParentSize = function () {
            if (!this.parentNode) {
              if (!this.window)
                return {
                  width: 0,
                  height: 0,
                };
              return {
                width: this.window.innerWidth,
                height: this.window.innerHeight,
              };
            }
            var base = this.appendBase();
            if (!base)
              return {
                width: 0,
                height: 0,
              };
            // INFO: To calculate parent width with flex layout
            var wrapChanged = false;
            var wrap = this.parentNode.style.flexWrap;
            if (wrap !== "wrap") {
              wrapChanged = true;
              this.parentNode.style.flexWrap = "wrap";
              // HACK: Use relative to get parent padding size
            }
            base.style.position = "relative";
            base.style.minWidth = "100%";
            base.style.minHeight = "100%";
            var size = {
              width: base.offsetWidth,
              height: base.offsetHeight,
            };
            if (wrapChanged) this.parentNode.style.flexWrap = wrap;
            this.removeBase(base);
            return size;
          };
          Resizable.prototype.bindEvents = function () {
            if (this.window) {
              this.window.addEventListener("mouseup", this.onMouseUp);
              this.window.addEventListener("mousemove", this.onMouseMove);
              this.window.addEventListener("mouseleave", this.onMouseUp);
              this.window.addEventListener("touchmove", this.onMouseMove, {
                capture: true,
                passive: false,
              });
              this.window.addEventListener("touchend", this.onMouseUp);
            }
          };
          Resizable.prototype.unbindEvents = function () {
            if (this.window) {
              this.window.removeEventListener("mouseup", this.onMouseUp);
              this.window.removeEventListener("mousemove", this.onMouseMove);
              this.window.removeEventListener("mouseleave", this.onMouseUp);
              this.window.removeEventListener("touchmove", this.onMouseMove, true);
              this.window.removeEventListener("touchend", this.onMouseUp);
            }
          };
          Resizable.prototype.componentDidMount = function () {
            if (!this.resizable || !this.window) return;
            var computedStyle = this.window.getComputedStyle(this.resizable);
            this.setState({
              width: this.state.width || this.size.width,
              height: this.state.height || this.size.height,
              flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : undefined,
            });
          };
          Resizable.prototype.componentWillUnmount = function () {
            if (this.window) this.unbindEvents();
          };
          Resizable.prototype.createSizeForCssProperty = function (newSize, kind) {
            var propsSize = this.propsSize && this.propsSize[kind];
            return this.state[kind] === "auto" &&
              this.state.original[kind] === newSize &&
              (typeof propsSize === "undefined" || propsSize === "auto")
              ? "auto"
              : newSize;
          };
          Resizable.prototype.calculateNewMaxFromBoundary = function (maxWidth, maxHeight) {
            var boundsByDirection = this.props.boundsByDirection;
            var direction = this.state.direction;
            var widthByDirection = boundsByDirection && hasDirection("left", direction);
            var heightByDirection = boundsByDirection && hasDirection("top", direction);
            var boundWidth;
            var boundHeight;
            if (this.props.bounds === "parent") {
              var parent_1 = this.parentNode;
              if (parent_1) {
                boundWidth = widthByDirection
                  ? this.resizableRight - this.parentLeft
                  : parent_1.offsetWidth + (this.parentLeft - this.resizableLeft);
                boundHeight = heightByDirection
                  ? this.resizableBottom - this.parentTop
                  : parent_1.offsetHeight + (this.parentTop - this.resizableTop);
              }
            } else if (this.props.bounds === "window") {
              if (this.window) {
                boundWidth = widthByDirection
                  ? this.resizableRight
                  : this.window.innerWidth - this.resizableLeft;
                boundHeight = heightByDirection
                  ? this.resizableBottom
                  : this.window.innerHeight - this.resizableTop;
              }
            } else if (this.props.bounds) {
              boundWidth = widthByDirection
                ? this.resizableRight - this.targetLeft
                : this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
              boundHeight = heightByDirection
                ? this.resizableBottom - this.targetTop
                : this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
            }
            if (boundWidth && Number.isFinite(boundWidth))
              maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
            if (boundHeight && Number.isFinite(boundHeight))
              maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
            return {
              maxWidth: maxWidth,
              maxHeight: maxHeight,
            };
          };
          Resizable.prototype.calculateNewSizeFromDirection = function (clientX, clientY) {
            var scale = this.props.scale || 1;
            var resizeRatio = this.props.resizeRatio || 1;
            var _a = this.state,
              direction = _a.direction,
              original = _a.original;
            var _b = this.props,
              lockAspectRatio = _b.lockAspectRatio,
              lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight,
              lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
            var newWidth = original.width;
            var newHeight = original.height;
            var extraHeight = lockAspectRatioExtraHeight || 0;
            var extraWidth = lockAspectRatioExtraWidth || 0;
            if (hasDirection("right", direction)) {
              newWidth = original.width + ((clientX - original.x) * resizeRatio) / scale;
              if (lockAspectRatio) newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
            if (hasDirection("left", direction)) {
              newWidth = original.width - ((clientX - original.x) * resizeRatio) / scale;
              if (lockAspectRatio) newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
            }
            if (hasDirection("bottom", direction)) {
              newHeight = original.height + ((clientY - original.y) * resizeRatio) / scale;
              if (lockAspectRatio) newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
            if (hasDirection("top", direction)) {
              newHeight = original.height - ((clientY - original.y) * resizeRatio) / scale;
              if (lockAspectRatio) newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
            }
            return {
              newWidth: newWidth,
              newHeight: newHeight,
            };
          };
          Resizable.prototype.calculateNewSizeFromAspectRatio = function (
            newWidth,
            newHeight,
            max,
            min,
          ) {
            var _a = this.props,
              lockAspectRatio = _a.lockAspectRatio,
              lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight,
              lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
            var computedMinWidth = typeof min.width === "undefined" ? 10 : min.width;
            var computedMaxWidth =
              typeof max.width === "undefined" || max.width < 0 ? newWidth : max.width;
            var computedMinHeight = typeof min.height === "undefined" ? 10 : min.height;
            var computedMaxHeight =
              typeof max.height === "undefined" || max.height < 0 ? newHeight : max.height;
            var extraHeight = lockAspectRatioExtraHeight || 0;
            var extraWidth = lockAspectRatioExtraWidth || 0;
            if (lockAspectRatio) {
              var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
              var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
              var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
              var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
              var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
              var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
              var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
              var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
              newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
              newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
            } else {
              newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
              newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
            }
            return {
              newWidth: newWidth,
              newHeight: newHeight,
            };
          };
          Resizable.prototype.setBoundingClientRect = function () {
            // For parent boundary
            if (this.props.bounds === "parent") {
              var parent_2 = this.parentNode;
              if (parent_2) {
                var parentRect = parent_2.getBoundingClientRect();
                this.parentLeft = parentRect.left;
                this.parentTop = parentRect.top;
              }
            }
            // For target(html element) boundary
            if (this.props.bounds && typeof this.props.bounds !== "string") {
              var targetRect = this.props.bounds.getBoundingClientRect();
              this.targetLeft = targetRect.left;
              this.targetTop = targetRect.top;
            }
            // For boundary
            if (this.resizable) {
              var _a = this.resizable.getBoundingClientRect(),
                left = _a.left,
                top_1 = _a.top,
                right = _a.right,
                bottom = _a.bottom;
              this.resizableLeft = left;
              this.resizableRight = right;
              this.resizableTop = top_1;
              this.resizableBottom = bottom;
            }
          };
          Resizable.prototype.onResizeStart = function (event, direction) {
            if (!this.resizable || !this.window) return;
            var clientX = 0;
            var clientY = 0;
            if (event.nativeEvent && isMouseEvent(event.nativeEvent)) {
              clientX = event.nativeEvent.clientX;
              clientY = event.nativeEvent.clientY;
            } else if (event.nativeEvent && isTouchEvent(event.nativeEvent)) {
              clientX = event.nativeEvent.touches[0].clientX;
              clientY = event.nativeEvent.touches[0].clientY;
            }
            if (this.props.onResizeStart) {
              if (this.resizable) {
                var startResize = this.props.onResizeStart(event, direction, this.resizable);
                if (startResize === false) return;
              }
            }
            // Fix #168
            if (this.props.size) {
              if (
                typeof this.props.size.height !== "undefined" &&
                this.props.size.height !== this.state.height
              )
                this.setState({
                  height: this.props.size.height,
                });
              if (
                typeof this.props.size.width !== "undefined" &&
                this.props.size.width !== this.state.width
              )
                this.setState({
                  width: this.props.size.width,
                });
            }
            // For lockAspectRatio case
            this.ratio =
              typeof this.props.lockAspectRatio === "number"
                ? this.props.lockAspectRatio
                : this.size.width / this.size.height;
            var flexBasis;
            var computedStyle = this.window.getComputedStyle(this.resizable);
            if (computedStyle.flexBasis !== "auto") {
              var parent_3 = this.parentNode;
              if (parent_3) {
                var dir = this.window.getComputedStyle(parent_3).flexDirection;
                this.flexDir = dir.startsWith("row") ? "row" : "column";
                flexBasis = computedStyle.flexBasis;
              }
            }
            // For boundary
            this.setBoundingClientRect();
            this.bindEvents();
            var state = {
              original: {
                x: clientX,
                y: clientY,
                width: this.size.width,
                height: this.size.height,
              },
              isResizing: true,
              backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
                cursor: this.window.getComputedStyle(event.target).cursor || "auto",
              }),
              direction: direction,
              flexBasis: flexBasis,
            };
            this.setState(state);
          };
          Resizable.prototype.onMouseMove = function (event) {
            if (!this.state.isResizing || !this.resizable || !this.window) return;
            if (this.window.TouchEvent && isTouchEvent(event))
              try {
                event.preventDefault();
                event.stopPropagation();
              } catch (e) {
                // Ignore on fail
              }
            var _a = this.props,
              maxWidth = _a.maxWidth,
              maxHeight = _a.maxHeight,
              minWidth = _a.minWidth,
              minHeight = _a.minHeight;
            var clientX = isTouchEvent(event) ? event.touches[0].clientX : event.clientX;
            var clientY = isTouchEvent(event) ? event.touches[0].clientY : event.clientY;
            var _b = this.state,
              direction = _b.direction,
              original = _b.original,
              width = _b.width,
              height = _b.height;
            var parentSize = this.getParentSize();
            var max = calculateNewMax(
              parentSize,
              this.window.innerWidth,
              this.window.innerHeight,
              maxWidth,
              maxHeight,
              minWidth,
              minHeight,
            );
            maxWidth = max.maxWidth;
            maxHeight = max.maxHeight;
            minWidth = max.minWidth;
            minHeight = max.minHeight;
            // Calculate new size
            var _c = this.calculateNewSizeFromDirection(clientX, clientY),
              newHeight = _c.newHeight,
              newWidth = _c.newWidth;
            // Calculate max size from boundary settings
            var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
            if (this.props.snap && this.props.snap.x)
              newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
            if (this.props.snap && this.props.snap.y)
              newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
            // Calculate new size from aspect ratio
            var newSize = this.calculateNewSizeFromAspectRatio(
              newWidth,
              newHeight,
              {
                width: boundaryMax.maxWidth,
                height: boundaryMax.maxHeight,
              },
              {
                width: minWidth,
                height: minHeight,
              },
            );
            newWidth = newSize.newWidth;
            newHeight = newSize.newHeight;
            if (this.props.grid) {
              var newGridWidth = snap(newWidth, this.props.grid[0]);
              var newGridHeight = snap(newHeight, this.props.grid[1]);
              var gap = this.props.snapGap || 0;
              newWidth =
                gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
              newHeight =
                gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
            }
            var delta = {
              width: newWidth - original.width,
              height: newHeight - original.height,
            };
            if (width && typeof width === "string") {
              if (endsWith(width, "%")) {
                var percent = (newWidth / parentSize.width) * 100;
                newWidth = percent + "%";
              } else if (endsWith(width, "vw")) {
                var vw = (newWidth / this.window.innerWidth) * 100;
                newWidth = vw + "vw";
              } else if (endsWith(width, "vh")) {
                var vh = (newWidth / this.window.innerHeight) * 100;
                newWidth = vh + "vh";
              }
            }
            if (height && typeof height === "string") {
              if (endsWith(height, "%")) {
                var percent = (newHeight / parentSize.height) * 100;
                newHeight = percent + "%";
              } else if (endsWith(height, "vw")) {
                var vw = (newHeight / this.window.innerWidth) * 100;
                newHeight = vw + "vw";
              } else if (endsWith(height, "vh")) {
                var vh = (newHeight / this.window.innerHeight) * 100;
                newHeight = vh + "vh";
              }
            }
            var newState = {
              width: this.createSizeForCssProperty(newWidth, "width"),
              height: this.createSizeForCssProperty(newHeight, "height"),
            };
            if (this.flexDir === "row") newState.flexBasis = newState.width;
            else if (this.flexDir === "column") newState.flexBasis = newState.height;
            this.setState(newState);
            if (this.props.onResize) this.props.onResize(event, direction, this.resizable, delta);
          };
          Resizable.prototype.onMouseUp = function (event) {
            var _a = this.state,
              isResizing = _a.isResizing,
              direction = _a.direction,
              original = _a.original;
            if (!isResizing || !this.resizable) return;
            var delta = {
              width: this.size.width - original.width,
              height: this.size.height - original.height,
            };
            if (this.props.onResizeStop)
              this.props.onResizeStop(event, direction, this.resizable, delta);
            if (this.props.size) this.setState(this.props.size);
            this.unbindEvents();
            this.setState({
              isResizing: false,
              backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
                cursor: "auto",
              }),
            });
          };
          Resizable.prototype.updateSize = function (size) {
            this.setState({
              width: size.width,
              height: size.height,
            });
          };
          Resizable.prototype.renderResizer = function () {
            var _this = this;
            var _a = this.props,
              enable = _a.enable,
              handleStyles = _a.handleStyles,
              handleClasses = _a.handleClasses,
              handleWrapperStyle = _a.handleWrapperStyle,
              handleWrapperClass = _a.handleWrapperClass,
              handleComponent = _a.handleComponent;
            if (!enable) return null;
            var resizers = Object.keys(enable).map(function (dir) {
              if (enable[dir] !== false)
                return _react.createElement(
                  (0, _resizer.Resizer),
                  {
                    key: dir,
                    direction: dir,
                    onResizeStart: _this.onResizeStart,
                    replaceStyles: handleStyles && handleStyles[dir],
                    className: handleClasses && handleClasses[dir],
                  },
                  handleComponent && handleComponent[dir] ? handleComponent[dir] : null,
                );
              return null;
            });
            // #93 Wrap the resize box in span (will not break 100% width/height)
            return _react.createElement(
              "div",
              {
                className: handleWrapperClass,
                style: handleWrapperStyle,
              },
              resizers,
            );
          };
          Resizable.prototype.render = function () {
            var _this = this;
            var extendsProps = Object.keys(this.props).reduce(function (acc, key) {
              if (definedProps.indexOf(key) !== -1) return acc;
              acc[key] = _this.props[key];
              return acc;
            }, {});
            var style = __assign(
              __assign(
                __assign(
                  {
                    position: "relative",
                    userSelect: this.state.isResizing ? "none" : "auto",
                  },
                  this.props.style,
                ),
                this.sizeStyle,
              ),
              {
                maxWidth: this.props.maxWidth,
                maxHeight: this.props.maxHeight,
                minWidth: this.props.minWidth,
                minHeight: this.props.minHeight,
                boxSizing: "border-box",
                flexShrink: 0,
              },
            );
            if (this.state.flexBasis) style.flexBasis = this.state.flexBasis;
            var Wrapper = this.props.as || "div";
            return _react.createElement(
              Wrapper,
              __assign(
                {
                  ref: this.ref,
                  style: style,
                  className: this.props.className,
                },
                extendsProps,
              ),
              this.state.isResizing &&
                _react.createElement("div", {
                  style: this.state.backgroundStyle,
                }),
              this.props.children,
              this.renderResizer(),
            );
          };
          Resizable.defaultProps = {
            as: "div",
            onResizeStart: function () {},
            onResize: function () {},
            onResizeStop: function () {},
            enable: {
              top: true,
              right: true,
              bottom: true,
              left: true,
              topRight: true,
              bottomRight: true,
              bottomLeft: true,
              topLeft: true,
            },
            style: {},
            grid: [1, 1],
            lockAspectRatio: false,
            lockAspectRatioExtraWidth: 0,
            lockAspectRatioExtraHeight: 0,
            scale: 1,
            resizeRatio: 1,
            snapGap: 0,
          };
          return Resizable;
        })(_react.PureComponent);
      },
      {
        react: "21dqq",
        "./resizer": "gp3F9",
        "fast-memoize": "47Kew",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    gp3F9: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "Resizer", () => Resizer);
        var _react = require("react");
        var __extends =
          (undefined && undefined.__extends) ||
          (function () {
            var extendStatics = function (d, b) {
              extendStatics =
                Object.setPrototypeOf ||
                ({
                  __proto__: [],
                } instanceof Array &&
                  function (d, b) {
                    d.__proto__ = b;
                  }) ||
                function (d, b) {
                  for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
              return extendStatics(d, b);
            };
            return function (d, b) {
              extendStatics(d, b);
              function __() {
                this.constructor = d;
              }
              d.prototype =
                b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
          })();
        var __assign =
          (undefined && undefined.__assign) ||
          function () {
            __assign =
              Object.assign ||
              function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];
                  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
              };
            return __assign.apply(this, arguments);
          };
        var styles = {
          top: {
            width: "100%",
            height: "10px",
            top: "-5px",
            left: "0px",
            cursor: "row-resize",
          },
          right: {
            width: "10px",
            height: "100%",
            top: "0px",
            right: "-5px",
            cursor: "col-resize",
          },
          bottom: {
            width: "100%",
            height: "10px",
            bottom: "-5px",
            left: "0px",
            cursor: "row-resize",
          },
          left: {
            width: "10px",
            height: "100%",
            top: "0px",
            left: "-5px",
            cursor: "col-resize",
          },
          topRight: {
            width: "20px",
            height: "20px",
            position: "absolute",
            right: "-10px",
            top: "-10px",
            cursor: "ne-resize",
          },
          bottomRight: {
            width: "20px",
            height: "20px",
            position: "absolute",
            right: "-10px",
            bottom: "-10px",
            cursor: "se-resize",
          },
          bottomLeft: {
            width: "20px",
            height: "20px",
            position: "absolute",
            left: "-10px",
            bottom: "-10px",
            cursor: "sw-resize",
          },
          topLeft: {
            width: "20px",
            height: "20px",
            position: "absolute",
            left: "-10px",
            top: "-10px",
            cursor: "nw-resize",
          },
        };
        var Resizer = /** @class */ (function (_super) {
          __extends(Resizer, _super);
          function Resizer() {
            var _this = (_super !== null && _super.apply(this, arguments)) || this;
            _this.onMouseDown = function (e) {
              _this.props.onResizeStart(e, _this.props.direction);
            };
            _this.onTouchStart = function (e) {
              _this.props.onResizeStart(e, _this.props.direction);
            };
            return _this;
          }
          Resizer.prototype.render = function () {
            return _react.createElement(
              "div",
              {
                className: this.props.className || "",
                style: __assign(
                  __assign(
                    {
                      position: "absolute",
                      userSelect: "none",
                    },
                    styles[this.props.direction],
                  ),
                  this.props.replaceStyles || {},
                ),
                onMouseDown: this.onMouseDown,
                onTouchStart: this.onTouchStart,
              },
              this.props.children,
            );
          };
          return Resizer;
        })(_react.PureComponent);
      },
      { react: "21dqq", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    "47Kew": [
      function (require, module, exports) {
        //
        // Main
        //
        function memoize(fn, options) {
          var cache = options && options.cache ? options.cache : cacheDefault;
          var serializer = options && options.serializer ? options.serializer : serializerDefault;
          var strategy = options && options.strategy ? options.strategy : strategyDefault;
          return strategy(fn, {
            cache: cache,
            serializer: serializer,
          });
        }
        //
        // Strategy
        //
        function isPrimitive(value) {
          return (
            value == null || typeof value === "number" || typeof value === "boolean" // || typeof value === "string" 'unsafe' primitive for our needs
          );
        }
        function monadic(fn, cache, serializer, arg) {
          var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
          var computedValue = cache.get(cacheKey);
          if (typeof computedValue === "undefined") {
            computedValue = fn.call(this, arg);
            cache.set(cacheKey, computedValue);
          }
          return computedValue;
        }
        function variadic(fn, cache, serializer) {
          var args = Array.prototype.slice.call(arguments, 3);
          var cacheKey = serializer(args);
          var computedValue = cache.get(cacheKey);
          if (typeof computedValue === "undefined") {
            computedValue = fn.apply(this, args);
            cache.set(cacheKey, computedValue);
          }
          return computedValue;
        }
        function assemble(fn, context, strategy, cache, serialize) {
          return strategy.bind(context, fn, cache, serialize);
        }
        function strategyDefault(fn, options) {
          var strategy = fn.length === 1 ? monadic : variadic;
          return assemble(fn, this, strategy, options.cache.create(), options.serializer);
        }
        function strategyVariadic(fn, options) {
          var strategy = variadic;
          return assemble(fn, this, strategy, options.cache.create(), options.serializer);
        }
        function strategyMonadic(fn, options) {
          var strategy = monadic;
          return assemble(fn, this, strategy, options.cache.create(), options.serializer);
        }
        //
        // Serializer
        //
        function serializerDefault() {
          return JSON.stringify(arguments);
        }
        //
        // Cache
        //
        function ObjectWithoutPrototypeCache() {
          this.cache = Object.create(null);
        }
        ObjectWithoutPrototypeCache.prototype.has = function (key) {
          return key in this.cache;
        };
        ObjectWithoutPrototypeCache.prototype.get = function (key) {
          return this.cache[key];
        };
        ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
          this.cache[key] = value;
        };
        var cacheDefault = {
          create: function create() {
            return new ObjectWithoutPrototypeCache();
          },
        };
        //
        // API
        //
        module.exports = memoize;
        module.exports.strategies = {
          variadic: strategyVariadic,
          monadic: strategyMonadic,
        };
      },
      {},
    ],
    ew1VT: [function () {}, {}],
    jiVa4: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$a8a3 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$a8a3.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "chkPosition", () => chkPosition);
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          const chkPosition = (windowRef, currentX, currentY) => {
            if (!windowRef.current || !windowRef.current.resizableElement.current)
              return {
                newX: 0,
                newY: 0,
              };
            const posn = windowRef.current.resizableElement.current.getBoundingClientRect();
            const parentPosn = windowRef.current.getParent().getBoundingClientRect();
            let newX = currentX ?? 0;
            let newY = currentY ?? 0;
            if (posn.left < 0) newX = -parentPosn.left;
            if (
              posn.right > window.innerWidth ||
              (currentX === undefined && parentPosn.left + posn.width > window.innerWidth)
            )
              newX = Math.max(-parentPosn.left, window.innerWidth - parentPosn.left - posn.width);
            if (posn.top < 0) newY = -parentPosn.top;
            if (
              posn.bottom > window.innerHeight ||
              (currentY === undefined && parentPosn.top + posn.height > window.innerHeight)
            )
              newY = Math.max(-parentPosn.top, window.innerHeight - parentPosn.top - posn.height);
            return {
              newX,
              newY,
            };
          };

          $parcel$ReactRefreshHelpers$a8a3.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        react: "21dqq",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "3JKWZ": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$8fb4 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$8fb4.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioArraySortable", () => AioArraySortable);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _asupInternalWindow = require("../aiw/AsupInternalWindow");
          var _aioInterface = require("./aioInterface");
          var _aioOptionDisplay = require("./aioOptionDisplay");
          var _aioPrintOption = require("./aioPrintOption");
          var _s = $RefreshSig$();
          function AioArraySortable(props) {
            _s();
            const [showWindows, setShowWindows] = (0, _react.useState)(
              new Array(props.inputArray.length + 1).fill(false),
            );
            function addWindow(i) {
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _asupInternalWindow.AsupInternalWindow),
                {
                  id: `${props.id}-window-${i}`,
                  title: "Add item",
                  visible: showWindows[i],
                  onClose: () => {
                    const newShowWindows = [...showWindows];
                    newShowWindows[i] = false;
                    setShowWindows(newShowWindows);
                  },
                  style: {
                    minHeight: "100px",
                  },
                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioOptionDisplay.AioOptionDisplay),
                    {
                      id: `${props.id}-optiondisplay`,
                      options: [
                        {
                          type: (0, _aioInterface.AioOptionType).select,
                          optionName: (0, _aioInterface.AioNewItem).newType,
                          value: "",
                          label: "New type",
                          availableValues: ["string", "number", "array", "object"],
                        },
                      ],
                      setOptions: (ret) => {
                        // Check value is ok
                        let newItem;
                        switch (ret[0].value) {
                          case "number":
                            newItem = 0;
                            break;
                          case "array":
                            newItem = [];
                            break;
                          case "object":
                            newItem = {};
                            break;
                          case "string":
                          default:
                            newItem = "";
                        }
                        const newArray = [...props.inputArray];
                        newArray.splice(i, 0, newItem);
                        if (props.updateArray) props.updateArray(newArray);
                        const newShowWindows = [...showWindows];
                        newShowWindows[i] = false;
                        setShowWindows(newShowWindows);
                      },
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioArraySortable.tsx",
                      lineNumber: 35,
                      columnNumber: 9,
                    },
                    this,
                  ),
                },
                void 0,
                false,
                {
                  fileName: "src/components/aio/aioArraySortable.tsx",
                  lineNumber: 24,
                  columnNumber: 7,
                },
                this,
              );
            }
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  props.inputArray.length === 0 &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aio-body-row",
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            className: "aio-label",
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "em",
                              {
                                children: "Empty array",
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioArraySortable.tsx",
                                lineNumber: 80,
                                columnNumber: 13,
                              },
                              this,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aio/aioArraySortable.tsx",
                            lineNumber: 79,
                            columnNumber: 11,
                          },
                          this,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioArraySortable.tsx",
                        lineNumber: 78,
                        columnNumber: 9,
                      },
                      this,
                    ),
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  props.inputArray.map((value, i) => {
                    const id = value ?? i;
                    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aio-body-row",
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _aioPrintOption.AioPrintOption),
                            {
                              id: id,
                              value: value,
                              setValue: props.updateArray
                                ? (ret) => {
                                    const newArray = [...Object.values(props.inputArray)];
                                    newArray[i] = ret;
                                    if (props.updateArray) props.updateArray(newArray);
                                  }
                                : undefined,
                              moveUp:
                                props.canMoveItems && props.updateArray && i > 0
                                  ? () => {
                                      const mover = props.inputArray[i];
                                      const newArray = [...props.inputArray];
                                      newArray.splice(i, 1);
                                      newArray.splice(i - 1, 0, mover);
                                      if (props.updateArray) props.updateArray(newArray);
                                    }
                                  : undefined,
                              moveDown:
                                props.canMoveItems &&
                                props.updateArray &&
                                i < props.inputArray.length - 1
                                  ? () => {
                                      const mover = props.inputArray[i];
                                      const newArray = [...props.inputArray];
                                      newArray.splice(i, 1);
                                      newArray.splice(i + 1, 0, mover);
                                      if (props.updateArray) props.updateArray(newArray);
                                    }
                                  : undefined,
                              addItem:
                                props.canAddItems && props.updateArray
                                  ? () => {
                                      const newShowWindows = [...showWindows];
                                      newShowWindows[i] = true;
                                      setShowWindows(newShowWindows);
                                    }
                                  : undefined,
                              removeItem:
                                props.updateArray && props.canRemoveItems
                                  ? () => {
                                      const newArray = [...props.inputArray];
                                      newArray.splice(i, 1);
                                      if (props.updateArray) props.updateArray(newArray);
                                    }
                                  : undefined,
                              canAddItems: props.canAddItems,
                              canMoveItems: props.canMoveItems,
                              canRemoveItems: props.canRemoveItems,
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aio/aioArraySortable.tsx",
                              lineNumber: 93,
                              columnNumber: 15,
                            },
                            this,
                          ),
                          showWindows[i] && props.canAddItems
                            ? addWindow(i)
                            : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _jsxDevRuntime.Fragment),
                                {},
                                void 0,
                                false,
                              ),
                        ],
                      },
                      i,
                      true,
                      {
                        fileName: "src/components/aio/aioArraySortable.tsx",
                        lineNumber: 89,
                        columnNumber: 13,
                      },
                      this,
                    );
                  }),
                  props.canAddItems &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aio-body-row",
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: "aio-input-holder",
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aio/aioArraySortable.tsx",
                              lineNumber: 159,
                              columnNumber: 11,
                            },
                            this,
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              className: "aiox-button-holder",
                              children: [
                                props.canMoveItems &&
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      className: "aiox-button",
                                      style: {
                                        margin: 0,
                                      },
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/aio/aioArraySortable.tsx",
                                      lineNumber: 162,
                                      columnNumber: 15,
                                    },
                                    this,
                                  ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    className: "aiox-button aiox-plus",
                                    onClick: () => {
                                      const newShowWindows = [...showWindows];
                                      newShowWindows[props.inputArray.length] = true;
                                      setShowWindows(newShowWindows);
                                    },
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/aioArraySortable.tsx",
                                    lineNumber: 167,
                                    columnNumber: 13,
                                  },
                                  this,
                                ),
                                showWindows[props.inputArray.length] &&
                                  addWindow(props.inputArray.length),
                              ],
                            },
                            void 0,
                            true,
                            {
                              fileName: "src/components/aio/aioArraySortable.tsx",
                              lineNumber: 160,
                              columnNumber: 11,
                            },
                            this,
                          ),
                        ],
                      },
                      props.inputArray.length,
                      true,
                      {
                        fileName: "src/components/aio/aioArraySortable.tsx",
                        lineNumber: 155,
                        columnNumber: 9,
                      },
                      this,
                    ),
                ],
              },
              void 0,
              true,
            );
          }
          _s(AioArraySortable, "IZYBY9FOcW1sHooNZfDHesmr03U=");
          _c = AioArraySortable;
          var _c;
          $RefreshReg$(_c, "AioArraySortable");

          $parcel$ReactRefreshHelpers$8fb4.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aiw/AsupInternalWindow": "aNCiW",
        "./aioInterface": "5k15Y",
        "./aioOptionDisplay": "cijgj",
        "./aioPrintOption": "lvlQ0",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "5k15Y": [
      function (require, module, exports) {
        /** Individual options */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "AioOptionType", () => AioOptionType);
        parcelHelpers.export(exports, "AioNewItem", () => AioNewItem);
        var AioOptionType;
        (function (AioOptionType) {
          AioOptionType["string"] = "string";
          AioOptionType["number"] = "number";
          AioOptionType["array"] = "array";
          AioOptionType["object"] = "object";
          AioOptionType["boolean"] = "boolean";
          AioOptionType["select"] = "select";
          AioOptionType["replacements"] = "replacements";
        })(AioOptionType || (AioOptionType = {}));
        var AioNewItem;
        (function (AioNewItem) {
          AioNewItem["newKey"] = "newKey";
          AioNewItem["newType"] = "newType";
        })(AioNewItem || (AioNewItem = {}));
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    cijgj: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$fa3d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$fa3d.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioOptionDisplay", () => AioOptionDisplay);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioCss = require("./aio.css");
          var _aioLabel = require("./aioLabel");
          var _aioPrintOption = require("./aioPrintOption");
          var _s = $RefreshSig$();
          const AioOptionDisplay = ({ id, options, setOptions }) => {
            _s();
            // Update current options from child object
            const updateOption = (0, _react.useCallback)(
              (ret, i) => {
                if (typeof setOptions !== "function") return;
                const newOptions = [...(options ?? [])];
                newOptions[i].value = ret;
                setOptions(newOptions);
              },
              [options, setOptions],
            );
            if (options === undefined)
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                "div",
                {
                  className: "aio-body-row",
                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${id}-label`,
                      label: "No options deinfed",
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioOptionDisplay.tsx",
                      lineNumber: 32,
                      columnNumber: 9,
                    },
                    undefined,
                  ),
                },
                void 0,
                false,
                {
                  fileName: "src/components/aio/aioOptionDisplay.tsx",
                  lineNumber: 31,
                  columnNumber: 7,
                },
                undefined,
              );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: options?.map((option, i) => {
                  return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-body-row",
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _aioPrintOption.AioPrintOption),
                        {
                          id: `${id}-${option.optionName}`,
                          label: option.label ?? option.optionName,
                          value: option.value,
                          setValue: !option.readOnly
                            ? (ret) => {
                                updateOption(ret, i);
                              }
                            : undefined,
                          type: option.type,
                          availablValues: option.availableValues,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/components/aio/aioOptionDisplay.tsx",
                          lineNumber: 47,
                          columnNumber: 13,
                        },
                        undefined,
                      ),
                    },
                    i,
                    false,
                    {
                      fileName: "src/components/aio/aioOptionDisplay.tsx",
                      lineNumber: 43,
                      columnNumber: 11,
                    },
                    undefined,
                  );
                }),
              },
              void 0,
              false,
            );
          };
          _s(AioOptionDisplay, "xiBT4qyAjQudQ725oujgKL3j554=");
          _c = AioOptionDisplay;
          var _c;
          $RefreshReg$(_c, "AioOptionDisplay");

          $parcel$ReactRefreshHelpers$fa3d.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aio.css": "17daG",
        "./aioLabel": "4cCtf",
        "./aioPrintOption": "lvlQ0",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "17daG": [function () {}, {}],
    lvlQ0: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$4acb = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$4acb.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioPrintOption", () => AioPrintOption);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _renderLineItem = require("./RenderLineItem");
          const AioPrintOption = (props) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _renderLineItem.RenderLineItem),
                    {
                      id: props.id,
                      value: props.value,
                      label: props.label,
                      setValue: props.setValue,
                      type: props.type,
                      availableValues: props.availablValues,
                      canAddItems: props.canAddItems,
                      canMoveItems: props.canMoveItems,
                      canRemoveItems: props.canRemoveItems,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioPrintOption.tsx",
                      lineNumber: 26,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aiox-button-holder",
                      children: [
                        typeof props.moveUp === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                id: `${props.id}-up`,
                                className: "aiox-button aiox-up",
                                onClick: props.moveUp,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioPrintOption.tsx",
                                lineNumber: 39,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : typeof props.moveDown === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                className: "aiox-button",
                                style: {
                                  margin: 0,
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioPrintOption.tsx",
                                lineNumber: 45,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _jsxDevRuntime.Fragment),
                              {},
                              void 0,
                              false,
                            ),
                        typeof props.addItem === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                id: `${props.id}-add`,
                                className: "aiox-button aiox-plus",
                                onClick: props.addItem,
                                children: props.children,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioPrintOption.tsx",
                                lineNumber: 53,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _jsxDevRuntime.Fragment),
                              {},
                              void 0,
                              false,
                            ),
                        typeof props.removeItem === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                id: `${props.id}-remove`,
                                className: "aiox-button aiox-minus",
                                onClick: props.removeItem,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioPrintOption.tsx",
                                lineNumber: 64,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _jsxDevRuntime.Fragment),
                              {},
                              void 0,
                              false,
                            ),
                        typeof props.moveDown === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                id: `${props.id}-down`,
                                className: "aiox-button aiox-down",
                                onClick: props.moveDown,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioPrintOption.tsx",
                                lineNumber: 73,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : "",
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aio/aioPrintOption.tsx",
                      lineNumber: 37,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _c = AioPrintOption;
          var _c;
          $RefreshReg$(_c, "AioPrintOption");

          $parcel$ReactRefreshHelpers$4acb.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./RenderLineItem": "5b0Ee",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "5b0Ee": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$a597 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$a597.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "RenderLineItem", () => RenderLineItem);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aioBoolean = require("./aioBoolean");
          var _aioExpander = require("./aioExpander");
          var _aioInterface = require("./aioInterface");
          var _aioLabel = require("./aioLabel");
          var _aioNumber = require("./aioNumber");
          var _aioReplacementList = require("./aioReplacementList");
          var _aioSelect = require("./aioSelect");
          var _aioString = require("./aioString");
          const RenderLineItem = ({
            id,
            value,
            label,
            availableValues,
            setValue,
            type,
            canAddItems,
            canMoveItems,
            canRemoveItems,
          }) => {
            // Take given type, or treat null as a string, or work out what we have
            switch (type ?? (value === null ? "string" : typeof value)) {
              // Processing - do nothing, this should not be hit here
              // case (AioOptionType.processing): return (<></>);
              // Object, need another expander
              case "object":
              case (0, _aioInterface.AioOptionType).object:
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioExpander.AioExpander),
                  {
                    id: id,
                    label: label,
                    inputObject: value,
                    updateObject: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                    canAddItems: canAddItems,
                    canMoveItems: canMoveItems,
                    canRemoveItems: canRemoveItems,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 42,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // Replacements
              case (0, _aioInterface.AioOptionType).replacements:
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioReplacementList.AioReplacementList),
                  {
                    id: id,
                    label: "Replacement text",
                    replacements: value,
                    setReplacements: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 62,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // Select
              case (0, _aioInterface.AioOptionType).select:
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioSelect.AioSelect),
                  {
                    id: id,
                    label: label,
                    value: value,
                    availableValues: availableValues,
                    setValue: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 79,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // Number
              case (0, _aioInterface.AioOptionType).number:
              case "number":
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioNumber.AioNumber),
                  {
                    id: id,
                    label: label,
                    value: value,
                    setValue: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 98,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // Boolean
              case (0, _aioInterface.AioOptionType).boolean:
              case "boolean":
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioBoolean.AioBoolean),
                  {
                    id: id,
                    label: label,
                    value: value,
                    setValue: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 116,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // String or default
              case (0, _aioInterface.AioOptionType).string:
              case "string":
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioString.AioString),
                  {
                    id: id,
                    label: label,
                    value: value,
                    setValue: setValue
                      ? (ret) => {
                          if (typeof setValue === "function") setValue(ret);
                        }
                      : undefined,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 134,
                    columnNumber: 9,
                  },
                  undefined,
                );
              // Undefined
              case "undefined":
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioString.AioString),
                  {
                    id: id,
                    label: label,
                    value: "Undefined",
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 151,
                    columnNumber: 9,
                  },
                  undefined,
                );
              default:
                return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  (0, _aioLabel.AioLabel),
                  {
                    id: `${id}-missing`,
                    label: `Missing type for ${type ?? (value === null ? "string" : typeof value)}`,
                    noColon: true,
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/components/aio/RenderLineItem.tsx",
                    lineNumber: 160,
                    columnNumber: 9,
                  },
                  undefined,
                );
            }
          };
          _c = RenderLineItem;
          var _c;
          $RefreshReg$(_c, "RenderLineItem");

          $parcel$ReactRefreshHelpers$a597.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioBoolean": "3IBcV",
        "./aioExpander": "63PKo",
        "./aioInterface": "5k15Y",
        "./aioLabel": "4cCtf",
        "./aioNumber": "23gZp",
        "./aioReplacementList": "5rGjv",
        "./aioSelect": "gQ1GT",
        "./aioString": "lAE49",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "23gZp": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$b08a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$b08a.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioNumber", () => AioNumber);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioLabel = require("./aioLabel");
          var _s = $RefreshSig$();
          const AioNumber = (props) => {
            _s();
            const [value, setValue] = (0, _react.useState)(props.value ?? 0);
            (0, _react.useEffect)(() => {
              setValue(
                Math.max(
                  props.minValue ?? -Infinity,
                  Math.min(props.maxValue ?? Infinity, props.value),
                ) ??
                  props.minValue ??
                  0,
              );
            }, [props.maxValue, props.minValue, props.value]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${props.id}-label`,
                      label: props.label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioNumber.tsx",
                      lineNumber: 26,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-input-holder",
                      children:
                        typeof props.setValue !== "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "span",
                              {
                                children: props.value,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioNumber.tsx",
                                lineNumber: 32,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "input",
                              {
                                id: props.id,
                                className: "aio-input",
                                value: value,
                                type: "number",
                                onChange: (e) => setValue(parseFloat(e.currentTarget.value)),
                                onBlur: () => {
                                  if (props.setValue !== undefined) props.setValue(value);
                                },
                                step: props.step,
                                min: props.minValue,
                                max: props.maxValue,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioNumber.tsx",
                                lineNumber: 34,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioNumber.tsx",
                      lineNumber: 30,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AioNumber, "hqt2SBW+s3h+zS1LMWrn/w+ADtY=");
          _c = AioNumber;
          var _c;
          $RefreshReg$(_c, "AioNumber");

          $parcel$ReactRefreshHelpers$b08a.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioLabel": "4cCtf",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "5rGjv": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$8147 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$8147.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioReplacementList", () => AioReplacementList);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _functions = require("../functions");
          var _aioIconButton = require("./aioIconButton");
          var _aioLabel = require("./aioLabel");
          var _aioReplacementDisplay = require("./aioReplacementDisplay");
          var _s = $RefreshSig$();
          const AioReplacementList = ({
            id,
            label,
            replacements,
            setReplacements,
            dontAskSpace,
            dontAskTrail,
            externalLists,
          }) => {
            _s();
            /** Update individual replacement and send it back */ const updateReplacement = (0,
            _react.useCallback)(
              (ret, i) => {
                if (typeof setReplacements !== "function") return;
                const newValue = [...(replacements ?? [])];
                newValue[i] = ret;
                setReplacements(newValue);
              },
              [replacements, setReplacements],
            );
            const addReplacement = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacements !== "function") return;
                const newReplacements = [...(replacements ?? [])];
                newReplacements.splice(i, 0, (0, _functions.newReplacement)());
                setReplacements(newReplacements);
              },
              [replacements, setReplacements],
            );
            const removeReplacement = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacements !== "function") return;
                const newReplacements = [...(replacements ?? [])];
                newReplacements.splice(i, 1);
                setReplacements(newReplacements);
              },
              [replacements, setReplacements],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${id}-label`,
                      label: label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioReplacementList.tsx",
                      lineNumber: 70,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      children: [
                        !label &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _jsxDevRuntime.Fragment),
                            {
                              children: [
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "span",
                                  {
                                    children: "then...",
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/aioReplacementList.tsx",
                                    lineNumber: 77,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                                " ",
                              ],
                            },
                            void 0,
                            true,
                          ),
                        typeof setReplacements === "function" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              id: `${id}-addreplacement`,
                              className: "aiox-button aiox-addDown",
                              onClick: () => addReplacement(0),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aio/aioReplacementList.tsx",
                              lineNumber: 81,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        (replacements ?? []).map((repl, i) => {
                          return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              children: [
                                i > 0 &&
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      children: " and...",
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/aio/aioReplacementList.tsx",
                                      lineNumber: 90,
                                      columnNumber: 25,
                                    },
                                    undefined,
                                  ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _aioReplacementDisplay.AioReplacementDisplay),
                                  {
                                    id: `${id}-replacementdisplay-${i}`,
                                    airid: repl.airid,
                                    oldText: repl.oldText,
                                    newTexts: repl.newTexts,
                                    includeTrailing: repl.includeTrailing,
                                    externalName: repl.externalName,
                                    setReplacement:
                                      typeof setReplacements === "function"
                                        ? (ret) => updateReplacement(ret, i)
                                        : undefined,
                                    dontAskSpace: dontAskSpace,
                                    dontAskTrail: i > 0 ? true : dontAskTrail,
                                    externalLists: externalLists,
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/aioReplacementList.tsx",
                                    lineNumber: 91,
                                    columnNumber: 15,
                                  },
                                  undefined,
                                ),
                                typeof setReplacements === "function" &&
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      className: "aiox-button-holder",
                                      style: {
                                        display: "flex",
                                        flexDirection: "row",
                                        alignContent: "center",
                                        marginBottom: "2px",
                                      },
                                      children: [
                                        replacements &&
                                          replacements.length >= 1 &&
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            (0, _aioIconButton.AioIconButton),
                                            {
                                              id: `${id}-remove`,
                                              iconName: "aiox-removeUp",
                                              onClick: () => removeReplacement(i),
                                              tipText: "Remove old text",
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName: "src/components/aio/aioReplacementList.tsx",
                                              lineNumber: 118,
                                              columnNumber: 21,
                                            },
                                            undefined,
                                          ),
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aioIconButton.AioIconButton),
                                          {
                                            id: `${id}-add`,
                                            iconName: "aiox-addDown",
                                            onClick: () => addReplacement(i + 1),
                                            tipText: "Add old text",
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/aio/aioReplacementList.tsx",
                                            lineNumber: 125,
                                            columnNumber: 19,
                                          },
                                          undefined,
                                        ),
                                      ],
                                    },
                                    void 0,
                                    true,
                                    {
                                      fileName: "src/components/aio/aioReplacementList.tsx",
                                      lineNumber: 108,
                                      columnNumber: 17,
                                    },
                                    undefined,
                                  ),
                              ],
                            },
                            `${i}-${repl.airid}`,
                            true,
                            {
                              fileName: "src/components/aio/aioReplacementList.tsx",
                              lineNumber: 89,
                              columnNumber: 13,
                            },
                            undefined,
                          );
                        }),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aio/aioReplacementList.tsx",
                      lineNumber: 74,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AioReplacementList, "iwIuelh7OY36D9nVeXyIF1hlMjU=");
          _c = AioReplacementList;
          var _c;
          $RefreshReg$(_c, "AioReplacementList");

          $parcel$ReactRefreshHelpers$8147.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../functions": "gfVyL",
        "./aioIconButton": "40L1H",
        "./aioLabel": "4cCtf",
        "./aioReplacementDisplay": "3mTPO",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "3mTPO": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$6d94 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$6d94.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioReplacementDisplay", () => AioReplacementDisplay);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _uuid = require("uuid");
          var _functions = require("../functions");
          var _aioDropSelect = require("./aioDropSelect");
          var _aioIconButton = require("./aioIconButton");
          var _aioReplacementValuesDisplay = require("./aioReplacementValuesDisplay");
          var _s = $RefreshSig$();
          const AioReplacementDisplay = ({
            id,
            airid,
            oldText,
            newTexts,
            includeTrailing,
            externalName,
            setReplacement,
            externalLists,
            dontAskSpace,
            dontAskTrail,
            noText: noOldText,
          }) => {
            _s();
            const [displayText, setDisplayText] = (0, _react.useState)(
              (0, _functions.fromHtml)(oldText ?? ""),
            );
            (0, _react.useEffect)(() => {
              setDisplayText((0, _functions.fromHtml)(oldText ?? ""));
            }, [oldText]);
            const availableListNames = (0, _react.useMemo)(() => {
              const a = ["with..."];
              const exl = [];
              externalLists?.map((rep) => {
                if (rep.givenName !== undefined) exl.push(rep.givenName);
                return true;
              });
              a.push(...exl.sort((a, b) => a.localeCompare(b)));
              return a;
            }, [externalLists]);
            /** Send back updates */ const returnData = (0, _react.useCallback)(
              (newReplacement) => {
                if (typeof setReplacement !== "function") return;
                // Create new object
                const r = {
                  airid: newReplacement.airid ?? airid ?? (0, _uuid.v4)(),
                  oldText: newReplacement.oldText ?? oldText ?? "",
                  newTexts: newReplacement.newTexts ?? newTexts,
                  includeTrailing: newReplacement.includeTrailing ?? includeTrailing,
                  externalName: newReplacement.externalName ?? externalName,
                };
                // Remove default
                if (r.externalName === "with...") delete r.externalName;
                // Update existing object
                setReplacement(r);
              },
              [setReplacement, airid, oldText, newTexts, includeTrailing, externalName],
            );
            const addNewText = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacement !== "function") return;
                const nts = [...newTexts];
                nts.splice(i, 0, (0, _functions.newReplacementValues)());
                returnData({
                  newTexts: nts,
                });
              },
              [newTexts, returnData, setReplacement],
            );
            const removeNewText = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacement !== "function") return;
                const nts = [...newTexts];
                nts.splice(i, 1);
                returnData({
                  newTexts: nts,
                });
              },
              [newTexts, returnData, setReplacement],
            );
            /**
             * Update the list
             * @param string value that will be split by new line into repeats
             */ return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                id: id,
                className: "aiord-main",
                style: {
                  display: "flex",
                  flexDirection: "column",
                  gap: "2px",
                  border: "1px dotted burlywood",
                  padding: "2px",
                  borderRadius: "4px,",
                  margin: "2px",
                },
                children: [
                  !noOldText &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        children: [
                          typeof setReplacement !== "function"
                            ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "span",
                                {
                                  className: "aio-replaceText",
                                  children:
                                    oldText !== ""
                                      ? (0, _functions.fromHtml)(oldText ?? "")
                                      : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "em",
                                          {
                                            children: "Nothing",
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName:
                                              "src/components/aio/aioReplacementDisplay.tsx",
                                            lineNumber: 128,
                                            columnNumber: 59,
                                          },
                                          undefined,
                                        ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                  lineNumber: 127,
                                  columnNumber: 13,
                                },
                                undefined,
                              )
                            : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "input",
                                {
                                  id: `${id}-input`,
                                  className: "aio-input",
                                  type: "text",
                                  value: displayText,
                                  onChange: (e) => setDisplayText(e.currentTarget.value),
                                  onBlur: (e) => {
                                    returnData({
                                      oldText: (0, _functions.toHtml)(e.currentTarget.value),
                                    });
                                  },
                                  style: {
                                    minWidth: 0,
                                    width: "170px",
                                  },
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                  lineNumber: 131,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                          !dontAskTrail &&
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                style: {
                                  display: "flex",
                                  justifyContent: "flex-end",
                                },
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "label",
                                    {
                                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        "small",
                                        {
                                          children: "Include trailing rows",
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                          lineNumber: 146,
                                          columnNumber: 17,
                                        },
                                        undefined,
                                      ),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                      lineNumber: 145,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "input",
                                    {
                                      id: `${id}-includetrailing`,
                                      disabled: typeof setReplacement !== "function",
                                      style: {
                                        margin: "6px",
                                      },
                                      type: "checkbox",
                                      checked: includeTrailing,
                                      onChange: (e) =>
                                        returnData({
                                          includeTrailing: e.currentTarget.checked,
                                        }),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                      lineNumber: 148,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                lineNumber: 144,
                                columnNumber: 13,
                              },
                              undefined,
                            ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/aio/aioReplacementDisplay.tsx",
                        lineNumber: 125,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  typeof setReplacement === "function" &&
                    externalLists !== undefined &&
                    externalLists.length > 0 &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _aioDropSelect.AioDropSelect),
                          {
                            id: `${id}-dropselect`,
                            value: externalName ?? "with...",
                            availableValues: availableListNames,
                            setValue: (ret) => {
                              returnData({
                                externalName: ret,
                              });
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/aio/aioReplacementDisplay.tsx",
                            lineNumber: 164,
                            columnNumber: 13,
                          },
                          undefined,
                        ),
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aio/aioReplacementDisplay.tsx",
                        lineNumber: 163,
                        columnNumber: 11,
                      },
                      undefined,
                    ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      children: externalLists?.some((e) => e.givenName === externalName)
                        ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _jsxDevRuntime.Fragment),
                            {
                              children: externalLists
                                ?.find((e) => e.givenName === externalName)
                                ?.newTexts.map((e, i) =>
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aioReplacementValuesDisplay.AioReplacementValuesDisplay),
                                    {
                                      id: `${id}-subdisplay`,
                                      texts: e.texts,
                                      subLists: e.subLists,
                                    },
                                    i,
                                    false,
                                    {
                                      fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                      lineNumber: 180,
                                      columnNumber: 17,
                                    },
                                    undefined,
                                  ),
                                ),
                            },
                            void 0,
                            false,
                          )
                        : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _jsxDevRuntime.Fragment),
                            {
                              children: newTexts.map((rv, i) =>
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    children: [
                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0,
                                        _aioReplacementValuesDisplay.AioReplacementValuesDisplay),
                                        {
                                          id: `${id}-subdisplay`,
                                          airid: rv.airid,
                                          texts: rv.texts,
                                          spaceAfter: rv.spaceAfter,
                                          subLists: rv.subLists,
                                          externalLists: externalLists,
                                          dontAskSpace: dontAskSpace,
                                          dontAskTrail:
                                            typeof setReplacement === "function"
                                              ? dontAskTrail
                                              : true,
                                          setReplacementValue:
                                            typeof setReplacement === "function"
                                              ? (ret) => {
                                                  const nts = [...newTexts];
                                                  nts.splice(i, 1, ret);
                                                  returnData({
                                                    newTexts: nts,
                                                  });
                                                }
                                              : undefined,
                                        },
                                        rv.airid,
                                        false,
                                        {
                                          fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                          lineNumber: 192,
                                          columnNumber: 17,
                                        },
                                        undefined,
                                      ),
                                      typeof setReplacement === "function" &&
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiox-button-holder",
                                            style: {
                                              display: "flex",
                                              flexDirection: "row",
                                              alignContent: "center",
                                              marginLeft: "2.5rem",
                                              marginTop: "2px",
                                            },
                                            children: [
                                              newTexts &&
                                                newTexts.length > 1 &&
                                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  (0, _aioIconButton.AioIconButton),
                                                  {
                                                    id: `${id}-remove`,
                                                    iconName: "aiox-removeUp",
                                                    onClick: () => removeNewText(i),
                                                    tipText: "Remove new text",
                                                  },
                                                  void 0,
                                                  false,
                                                  {
                                                    fileName:
                                                      "src/components/aio/aioReplacementDisplay.tsx",
                                                    lineNumber: 224,
                                                    columnNumber: 23,
                                                  },
                                                  undefined,
                                                ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                (0, _aioIconButton.AioIconButton),
                                                {
                                                  id: `${id}-add`,
                                                  iconName: "aiox-addDown",
                                                  onClick: () => addNewText(i + 1),
                                                  tipText: "Add new text",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName:
                                                    "src/components/aio/aioReplacementDisplay.tsx",
                                                  lineNumber: 231,
                                                  columnNumber: 21,
                                                },
                                                undefined,
                                              ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName:
                                              "src/components/aio/aioReplacementDisplay.tsx",
                                            lineNumber: 213,
                                            columnNumber: 19,
                                          },
                                          undefined,
                                        ),
                                    ],
                                  },
                                  `${i}-${rv.airid}`,
                                  true,
                                  {
                                    fileName: "src/components/aio/aioReplacementDisplay.tsx",
                                    lineNumber: 191,
                                    columnNumber: 15,
                                  },
                                  undefined,
                                ),
                              ),
                            },
                            void 0,
                            false,
                          ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioReplacementDisplay.tsx",
                      lineNumber: 174,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aio/aioReplacementDisplay.tsx",
                lineNumber: 111,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AioReplacementDisplay, "HZJRwlcSl5H5YnPotNC3AC84Pm0=");
          _c = AioReplacementDisplay;
          var _c;
          $RefreshReg$(_c, "AioReplacementDisplay");

          $parcel$ReactRefreshHelpers$6d94.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        uuid: "j4KJi",
        "../functions": "gfVyL",
        "./aioDropSelect": "feLJ2",
        "./aioIconButton": "40L1H",
        "./aioReplacementValuesDisplay": "dvqfm",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    dvqfm: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$2f68 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$2f68.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(
            exports,
            "AioReplacementValuesDisplay",
            () => AioReplacementValuesDisplay,
          );
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _functions = require("../functions");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioReplacementList = require("./aioReplacementList");
          var _s = $RefreshSig$();
          const AioReplacementValuesDisplay = ({
            id,
            airid,
            texts,
            spaceAfter,
            subLists,
            setReplacementValue,
            dontAskSpace,
            dontAskTrail,
            externalLists,
          }) => {
            _s();
            const returnData = (0, _react.useCallback)(
              (newRV) => {
                if (typeof setReplacementValue !== "function") return;
                const r = {
                  airid: airid,
                  spaceAfter: newRV.spaceAfter ?? spaceAfter,
                  texts: newRV.texts ?? texts ?? [],
                  subLists: newRV.subLists ?? subLists,
                };
                setReplacementValue(r);
              },
              [airid, setReplacementValue, spaceAfter, subLists, texts],
            );
            const [text, setText] = (0, _react.useState)(
              texts?.map((t) => (0, _functions.fromHtml)(t)).join("\n") ?? "",
            );
            (0, _react.useEffect)(() => {
              setText(texts?.map((t) => (0, _functions.fromHtml)(t)).join("\n") ?? "");
            }, [texts]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                className: "aiordv-main",
                style: {
                  display: "flex",
                  flexDirection: "row",
                },
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        marginRight: "4px",
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "center",
                        gap: "2px",
                      },
                      children:
                        typeof setReplacementValue === "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _jsxDevRuntime.Fragment),
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "textarea",
                                    {
                                      id: id,
                                      className: "aio-input",
                                      rows: 4,
                                      value: text,
                                      onChange: (e) => setText(e.currentTarget.value),
                                      onBlur: () =>
                                        returnData({
                                          texts: text
                                            .split("\n")
                                            .map((t) => (0, _functions.toHtml)(t)),
                                        }),
                                      style: {
                                        width: "170px",
                                        minWidth: "170px",
                                      },
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName:
                                        "src/components/aio/aioReplacementValuesDisplay.tsx",
                                      lineNumber: 72,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  !dontAskSpace &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        style: {
                                          display: "flex",
                                          justifyContent: "flex-end",
                                        },
                                        children: [
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "label",
                                            {
                                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "small",
                                                {
                                                  children: "Space after repeat",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName:
                                                    "src/components/aio/aioReplacementValuesDisplay.tsx",
                                                  lineNumber: 84,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName:
                                                "src/components/aio/aioReplacementValuesDisplay.tsx",
                                              lineNumber: 83,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "input",
                                            {
                                              id: `${id}-spaceafter`,
                                              style: {
                                                margin: "6px",
                                              },
                                              type: "checkbox",
                                              checked: spaceAfter,
                                              onChange: (e) =>
                                                returnData({
                                                  spaceAfter: e.currentTarget.checked,
                                                }),
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName:
                                                "src/components/aio/aioReplacementValuesDisplay.tsx",
                                              lineNumber: 86,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                        ],
                                      },
                                      void 0,
                                      true,
                                      {
                                        fileName:
                                          "src/components/aio/aioReplacementValuesDisplay.tsx",
                                        lineNumber: 82,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                ],
                              },
                              void 0,
                              true,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _jsxDevRuntime.Fragment),
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      id: id,
                                      className: "aio-input",
                                      style: {
                                        border: "1px black solid",
                                        borderRadius: "2px",
                                        padding: "2px",
                                      },
                                      children:
                                        texts !== undefined &&
                                        texts.map((t, i) =>
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "div",
                                            {
                                              style: {
                                                lineHeight: "1.1",
                                                fontSize: "75%",
                                                fontStyle: "italic",
                                              },
                                              children: (0, _functions.fromHtml)(t),
                                            },
                                            i,
                                            false,
                                            {
                                              fileName:
                                                "src/components/aio/aioReplacementValuesDisplay.tsx",
                                              lineNumber: 105,
                                              columnNumber: 19,
                                            },
                                            undefined,
                                          ),
                                        ),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName:
                                        "src/components/aio/aioReplacementValuesDisplay.tsx",
                                      lineNumber: 98,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      style: {
                                        display: "flex",
                                        justifyContent: "flex-end",
                                      },
                                      children: [
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "label",
                                          {
                                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                              "small",
                                              {
                                                children: "Space after repeat",
                                              },
                                              void 0,
                                              false,
                                              {
                                                fileName:
                                                  "src/components/aio/aioReplacementValuesDisplay.tsx",
                                                lineNumber: 115,
                                                columnNumber: 17,
                                              },
                                              undefined,
                                            ),
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName:
                                              "src/components/aio/aioReplacementValuesDisplay.tsx",
                                            lineNumber: 114,
                                            columnNumber: 15,
                                          },
                                          undefined,
                                        ),
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "input",
                                          {
                                            id: `${id}-spaceafter`,
                                            disabled: true,
                                            style: {
                                              margin: "6px",
                                            },
                                            type: "checkbox",
                                            checked: spaceAfter,
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName:
                                              "src/components/aio/aioReplacementValuesDisplay.tsx",
                                            lineNumber: 117,
                                            columnNumber: 15,
                                          },
                                          undefined,
                                        ),
                                      ],
                                    },
                                    void 0,
                                    true,
                                    {
                                      fileName:
                                        "src/components/aio/aioReplacementValuesDisplay.tsx",
                                      lineNumber: 113,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioReplacementValuesDisplay.tsx",
                      lineNumber: 61,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  typeof setReplacementValue === "function" || (subLists?.length ?? 0) > 0
                    ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _jsxDevRuntime.Fragment),
                        {
                          children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                style: {
                                  display: "flex",
                                  flexDirection: "column",
                                },
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      style: {
                                        flexGrow: 1,
                                        minWidth: "5px",
                                        width: "5px",
                                        borderBottom: "1px burlywood solid",
                                        borderBottomRightRadius: "4px",
                                      },
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName:
                                        "src/components/aio/aioReplacementValuesDisplay.tsx",
                                      lineNumber: 131,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      style: {
                                        flexGrow: 1,
                                        minWidth: "5px",
                                        width: "5px",
                                        borderTop: "1px burlywood solid",
                                        borderTopRightRadius: "4px",
                                      },
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName:
                                        "src/components/aio/aioReplacementValuesDisplay.tsx",
                                      lineNumber: 140,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/components/aio/aioReplacementValuesDisplay.tsx",
                                lineNumber: 130,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                style: {
                                  minWidth: "5px",
                                  width: "5px",
                                  marginTop: "6px",
                                  marginBottom: "6px",
                                  borderLeft: "1px burlywood solid",
                                  borderTop: "1px burlywood solid",
                                  borderBottom: "1px burlywood solid",
                                  borderTopLeftRadius: "4px",
                                  borderBottomLeftRadius: "4px",
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioReplacementValuesDisplay.tsx",
                                lineNumber: 150,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _aioReplacementList.AioReplacementList),
                              {
                                id: `${id}-sublists`,
                                replacements: subLists,
                                setReplacements:
                                  typeof setReplacementValue === "function"
                                    ? (ret) =>
                                        returnData({
                                          subLists: ret,
                                        })
                                    : undefined,
                                dontAskSpace:
                                  typeof setReplacementValue === "function" ? dontAskSpace : true,
                                dontAskTrail: dontAskTrail,
                                externalLists: externalLists,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioReplacementValuesDisplay.tsx",
                                lineNumber: 163,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          ],
                        },
                        void 0,
                        true,
                      )
                    : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _jsxDevRuntime.Fragment),
                        {},
                        void 0,
                        false,
                      ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aio/aioReplacementValuesDisplay.tsx",
                lineNumber: 54,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AioReplacementValuesDisplay, "7dueH75EfKBqZHQ4A47+9EloFuE=");
          _c = AioReplacementValuesDisplay;
          var _c;
          $RefreshReg$(_c, "AioReplacementValuesDisplay");

          $parcel$ReactRefreshHelpers$2f68.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "../functions": "gfVyL",
        react: "21dqq",
        "./aioReplacementList": "5rGjv",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    gQ1GT: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$eff1 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$eff1.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioSelect", () => AioSelect);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _aioLabel = require("./aioLabel");
          const AioSelect = (props) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${props.id}-label`,
                      label: props.label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioSelect.tsx",
                      lineNumber: 15,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-input-holder",
                      children:
                        typeof props.setValue !== "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "span",
                              {
                                id: props.id,
                                children: props.value,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioSelect.tsx",
                                lineNumber: 21,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "select",
                              {
                                id: props.id,
                                className: "aio-select",
                                value: props.value ?? "",
                                onChange:
                                  typeof props.setValue === "function"
                                    ? (e) => {
                                        if (props.setValue) props.setValue(e.currentTarget.value);
                                      }
                                    : undefined,
                                children:
                                  props.availableValues &&
                                  props.availableValues.map((v, i) => {
                                    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "option",
                                      {
                                        value: v,
                                        children: v,
                                      },
                                      i,
                                      false,
                                      {
                                        fileName: "src/components/aio/aioSelect.tsx",
                                        lineNumber: 38,
                                        columnNumber: 19,
                                      },
                                      undefined,
                                    );
                                  }),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioSelect.tsx",
                                lineNumber: 23,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioSelect.tsx",
                      lineNumber: 19,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _c = AioSelect;
          var _c;
          $RefreshReg$(_c, "AioSelect");

          $parcel$ReactRefreshHelpers$eff1.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioLabel": "4cCtf",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    lAE49: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$e5aa = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$e5aa.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioString", () => AioString);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioLabel = require("./aioLabel");
          var _s = $RefreshSig$();
          const AioString = (props) => {
            _s();
            const [value, setValue] = (0, _react.useState)(props.value ?? "");
            (0, _react.useEffect)(() => {
              setValue(props.value ?? "");
            }, [props.value]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${props.id}-label`,
                      label: props.label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioString.tsx",
                      lineNumber: 19,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aio-input-holder",
                      children:
                        typeof props.setValue !== "function"
                          ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "span",
                              {
                                id: props.id,
                                children: value,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioString.tsx",
                                lineNumber: 25,
                                columnNumber: 11,
                              },
                              undefined,
                            )
                          : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "input",
                              {
                                id: props.id,
                                className: "aio-input",
                                value: value ?? "",
                                type: "text",
                                onChange: (e) => {
                                  setValue(e.currentTarget.value);
                                },
                                onBlur: () => {
                                  if (props.setValue !== undefined) props.setValue(value);
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/aio/aioString.tsx",
                                lineNumber: 27,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/aioString.tsx",
                      lineNumber: 23,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AioString, "c4TvO7mwIwHJQNqiUIDZr1xXEdk=");
          _c = AioString;
          var _c;
          $RefreshReg$(_c, "AioString");

          $parcel$ReactRefreshHelpers$e5aa.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "./aioLabel": "4cCtf",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "9RhwM": [function () {}, {}],
    "93xCY": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$2de8 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$2de8.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AifOptionsWindow", () => AifOptionsWindow);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aioSelect = require("../aio/aioSelect");
          var _asupInternalWindow = require("../aiw/AsupInternalWindow");
          var _originalText = require("./OriginalText");
          const AifOptionsWindow = ({
            id,
            onClose,
            left,
            center,
            right,
            canChangeType = false,
            returnData,
            styleMap,
          }) => {
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _asupInternalWindow.AsupInternalWindow),
              {
                id: id,
                title: "Line options",
                visible: true,
                onClose: onClose,
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "aiw-body-row",
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _aioSelect.AioSelect),
                        {
                          id: `${id}-linetype`,
                          label: "Line type",
                          availableValues: [
                            "Left only",
                            "Center only",
                            "Left, Center and Right",
                            "Left and Right",
                          ],
                          value:
                            typeof left === "string" &&
                            typeof center === "string" &&
                            typeof right === "string"
                              ? "Left, Center and Right"
                              : typeof left === "string" && typeof right === "string"
                              ? "Left and Right"
                              : typeof left === "string"
                              ? "Left only"
                              : "Center only",
                          setValue:
                            returnData && canChangeType
                              ? (ret) => {
                                  let newLeft = null;
                                  let newCenter = null;
                                  let newRight = null;
                                  switch (ret) {
                                    case "Left only":
                                      newLeft = left || "";
                                      break;
                                    case "Center only":
                                      newCenter = center || "";
                                      break;
                                    case "Left and Right":
                                      newLeft = left || "";
                                      newRight = right || "";
                                      break;
                                    case "Left, Center and Right":
                                    default:
                                      newLeft = left || "";
                                      newCenter = center || "";
                                      newRight = right || "";
                                      break;
                                  }
                                  returnData({
                                    left: newLeft,
                                    center: newCenter,
                                    right: newRight,
                                  });
                                }
                              : undefined,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/components/aif/aifOptionsWindow.tsx",
                          lineNumber: 40,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aif/aifOptionsWindow.tsx",
                      lineNumber: 39,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _originalText.OriginalText),
                    {
                      id: `${id}-unprocessed-left-text`,
                      label: "Left text",
                      text: left,
                      setText: returnData
                        ? (ret) =>
                            returnData({
                              left: ret,
                            })
                        : undefined,
                      styleMap: styleMap,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aif/aifOptionsWindow.tsx",
                      lineNumber: 83,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _originalText.OriginalText),
                    {
                      id: `${id}-unprocessed-center-text`,
                      label: "Center text",
                      text: center,
                      setText: returnData
                        ? (ret) =>
                            returnData({
                              center: ret,
                            })
                        : undefined,
                      styleMap: styleMap,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aif/aifOptionsWindow.tsx",
                      lineNumber: 90,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _originalText.OriginalText),
                    {
                      id: `${id}-unprocessed-right-text`,
                      label: "Right text",
                      text: right,
                      setText: returnData
                        ? (ret) =>
                            returnData({
                              right: ret,
                            })
                        : undefined,
                      styleMap: styleMap,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aif/aifOptionsWindow.tsx",
                      lineNumber: 97,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/aif/aifOptionsWindow.tsx",
                lineNumber: 33,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _c = AifOptionsWindow;
          var _c;
          $RefreshReg$(_c, "AifOptionsWindow");

          $parcel$ReactRefreshHelpers$2de8.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aio/aioSelect": "gQ1GT",
        "../aiw/AsupInternalWindow": "aNCiW",
        "./OriginalText": "7ZqAi",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "7ZqAi": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$0b7c = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$0b7c.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "OriginalText", () => OriginalText);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aie = require("../aie");
          const OriginalText = ({ id, text, setText, styleMap }) => {
            if (typeof text !== "string")
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {},
                void 0,
                false,
              );
            else
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                "div",
                {
                  className: "aiw-body-row",
                  children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "div",
                      {
                        className: "aio-label",
                        children: "Unprocessed text:",
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aif/OriginalText.tsx",
                        lineNumber: 20,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aie.AsupInternalEditor),
                      {
                        id: id,
                        value: text,
                        setValue: setText,
                        showStyleButtons: styleMap !== undefined,
                        styleMap: styleMap,
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/aif/OriginalText.tsx",
                        lineNumber: 21,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  ],
                },
                void 0,
                true,
                {
                  fileName: "src/components/aif/OriginalText.tsx",
                  lineNumber: 19,
                  columnNumber: 7,
                },
                undefined,
              );
          };
          _c = OriginalText;
          var _c;
          $RefreshReg$(_c, "OriginalText");

          $parcel$ReactRefreshHelpers$0b7c.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aie": "lfTjR",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    fbS7v: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "replaceBlockText", () => replaceBlockText);
        var _newReplacedText = require("../aie/functions/newReplacedText");
        const replaceBlockText = (text, rep) => {
          // Stop processing
          if (
            text === undefined ||
            text === null ||
            rep === undefined ||
            rep.oldText === undefined ||
            rep.oldText === "" ||
            rep.newText === undefined
          )
            return {
              newText: text,
              updated: false,
            };
          // Not found
          if (!text.includes(rep.oldText))
            return {
              newText: text,
              updated: false,
            };
          // Make replacement
          return {
            newText: (0, _newReplacedText.newReplacedText)(text, rep.oldText, rep.newText),
            updated: true,
          };
        };
      },
      {
        "../aie/functions/newReplacedText": "jLgjW",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "6sre2": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AsupInternalTable",
          () => (0, _asupInternalTable.AsupInternalTable),
        );
        var _asupInternalTable = require("./AsupInternalTable");
      },
      { "./AsupInternalTable": "dXtid", "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    dXtid: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$5f63 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$5f63.prelude(module);

        try {
          /* eslint-disable react-hooks/exhaustive-deps */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AsupInternalTable", () => AsupInternalTable);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aio = require("../aio");
          var _aiw = require("../aiw");
          var _functions = require("../functions");
          var _aitCss = require("./ait.css");
          var _aitBorderRow = require("./aitBorderRow");
          var _aitContext = require("./aitContext");
          var _aitHeader = require("./aitHeader");
          var _aitInterface = require("./aitInterface");
          var _aitRowGroup = require("./aitRowGroup");
          var _s = $RefreshSig$();
          const AsupInternalTable = ({
            id,
            tableData,
            isEditable = true,
            setTableData,
            processedDataRef,
            externalLists,
            externalSingles,
            style,
            showCellBorders,
            groupTemplates,
            commentStyles,
            cellStyles,
            colWidthMod = 2,
            initialDecimalAlignPercent = 60,
            defaultCellWidth = 60,
            noTableOptions = false,
          }) => {
            _s();
            // Internal state
            const [showOptions, setShowOptions] = (0, _react.useState)(false);
            const [columnRepeats, setColumnRepeats] = (0, _react.useState)(null);
            // Explode tableData
            const [headerData, setHeaderData] = (0, _react.useState)();
            const [bodyData, setBodyData] = (0, _react.useState)();
            const [comments, setComments] = (0, _react.useState)();
            const [rowHeaderColumns, setRowHeaderColumns] = (0, _react.useState)();
            const [noRepeatProcessing, setNoRepeatProcessing] = (0, _react.useState)();
            const [windowZIndex, setWindowZIndex] = (0, _react.useState)(10000);
            const [decimalAlignPercent, setDecimalAlignPercent] = (0, _react.useState)(
              initialDecimalAlignPercent,
            );
            // Editable property
            const editable = (0, _react.useMemo)(() => {
              return isEditable && typeof setTableData === "function";
            }, [isEditable, setTableData]);
            // Pushdown data when it it updated externally
            (0, _react.useEffect)(() => {
              // Set defaults for no processing
              const headerData = (0, _functions.headerPreProcess)(
                defaultCellWidth,
                tableData.headerData,
              );
              let columnRepeats =
                tableData.bodyData === undefined
                  ? null
                  : Array.from(tableData.bodyData[0].rows[0].cells.keys()).map((n) => {
                      return {
                        columnIndex: n,
                      };
                    });
              let processedHeaderData = headerData;
              // Process repeats if required
              if (processedHeaderData !== false && (processedHeaderData.rows.length ?? 0) > 0) {
                const headerDataUpdate = (0, _functions.repeatHeaders)(
                  processedHeaderData.rows,
                  processedHeaderData.replacements ?? [],
                  defaultCellWidth,
                  tableData.noRepeatProcessing ?? false,
                  tableData.rowHeaderColumns ?? 0,
                  externalLists,
                  externalSingles,
                );
                processedHeaderData = {
                  aitid: processedHeaderData.aitid,
                  name: processedHeaderData.name,
                  rows: headerDataUpdate.rows,
                  comments: processedHeaderData.comments,
                  spaceAfter: processedHeaderData.spaceAfter,
                  replacements: processedHeaderData.replacements,
                };
                columnRepeats = headerDataUpdate.columnRepeats;
              }
              setHeaderData(processedHeaderData);
              setColumnRepeats(columnRepeats);
              // Create processed body
              const bodyData = (0, _functions.bodyPreProcess)(defaultCellWidth, tableData.bodyData);
              const processedBodyData = bodyData.map((rg) => {
                return {
                  ...rg,
                  rows: (0, _functions.repeatRows)(
                    rg.rows,
                    defaultCellWidth,
                    rg.replacements,
                    rg.spaceAfter,
                    noRepeatProcessing,
                    externalLists,
                    externalSingles,
                  ).map((r) => {
                    return {
                      ...r,
                      cells: columnRepeats?.map((ci) => r.cells[ci.columnIndex]) ?? r.cells,
                    };
                  }),
                };
              });
              setBodyData(processedBodyData);
              // Set ref for processed data
              if (processedDataRef !== undefined)
                processedDataRef.current = {
                  bodyData: processedBodyData,
                  headerData: processedHeaderData,
                };
              // Info that is not processed
              setComments(tableData.comments ?? "");
              setRowHeaderColumns(tableData.rowHeaderColumns ?? 1);
              setNoRepeatProcessing(tableData.noRepeatProcessing ?? false);
              setDecimalAlignPercent(tableData.decimalAlignPercent ?? initialDecimalAlignPercent);
            }, [
              defaultCellWidth,
              externalLists,
              externalSingles,
              initialDecimalAlignPercent,
              noRepeatProcessing,
              processedDataRef,
              setTableData,
              tableData,
            ]);
            const unProcessRowGroup = (0, _react.useCallback)(
              (processedGroup) => {
                const ret =
                  processedGroup === false
                    ? false
                    : {
                        ...processedGroup,
                        rows: processedGroup.rows
                          .filter(
                            (r) =>
                              r.rowRepeat === undefined || r.rowRepeat.match(/^[[\]0,]+$/) !== null,
                          )
                          .map((r) => {
                            return {
                              ...r,
                              cells: r.cells.filter(
                                (_, ci) =>
                                  columnRepeats === null ||
                                  (columnRepeats !== null &&
                                    columnRepeats[ci] !== undefined &&
                                    (columnRepeats[ci].colRepeat ?? "0").match(/^[[\]0,]+$/)),
                              ),
                            };
                          }),
                      };
                return ret;
              },
              [columnRepeats],
            );
            // Unprocess data on the way back up
            const returnData = (0, _react.useCallback)(
              (tableUpdate) => {
                if (typeof setTableData !== "function") return;
                // Unprocess header data
                const headerRet =
                  !tableUpdate.headerDataUnprocessed && tableUpdate.headerData
                    ? unProcessRowGroup(tableUpdate.headerData)
                    : tableUpdate.headerData
                    ? tableUpdate.headerData
                    : headerData !== false && headerData !== undefined
                    ? unProcessRowGroup(headerData)
                    : headerData;
                // Unprocess body data
                const bodyRet =
                  tableUpdate.bodyDataUnprocessed || !tableUpdate.bodyData
                    ? tableUpdate.bodyData ?? bodyData?.map((rg) => unProcessRowGroup(rg))
                    : tableUpdate.bodyData.map((rg) => unProcessRowGroup(rg));
                // Assenble return information
                const r = {
                  headerData: headerRet,
                  bodyData: bodyRet,
                  comments: tableUpdate.comments ?? comments,
                  rowHeaderColumns: tableUpdate.rowHeaderColumns ?? rowHeaderColumns,
                  noRepeatProcessing: tableUpdate.noRepeatProcessing ?? noRepeatProcessing,
                  decimalAlignPercent: tableUpdate.decimalAlignPercent ?? decimalAlignPercent,
                };
                setTableData(r);
              },
              [
                setTableData,
                unProcessRowGroup,
                headerData,
                bodyData,
                comments,
                rowHeaderColumns,
                noRepeatProcessing,
                decimalAlignPercent,
              ],
            );
            // Add column
            const addCol = (0, _react.useCallback)(
              (ci) => {
                // Check ok to proceed
                if (
                  rowHeaderColumns === undefined ||
                  headerData === undefined ||
                  bodyData === undefined
                )
                  return;
                // Update body data
                let newBody = bodyData.map((rg) => unProcessRowGroup(rg));
                newBody = newBody.map((rg) => {
                  rg.rows = rg.rows.map((r) => {
                    r.cells.splice(ci + 1, 0, (0, _functions.newCell)(defaultCellWidth));
                    return r;
                  });
                  return rg;
                });
                // Update header group
                const newHeader = unProcessRowGroup(headerData);
                if (newHeader !== false && headerData !== false)
                  headerData.rows = newHeader.rows.map((r) => {
                    // Check for colSpan
                    if (ci >= 0 && r.cells[ci + 1]?.colSpan === 0) {
                      // Change colSpan on previous spanner
                      let lookback = 1;
                      while (lookback <= ci && (r.cells[ci + 1 - lookback].colSpan ?? 0) === 0)
                        lookback++;
                      const targetCellBefore = r.cells[ci + 1 - lookback];
                      if (targetCellBefore.colSpan === undefined) targetCellBefore.colSpan = 1;
                      targetCellBefore.colSpan = targetCellBefore.colSpan + 1;
                      // Add in blank cell
                      const n = (0, _functions.newCell)(defaultCellWidth);
                      n.colSpan = 0;
                      r.cells.splice(ci + 1, 0, n);
                    } else r.cells.splice(ci + 1, 0, (0, _functions.newCell)(defaultCellWidth));
                    return r;
                  });
                returnData({
                  headerData: newHeader,
                  headerDataUnprocessed: true,
                  bodyData: newBody,
                  bodyDataUnprocessed: true,
                  rowHeaderColumns:
                    ci < rowHeaderColumns - 1 ? rowHeaderColumns + 1 : rowHeaderColumns,
                });
              },
              [
                bodyData,
                defaultCellWidth,
                headerData,
                returnData,
                rowHeaderColumns,
                unProcessRowGroup,
              ],
            );
            // Remove column
            const remCol = (0, _react.useCallback)(
              (ci) => {
                // Check ok to proceed
                if (
                  rowHeaderColumns === undefined ||
                  headerData === undefined ||
                  bodyData === undefined
                )
                  return;
                // Update body data
                let newBody = bodyData.map((rg) => unProcessRowGroup(rg));
                newBody = newBody.map((rg) => {
                  // let newRg = unProcessRowGroup(rg) as AitRowGroupData;
                  const newRg = {
                    ...rg,
                  };
                  newRg.rows = newRg.rows.map((r) => {
                    r.cells.splice(ci, 1);
                    return r;
                  });
                  return newRg;
                });
                // Update header group
                const newHeader = unProcessRowGroup(headerData);
                if (newHeader !== false && headerData !== false)
                  headerData.rows = newHeader.rows.map((r) => {
                    // Check for colSpan
                    const c = r.cells[ci];
                    if (c.colSpan === undefined) c.colSpan = 1;
                    // Reduce where a hidden cell has been removed
                    if (c.colSpan === 0) {
                      let lookBack = 1;
                      while (r.cells[ci - lookBack].colSpan === 0) lookBack++;
                      r.cells[ci - lookBack].colSpan = (r.cells[ci - lookBack].colSpan ?? 1) - 1;
                    } else if (c.colSpan > 1)
                      for (let cj = 1; cj < c.colSpan; cj++) r.cells[ci + cj].colSpan = 1;
                    r.cells.splice(ci, 1);
                    return r;
                  });
                returnData({
                  headerData: newHeader,
                  headerDataUnprocessed: true,
                  bodyData: newBody,
                  bodyDataUnprocessed: true,
                  rowHeaderColumns: ci < rowHeaderColumns ? rowHeaderColumns - 1 : rowHeaderColumns,
                });
              },
              [bodyData, headerData, returnData, rowHeaderColumns, unProcessRowGroup],
            );
            // Update to a rowGroup data
            const updateRowGroup = (0, _react.useCallback)(
              (ret, rgi) => {
                const newBody = [...(bodyData ?? [])];
                newBody[rgi] = ret;
                returnData({
                  bodyData: newBody,
                });
              },
              [bodyData, returnData],
            );
            // Add a new row group to the table body
            const addRowGroup = (0, _react.useCallback)(
              (rgi, templateName) => {
                // Check ok to proceed
                if (bodyData === undefined) return;
                // Create new body, take template if it can be found
                const ix =
                  !templateName || !groupTemplates
                    ? -1
                    : groupTemplates.findIndex((g) => g.name === templateName);
                const newRowGroupTemplate =
                  ix > -1 && groupTemplates
                    ? groupTemplates[ix]
                    : {
                        rows: [
                          {
                            cells: [],
                          },
                        ],
                      };
                // Ensure new template meets requirements
                const newrg = (0, _functions.newRowGroup)(
                  defaultCellWidth,
                  bodyData[0].rows[0].cells.length,
                  newRowGroupTemplate,
                );
                // Set column widths
                newrg.rows.forEach((r) =>
                  r.cells.forEach((c, ci) => (c.colWidth = bodyData[0].rows[0].cells[ci].colWidth)),
                );
                // Copy existing body and splice in new data
                const newBody = bodyData?.map((rg) => unProcessRowGroup(rg)) ?? [];
                newBody.splice(rgi + 1, 0, newrg);
                // Update table body
                returnData({
                  bodyData: newBody,
                  bodyDataUnprocessed: true,
                });
              },
              [bodyData, defaultCellWidth, groupTemplates, returnData],
            );
            // Remove a row group from the table body
            const removeRowGroup = (0, _react.useCallback)(
              (rgi) => {
                // Check ok to proceed
                if (bodyData === undefined) return;
                // Update bodyData
                const newRowGroups = [...bodyData];
                newRowGroups.splice(rgi, 1);
                returnData({
                  bodyData: newRowGroups,
                });
              },
              [bodyData, returnData],
            );
            // Add rowHeader columns
            const addRowHeaderColumn = (0, _react.useCallback)(() => {
              // Check ok to proceed
              if (
                rowHeaderColumns === undefined ||
                headerData === undefined ||
                bodyData === undefined
              )
                return;
              // Check new column has no colspan
              if (rowHeaderColumns === bodyData[0].rows[0].cells.length - 1) return;
              if (
                headerData !== false &&
                headerData.rows.some((r) => (r.cells[rowHeaderColumns].colSpan ?? 1) !== 1)
              )
                return;
              returnData({
                rowHeaderColumns: rowHeaderColumns + 1,
              });
            }, [bodyData, headerData, returnData, rowHeaderColumns]);
            // Remove rowHeader columns
            const removeRowHeaderColumn = (0, _react.useCallback)(() => {
              // Check ok to proceed
              if (
                rowHeaderColumns === 0 ||
                rowHeaderColumns === undefined ||
                headerData === undefined ||
                bodyData === undefined
              )
                return;
              if (
                headerData !== false &&
                headerData.rows.some((r) => (r.cells[rowHeaderColumns - 1].colSpan ?? 1) !== 1)
              )
                return;
              // Check bodyData for cells with rowSpan
              if (
                bodyData.some((rg) =>
                  rg.rows.some((r) => (r.cells[rowHeaderColumns - 1].rowSpan ?? 1) !== 1),
                )
              )
                return;
              returnData({
                rowHeaderColumns: rowHeaderColumns - 1,
              });
            }, [bodyData, headerData, returnData, rowHeaderColumns]);
            // Add header if is is not there
            const addNewHeader = (0, _react.useCallback)(() => {
              // Check ok to proceed
              if (headerData === false) return;
              if ((headerData?.rows.length ?? 0) > 0 || bodyData === undefined) return;
              // Create new row
              const newHeader = {
                ...headerData,
                rows: [(0, _functions.newRow)(bodyData[0].rows[0].cells.length, defaultCellWidth)],
              };
              returnData({
                headerData: newHeader,
              });
            }, [bodyData, defaultCellWidth, headerData, returnData]);
            // Update columnWidth
            const updateColWidth = (0, _react.useCallback)(
              (colNo, colWidth) => {
                const newHeaderData =
                  headerData !== undefined && headerData !== false
                    ? {
                        ...headerData,
                        rows: headerData.rows.map((r) => {
                          return {
                            ...r,
                            cells: r.cells.map((c, ci) => {
                              // Check against the column repeat number if it exists
                              return {
                                ...c,
                                colWidth: columnRepeats
                                  ? columnRepeats[ci].columnIndex ===
                                    columnRepeats[colNo].columnIndex
                                    ? colWidth
                                    : c.colWidth
                                  : ci === colNo
                                  ? colWidth
                                  : c.colWidth,
                              };
                            }),
                          };
                        }),
                      }
                    : headerData;
                const newBodyData =
                  bodyData !== undefined
                    ? bodyData.map((rg) => {
                        return {
                          ...rg,
                          rows: rg.rows.map((r) => {
                            return {
                              ...r,
                              cells: r.cells.map((c, ci) => {
                                // Check against the column repeat number if it exists
                                return {
                                  ...c,
                                  colWidth: columnRepeats
                                    ? columnRepeats[ci].columnIndex ===
                                      columnRepeats[colNo].columnIndex
                                      ? colWidth
                                      : c.colWidth
                                    : ci === colNo
                                    ? colWidth
                                    : c.colWidth,
                                };
                              }),
                            };
                          }),
                        };
                      })
                    : undefined;
                returnData({
                  headerData: newHeaderData,
                  bodyData: newBodyData,
                });
              },
              [bodyData, columnRepeats, headerData, returnData],
            );
            // Manipulate cell spans
            const addHeaderColSpan = (0, _react.useCallback)(
              (loc) => {
                if (!headerData) return;
                // Update header group
                const newHeader = unProcessRowGroup(headerData);
                const newRows = [...newHeader.rows];
                const actualCol = loc.column;
                // Get things to change
                const targetCell = newRows[loc.row].cells[actualCol];
                if (targetCell.colSpan === undefined) targetCell.colSpan = 1;
                const hideCell = newRows[loc.row].cells[actualCol + targetCell.colSpan];
                // Check change is ok
                if (
                  targetCell === undefined ||
                  hideCell === undefined ||
                  targetCell.rowSpan !== 1 ||
                  hideCell.rowSpan !== 1 ||
                  hideCell.colSpan !== 1
                )
                  return;
                if (loc.column + targetCell.colSpan === rowHeaderColumns) return;
                if (loc.column + targetCell.colSpan >= newRows[loc.row].cells.length) return;
                if (hideCell.colSpan !== 1) return;
                // Update target cell
                targetCell.colSpan++;
                // Hide next cell
                hideCell.colSpan = 0;
                // Done
                returnData({
                  headerData: {
                    ...newHeader,
                    rows: newRows,
                  },
                  headerDataUnprocessed: true,
                });
              },
              [headerData, unProcessRowGroup, columnRepeats, rowHeaderColumns, returnData],
            );
            const removeHeaderColSpan = (0, _react.useCallback)(
              (loc) => {
                if (!headerData) return;
                // Update header group
                const newHeader = unProcessRowGroup(headerData);
                const newRows = [...newHeader.rows];
                // Get things to change
                const actualCol = loc.column;
                const targetCell = newRows[loc.row].cells[actualCol];
                const hideCell = newRows[loc.row].cells[actualCol + (targetCell.colSpan ?? 1) - 1];
                // Update target cell
                targetCell.colSpan = (targetCell.colSpan ?? 1) - 1;
                // Show next cell
                hideCell.colSpan = 1;
                if (hideCell.rowSpan === 0) hideCell.rowSpan = 1;
                // Done
                returnData({
                  headerData: {
                    ...newHeader,
                    rows: newRows,
                  },
                  headerDataUnprocessed: true,
                });
              },
              [headerData, columnRepeats],
            );
            // Show loading if there is nothing to see
            if (
              bodyData === undefined ||
              bodyData.length < 1 ||
              headerData === undefined || // || processedHeader === null
              rowHeaderColumns === undefined ||
              noRepeatProcessing === undefined ||
              columnRepeats === undefined
            )
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                "div",
                {
                  children: "Loading...",
                },
                void 0,
                false,
                {
                  fileName: "src/components/ait/AsupInternalTable.tsx",
                  lineNumber: 592,
                  columnNumber: 12,
                },
                undefined,
              );
            // Print the table
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _aitContext.TableSettingsContext).Provider,
              {
                value: {
                  showCellBorders: showCellBorders,
                  noRepeatProcessing: noRepeatProcessing ?? false,
                  rowHeaderColumns: rowHeaderColumns ?? 1,
                  headerRows: headerData === false ? 0 : headerData.rows.length,
                  externalLists: externalLists ?? [],
                  editable,
                  groupTemplateNames:
                    groupTemplates === false
                      ? ["None"]
                      : groupTemplates !== undefined
                      ? groupTemplates
                          .filter((g) => g.name !== undefined)
                          .map((g) => g.name)
                          .sort((a, b) => (a ?? "").localeCompare(b ?? ""))
                      : undefined,
                  commentStyles: commentStyles,
                  cellStyles: cellStyles,
                  columnRepeats: columnRepeats,
                  windowZIndex,
                  setWindowZIndex,
                  colWidthMod,
                  decimalAlignPercent,
                  defaultCellWidth,
                },
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  "div",
                  {
                    className: "ait-holder",
                    style: style,
                    children: [
                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "div",
                        {
                          children: [
                            !noTableOptions &&
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _aio.AioIconButton),
                                {
                                  id: `${id}-table-options`,
                                  tipText: "Global options",
                                  onClick: () => {
                                    setShowOptions(!showOptions);
                                  },
                                  iconName: "aio-button-settings",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/ait/AsupInternalTable.tsx",
                                  lineNumber: 630,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            showOptions &&
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                (0, _aiw.AsupInternalWindow),
                                {
                                  id: `${id}-options-window`,
                                  title: "Global options",
                                  visible: showOptions,
                                  onClose: () => {
                                    setShowOptions(false);
                                  },
                                  children: [
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aiw-body-row",
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aio.AioComment),
                                          {
                                            id: `${id}-table-comment`,
                                            label: "Notes",
                                            value: comments ?? "",
                                            setValue: editable
                                              ? (ret) => {
                                                  returnData({
                                                    comments: ret,
                                                  });
                                                }
                                              : undefined,
                                            commentStyles: commentStyles,
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/ait/AsupInternalTable.tsx",
                                            lineNumber: 649,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 648,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                    headerData !== false && headerData.rows.length === 0
                                      ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiw-body-row",
                                            children: [
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-label",
                                                  children: "Add header section: ",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName:
                                                    "src/components/ait/AsupInternalTable.tsx",
                                                  lineNumber: 665,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aiox-button-holder",
                                                  style: {
                                                    padding: "2px",
                                                  },
                                                  children: /*#__PURE__*/ (0,
                                                  _jsxDevRuntime.jsxDEV)(
                                                    "div",
                                                    {
                                                      className: "aiox-button aiox-plus",
                                                      id: `${id}-add-header`,
                                                      onClick: editable
                                                        ? () => addNewHeader()
                                                        : undefined,
                                                    },
                                                    void 0,
                                                    false,
                                                    {
                                                      fileName:
                                                        "src/components/ait/AsupInternalTable.tsx",
                                                      lineNumber: 670,
                                                      columnNumber: 21,
                                                    },
                                                    undefined,
                                                  ),
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName:
                                                    "src/components/ait/AsupInternalTable.tsx",
                                                  lineNumber: 666,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName: "src/components/ait/AsupInternalTable.tsx",
                                            lineNumber: 664,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        )
                                      : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _jsxDevRuntime.Fragment),
                                          {},
                                          void 0,
                                          false,
                                        ),
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aiw-body-row",
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aio.AioBoolean),
                                          {
                                            id: `${id}-suppress-repeats`,
                                            label: "Suppress repeats",
                                            value: noRepeatProcessing ?? false,
                                            setValue: editable
                                              ? (ret) => {
                                                  returnData({
                                                    noRepeatProcessing: ret,
                                                  });
                                                }
                                              : undefined,
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/ait/AsupInternalTable.tsx",
                                            lineNumber: 681,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 680,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aiw-body-row",
                                        children: [
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "div",
                                            {
                                              className: "aio-label",
                                              children: "Row headers: ",
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName: "src/components/ait/AsupInternalTable.tsx",
                                              lineNumber: 695,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "div",
                                            {
                                              className: "aio-ro-value",
                                              children: rowHeaderColumns ?? 1,
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName: "src/components/ait/AsupInternalTable.tsx",
                                              lineNumber: 696,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "div",
                                            {
                                              className: "aiox-button-holder",
                                              style: {
                                                padding: "2px",
                                              },
                                              children: [
                                                editable &&
                                                (rowHeaderColumns ?? 1) <
                                                  bodyData[0].rows[0].cells.length - 1
                                                  ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        id: `${id}-add-row-header-column`,
                                                        className: "aiox-button aiox-plus",
                                                        onClick: () => addRowHeaderColumn(),
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName:
                                                          "src/components/ait/AsupInternalTable.tsx",
                                                        lineNumber: 702,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    )
                                                  : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        className: "aiox-button",
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName:
                                                          "src/components/ait/AsupInternalTable.tsx",
                                                        lineNumber: 708,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    ),
                                                editable && (rowHeaderColumns ?? 1) > 0
                                                  ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        className: "aiox-button aiox-minus",
                                                        id: `${id}-remove-row-header-column`,
                                                        onClick: () => removeRowHeaderColumn(),
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName:
                                                          "src/components/ait/AsupInternalTable.tsx",
                                                        lineNumber: 711,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    )
                                                  : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        className: "aiox-button",
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName:
                                                          "src/components/ait/AsupInternalTable.tsx",
                                                        lineNumber: 717,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    ),
                                              ],
                                            },
                                            void 0,
                                            true,
                                            {
                                              fileName: "src/components/ait/AsupInternalTable.tsx",
                                              lineNumber: 697,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                        ],
                                      },
                                      void 0,
                                      true,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 694,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aiw-body-row",
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aio.AioNumber),
                                          {
                                            id: `${id}-decimal-align-percent`,
                                            label: "Decimal align percent",
                                            value: decimalAlignPercent,
                                            minValue: 0,
                                            maxValue: 100,
                                            setValue: editable
                                              ? (ret) => {
                                                  returnData({
                                                    decimalAlignPercent: ret,
                                                  });
                                                }
                                              : undefined,
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/ait/AsupInternalTable.tsx",
                                            lineNumber: 722,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 721,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                  ],
                                },
                                void 0,
                                true,
                                {
                                  fileName: "src/components/ait/AsupInternalTable.tsx",
                                  lineNumber: 640,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                          ],
                        },
                        void 0,
                        true,
                        {
                          fileName: "src/components/ait/AsupInternalTable.tsx",
                          lineNumber: 628,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "table",
                        {
                          id: id,
                          className: "ait-table",
                          children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "thead",
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aitBorderRow.AitBorderRow),
                                    {
                                      id: `${id}-top-border`,
                                      spaceAfter: true,
                                      changeColumns: editable
                                        ? {
                                            addColumn: addCol,
                                            removeColumn: remCol,
                                            showButtons: true,
                                          }
                                        : undefined,
                                      rowHeaderColumns: rowHeaderColumns,
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/AsupInternalTable.tsx",
                                      lineNumber: 745,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  headerData !== false &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _aitHeader.AitHeader),
                                      {
                                        id: `${id}-header`,
                                        aitid: headerData.aitid ?? "header",
                                        rows: headerData.rows,
                                        comments: headerData.comments,
                                        replacements: headerData.replacements,
                                        setHeaderData: editable
                                          ? (ret) => {
                                              returnData({
                                                headerData: ret,
                                              });
                                            }
                                          : undefined,
                                        setColWidth: updateColWidth,
                                        addHeaderColSpan: addHeaderColSpan,
                                        removeHeaderColSpan: removeHeaderColSpan,
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 760,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/components/ait/AsupInternalTable.tsx",
                                lineNumber: 744,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "tbody",
                              {
                                children: [
                                  bodyData.map((rowGroup, rgi) => {
                                    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _aitRowGroup.AitRowGroup),
                                      {
                                        id: `${id}-row-group-${rgi}`,
                                        aitid: rowGroup.aitid ?? `row-group-${rgi}`,
                                        rows: rowGroup.rows,
                                        comments: rowGroup.comments,
                                        replacements: rowGroup.replacements ?? [],
                                        spaceAfter: rowGroup.spaceAfter,
                                        setRowGroupData: editable
                                          ? (ret) => {
                                              updateRowGroup(ret, rgi);
                                            }
                                          : undefined,
                                        setColWidth: updateColWidth,
                                        location: {
                                          tableSection: (0, _aitInterface.AitRowType).body,
                                          rowGroup: rgi,
                                          row: -1,
                                          column: -1,
                                        },
                                        addRowGroup:
                                          groupTemplates !== false
                                            ? (rgi, templateName) => {
                                                addRowGroup(rgi, templateName);
                                              }
                                            : undefined,
                                        removeRowGroup:
                                          groupTemplates !== false && bodyData.length > 1
                                            ? (rgi) => {
                                                removeRowGroup(rgi);
                                              }
                                            : undefined,
                                      },
                                      `row-group-${rgi}-${rowGroup.aitid}`,
                                      false,
                                      {
                                        fileName: "src/components/ait/AsupInternalTable.tsx",
                                        lineNumber: 783,
                                        columnNumber: 17,
                                      },
                                      undefined,
                                    );
                                  }),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aitBorderRow.AitBorderRow),
                                    {
                                      id: `${id}-bottom-border`,
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/AsupInternalTable.tsx",
                                      lineNumber: 822,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/components/ait/AsupInternalTable.tsx",
                                lineNumber: 780,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          ],
                        },
                        void 0,
                        true,
                        {
                          fileName: "src/components/ait/AsupInternalTable.tsx",
                          lineNumber: 740,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    ],
                  },
                  void 0,
                  true,
                  {
                    fileName: "src/components/ait/AsupInternalTable.tsx",
                    lineNumber: 624,
                    columnNumber: 7,
                  },
                  undefined,
                ),
              },
              void 0,
              false,
              {
                fileName: "src/components/ait/AsupInternalTable.tsx",
                lineNumber: 597,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AsupInternalTable, "SnD7FQkyD1e3AK1trSv3ISY+i0U=");
          _c = AsupInternalTable;
          var _c;
          $RefreshReg$(_c, "AsupInternalTable");

          $parcel$ReactRefreshHelpers$5f63.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aio": "2DzvE",
        "../aiw": "j8CDd",
        "../functions": "gfVyL",
        "./ait.css": "drRf0",
        "./aitBorderRow": "lDyrj",
        "./aitContext": "i4VKL",
        "./aitHeader": "4ftF6",
        "./aitInterface": "3f6fh",
        "./aitRowGroup": "iK2qQ",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    j8CDd: [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AsupInternalWindow",
          () => (0, _asupInternalWindow.AsupInternalWindow),
        );
        var _asupInternalWindow = require("./AsupInternalWindow");
      },
      {
        "./AsupInternalWindow": "aNCiW",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    drRf0: [function () {}, {}],
    lDyrj: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$650b = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$650b.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AitBorderRow", () => AitBorderRow);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aio = require("../aio");
          var _aitContext = require("./aitContext");
          var _s = $RefreshSig$();
          const AitBorderRow = (props) => {
            _s();
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            const cis = Array.from(Array(tableSettings.columnRepeats?.length ?? 1).keys());
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  props.changeColumns &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "tr",
                      {
                        id: `${props.id}`,
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {
                              className: "ait-cell",
                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "ait-aie-holder",
                                  style: {
                                    display: "flex",
                                    justifyContent: "flex-end",
                                  },
                                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aio.AioIconButton),
                                    {
                                      id: `${props.id}-addcol-m1`,
                                      tipText: "Add column",
                                      iconName: "aiox-plus",
                                      onClick: () => {
                                        if (props.changeColumns) props.changeColumns.addColumn(-1);
                                      },
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/aitBorderRow.tsx",
                                      lineNumber: 31,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/ait/aitBorderRow.tsx",
                                  lineNumber: 27,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 26,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          cis.map((ci) => {
                            const isColumnRepeat =
                              tableSettings.columnRepeats &&
                              tableSettings.columnRepeats.length > ci &&
                              tableSettings.columnRepeats[ci].colRepeat !== undefined &&
                              tableSettings.columnRepeats[ci].colRepeat?.match(/^[[\]0,]+$/) ===
                                null;
                            if (isColumnRepeat)
                              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "td",
                                {},
                                ci,
                                false,
                                {
                                  fileName: "src/components/ait/aitBorderRow.tsx",
                                  lineNumber: 47,
                                  columnNumber: 40,
                                },
                                undefined,
                              );
                            const maxColumnIndex = tableSettings.columnRepeats
                              ? Math.max(
                                  ...tableSettings.columnRepeats.map((crep) => crep.columnIndex),
                                )
                              : 1;
                            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "td",
                              {
                                className: "ait-cell",
                                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "div",
                                  {
                                    className: "ait-aie-holder",
                                    style: {
                                      display: "flex",
                                    },
                                    children: [
                                      !(props.rowHeaderColumns === 1 && ci === 0) &&
                                        !(
                                          props.rowHeaderColumns === maxColumnIndex &&
                                          ci === props.rowHeaderColumns
                                        ) &&
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aio.AioIconButton),
                                          {
                                            id: `${props.id}-remcol-${ci}`,
                                            tipText: "Remove column",
                                            iconName: "aiox-minus",
                                            onClick: () => {
                                              if (
                                                !props.changeColumns ||
                                                !tableSettings.columnRepeats
                                              )
                                                return;
                                              props.changeColumns.removeColumn(
                                                tableSettings.columnRepeats[ci].columnIndex,
                                              );
                                            },
                                            style: {
                                              justifySelf: "start",
                                            },
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/ait/aitBorderRow.tsx",
                                            lineNumber: 64,
                                            columnNumber: 23,
                                          },
                                          undefined,
                                        ),
                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        "div",
                                        {
                                          style: {
                                            flexGrow: 1,
                                          },
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/components/ait/aitBorderRow.tsx",
                                          lineNumber: 77,
                                          columnNumber: 19,
                                        },
                                        undefined,
                                      ),
                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _aio.AioIconButton),
                                        {
                                          id: `${props.id}-addcol-${ci}`,
                                          tipText: "Add column",
                                          iconName: "aiox-plus",
                                          onClick: () => {
                                            if (
                                              !props.changeColumns ||
                                              !tableSettings.columnRepeats
                                            )
                                              return;
                                            props.changeColumns.addColumn(
                                              tableSettings.columnRepeats[ci].columnIndex,
                                            );
                                          },
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/components/ait/aitBorderRow.tsx",
                                          lineNumber: 78,
                                          columnNumber: 19,
                                        },
                                        undefined,
                                      ),
                                    ],
                                  },
                                  void 0,
                                  true,
                                  {
                                    fileName: "src/components/ait/aitBorderRow.tsx",
                                    lineNumber: 56,
                                    columnNumber: 17,
                                  },
                                  undefined,
                                ),
                              },
                              ci,
                              false,
                              {
                                fileName: "src/components/ait/aitBorderRow.tsx",
                                lineNumber: 52,
                                columnNumber: 15,
                              },
                              undefined,
                            );
                          }),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 91,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/ait/aitBorderRow.tsx",
                        lineNumber: 25,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  props.spaceBefore &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "tr",
                      {
                        id: `${props.id}-spacebeforerow`,
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 96,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          cis.map((ci) =>
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "td",
                              {
                                className: "ait-space-cell",
                              },
                              ci,
                              false,
                              {
                                fileName: "src/components/ait/aitBorderRow.tsx",
                                lineNumber: 99,
                                columnNumber: 15,
                              },
                              undefined,
                            ),
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 105,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/ait/aitBorderRow.tsx",
                        lineNumber: 95,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  !props.noBorder &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "tr",
                      {
                        id: `${props.id}-borderrow`,
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 110,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          cis.map((ci) =>
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "td",
                              {
                                className: "ait-border-cell",
                                style: {
                                  minWidth: `${props.minWidth}px`,
                                },
                              },
                              ci,
                              false,
                              {
                                fileName: "src/components/ait/aitBorderRow.tsx",
                                lineNumber: 113,
                                columnNumber: 15,
                              },
                              undefined,
                            ),
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 120,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/ait/aitBorderRow.tsx",
                        lineNumber: 109,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  props.spaceAfter &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "tr",
                      {
                        id: `${props.id}-spaceafterrow`,
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 125,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          cis.map((ci) =>
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "td",
                              {
                                className: "ait-space-cell",
                              },
                              ci,
                              false,
                              {
                                fileName: "src/components/ait/aitBorderRow.tsx",
                                lineNumber: 128,
                                columnNumber: 15,
                              },
                              undefined,
                            ),
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "td",
                            {},
                            void 0,
                            false,
                            {
                              fileName: "src/components/ait/aitBorderRow.tsx",
                              lineNumber: 134,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/components/ait/aitBorderRow.tsx",
                        lineNumber: 124,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AitBorderRow, "Rew36T0aH2UGIxY6iruSCE3WfmQ=");
          _c = AitBorderRow;
          var _c;
          $RefreshReg$(_c, "AitBorderRow");

          $parcel$ReactRefreshHelpers$650b.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aio": "2DzvE",
        "./aitContext": "i4VKL",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "4ftF6": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$194a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$194a.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AitHeader", () => AitHeader);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _functions = require("../functions");
          var _aitBorderRow = require("./aitBorderRow");
          var _aitContext = require("./aitContext");
          var _aitInterface = require("./aitInterface");
          var _aitRow = require("./aitRow");
          var _s = $RefreshSig$();
          const AitHeader = ({
            id,
            aitid,
            rows,
            comments,
            replacements,
            setHeaderData,
            setColWidth,
            addHeaderColSpan,
            removeHeaderColSpan,
          }) => {
            _s();
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            // General function to return complied object
            const returnData = (0, _react.useCallback)(
              (headerUpdate) => {
                if (setHeaderData) {
                  const r = {
                    aitid: aitid,
                    rows: headerUpdate.rows ?? rows,
                    comments: headerUpdate.comments ?? comments,
                    replacements: headerUpdate.replacements ?? replacements,
                  };
                  setHeaderData(r);
                }
              },
              [setHeaderData, aitid, rows, comments, replacements],
            );
            const addRow = (0, _react.useCallback)(
              (ri) => {
                const newrs = [...rows];
                const newr = (0, _functions.newRow)(tableSettings.defaultCellWidth, 0);
                const cols = rows[0].cells
                  .map((c) => c.colSpan ?? 1)
                  .reduce((sum, a) => sum + a, 0);
                for (let ci = 0; ci < cols; ci++) {
                  // Create new cell, use column width from row 0
                  const c = (0, _functions.newCell)(
                    rows[0].cells[ci].colWidth ?? tableSettings.defaultCellWidth,
                  );
                  // Check rowSpans on previous row
                  if ((newrs[ri].cells[ci].rowSpan ?? 1) !== 1) {
                    let riUp = 0;
                    while (riUp <= ri && newrs[ri - riUp].cells[ci].rowSpan === 0) riUp++;
                    newrs[ri - riUp].cells[ci].rowSpan =
                      (newrs[ri - riUp].cells[ci].rowSpan ?? 1) + 1;
                    c.rowSpan = 0;
                  }
                  newr.cells.push(c);
                }
                newrs.splice(ri + 1, 0, newr);
                returnData({
                  rows: newrs,
                });
              },
              [returnData, rows, tableSettings.defaultCellWidth],
            );
            const removeRow = (0, _react.useCallback)(
              (ri) => {
                const newRows = [...rows];
                // Look for any cells with multiple row span
                newRows[ri].cells.map((c, ci) => {
                  // Found hidden cell
                  if ((c.rowSpan ?? 1) > 1) {
                    // Adjust the rowSpan of the cell above
                    for (let i = 1; i < (c.rowSpan ?? 1); i++)
                      if (newRows[ri + i].cells[ci].rowSpan === 0)
                        newRows[ri + i].cells[ci].rowSpan = 1;
                  }
                  return true;
                });
                // Look for any cells with no row span
                newRows[ri].cells.map((c, ci) => {
                  let found = false;
                  // Found hidden cell
                  if (c.rowSpan === 0) {
                    let riUp = 1;
                    // Adjust the rowSpan of the cell above
                    while (!found && riUp <= ri) {
                      if ((newRows[ri - riUp].cells[ci].rowSpan ?? 1) > 1) {
                        newRows[ri - riUp].cells[ci].rowSpan =
                          (newRows[ri - riUp].cells[ci].rowSpan ?? 1) - 1;
                        found = true;
                      }
                      riUp++;
                    }
                  }
                  return found;
                });
                // Remove the row
                newRows.splice(ri, 1);
                // Check that the bottom row has no colSpan
                if (ri === newRows.length && ri > 0)
                  newRows[ri - 1].cells = newRows[ri - 1].cells.map((c) => {
                    c.colSpan = 1;
                    return c;
                  });
                // Return updated rows
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows],
            );
            const addRowSpan = (0, _react.useCallback)(
              (loc) => {
                // Get things to change
                const newRows = [...rows];
                const actualCol =
                  tableSettings.columnRepeats?.findIndex(
                    (c) => c.columnIndex === loc.column && c.colRepeat === loc.colRepeat,
                  ) ?? loc.column;
                const targetCell = newRows[loc.row].cells[actualCol];
                if (targetCell.rowSpan === undefined) targetCell.rowSpan = 1;
                const hideCell = newRows[loc.row + targetCell.rowSpan]?.cells[actualCol];
                // Check change is ok
                if (targetCell === undefined || hideCell === undefined) return;
                if (targetCell.colSpan !== 1) return;
                if (hideCell.colSpan !== 1 || hideCell.rowSpan !== 1) return;
                // Update target cell
                targetCell.rowSpan++;
                // Hide next cell
                hideCell.rowSpan = 0;
                // Done
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows, tableSettings.columnRepeats],
            );
            const removeRowSpan = (0, _react.useCallback)(
              (loc) => {
                // Get things to change
                const newRows = [...rows];
                const actualCol =
                  tableSettings.columnRepeats?.findIndex(
                    (c) => c.columnIndex === loc.column && c.colRepeat === loc.colRepeat,
                  ) ?? loc.column;
                const targetCell = newRows[loc.row].cells[actualCol];
                // Check before getting hidden cell
                if (!newRows[loc.row + (targetCell.rowSpan ?? 1) - 1]?.cells.length) return;
                const hideCell = newRows[loc.row + (targetCell.rowSpan ?? 1) - 1].cells[actualCol];
                if (hideCell.rowSpan !== 0) return;
                // Update target cell
                targetCell.rowSpan = (targetCell.rowSpan ?? 1) - 1;
                // Show hidden cell
                hideCell.rowSpan = 1;
                if (hideCell.colSpan === 0) hideCell.colSpan = 1;
                // Done
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows, tableSettings.columnRepeats],
            );
            if (rows.length === 0)
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {},
                void 0,
                false,
              );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  rows.map((row, ri) => {
                    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aitRow.AitRow),
                      {
                        id: `${id}-header-row-${ri}`,
                        aitid: row.aitid ?? `row-${ri}`,
                        cells: row.cells,
                        setRowData:
                          tableSettings.editable && typeof setHeaderData === "function"
                            ? (ret) => {
                                const newRows = [...rows];
                                newRows.splice(ri, 1, ret);
                                returnData({
                                  rows: newRows,
                                });
                              }
                            : undefined,
                        location: {
                          tableSection: (0, _aitInterface.AitRowType).header,
                          rowGroup: 0,
                          row: rows.findIndex((r) => r.aitid === row.aitid),
                          column: -1,
                          rowRepeat: undefined,
                          colRepeat: "",
                        },
                        spaceAfter: false,
                        replacements: replacements,
                        setReplacements: tableSettings.editable
                          ? (ret) =>
                              returnData({
                                replacements: ret,
                              })
                          : undefined,
                        rowGroupWindowTitle: "Header options",
                        rowGroupComments: comments ?? "",
                        updateRowGroupComments: tableSettings.editable
                          ? (ret) => {
                              returnData({
                                comments: ret,
                              });
                            }
                          : undefined,
                        addRow: tableSettings.editable ? addRow : undefined,
                        removeRow: tableSettings.editable ? removeRow : undefined,
                        addColSpan: tableSettings.editable ? addHeaderColSpan : undefined,
                        removeColSpan: tableSettings.editable ? removeHeaderColSpan : undefined,
                        setColWidth: tableSettings.editable ? setColWidth : undefined,
                        addRowSpan: tableSettings.editable ? addRowSpan : undefined,
                        removeRowSpan: tableSettings.editable ? removeRowSpan : undefined,
                      },
                      `row-${ri}-${row.aitid}`,
                      false,
                      {
                        fileName: "src/components/ait/aitHeader.tsx",
                        lineNumber: 183,
                        columnNumber: 11,
                      },
                      undefined,
                    );
                  }),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aitBorderRow.AitBorderRow),
                    {
                      id: `${id}-midtable-border`,
                      spaceBefore: true,
                      spaceAfter: true,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/ait/aitHeader.tsx",
                      lineNumber: 229,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AitHeader, "CRhFblnDrrrDrJgK9T9Xe4Z6DdI=");
          _c = AitHeader;
          var _c;
          $RefreshReg$(_c, "AitHeader");

          $parcel$ReactRefreshHelpers$194a.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../functions": "gfVyL",
        "./aitBorderRow": "lDyrj",
        "./aitContext": "i4VKL",
        "./aitInterface": "3f6fh",
        "./aitRow": "bLJNs",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "3f6fh": [
      function (require, module, exports) {
        var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(exports, "AitCellType", () => AitCellType);
        parcelHelpers.export(exports, "AitRowType", () => AitRowType);
        var AitCellType;
        (function (AitCellType) {
          AitCellType["header"] = "header";
          AitCellType["rowHeader"] = "rowHeader";
          AitCellType["body"] = "body";
        })(AitCellType || (AitCellType = {}));
        var AitRowType;
        (function (AitRowType) {
          AitRowType["header"] = "header";
          AitRowType["body"] = "body";
        })(AitRowType || (AitRowType = {}));
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    bLJNs: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$9c73 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$9c73.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AitRow", () => AitRow);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aio = require("../aio");
          var _aiw = require("../aiw");
          var _aitBorderRow = require("./aitBorderRow");
          var _aitCell = require("./aitCell");
          var _aitInterface = require("./aitInterface");
          var _aitContext = require("./aitContext");
          var _s = $RefreshSig$();
          const AitRow = ({
            id,
            aitid,
            cells,
            setRowData,
            setColWidth,
            location,
            replacements,
            setReplacements,
            rowGroupWindowTitle,
            addRowGroup,
            removeRowGroup,
            rowGroupComments,
            updateRowGroupComments,
            addRow,
            removeRow,
            spaceAfter,
            addColSpan,
            removeColSpan,
            addRowSpan,
            removeRowSpan,
            rowGroupSpace,
            setRowGroupSpace,
          }) => {
            _s();
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            const [showRowGroupOptions, setShowRowGroupOptions] = (0, _react.useState)(false);
            const editable = (0, _react.useMemo)(() => {
              return tableSettings.editable && typeof setRowData === "function";
            }, [setRowData, tableSettings.editable]);
            // General function to return complied object
            const returnData = (0, _react.useCallback)(
              (rowUpdate) => {
                if (editable && setRowData) {
                  const r = {
                    aitid: aitid,
                    cells: rowUpdate.cells ?? cells,
                  };
                  setRowData(r);
                }
              },
              [editable, setRowData, aitid, cells],
            );
            const updateCell = (0, _react.useCallback)(
              (ret, ci) => {
                // Create new object to send back
                const newCells = [...cells];
                newCells[ci] = ret;
                returnData({
                  cells: newCells,
                });
              },
              [cells, returnData],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "tr",
                    {
                      id: `${id}`,
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "td",
                          {
                            className: "ait-cell",
                            width: "50px",
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                className: "ait-aie-holder",
                                style: {
                                  display: "flex",
                                  justifyContent: "flex-end",
                                  flexDirection: "row",
                                },
                                children:
                                  location.row === 0 && !location.rowRepeat
                                    ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _jsxDevRuntime.Fragment),
                                        {
                                          children: [
                                            editable &&
                                              typeof removeRowGroup === "function" &&
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                (0, _aio.AioIconButton),
                                                {
                                                  id: `${id}-remove-rowgroup`,
                                                  tipText: "Remove row group",
                                                  iconName: "aiox-minus",
                                                  onClick: () => removeRowGroup(location.rowGroup),
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitRow.tsx",
                                                  lineNumber: 103,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            editable &&
                                              typeof addRowGroup === "function" &&
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                (0, _aio.AioIconButton),
                                                {
                                                  id: `${id}-add-rowgroup`,
                                                  tipText: "Add row group",
                                                  iconName: "aiox-plus",
                                                  onClick: (ret) => {
                                                    addRowGroup(location.rowGroup, ret);
                                                  },
                                                  menuItems: tableSettings.groupTemplateNames,
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitRow.tsx",
                                                  lineNumber: 111,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                              (0, _aio.AioIconButton),
                                              {
                                                id: `${id}-rowgroup-options`,
                                                tipText: "Row group options",
                                                iconName: "aio-button-row-group",
                                                onClick: () => {
                                                  setShowRowGroupOptions(!showRowGroupOptions);
                                                },
                                              },
                                              void 0,
                                              false,
                                              {
                                                fileName: "src/components/ait/aitRow.tsx",
                                                lineNumber: 121,
                                                columnNumber: 17,
                                              },
                                              undefined,
                                            ),
                                            showRowGroupOptions &&
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                (0, _aiw.AsupInternalWindow),
                                                {
                                                  id: `${id}-rowgroup-options-window`,
                                                  title: rowGroupWindowTitle ?? "Row group options",
                                                  visible: showRowGroupOptions,
                                                  onClose: () => {
                                                    setShowRowGroupOptions(false);
                                                  },
                                                  style: {
                                                    maxHeight: "75vh",
                                                  },
                                                  children: [
                                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        className: "aiw-body-row",
                                                        children: /*#__PURE__*/ (0,
                                                        _jsxDevRuntime.jsxDEV)(
                                                          (0, _aio.AioComment),
                                                          {
                                                            id: `${id}-rowgroup-comment`,
                                                            label: "Notes",
                                                            value: rowGroupComments,
                                                            setValue: editable
                                                              ? updateRowGroupComments
                                                              : undefined,
                                                            commentStyles:
                                                              tableSettings.commentStyles,
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitRow.tsx",
                                                            lineNumber: 142,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        ),
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName: "src/components/ait/aitRow.tsx",
                                                        lineNumber: 141,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    ),
                                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      (0, _jsxDevRuntime.Fragment),
                                                      {
                                                        children:
                                                          location.tableSection ===
                                                            (0, _aitInterface.AitRowType).body &&
                                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                            (0, _jsxDevRuntime.Fragment),
                                                            {
                                                              children: /*#__PURE__*/ (0,
                                                              _jsxDevRuntime.jsxDEV)(
                                                                "div",
                                                                {
                                                                  className: "aiw-body-row",
                                                                  children: /*#__PURE__*/ (0,
                                                                  _jsxDevRuntime.jsxDEV)(
                                                                    (0, _aio.AioBoolean),
                                                                    {
                                                                      id: `${id}-spaceafter-group`,
                                                                      label: "Space after group",
                                                                      value: rowGroupSpace ?? false,
                                                                      setValue: editable
                                                                        ? setRowGroupSpace
                                                                        : undefined,
                                                                    },
                                                                    void 0,
                                                                    false,
                                                                    {
                                                                      fileName:
                                                                        "src/components/ait/aitRow.tsx",
                                                                      lineNumber: 154,
                                                                      columnNumber: 29,
                                                                    },
                                                                    undefined,
                                                                  ),
                                                                },
                                                                void 0,
                                                                false,
                                                                {
                                                                  fileName:
                                                                    "src/components/ait/aitRow.tsx",
                                                                  lineNumber: 153,
                                                                  columnNumber: 27,
                                                                },
                                                                undefined,
                                                              ),
                                                            },
                                                            void 0,
                                                            false,
                                                          ),
                                                      },
                                                      void 0,
                                                      false,
                                                    ),
                                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                      "div",
                                                      {
                                                        className: "aiw-body-row",
                                                        children: /*#__PURE__*/ (0,
                                                        _jsxDevRuntime.jsxDEV)(
                                                          (0, _aio.AioReplacementList),
                                                          {
                                                            id: `${id}-rowgroup-replacements`,
                                                            label: "Replacements",
                                                            replacements: replacements,
                                                            setReplacements:
                                                              editable &&
                                                              typeof setReplacements === "function"
                                                                ? (ret) => {
                                                                    setReplacements(ret, location);
                                                                  }
                                                                : undefined,
                                                            externalLists:
                                                              tableSettings.externalLists,
                                                            dontAskSpace:
                                                              location.tableSection ===
                                                              (0, _aitInterface.AitRowType).header,
                                                            dontAskTrail:
                                                              location.tableSection ===
                                                              (0, _aitInterface.AitRowType).header,
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitRow.tsx",
                                                            lineNumber: 165,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        ),
                                                      },
                                                      void 0,
                                                      false,
                                                      {
                                                        fileName: "src/components/ait/aitRow.tsx",
                                                        lineNumber: 164,
                                                        columnNumber: 21,
                                                      },
                                                      undefined,
                                                    ),
                                                  ],
                                                },
                                                "RowGroup",
                                                true,
                                                {
                                                  fileName: "src/components/ait/aitRow.tsx",
                                                  lineNumber: 131,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                          ],
                                        },
                                        void 0,
                                        true,
                                      )
                                    : null,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/ait/aitRow.tsx",
                                lineNumber: 96,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/ait/aitRow.tsx",
                            lineNumber: 92,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        cells.map((cell, ci) => {
                          // Get cell from column repeat
                          const cr =
                            Array.isArray(tableSettings.columnRepeats) &&
                            tableSettings.columnRepeats.length > ci
                              ? tableSettings.columnRepeats[ci]
                              : undefined;
                          const isColumnRepeat =
                            cr !== undefined && cr.colRepeat !== undefined
                              ? cr.colRepeat.match(/^[[\]0,]+$/) === null
                              : false;
                          // Render object
                          return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _aitCell.AitCell),
                            {
                              id: `${id}-cell-${ci}`,
                              aitid: cell.aitid ?? `cell-${ci}`,
                              text: cell.text ?? `cell-${ci}`,
                              justifyText: cell.justifyText,
                              comments: cell.comments ?? "",
                              colSpan: cell.colSpan ?? 1,
                              rowSpan: cell.rowSpan ?? 1,
                              colWidth: cell.colWidth,
                              displayColWidth:
                                cell.colSpan === 1
                                  ? cell.colWidth
                                  : cells
                                      .slice(ci, ci + (cell.colSpan ?? 1))
                                      .map((c) => c.colWidth ?? tableSettings.defaultCellWidth)
                                      .reduce((a, b) => a + b, 0),
                              textIndents: cell.textIndents ?? 0,
                              replacedText: cell.replacedText,
                              repeatColSpan: cell.repeatColSpan,
                              repeatRowSpan: cell.repeatRowSpan,
                              spaceAfterSpan: cell.spaceAfterSpan,
                              location: {
                                ...location,
                                column: cr?.columnIndex ?? -1,
                                colRepeat: cr?.colRepeat,
                              },
                              setCellData:
                                editable && !isColumnRepeat && typeof addRow === "function"
                                  ? (ret) => updateCell(ret, ci)
                                  : undefined,
                              setColWidth:
                                editable && setColWidth && cell.colSpan === 1
                                  ? (ret) => setColWidth(ci, ret)
                                  : undefined,
                              readOnly: !editable || isColumnRepeat || typeof addRow !== "function",
                              addColSpan:
                                editable &&
                                !isColumnRepeat &&
                                typeof addRow === "function" &&
                                ci + (cell.colSpan ?? 1) < cells.length
                                  ? addColSpan
                                  : undefined,
                              removeColSpan:
                                editable && (cell.colSpan ?? 1) > 1 ? removeColSpan : undefined,
                              addRowSpan:
                                editable &&
                                (location.row + (cell.rowSpan ?? 1) <
                                  (tableSettings.headerRows ?? 0) ||
                                  ci < (tableSettings.rowHeaderColumns ?? 0))
                                  ? addRowSpan
                                  : undefined,
                              removeRowSpan:
                                editable && (cell.rowSpan ?? 1) > 1 ? removeRowSpan : undefined,
                              spaceAfterRepeat: cell.spaceAfterRepeat,
                            },
                            isColumnRepeat && cr
                              ? `${cell.aitid}-${JSON.stringify(cr.colRepeat)}`
                              : cell.aitid,
                            false,
                            {
                              fileName: "src/components/ait/aitRow.tsx",
                              lineNumber: 202,
                              columnNumber: 13,
                            },
                            undefined,
                          );
                        }),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "td",
                          {
                            className: "ait-cell",
                            width: "50px",
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                className: "ait-aie-holder",
                                style: {
                                  display: "flex",
                                  justifyContent: "flex-start",
                                  flexDirection: "row",
                                },
                                children: [
                                  editable &&
                                    addRow &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _aio.AioIconButton),
                                      {
                                        id: `${id}-add-row`,
                                        tipText: "Add row",
                                        iconName: "aiox-plus",
                                        onClick: () => {
                                          addRow(location.row);
                                        },
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitRow.tsx",
                                        lineNumber: 270,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                  editable &&
                                    removeRow &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _aio.AioIconButton),
                                      {
                                        id: `${id}-remove-row`,
                                        tipText: "Remove row",
                                        iconName: "aiox-minus",
                                        onClick: () => {
                                          removeRow(location.row);
                                        },
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitRow.tsx",
                                        lineNumber: 280,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/components/ait/aitRow.tsx",
                                lineNumber: 265,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/ait/aitRow.tsx",
                            lineNumber: 261,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/ait/aitRow.tsx",
                      lineNumber: 90,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  spaceAfter !== false &&
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      (0, _aitBorderRow.AitBorderRow),
                      {
                        id: `${id}-spaceafter-row`,
                        spaceAfter: true,
                        noBorder: true,
                      },
                      void 0,
                      false,
                      {
                        fileName: "src/components/ait/aitRow.tsx",
                        lineNumber: 294,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AitRow, "KT88ExKam20h7rumnuQKwMSBnYw=");
          _c = AitRow;
          var _c;
          $RefreshReg$(_c, "AitRow");

          $parcel$ReactRefreshHelpers$9c73.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aio": "2DzvE",
        "../aiw": "j8CDd",
        "./aitBorderRow": "lDyrj",
        "./aitCell": "d7OOj",
        "./aitInterface": "3f6fh",
        "./aitContext": "i4VKL",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    d7OOj: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$610a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$610a.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AitCell", () => AitCell);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _aie = require("../aie");
          var _aio = require("../aio");
          var _aiw = require("../aiw");
          var _aitInterface = require("./aitInterface");
          var _aitContext = require("./aitContext");
          var _s = $RefreshSig$();
          const AitCell = ({
            id,
            aitid,
            text,
            justifyText,
            comments,
            colSpan,
            rowSpan,
            colWidth,
            displayColWidth,
            textIndents,
            replacedText,
            repeatColSpan,
            repeatRowSpan,
            setCellData,
            setColWidth,
            readOnly,
            location,
            addColSpan,
            removeColSpan,
            addRowSpan,
            removeRowSpan,
            spaceAfterRepeat,
            spaceAfterSpan,
          }) => {
            _s();
            // Context
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            // Data holder
            const [displayText, setDisplayText] = (0, _react.useState)(
              replacedText !== undefined ? replacedText : text,
            );
            /* Need to update if these change */ (0, _react.useEffect)(
              () => setDisplayText(replacedText !== undefined ? replacedText : text),
              [replacedText, text],
            );
            const [buttonState, setButtonState] = (0, _react.useState)("hidden");
            const [showCellOptions, setShowCellOptions] = (0, _react.useState)(false);
            // Static options/variables
            const currentReadOnly = (0, _react.useMemo)(() => {
              return (
                !tableSettings.editable ||
                readOnly ||
                typeof setCellData !== "function" ||
                replacedText !== undefined
              );
            }, [readOnly, replacedText, setCellData, tableSettings.editable]);
            const isNotRepeat = (0, _react.useMemo)(
              () =>
                (location.colRepeat === undefined ||
                  location.colRepeat.match(/^[[\]0,]+$/) !== null) &&
                (location.rowRepeat === undefined ||
                  location.rowRepeat.match(/^[[\]0,]+$/) !== null),
              [location],
            );
            const cellType = (0, _react.useMemo)(() => {
              const cellType =
                location.tableSection === (0, _aitInterface.AitRowType).body &&
                location.column < (tableSettings.rowHeaderColumns ?? 0)
                  ? (0, _aitInterface.AitCellType).rowHeader
                  : location.tableSection === (0, _aitInterface.AitRowType).header
                  ? (0, _aitInterface.AitCellType).header
                  : (0, _aitInterface.AitCellType).body;
              return cellType;
            }, [location.column, location.tableSection, tableSettings.rowHeaderColumns]);
            // Update cell style when options change
            const cellStyle = (0, _react.useMemo)(() => {
              return {
                overflow: "visible",
                width: `${
                  tableSettings.colWidthMod * (colWidth ?? tableSettings.defaultCellWidth)
                }px`,
                paddingLeft:
                  cellType === (0, _aitInterface.AitCellType).rowHeader && textIndents !== undefined
                    ? `${textIndents}rem`
                    : undefined,
                borderLeft: tableSettings.showCellBorders ? "1px dashed burlywood" : "",
                borderBottom: tableSettings.showCellBorders ? "1px dashed burlywood" : "",
                borderRight:
                  tableSettings.showCellBorders &&
                  location.column === (tableSettings.rowHeaderColumns ?? 0) - colSpan
                    ? "1px solid burlywood"
                    : tableSettings.showCellBorders
                    ? "1px dashed burlywood"
                    : "",
                borderTop:
                  tableSettings.showCellBorders && location.row === 0 && location.rowGroup > 0
                    ? "1px solid burlywood"
                    : tableSettings.showCellBorders
                    ? "1px dashed burlywood"
                    : "",
              };
            }, [
              tableSettings.colWidthMod,
              tableSettings.defaultCellWidth,
              tableSettings.showCellBorders,
              tableSettings.rowHeaderColumns,
              colWidth,
              cellType,
              textIndents,
              location.column,
              location.row,
              location.rowGroup,
              colSpan,
            ]);
            /** Callback for update to any cell data */ const returnData = (0, _react.useCallback)(
              (cellUpdate) => {
                if (typeof setCellData !== "function") return;
                const r = {
                  aitid: aitid,
                  text: cellUpdate.text ?? text,
                  justifyText:
                    cellUpdate.justifyText === null
                      ? undefined
                      : cellUpdate.justifyText ?? justifyText,
                  comments: cellUpdate.comments ?? comments,
                  colSpan: colSpan,
                  rowSpan: rowSpan,
                  colWidth: cellUpdate.colWidth ?? colWidth,
                  textIndents: cellUpdate.textIndents ?? textIndents ?? 0,
                  replacedText: replacedText,
                  repeatColSpan: repeatColSpan,
                  repeatRowSpan: repeatRowSpan,
                  spaceAfterRepeat: spaceAfterRepeat,
                  spaceAfterSpan: spaceAfterSpan,
                };
                setCellData(r);
              },
              [
                aitid,
                colSpan,
                colWidth,
                comments,
                justifyText,
                repeatColSpan,
                repeatRowSpan,
                replacedText,
                rowSpan,
                setCellData,
                spaceAfterRepeat,
                spaceAfterSpan,
                text,
                textIndents,
              ],
            );
            // Show hide/buttons that trigger windows
            const aitShowButtons = () => {
              setButtonState("");
            };
            const aitHideButtons = () => {
              setButtonState("hidden");
            };
            // Do not render if there is no rowSpan or colSpan
            if (colSpan === 0 || rowSpan === 0 || repeatColSpan === 0 || repeatRowSpan === 0)
              return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                (0, _jsxDevRuntime.Fragment),
                {},
                void 0,
                false,
              );
            // Render element
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "td",
              {
                id: id,
                className: [
                  "ait-cell",
                  cellType === (0, _aitInterface.AitCellType).header
                    ? "ait-header-cell"
                    : cellType === (0, _aitInterface.AitCellType).rowHeader
                    ? "ait-row-header-cell"
                    : "ait-body-cell",
                  currentReadOnly ? "ait-readonly-cell" : "",
                ].join(" "),
                colSpan: repeatColSpan ?? colSpan ?? 1,
                rowSpan: (repeatRowSpan ?? rowSpan ?? 1) + (spaceAfterSpan ?? 0),
                style: cellStyle,
                "data-location-table-section": location.tableSection,
                "data-location-row-group": location.rowGroup,
                "data-location-row": location.row,
                "data-location-cell": location.column,
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      className: "ait-aie-holder",
                      onMouseOver: aitShowButtons,
                      onMouseLeave: aitHideButtons,
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _jsxDevRuntime.Fragment),
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "div",
                              {
                                style: {
                                  position: "absolute",
                                  right: "-8px",
                                  visibility: buttonState === "hidden" ? "hidden" : "visible",
                                },
                                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _aio.AioIconButton),
                                  {
                                    id: `${id}-options`,
                                    tipText: "Cell Options",
                                    onClick: () => setShowCellOptions(!showCellOptions),
                                    iconName: "aio-button-cell",
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/ait/aitCell.tsx",
                                    lineNumber: 234,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/components/ait/aitCell.tsx",
                                lineNumber: 226,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _aie.AsupInternalEditor),
                          {
                            id: `${id}-editor`,
                            style: {
                              width: "100%",
                              height: "100%",
                              border: "none",
                            },
                            textAlignment:
                              !justifyText || justifyText === "default"
                                ? location.column < (tableSettings.rowHeaderColumns ?? 0)
                                  ? "left"
                                  : "center"
                                : justifyText,
                            value: displayText,
                            setValue: (ret) => {
                              setDisplayText(ret);
                              returnData({
                                text: ret.trimStart(),
                              });
                            },
                            editable: !currentReadOnly,
                            showStyleButtons: tableSettings.cellStyles !== undefined,
                            styleMap: tableSettings.cellStyles,
                            decimalAlignPercent: tableSettings.decimalAlignPercent,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/components/ait/aitCell.tsx",
                            lineNumber: 244,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/ait/aitCell.tsx",
                      lineNumber: 220,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      children:
                        showCellOptions &&
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _aiw.AsupInternalWindow),
                          {
                            id: `${id}-window`,
                            title: "Cell options",
                            visible: showCellOptions,
                            onClose: () => {
                              setShowCellOptions(false);
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiw-body-row",
                                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aio.AioComment),
                                    {
                                      id: `${id}-notes`,
                                      label: "Notes",
                                      value: comments,
                                      setValue:
                                        !currentReadOnly && isNotRepeat
                                          ? (ret) =>
                                              returnData({
                                                comments: ret,
                                              })
                                          : undefined,
                                      commentStyles: tableSettings.commentStyles,
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/aitCell.tsx",
                                      lineNumber: 279,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/ait/aitCell.tsx",
                                  lineNumber: 278,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiw-body-row",
                                  children: [
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aio-label",
                                        children: "Cell location: ",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitCell.tsx",
                                        lineNumber: 292,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aio-value",
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aio.AioExpander),
                                          {
                                            id: `${id}-location`,
                                            inputObject: location,
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/components/ait/aitCell.tsx",
                                            lineNumber: 294,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitCell.tsx",
                                        lineNumber: 293,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                  ],
                                },
                                void 0,
                                true,
                                {
                                  fileName: "src/components/ait/aitCell.tsx",
                                  lineNumber: 291,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiw-body-row",
                                  children: [
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        className: "aio-label",
                                        children: "Unprocessed text: ",
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitCell.tsx",
                                        lineNumber: 301,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      (0, _aie.AsupInternalEditor),
                                      {
                                        id: `${id}-unprocessed`,
                                        value: text,
                                        setValue:
                                          !readOnly &&
                                          setCellData &&
                                          isNotRepeat &&
                                          tableSettings.editable
                                            ? (ret) =>
                                                returnData({
                                                  text: ret,
                                                })
                                            : undefined,
                                        style:
                                          !readOnly &&
                                          setCellData &&
                                          isNotRepeat &&
                                          tableSettings.editable
                                            ? {
                                                border: "1px solid black",
                                                backgroundColor: "white",
                                                borderRadius: "2px",
                                                marginRight: "0.5rem",
                                                paddingBottom: "4px",
                                              }
                                            : {
                                                border: 0,
                                              },
                                        showStyleButtons: tableSettings.cellStyles !== undefined,
                                        styleMap: tableSettings.cellStyles,
                                        textAlignment: justifyText,
                                        decimalAlignPercent: tableSettings.decimalAlignPercent,
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/components/ait/aitCell.tsx",
                                        lineNumber: 302,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                  ],
                                },
                                void 0,
                                true,
                                {
                                  fileName: "src/components/ait/aitCell.tsx",
                                  lineNumber: 300,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiw-body-row",
                                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aio.AioSelect),
                                    {
                                      id: `${id}-justify`,
                                      label: "Justify text",
                                      value:
                                        justifyText === undefined
                                          ? "Default"
                                          : justifyText.charAt(0).toUpperCase() +
                                            justifyText.substring(1),
                                      availableValues: [
                                        "Default",
                                        "Left",
                                        "Center",
                                        "Right",
                                        "Decimal",
                                      ],
                                      setValue:
                                        !currentReadOnly && isNotRepeat
                                          ? (ret) => {
                                              let newJ = undefined;
                                              switch (ret) {
                                                case "Left":
                                                  newJ = "left";
                                                  break;
                                                case "Right":
                                                  newJ = "right";
                                                  break;
                                                case "Center":
                                                  newJ = "center";
                                                  break;
                                                case "Decimal":
                                                  newJ = "decimal";
                                                  break;
                                                case "Default":
                                                  newJ = null;
                                                  break;
                                                default:
                                                  break;
                                              }
                                              returnData({
                                                justifyText: newJ,
                                              });
                                            }
                                          : undefined,
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/aitCell.tsx",
                                      lineNumber: 328,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/ait/aitCell.tsx",
                                  lineNumber: 327,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              cellType === (0, _aitInterface.AitCellType).header
                                ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _jsxDevRuntime.Fragment),
                                    {
                                      children: [
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiw-body-row",
                                            children: [
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-label",
                                                  children: "Row span: ",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 373,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-ro-value",
                                                  children: repeatRowSpan ?? rowSpan ?? 1,
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 374,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aiox-button-holder",
                                                  style: {
                                                    padding: "2px",
                                                  },
                                                  children: [
                                                    repeatRowSpan === undefined &&
                                                    !currentReadOnly &&
                                                    isNotRepeat &&
                                                    typeof addRowSpan === "function" &&
                                                    colSpan === 1
                                                      ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            id: `${id}-add-rowspan`,
                                                            className: "aiox-button aiox-plus",
                                                            onClick: () => addRowSpan(location),
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 384,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        )
                                                      : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            className: "aiox-button",
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 390,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        ),
                                                    repeatRowSpan === undefined &&
                                                      !currentReadOnly &&
                                                      isNotRepeat &&
                                                      typeof removeRowSpan === "function" &&
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          id: `${id}-remove-rowspan`,
                                                          className: "aiox-button aiox-minus",
                                                          onClick: () => removeRowSpan(location),
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/ait/aitCell.tsx",
                                                          lineNumber: 396,
                                                          columnNumber: 25,
                                                        },
                                                        undefined,
                                                      ),
                                                  ],
                                                },
                                                void 0,
                                                true,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 375,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName: "src/components/ait/aitCell.tsx",
                                            lineNumber: 372,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiw-body-row",
                                            children: [
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-label",
                                                  children: "Column span: ",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 405,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-ro-value",
                                                  children: repeatColSpan ?? colSpan ?? 1,
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 406,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aiox-button-holder",
                                                  style: {
                                                    padding: "2px",
                                                  },
                                                  children: [
                                                    repeatColSpan === undefined &&
                                                    !currentReadOnly &&
                                                    isNotRepeat &&
                                                    typeof addColSpan === "function" &&
                                                    rowSpan === 1
                                                      ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            id: `${id}-add-colspan`,
                                                            className: "aiox-button aiox-plus",
                                                            onClick: () => addColSpan(location),
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 416,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        )
                                                      : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            className: "aiox-button",
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 422,
                                                            columnNumber: 23,
                                                          },
                                                          undefined,
                                                        ),
                                                    repeatColSpan === undefined &&
                                                      !currentReadOnly &&
                                                      isNotRepeat &&
                                                      typeof removeColSpan === "function" &&
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          id: `${id}-remove-colspan`,
                                                          className: "aiox-button aiox-minus",
                                                          onClick: () => removeColSpan(location),
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/ait/aitCell.tsx",
                                                          lineNumber: 428,
                                                          columnNumber: 25,
                                                        },
                                                        undefined,
                                                      ),
                                                  ],
                                                },
                                                void 0,
                                                true,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 407,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName: "src/components/ait/aitCell.tsx",
                                            lineNumber: 404,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      ],
                                    },
                                    void 0,
                                    true,
                                  )
                                : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _jsxDevRuntime.Fragment),
                                    {},
                                    void 0,
                                    false,
                                  ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiw-body-row",
                                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _aio.AioNumber),
                                    {
                                      id: `${id}-width`,
                                      label: "Width (mm)",
                                      value: displayColWidth ?? tableSettings.defaultCellWidth,
                                      setValue:
                                        !currentReadOnly && setColWidth
                                          ? (ret) => setColWidth(ret)
                                          : undefined,
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/components/ait/aitCell.tsx",
                                      lineNumber: 441,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/components/ait/aitCell.tsx",
                                  lineNumber: 440,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                              cellType === (0, _aitInterface.AitCellType).rowHeader
                                ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _jsxDevRuntime.Fragment),
                                    {
                                      children: [
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiw-body-row",
                                            children: [
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-label",
                                                  children: "Text indents: ",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 451,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-ro-value",
                                                  children: textIndents ?? 0,
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 452,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              !currentReadOnly &&
                                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  "div",
                                                  {
                                                    className: "aiox-button-holder",
                                                    style: {
                                                      padding: "2px",
                                                    },
                                                    children: [
                                                      /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                        "div",
                                                        {
                                                          id: `${id}-add-text-indent`,
                                                          className: "aiox-button aiox-plus",
                                                          onClick: () =>
                                                            returnData({
                                                              textIndents: (textIndents ?? 0) + 1,
                                                            }),
                                                        },
                                                        void 0,
                                                        false,
                                                        {
                                                          fileName:
                                                            "src/components/ait/aitCell.tsx",
                                                          lineNumber: 458,
                                                          columnNumber: 23,
                                                        },
                                                        undefined,
                                                      ),
                                                      (textIndents ?? 0) > 0 &&
                                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            id: `${id}-remove-text-indent`,
                                                            className: "aiox-button aiox-minus",
                                                            onClick: () =>
                                                              returnData({
                                                                textIndents: (textIndents ?? 0) - 1,
                                                              }),
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 464,
                                                            columnNumber: 25,
                                                          },
                                                          undefined,
                                                        ),
                                                    ],
                                                  },
                                                  void 0,
                                                  true,
                                                  {
                                                    fileName: "src/components/ait/aitCell.tsx",
                                                    lineNumber: 454,
                                                    columnNumber: 21,
                                                  },
                                                  undefined,
                                                ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName: "src/components/ait/aitCell.tsx",
                                            lineNumber: 450,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          "div",
                                          {
                                            className: "aiw-body-row",
                                            children: [
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-label",
                                                  children: "Row span: ",
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 474,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                "div",
                                                {
                                                  className: "aio-ro-value",
                                                  children: rowSpan ?? 1,
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/components/ait/aitCell.tsx",
                                                  lineNumber: 475,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                              !currentReadOnly &&
                                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                  "div",
                                                  {
                                                    className: "aiox-button-holder",
                                                    style: {
                                                      padding: "2px",
                                                    },
                                                    children: [
                                                      isNotRepeat &&
                                                      typeof addRowSpan === "function" &&
                                                      colSpan === 1
                                                        ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                            "div",
                                                            {
                                                              id: `${id}-add-rowspan`,
                                                              className: "aiox-button aiox-plus",
                                                              onClick: () => addRowSpan(location),
                                                            },
                                                            void 0,
                                                            false,
                                                            {
                                                              fileName:
                                                                "src/components/ait/aitCell.tsx",
                                                              lineNumber: 482,
                                                              columnNumber: 25,
                                                            },
                                                            undefined,
                                                          )
                                                        : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                            "div",
                                                            {
                                                              className: "aiox-button",
                                                            },
                                                            void 0,
                                                            false,
                                                            {
                                                              fileName:
                                                                "src/components/ait/aitCell.tsx",
                                                              lineNumber: 488,
                                                              columnNumber: 25,
                                                            },
                                                            undefined,
                                                          ),
                                                      isNotRepeat &&
                                                        typeof removeRowSpan === "function" &&
                                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                          "div",
                                                          {
                                                            id: `${id}-remove-rowspan`,
                                                            className: "aiox-button aiox-minus",
                                                            onClick: () => removeRowSpan(location),
                                                          },
                                                          void 0,
                                                          false,
                                                          {
                                                            fileName:
                                                              "src/components/ait/aitCell.tsx",
                                                            lineNumber: 491,
                                                            columnNumber: 25,
                                                          },
                                                          undefined,
                                                        ),
                                                    ],
                                                  },
                                                  void 0,
                                                  true,
                                                  {
                                                    fileName: "src/components/ait/aitCell.tsx",
                                                    lineNumber: 477,
                                                    columnNumber: 21,
                                                  },
                                                  undefined,
                                                ),
                                            ],
                                          },
                                          void 0,
                                          true,
                                          {
                                            fileName: "src/components/ait/aitCell.tsx",
                                            lineNumber: 473,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      ],
                                    },
                                    void 0,
                                    true,
                                  )
                                : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    (0, _jsxDevRuntime.Fragment),
                                    {},
                                    void 0,
                                    false,
                                  ),
                            ],
                          },
                          "Cell",
                          true,
                          {
                            fileName: "src/components/ait/aitCell.tsx",
                            lineNumber: 269,
                            columnNumber: 11,
                          },
                          undefined,
                        ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/ait/aitCell.tsx",
                      lineNumber: 266,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/components/ait/aitCell.tsx",
                lineNumber: 201,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(AitCell, "rhUM9iX4As2y3qKAKuLUPo9xBQ4=");
          _c = AitCell;
          var _c;
          $RefreshReg$(_c, "AitCell");

          $parcel$ReactRefreshHelpers$610a.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../aie": "lfTjR",
        "../aio": "2DzvE",
        "../aiw": "j8CDd",
        "./aitInterface": "3f6fh",
        "./aitContext": "i4VKL",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    iK2qQ: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$3925 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$3925.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AitRowGroup", () => AitRowGroup);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _functions = require("../functions");
          var _aitContext = require("./aitContext");
          var _aitRow = require("./aitRow");
          var _s = $RefreshSig$();
          const AitRowGroup = ({
            id,
            aitid,
            location,
            rows,
            comments,
            replacements,
            spaceAfter,
            setRowGroupData,
            setColWidth,
            addRowGroup,
            removeRowGroup,
          }) => {
            _s();
            const tableSettings = (0, _react.useContext)((0, _aitContext.TableSettingsContext));
            // General function to return complied object
            const returnData = (0, _react.useCallback)(
              (rowGroupUpdate) => {
                if (tableSettings.editable && setRowGroupData) {
                  const r = {
                    aitid: aitid,
                    rows: rowGroupUpdate.rows ?? rows,
                    comments: rowGroupUpdate.comments ?? comments,
                    replacements: rowGroupUpdate.replacements ?? replacements,
                    spaceAfter: rowGroupUpdate.spaceAfter ?? spaceAfter,
                  };
                  setRowGroupData(r);
                }
              },
              [
                tableSettings.editable,
                setRowGroupData,
                aitid,
                rows,
                comments,
                replacements,
                spaceAfter,
              ],
            );
            // Update row
            const updateRow = (0, _react.useCallback)(
              (ret, ri) => {
                // Do nothing if readonly
                if (tableSettings.editable && setRowGroupData) {
                  // Filter out repeat cells
                  const newRows = [...rows];
                  // Create new object to send back
                  newRows[ri] = ret;
                  returnData({
                    rows: newRows,
                  });
                }
              },
              [tableSettings.editable, setRowGroupData, rows, returnData],
            );
            const addRow = (0, _react.useCallback)(
              (ri) => {
                const newrs = [...rows];
                const newr = (0, _functions.newRow)(tableSettings.defaultCellWidth, 0);
                const cols = rows[0].cells
                  .map((c) => c.colSpan ?? 1)
                  .reduce((sum, a) => sum + a, 0);
                for (let ci = 0; ci < cols; ci++) {
                  // Create new cell, use column width from row 0
                  const c = (0, _functions.newCell)(
                    rows[0].cells[ci].colWidth ?? tableSettings.defaultCellWidth,
                  );
                  // Check rowSpans on previous row
                  if ((newrs[ri].cells[ci].rowSpan ?? 1) !== 1) {
                    let riUp = 0;
                    while (riUp <= ri && newrs[ri - riUp].cells[ci].rowSpan === 0) riUp++;
                    newrs[ri - riUp].cells[ci].rowSpan =
                      (newrs[ri - riUp].cells[ci].rowSpan ?? 1) + 1;
                    c.rowSpan = 0;
                  }
                  newr.cells.push(c);
                }
                newrs.splice(ri + 1, 0, newr);
                returnData({
                  rows: newrs,
                });
              },
              [returnData, rows, tableSettings.defaultCellWidth],
            );
            const removeRow = (0, _react.useCallback)(
              (ri) => {
                const newRows = [...rows];
                // Look for any cells with multiple row span
                newRows[ri].cells.map((c, ci) => {
                  // Found hidden cell
                  if ((c.rowSpan ?? 1) > 1) {
                    // Adjust the rowSpan of the cell above
                    for (let i = 1; i < (c.rowSpan ?? 1); i++)
                      if (newRows[ri + i].cells[ci].rowSpan === 0)
                        newRows[ri + i].cells[ci].rowSpan = 1;
                  }
                  return true;
                });
                // Look for any cells with no row span
                newRows[ri].cells.map((c, ci) => {
                  let found = false;
                  // Found hidden cell
                  if (c.rowSpan === 0) {
                    let riUp = 1;
                    // Adjust the rowSpan of the cell above
                    while (!found && riUp <= ri) {
                      if ((newRows[ri - riUp].cells[ci].rowSpan ?? 1) > 1) {
                        newRows[ri - riUp].cells[ci].rowSpan =
                          (newRows[ri - riUp].cells[ci].rowSpan ?? 1) - 1;
                        found = true;
                      }
                      riUp++;
                    }
                  }
                  return found;
                });
                newRows.splice(ri, 1);
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows],
            );
            const addRowSpan = (0, _react.useCallback)(
              (loc) => {
                // Get things to change
                const newRows = [...rows];
                const actualCol =
                  tableSettings.columnRepeats?.findIndex(
                    (c) => c.columnIndex === loc.column && c.colRepeat === loc.colRepeat,
                  ) ?? loc.column;
                const targetCell = newRows[loc.row].cells[actualCol];
                if (targetCell.rowSpan === undefined) targetCell.rowSpan = 1;
                const hideCell = newRows[loc.row + targetCell.rowSpan]?.cells[actualCol];
                // Check change is ok
                if (targetCell === undefined || hideCell === undefined) return;
                if (targetCell.colSpan !== 1) return;
                if (hideCell.colSpan !== 1 || hideCell.rowSpan !== 1) return;
                // Check previous rowspan
                let riUp = 0;
                while (
                  loc.column > 0 &&
                  newRows[loc.row - riUp].cells[loc.column - 1].rowSpan === 0
                )
                  riUp++;
                if (
                  loc.column > 0 &&
                  (newRows[loc.row - riUp].cells[loc.column - 1].rowSpan ?? 1) - riUp <
                    targetCell.rowSpan + 1
                )
                  return;
                // Update target cell
                targetCell.rowSpan++;
                // Hide next cell
                hideCell.rowSpan = 0;
                // Done
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows, tableSettings.columnRepeats],
            );
            const removeRowSpan = (0, _react.useCallback)(
              (loc) => {
                // Get things to change
                const newRows = [...rows];
                const actualCol =
                  tableSettings.columnRepeats?.findIndex(
                    (c) => c.columnIndex === loc.column && c.colRepeat === loc.colRepeat,
                  ) ?? loc.column;
                const targetCell = newRows[loc.row].cells[actualCol];
                // Check before getting hidden cell
                if (!newRows[loc.row + (targetCell.rowSpan ?? 1) - 1]?.cells.length) return;
                const hideCell = newRows[loc.row + (targetCell.rowSpan ?? 1) - 1].cells[actualCol];
                if (hideCell.rowSpan !== 0) return;
                // Check next column is not expanded
                if (
                  newRows[loc.row + (targetCell.rowSpan ?? 1) - 1].cells[loc.column + 1].rowSpan ===
                  0
                )
                  return;
                // Update target cell
                targetCell.rowSpan = (targetCell.rowSpan ?? 1) - 1;
                // Show hidden cell
                hideCell.rowSpan = 1;
                if (hideCell.colSpan === 0) hideCell.colSpan = 1;
                // Done
                returnData({
                  rows: newRows,
                });
              },
              [returnData, rows, tableSettings.columnRepeats],
            );
            // Output the rows
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: rows.map((row, ri) => {
                  return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aitRow.AitRow),
                    {
                      id: `${id}-row-${ri}`,
                      aitid: row.aitid ?? ri.toString(),
                      cells: row.cells,
                      setRowData: tableSettings.editable
                        ? (ret) =>
                            updateRow(
                              ret,
                              rows.findIndex((r) => r.aitid === row.aitid),
                            )
                        : undefined,
                      setColWidth: tableSettings.editable ? setColWidth : undefined,
                      location: {
                        ...location,
                        row: rows.findIndex((r) => r.aitid === row.aitid),
                        rowRepeat: !row.rowRepeat?.match(/^[[\]0,]+$/) ? row.rowRepeat : undefined,
                      },
                      replacements: replacements,
                      setReplacements: tableSettings.editable
                        ? (ret) =>
                            returnData({
                              replacements: ret,
                            })
                        : undefined,
                      addRowGroup: tableSettings.editable ? addRowGroup : undefined,
                      removeRowGroup: tableSettings.editable ? removeRowGroup : undefined,
                      rowGroupComments: comments ?? "",
                      updateRowGroupComments: tableSettings.editable
                        ? (ret) => {
                            returnData({
                              comments: ret,
                            });
                          }
                        : undefined,
                      addRow:
                        (tableSettings.editable && row.rowRepeat?.match(/^[[\]0,]+$/)) ||
                        row.rowRepeat === undefined
                          ? addRow
                          : undefined,
                      removeRow:
                        tableSettings.editable &&
                        rows.filter((r) => (r.rowRepeat ?? "0").match(/^[[\]0,]+$/) !== null)
                          .length > 1 &&
                        (row.rowRepeat?.match(/^[[\]0,]+$/) || row.rowRepeat === undefined)
                          ? removeRow
                          : undefined,
                      spaceAfter: row.spaceAfter ?? false,
                      rowGroupSpace: spaceAfter,
                      setRowGroupSpace: tableSettings.editable
                        ? (ret) =>
                            returnData({
                              spaceAfter: ret,
                            })
                        : undefined,
                      addRowSpan: tableSettings.editable ? addRowSpan : undefined,
                      removeRowSpan: tableSettings.editable ? removeRowSpan : undefined,
                    },
                    row.rowRepeat?.match(/^[[\]0,]+$/) || row.rowRepeat === undefined
                      ? row.aitid
                      : row.aitid + row.rowRepeat,
                    false,
                    {
                      fileName: "src/components/ait/aitRowGroup.tsx",
                      lineNumber: 207,
                      columnNumber: 11,
                    },
                    undefined,
                  );
                }),
              },
              void 0,
              false,
            );
          };
          _s(AitRowGroup, "B7+DQmpsHiy5oziRNts7JK7ywLE=");
          _c = AitRowGroup;
          var _c;
          $RefreshReg$(_c, "AitRowGroup");

          $parcel$ReactRefreshHelpers$3925.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../functions": "gfVyL",
        "./aitContext": "i4VKL",
        "./aitRow": "bLJNs",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "9xmpe": [
      function (require, module, exports) {
        /**
         * React Router DOM v6.22.3
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AbortedDeferredError",
          () => (0, _reactRouter.AbortedDeferredError),
        );
        parcelHelpers.export(exports, "Await", () => (0, _reactRouter.Await));
        parcelHelpers.export(exports, "MemoryRouter", () => (0, _reactRouter.MemoryRouter));
        parcelHelpers.export(exports, "Navigate", () => (0, _reactRouter.Navigate));
        parcelHelpers.export(exports, "NavigationType", () => (0, _reactRouter.NavigationType));
        parcelHelpers.export(exports, "Outlet", () => (0, _reactRouter.Outlet));
        parcelHelpers.export(exports, "Route", () => (0, _reactRouter.Route));
        parcelHelpers.export(exports, "Router", () => (0, _reactRouter.Router));
        parcelHelpers.export(exports, "Routes", () => (0, _reactRouter.Routes));
        parcelHelpers.export(
          exports,
          "UNSAFE_DataRouterContext",
          () => (0, _reactRouter.UNSAFE_DataRouterContext),
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_DataRouterStateContext",
          () => (0, _reactRouter.UNSAFE_DataRouterStateContext),
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_LocationContext",
          () => (0, _reactRouter.UNSAFE_LocationContext),
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_NavigationContext",
          () => (0, _reactRouter.UNSAFE_NavigationContext),
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_RouteContext",
          () => (0, _reactRouter.UNSAFE_RouteContext),
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_useRouteId",
          () => (0, _reactRouter.UNSAFE_useRouteId),
        );
        parcelHelpers.export(
          exports,
          "createMemoryRouter",
          () => (0, _reactRouter.createMemoryRouter),
        );
        parcelHelpers.export(exports, "createPath", () => (0, _reactRouter.createPath));
        parcelHelpers.export(
          exports,
          "createRoutesFromChildren",
          () => (0, _reactRouter.createRoutesFromChildren),
        );
        parcelHelpers.export(
          exports,
          "createRoutesFromElements",
          () => (0, _reactRouter.createRoutesFromElements),
        );
        parcelHelpers.export(exports, "defer", () => (0, _reactRouter.defer));
        parcelHelpers.export(exports, "generatePath", () => (0, _reactRouter.generatePath));
        parcelHelpers.export(
          exports,
          "isRouteErrorResponse",
          () => (0, _reactRouter.isRouteErrorResponse),
        );
        parcelHelpers.export(exports, "json", () => (0, _reactRouter.json));
        parcelHelpers.export(exports, "matchPath", () => (0, _reactRouter.matchPath));
        parcelHelpers.export(exports, "matchRoutes", () => (0, _reactRouter.matchRoutes));
        parcelHelpers.export(exports, "parsePath", () => (0, _reactRouter.parsePath));
        parcelHelpers.export(exports, "redirect", () => (0, _reactRouter.redirect));
        parcelHelpers.export(exports, "redirectDocument", () => (0, _reactRouter.redirectDocument));
        parcelHelpers.export(exports, "renderMatches", () => (0, _reactRouter.renderMatches));
        parcelHelpers.export(exports, "resolvePath", () => (0, _reactRouter.resolvePath));
        parcelHelpers.export(exports, "useActionData", () => (0, _reactRouter.useActionData));
        parcelHelpers.export(exports, "useAsyncError", () => (0, _reactRouter.useAsyncError));
        parcelHelpers.export(exports, "useAsyncValue", () => (0, _reactRouter.useAsyncValue));
        parcelHelpers.export(exports, "useBlocker", () => (0, _reactRouter.useBlocker));
        parcelHelpers.export(exports, "useHref", () => (0, _reactRouter.useHref));
        parcelHelpers.export(
          exports,
          "useInRouterContext",
          () => (0, _reactRouter.useInRouterContext),
        );
        parcelHelpers.export(exports, "useLoaderData", () => (0, _reactRouter.useLoaderData));
        parcelHelpers.export(exports, "useLocation", () => (0, _reactRouter.useLocation));
        parcelHelpers.export(exports, "useMatch", () => (0, _reactRouter.useMatch));
        parcelHelpers.export(exports, "useMatches", () => (0, _reactRouter.useMatches));
        parcelHelpers.export(exports, "useNavigate", () => (0, _reactRouter.useNavigate));
        parcelHelpers.export(exports, "useNavigation", () => (0, _reactRouter.useNavigation));
        parcelHelpers.export(
          exports,
          "useNavigationType",
          () => (0, _reactRouter.useNavigationType),
        );
        parcelHelpers.export(exports, "useOutlet", () => (0, _reactRouter.useOutlet));
        parcelHelpers.export(exports, "useOutletContext", () => (0, _reactRouter.useOutletContext));
        parcelHelpers.export(exports, "useParams", () => (0, _reactRouter.useParams));
        parcelHelpers.export(exports, "useResolvedPath", () => (0, _reactRouter.useResolvedPath));
        parcelHelpers.export(exports, "useRevalidator", () => (0, _reactRouter.useRevalidator));
        parcelHelpers.export(exports, "useRouteError", () => (0, _reactRouter.useRouteError));
        parcelHelpers.export(
          exports,
          "useRouteLoaderData",
          () => (0, _reactRouter.useRouteLoaderData),
        );
        parcelHelpers.export(exports, "useRoutes", () => (0, _reactRouter.useRoutes));
        //#endregion
        parcelHelpers.export(exports, "BrowserRouter", () => BrowserRouter);
        parcelHelpers.export(exports, "Form", () => Form);
        parcelHelpers.export(exports, "HashRouter", () => HashRouter);
        parcelHelpers.export(exports, "Link", () => Link);
        parcelHelpers.export(exports, "NavLink", () => NavLink);
        parcelHelpers.export(exports, "RouterProvider", () => RouterProvider);
        parcelHelpers.export(exports, "ScrollRestoration", () => ScrollRestoration);
        parcelHelpers.export(exports, "UNSAFE_FetchersContext", () => FetchersContext);
        parcelHelpers.export(exports, "UNSAFE_ViewTransitionContext", () => ViewTransitionContext);
        parcelHelpers.export(exports, "UNSAFE_useScrollRestoration", () => useScrollRestoration);
        parcelHelpers.export(exports, "createBrowserRouter", () => createBrowserRouter);
        parcelHelpers.export(exports, "createHashRouter", () => createHashRouter);
        parcelHelpers.export(exports, "createSearchParams", () => createSearchParams);
        parcelHelpers.export(exports, "unstable_HistoryRouter", () => HistoryRouter);
        parcelHelpers.export(exports, "unstable_usePrompt", () => usePrompt);
        parcelHelpers.export(
          exports,
          "unstable_useViewTransitionState",
          () => useViewTransitionState,
        );
        parcelHelpers.export(exports, "useBeforeUnload", () => useBeforeUnload);
        parcelHelpers.export(exports, "useFetcher", () => useFetcher);
        parcelHelpers.export(exports, "useFetchers", () => useFetchers);
        parcelHelpers.export(exports, "useFormAction", () => useFormAction);
        parcelHelpers.export(exports, "useLinkClickHandler", () => useLinkClickHandler);
        parcelHelpers.export(exports, "useSearchParams", () => useSearchParams);
        parcelHelpers.export(exports, "useSubmit", () => useSubmit);
        var _react = require("react");
        var _reactDom = require("react-dom");
        var _reactRouter = require("react-router");
        var _router = require("@remix-run/router");
        function _extends() {
          _extends = Object.assign
            ? Object.assign.bind()
            : function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source)
                    if (Object.prototype.hasOwnProperty.call(source, key))
                      target[key] = source[key];
                }
                return target;
              };
          return _extends.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        const defaultMethod = "get";
        const defaultEncType = "application/x-www-form-urlencoded";
        function isHtmlElement(object) {
          return object != null && typeof object.tagName === "string";
        }
        function isButtonElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
        }
        function isFormElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
        }
        function isInputElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
        }
        function isModifiedEvent(event) {
          return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
        }
        function shouldProcessLinkClick(event, target) {
          return (
            event.button === 0 && // Ignore everything but left clicks
            (!target || target === "_self") && // Let browser handle "target=_blank" etc.
            !isModifiedEvent(event) // Ignore clicks with modifier keys
          );
        }
        /**
         * Creates a URLSearchParams object using the given initializer.
         *
         * This is identical to `new URLSearchParams(init)` except it also
         * supports arrays as values in the object form of the initializer
         * instead of just strings. This is convenient when you need multiple
         * values for a given key, but don't want to use an array initializer.
         *
         * For example, instead of:
         *
         *   let searchParams = new URLSearchParams([
         *     ['sort', 'name'],
         *     ['sort', 'price']
         *   ]);
         *
         * you can do:
         *
         *   let searchParams = createSearchParams({
         *     sort: ['name', 'price']
         *   });
         */ function createSearchParams(init) {
          if (init === void 0) init = "";
          return new URLSearchParams(
            typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams
              ? init
              : Object.keys(init).reduce((memo, key) => {
                  let value = init[key];
                  return memo.concat(
                    Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]],
                  );
                }, []),
          );
        }
        function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
          let searchParams = createSearchParams(locationSearch);
          if (defaultSearchParams)
            // Use `defaultSearchParams.forEach(...)` here instead of iterating of
            // `defaultSearchParams.keys()` to work-around a bug in Firefox related to
            // web extensions. Relevant Bugzilla tickets:
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984
            defaultSearchParams.forEach((_, key) => {
              if (!searchParams.has(key))
                defaultSearchParams.getAll(key).forEach((value) => {
                  searchParams.append(key, value);
                });
            });
          return searchParams;
        }
        // One-time check for submitter support
        let _formDataSupportsSubmitter = null;
        function isFormDataSubmitterSupported() {
          if (_formDataSupportsSubmitter === null)
            try {
              new FormData(
                document.createElement("form"), // @ts-expect-error if FormData supports the submitter parameter, this will throw
                0,
              );
              _formDataSupportsSubmitter = false;
            } catch (e) {
              _formDataSupportsSubmitter = true;
            }
          return _formDataSupportsSubmitter;
        }
        const supportedFormEncTypes = new Set([
          "application/x-www-form-urlencoded",
          "multipart/form-data",
          "text/plain",
        ]);
        function getFormEncType(encType) {
          if (encType != null && !supportedFormEncTypes.has(encType)) {
            (0, _router.UNSAFE_warning)(
              false,
              '"' +
                encType +
                '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' +
                ('and will default to "' + defaultEncType + '"'),
            );
            return null;
          }
          return encType;
        }
        function getFormSubmissionInfo(target, basename) {
          let method;
          let action;
          let encType;
          let formData;
          let body;
          if (isFormElement(target)) {
            // When grabbing the action from the element, it will have had the basename
            // prefixed to ensure non-JS scenarios work, so strip it since we'll
            // re-prefix in the router
            let attr = target.getAttribute("action");
            action = attr ? (0, _router.stripBasename)(attr, basename) : null;
            method = target.getAttribute("method") || defaultMethod;
            encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
            formData = new FormData(target);
          } else if (
            isButtonElement(target) ||
            (isInputElement(target) && (target.type === "submit" || target.type === "image"))
          ) {
            let form = target.form;
            if (form == null)
              throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
            // <button>/<input type="submit"> may override attributes of <form>
            // When grabbing the action from the element, it will have had the basename
            // prefixed to ensure non-JS scenarios work, so strip it since we'll
            // re-prefix in the router
            let attr = target.getAttribute("formaction") || form.getAttribute("action");
            action = attr ? (0, _router.stripBasename)(attr, basename) : null;
            method =
              target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
            encType =
              getFormEncType(target.getAttribute("formenctype")) ||
              getFormEncType(form.getAttribute("enctype")) ||
              defaultEncType;
            // Build a FormData object populated from a form and submitter
            formData = new FormData(form, target);
            // If this browser doesn't support the `FormData(el, submitter)` format,
            // then tack on the submitter value at the end.  This is a lightweight
            // solution that is not 100% spec compliant.  For complete support in older
            // browsers, consider using the `formdata-submitter-polyfill` package
            if (!isFormDataSubmitterSupported()) {
              let { name, type, value } = target;
              if (type === "image") {
                let prefix = name ? name + "." : "";
                formData.append(prefix + "x", "0");
                formData.append(prefix + "y", "0");
              } else if (name) formData.append(name, value);
            }
          } else if (isHtmlElement(target))
            throw new Error(
              'Cannot submit element that is not <form>, <button>, or <input type="submit|image">',
            );
          else {
            method = defaultMethod;
            action = null;
            encType = defaultEncType;
            body = target;
          }
          // Send body for <Form encType="text/plain" so we encode it into text
          if (formData && encType === "text/plain") {
            body = formData;
            formData = undefined;
          }
          return {
            action,
            method: method.toLowerCase(),
            encType,
            formData,
            body,
          };
        }
        const _excluded = [
            "onClick",
            "relative",
            "reloadDocument",
            "replace",
            "state",
            "target",
            "to",
            "preventScrollReset",
            "unstable_viewTransition",
          ],
          _excluded2 = [
            "aria-current",
            "caseSensitive",
            "className",
            "end",
            "style",
            "to",
            "unstable_viewTransition",
            "children",
          ],
          _excluded3 = [
            "fetcherKey",
            "navigate",
            "reloadDocument",
            "replace",
            "state",
            "method",
            "action",
            "onSubmit",
            "relative",
            "preventScrollReset",
            "unstable_viewTransition",
          ];
        // HEY YOU! DON'T TOUCH THIS VARIABLE!
        //
        // It is replaced with the proper version at build time via a babel plugin in
        // the rollup config.
        //
        // Export a global property onto the window for React Router detection by the
        // Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`
        // to detect and properly classify live websites as being built with React Router:
        // https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json
        const REACT_ROUTER_VERSION = "6";
        try {
          window.__reactRouterVersion = REACT_ROUTER_VERSION;
        } catch (e) {
          // no-op
        }
        function createBrowserRouter(routes, opts) {
          return (0, _router.createRouter)({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true,
            }),
            history: (0, _router.createBrowserHistory)({
              window: opts == null ? void 0 : opts.window,
            }),
            hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties: (0, _reactRouter.UNSAFE_mapRouteProperties),
            window: opts == null ? void 0 : opts.window,
          }).initialize();
        }
        function createHashRouter(routes, opts) {
          return (0, _router.createRouter)({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true,
            }),
            history: (0, _router.createHashHistory)({
              window: opts == null ? void 0 : opts.window,
            }),
            hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties: (0, _reactRouter.UNSAFE_mapRouteProperties),
            window: opts == null ? void 0 : opts.window,
          }).initialize();
        }
        function parseHydrationData() {
          var _window;
          let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
          if (state && state.errors)
            state = _extends({}, state, {
              errors: deserializeErrors(state.errors),
            });
          return state;
        }
        function deserializeErrors(errors) {
          if (!errors) return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            // Hey you!  If you change this, please change the corresponding logic in
            // serializeErrors in react-router-dom/server.tsx :)
            if (val && val.__type === "RouteErrorResponse")
              serialized[key] = new (0, _router.UNSAFE_ErrorResponseImpl)(
                val.status,
                val.statusText,
                val.data,
                val.internal === true,
              );
            else if (val && val.__type === "Error") {
              // Attempt to reconstruct the right type of Error (i.e., ReferenceError)
              if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === "function")
                  try {
                    // @ts-expect-error
                    let error = new ErrorConstructor(val.message);
                    // Wipe away the client-side stack trace.  Nothing to fill it in with
                    // because we don't serialize SSR stack traces for security reasons
                    error.stack = "";
                    serialized[key] = error;
                  } catch (e) {
                    // no-op - fall through and create a normal Error
                  }
              }
              if (serialized[key] == null) {
                let error = new Error(val.message);
                // Wipe away the client-side stack trace.  Nothing to fill it in with
                // because we don't serialize SSR stack traces for security reasons
                error.stack = "";
                serialized[key] = error;
              }
            } else serialized[key] = val;
          }
          return serialized;
        }
        const ViewTransitionContext = /*#__PURE__*/ _react.createContext({
          isTransitioning: false,
        });
        ViewTransitionContext.displayName = "ViewTransition";
        const FetchersContext = /*#__PURE__*/ _react.createContext(new Map());
        FetchersContext.displayName = "Fetchers";
        //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region Components
        ////////////////////////////////////////////////////////////////////////////////
        /**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const START_TRANSITION = "startTransition";
        const startTransitionImpl = _react[START_TRANSITION];
        const FLUSH_SYNC = "flushSync";
        const flushSyncImpl = _reactDom[FLUSH_SYNC];
        const USE_ID = "useId";
        const useIdImpl = _react[USE_ID];
        function startTransitionSafe(cb) {
          if (startTransitionImpl) startTransitionImpl(cb);
          else cb();
        }
        function flushSyncSafe(cb) {
          if (flushSyncImpl) flushSyncImpl(cb);
          else cb();
        }
        class Deferred {
          constructor() {
            this.status = "pending";
            this.promise = new Promise((resolve, reject) => {
              this.resolve = (value) => {
                if (this.status === "pending") {
                  this.status = "resolved";
                  resolve(value);
                }
              };
              this.reject = (reason) => {
                if (this.status === "pending") {
                  this.status = "rejected";
                  reject(reason);
                }
              };
            });
          }
        }
        /**
         * Given a Remix Router instance, render the appropriate UI
         */ function RouterProvider(_ref) {
          let { fallbackElement, router, future } = _ref;
          let [state, setStateImpl] = _react.useState(router.state);
          let [pendingState, setPendingState] = _react.useState();
          let [vtContext, setVtContext] = _react.useState({
            isTransitioning: false,
          });
          let [renderDfd, setRenderDfd] = _react.useState();
          let [transition, setTransition] = _react.useState();
          let [interruption, setInterruption] = _react.useState();
          let fetcherData = _react.useRef(new Map());
          let { v7_startTransition } = future || {};
          let optInStartTransition = _react.useCallback(
            (cb) => {
              if (v7_startTransition) startTransitionSafe(cb);
              else cb();
            },
            [v7_startTransition],
          );
          let setState = _react.useCallback(
            (newState, _ref2) => {
              let {
                deletedFetchers,
                unstable_flushSync: flushSync,
                unstable_viewTransitionOpts: viewTransitionOpts,
              } = _ref2;
              deletedFetchers.forEach((key) => fetcherData.current.delete(key));
              newState.fetchers.forEach((fetcher, key) => {
                if (fetcher.data !== undefined) fetcherData.current.set(key, fetcher.data);
              });
              let isViewTransitionUnavailable =
                router.window == null ||
                typeof router.window.document.startViewTransition !== "function";
              // If this isn't a view transition or it's not available in this browser,
              // just update and be done with it
              if (!viewTransitionOpts || isViewTransitionUnavailable) {
                if (flushSync) flushSyncSafe(() => setStateImpl(newState));
                else optInStartTransition(() => setStateImpl(newState));
                return;
              }
              // flushSync + startViewTransition
              if (flushSync) {
                // Flush through the context to mark DOM elements as transition=ing
                flushSyncSafe(() => {
                  // Cancel any pending transitions
                  if (transition) {
                    renderDfd && renderDfd.resolve();
                    transition.skipTransition();
                  }
                  setVtContext({
                    isTransitioning: true,
                    flushSync: true,
                    currentLocation: viewTransitionOpts.currentLocation,
                    nextLocation: viewTransitionOpts.nextLocation,
                  });
                });
                // Update the DOM
                let t = router.window.document.startViewTransition(() => {
                  flushSyncSafe(() => setStateImpl(newState));
                });
                // Clean up after the animation completes
                t.finished.finally(() => {
                  flushSyncSafe(() => {
                    setRenderDfd(undefined);
                    setTransition(undefined);
                    setPendingState(undefined);
                    setVtContext({
                      isTransitioning: false,
                    });
                  });
                });
                flushSyncSafe(() => setTransition(t));
                return;
              }
              // startTransition + startViewTransition
              if (transition) {
                // Interrupting an in-progress transition, cancel and let everything flush
                // out, and then kick off a new transition from the interruption state
                renderDfd && renderDfd.resolve();
                transition.skipTransition();
                setInterruption({
                  state: newState,
                  currentLocation: viewTransitionOpts.currentLocation,
                  nextLocation: viewTransitionOpts.nextLocation,
                });
              } else {
                // Completed navigation update with opted-in view transitions, let 'er rip
                setPendingState(newState);
                setVtContext({
                  isTransitioning: true,
                  flushSync: false,
                  currentLocation: viewTransitionOpts.currentLocation,
                  nextLocation: viewTransitionOpts.nextLocation,
                });
              }
            },
            [router.window, transition, renderDfd, fetcherData, optInStartTransition],
          );
          // Need to use a layout effect here so we are subscribed early enough to
          // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
          _react.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
          // When we start a view transition, create a Deferred we can use for the
          // eventual "completed" render
          _react.useEffect(() => {
            if (vtContext.isTransitioning && !vtContext.flushSync) setRenderDfd(new Deferred());
          }, [vtContext]);
          // Once the deferred is created, kick off startViewTransition() to update the
          // DOM and then wait on the Deferred to resolve (indicating the DOM update has
          // happened)
          _react.useEffect(() => {
            if (renderDfd && pendingState && router.window) {
              let newState = pendingState;
              let renderPromise = renderDfd.promise;
              let transition = router.window.document.startViewTransition(async () => {
                optInStartTransition(() => setStateImpl(newState));
                await renderPromise;
              });
              transition.finished.finally(() => {
                setRenderDfd(undefined);
                setTransition(undefined);
                setPendingState(undefined);
                setVtContext({
                  isTransitioning: false,
                });
              });
              setTransition(transition);
            }
          }, [optInStartTransition, pendingState, renderDfd, router.window]);
          // When the new location finally renders and is committed to the DOM, this
          // effect will run to resolve the transition
          _react.useEffect(() => {
            if (renderDfd && pendingState && state.location.key === pendingState.location.key)
              renderDfd.resolve();
          }, [renderDfd, transition, state.location, pendingState]);
          // If we get interrupted with a new navigation during a transition, we skip
          // the active transition, let it cleanup, then kick it off again here
          _react.useEffect(() => {
            if (!vtContext.isTransitioning && interruption) {
              setPendingState(interruption.state);
              setVtContext({
                isTransitioning: true,
                flushSync: false,
                currentLocation: interruption.currentLocation,
                nextLocation: interruption.nextLocation,
              });
              setInterruption(undefined);
            }
          }, [vtContext.isTransitioning, interruption]);
          _react.useEffect(() => {
            (0, _router.UNSAFE_warning)(
              fallbackElement == null || !router.future.v7_partialHydration,
              "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead",
            );
            // Only log this once on initial mount
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, []);
          let navigator = _react.useMemo(() => {
            return {
              createHref: router.createHref,
              encodeLocation: router.encodeLocation,
              go: (n) => router.navigate(n),
              push: (to, state, opts) =>
                router.navigate(to, {
                  state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset,
                }),
              replace: (to, state, opts) =>
                router.navigate(to, {
                  replace: true,
                  state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset,
                }),
            };
          }, [router]);
          let basename = router.basename || "/";
          let dataRouterContext = _react.useMemo(
            () => ({
              router,
              navigator,
              static: false,
              basename,
            }),
            [router, navigator, basename],
          );
          // The fragment and {null} here are important!  We need them to keep React 18's
          // useId happy when we are server-rendering since we may have a <script> here
          // containing the hydrated server-side staticContext (from StaticRouterProvider).
          // useId relies on the component tree structure to generate deterministic id's
          // so we need to ensure it remains the same on the client even though
          // we don't need the <script> tag
          return /*#__PURE__*/ _react.createElement(
            _react.Fragment,
            null,
            /*#__PURE__*/ _react.createElement(
              (0, _reactRouter.UNSAFE_DataRouterContext).Provider,
              {
                value: dataRouterContext,
              },
              /*#__PURE__*/ _react.createElement(
                (0, _reactRouter.UNSAFE_DataRouterStateContext).Provider,
                {
                  value: state,
                },
                /*#__PURE__*/ _react.createElement(
                  FetchersContext.Provider,
                  {
                    value: fetcherData.current,
                  },
                  /*#__PURE__*/ _react.createElement(
                    ViewTransitionContext.Provider,
                    {
                      value: vtContext,
                    },
                    /*#__PURE__*/ _react.createElement(
                      (0, _reactRouter.Router),
                      {
                        basename: basename,
                        location: state.location,
                        navigationType: state.historyAction,
                        navigator: navigator,
                        future: {
                          v7_relativeSplatPath: router.future.v7_relativeSplatPath,
                        },
                      },
                      state.initialized || router.future.v7_partialHydration
                        ? /*#__PURE__*/ _react.createElement(DataRoutes, {
                            routes: router.routes,
                            future: router.future,
                            state: state,
                          })
                        : fallbackElement,
                    ),
                  ),
                ),
              ),
            ),
            null,
          );
        }
        function DataRoutes(_ref3) {
          let { routes, future, state } = _ref3;
          return (0, _reactRouter.UNSAFE_useRoutesImpl)(routes, undefined, state, future);
        }
        /**
         * A `<Router>` for use in web browsers. Provides the cleanest URLs.
         */ function BrowserRouter(_ref4) {
          let { basename, children, future, window: window1 } = _ref4;
          let historyRef = _react.useRef();
          if (historyRef.current == null)
            historyRef.current = (0, _router.createBrowserHistory)({
              window: window1,
              v5Compat: true,
            });
          let history = historyRef.current;
          let [state, setStateImpl] = _react.useState({
            action: history.action,
            location: history.location,
          });
          let { v7_startTransition } = future || {};
          let setState = _react.useCallback(
            (newState) => {
              v7_startTransition && startTransitionImpl
                ? startTransitionImpl(() => setStateImpl(newState))
                : setStateImpl(newState);
            },
            [setStateImpl, v7_startTransition],
          );
          _react.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /*#__PURE__*/ _react.createElement((0, _reactRouter.Router), {
            basename: basename,
            children: children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
            future: future,
          });
        }
        /**
         * A `<Router>` for use in web browsers. Stores the location in the hash
         * portion of the URL so it is not sent to the server.
         */ function HashRouter(_ref5) {
          let { basename, children, future, window: window1 } = _ref5;
          let historyRef = _react.useRef();
          if (historyRef.current == null)
            historyRef.current = (0, _router.createHashHistory)({
              window: window1,
              v5Compat: true,
            });
          let history = historyRef.current;
          let [state, setStateImpl] = _react.useState({
            action: history.action,
            location: history.location,
          });
          let { v7_startTransition } = future || {};
          let setState = _react.useCallback(
            (newState) => {
              v7_startTransition && startTransitionImpl
                ? startTransitionImpl(() => setStateImpl(newState))
                : setStateImpl(newState);
            },
            [setStateImpl, v7_startTransition],
          );
          _react.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /*#__PURE__*/ _react.createElement((0, _reactRouter.Router), {
            basename: basename,
            children: children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
            future: future,
          });
        }
        /**
         * A `<Router>` that accepts a pre-instantiated history object. It's important
         * to note that using your own history object is highly discouraged and may add
         * two versions of the history library to your bundles unless you use the same
         * version of the history library that React Router uses internally.
         */ function HistoryRouter(_ref6) {
          let { basename, children, future, history } = _ref6;
          let [state, setStateImpl] = _react.useState({
            action: history.action,
            location: history.location,
          });
          let { v7_startTransition } = future || {};
          let setState = _react.useCallback(
            (newState) => {
              v7_startTransition && startTransitionImpl
                ? startTransitionImpl(() => setStateImpl(newState))
                : setStateImpl(newState);
            },
            [setStateImpl, v7_startTransition],
          );
          _react.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /*#__PURE__*/ _react.createElement((0, _reactRouter.Router), {
            basename: basename,
            children: children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
            future: future,
          });
        }
        HistoryRouter.displayName = "unstable_HistoryRouter";
        const isBrowser =
          typeof window !== "undefined" &&
          typeof window.document !== "undefined" &&
          typeof window.document.createElement !== "undefined";
        const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        /**
         * The public API for rendering a history-aware `<a>`.
         */ const Link = /*#__PURE__*/ _react.forwardRef(function LinkWithRef(_ref7, ref) {
          let {
              onClick,
              relative,
              reloadDocument,
              replace,
              state,
              target,
              to,
              preventScrollReset,
              unstable_viewTransition,
            } = _ref7,
            rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
          let { basename } = _react.useContext((0, _reactRouter.UNSAFE_NavigationContext));
          // Rendered into <a href> for absolute URLs
          let absoluteHref;
          let isExternal = false;
          if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
            // Render the absolute href server- and client-side
            absoluteHref = to;
            // Only check for external origins client-side
            if (isBrowser)
              try {
                let currentUrl = new URL(window.location.href);
                let targetUrl = to.startsWith("//")
                  ? new URL(currentUrl.protocol + to)
                  : new URL(to);
                let path = (0, _router.stripBasename)(targetUrl.pathname, basename);
                if (targetUrl.origin === currentUrl.origin && path != null)
                  // Strip the protocol/origin/basename for same-origin absolute URLs
                  to = path + targetUrl.search + targetUrl.hash;
                else isExternal = true;
              } catch (e) {
                // We can't do external URL detection without a valid URL
                (0, _router.UNSAFE_warning)(
                  false,
                  '<Link to="' +
                    to +
                    '"> contains an invalid URL which will probably break ' +
                    "when clicked - please update to a valid URL path.",
                );
              }
          }
          // Rendered into <a href> for relative URLs
          let href = (0, _reactRouter.useHref)(to, {
            relative,
          });
          let internalOnClick = useLinkClickHandler(to, {
            replace,
            state,
            target,
            preventScrollReset,
            relative,
            unstable_viewTransition,
          });
          function handleClick(event) {
            if (onClick) onClick(event);
            if (!event.defaultPrevented) internalOnClick(event);
          }
          return (
            /*#__PURE__*/ // eslint-disable-next-line jsx-a11y/anchor-has-content
            _react.createElement(
              "a",
              _extends({}, rest, {
                href: absoluteHref || href,
                onClick: isExternal || reloadDocument ? onClick : handleClick,
                ref: ref,
                target: target,
              }),
            )
          );
        });
        Link.displayName = "Link";
        /**
         * A `<Link>` wrapper that knows if it's "active" or not.
         */ const NavLink = /*#__PURE__*/ _react.forwardRef(function NavLinkWithRef(_ref8, ref) {
          let {
              "aria-current": ariaCurrentProp = "page",
              caseSensitive = false,
              className: classNameProp = "",
              end = false,
              style: styleProp,
              to,
              unstable_viewTransition,
              children,
            } = _ref8,
            rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
          let path = (0, _reactRouter.useResolvedPath)(to, {
            relative: rest.relative,
          });
          let location = (0, _reactRouter.useLocation)();
          let routerState = _react.useContext((0, _reactRouter.UNSAFE_DataRouterStateContext));
          let { navigator, basename } = _react.useContext(
            (0, _reactRouter.UNSAFE_NavigationContext),
          );
          let isTransitioning =
            routerState != null && // Conditional usage is OK here because the usage of a data router is static
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useViewTransitionState(path) &&
            unstable_viewTransition === true;
          let toPathname = navigator.encodeLocation
            ? navigator.encodeLocation(path).pathname
            : path.pathname;
          let locationPathname = location.pathname;
          let nextLocationPathname =
            routerState && routerState.navigation && routerState.navigation.location
              ? routerState.navigation.location.pathname
              : null;
          if (!caseSensitive) {
            locationPathname = locationPathname.toLowerCase();
            nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
            toPathname = toPathname.toLowerCase();
          }
          if (nextLocationPathname && basename)
            nextLocationPathname =
              (0, _router.stripBasename)(nextLocationPathname, basename) || nextLocationPathname;
          // If the `to` has a trailing slash, look at that exact spot.  Otherwise,
          // we're looking for a slash _after_ what's in `to`.  For example:
          //
          // <NavLink to="/users"> and <NavLink to="/users/">
          // both want to look for a / at index 6 to match URL `/users/matt`
          const endSlashPosition =
            toPathname !== "/" && toPathname.endsWith("/")
              ? toPathname.length - 1
              : toPathname.length;
          let isActive =
            locationPathname === toPathname ||
            (!end &&
              locationPathname.startsWith(toPathname) &&
              locationPathname.charAt(endSlashPosition) === "/");
          let isPending =
            nextLocationPathname != null &&
            (nextLocationPathname === toPathname ||
              (!end &&
                nextLocationPathname.startsWith(toPathname) &&
                nextLocationPathname.charAt(toPathname.length) === "/"));
          let renderProps = {
            isActive,
            isPending,
            isTransitioning,
          };
          let ariaCurrent = isActive ? ariaCurrentProp : undefined;
          let className;
          if (typeof classNameProp === "function") className = classNameProp(renderProps);
          // If the className prop is not a function, we use a default `active`
          // class for <NavLink />s that are active. In v5 `active` was the default
          // value for `activeClassName`, but we are removing that API and can still
          // use the old default behavior for a cleaner upgrade path and keep the
          // simple styling rules working as they currently do.
          else
            className = [
              classNameProp,
              isActive ? "active" : null,
              isPending ? "pending" : null,
              isTransitioning ? "transitioning" : null,
            ]
              .filter(Boolean)
              .join(" ");
          let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
          return /*#__PURE__*/ _react.createElement(
            Link,
            _extends({}, rest, {
              "aria-current": ariaCurrent,
              className: className,
              ref: ref,
              style: style,
              to: to,
              unstable_viewTransition: unstable_viewTransition,
            }),
            typeof children === "function" ? children(renderProps) : children,
          );
        });
        NavLink.displayName = "NavLink";
        /**
         * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except
         * that the interaction with the server is with `fetch` instead of new document
         * requests, allowing components to add nicer UX to the page as the form is
         * submitted and returns with data.
         */ const Form = /*#__PURE__*/ _react.forwardRef((_ref9, forwardedRef) => {
          let {
              fetcherKey,
              navigate,
              reloadDocument,
              replace,
              state,
              method = defaultMethod,
              action,
              onSubmit,
              relative,
              preventScrollReset,
              unstable_viewTransition,
            } = _ref9,
            props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
          let submit = useSubmit();
          let formAction = useFormAction(action, {
            relative,
          });
          let formMethod = method.toLowerCase() === "get" ? "get" : "post";
          let submitHandler = (event) => {
            onSubmit && onSubmit(event);
            if (event.defaultPrevented) return;
            event.preventDefault();
            let submitter = event.nativeEvent.submitter;
            let submitMethod =
              (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
            submit(submitter || event.currentTarget, {
              fetcherKey,
              method: submitMethod,
              navigate,
              replace,
              state,
              relative,
              preventScrollReset,
              unstable_viewTransition,
            });
          };
          return /*#__PURE__*/ _react.createElement(
            "form",
            _extends(
              {
                ref: forwardedRef,
                method: formMethod,
                action: formAction,
                onSubmit: reloadDocument ? onSubmit : submitHandler,
              },
              props,
            ),
          );
        });
        Form.displayName = "Form";
        /**
         * This component will emulate the browser's scroll restoration on location
         * changes.
         */ function ScrollRestoration(_ref10) {
          let { getKey, storageKey } = _ref10;
          useScrollRestoration({
            getKey,
            storageKey,
          });
          return null;
        }
        ScrollRestoration.displayName = "ScrollRestoration";
        //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region Hooks
        ////////////////////////////////////////////////////////////////////////////////
        var DataRouterHook;
        (function (DataRouterHook) {
          DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";
          DataRouterHook["UseSubmit"] = "useSubmit";
          DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";
          DataRouterHook["UseFetcher"] = "useFetcher";
          DataRouterHook["useViewTransitionState"] = "useViewTransitionState";
        })(DataRouterHook || (DataRouterHook = {}));
        var DataRouterStateHook;
        (function (DataRouterStateHook) {
          DataRouterStateHook["UseFetcher"] = "useFetcher";
          DataRouterStateHook["UseFetchers"] = "useFetchers";
          DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";
        })(DataRouterStateHook || (DataRouterStateHook = {}));
        // Internal hooks
        function getDataRouterConsoleError(hookName) {
          return (
            hookName +
            " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router."
          );
        }
        function useDataRouterContext(hookName) {
          let ctx = _react.useContext((0, _reactRouter.UNSAFE_DataRouterContext));
          !ctx && (0, _router.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName));
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state = _react.useContext((0, _reactRouter.UNSAFE_DataRouterStateContext));
          !state && (0, _router.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName));
          return state;
        }
        // External hooks
        /**
         * Handles the click behavior for router `<Link>` components. This is useful if
         * you need to create custom `<Link>` components with the same click behavior we
         * use in our exported `<Link>`.
         */ function useLinkClickHandler(to, _temp) {
          let {
            target,
            replace: replaceProp,
            state,
            preventScrollReset,
            relative,
            unstable_viewTransition,
          } = _temp === void 0 ? {} : _temp;
          let navigate = (0, _reactRouter.useNavigate)();
          let location = (0, _reactRouter.useLocation)();
          let path = (0, _reactRouter.useResolvedPath)(to, {
            relative,
          });
          return _react.useCallback(
            (event) => {
              if (shouldProcessLinkClick(event, target)) {
                event.preventDefault();
                // If the URL hasn't changed, a regular <a> will do a replace instead of
                // a push, so do the same here unless the replace prop is explicitly set
                let replace =
                  replaceProp !== undefined
                    ? replaceProp
                    : (0, _reactRouter.createPath)(location) === (0, _reactRouter.createPath)(path);
                navigate(to, {
                  replace,
                  state,
                  preventScrollReset,
                  relative,
                  unstable_viewTransition,
                });
              }
            },
            [
              location,
              navigate,
              path,
              replaceProp,
              state,
              target,
              to,
              preventScrollReset,
              relative,
              unstable_viewTransition,
            ],
          );
        }
        /**
         * A convenient wrapper for reading and writing search parameters via the
         * URLSearchParams interface.
         */ function useSearchParams(defaultInit) {
          (0, _router.UNSAFE_warning)(
            typeof URLSearchParams !== "undefined",
            "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.",
          );
          let defaultSearchParamsRef = _react.useRef(createSearchParams(defaultInit));
          let hasSetSearchParamsRef = _react.useRef(false);
          let location = (0, _reactRouter.useLocation)();
          let searchParams = _react.useMemo(
            () =>
              // Only merge in the defaults if we haven't yet called setSearchParams.
              // Once we call that we want those to take precedence, otherwise you can't
              // remove a param with setSearchParams({}) if it has an initial value
              getSearchParamsForLocation(
                location.search,
                hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current,
              ),
            [location.search],
          );
          let navigate = (0, _reactRouter.useNavigate)();
          let setSearchParams = _react.useCallback(
            (nextInit, navigateOptions) => {
              const newSearchParams = createSearchParams(
                typeof nextInit === "function" ? nextInit(searchParams) : nextInit,
              );
              hasSetSearchParamsRef.current = true;
              navigate("?" + newSearchParams, navigateOptions);
            },
            [navigate, searchParams],
          );
          return [searchParams, setSearchParams];
        }
        function validateClientSideSubmission() {
          if (typeof document === "undefined")
            throw new Error(
              "You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.",
            );
        }
        let fetcherId = 0;
        let getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
        /**
         * Returns a function that may be used to programmatically submit a form (or
         * some arbitrary data) to the server.
         */ function useSubmit() {
          let { router } = useDataRouterContext(DataRouterHook.UseSubmit);
          let { basename } = _react.useContext((0, _reactRouter.UNSAFE_NavigationContext));
          let currentRouteId = (0, _reactRouter.UNSAFE_useRouteId)();
          return _react.useCallback(
            function (target, options) {
              if (options === void 0) options = {};
              validateClientSideSubmission();
              let { action, method, encType, formData, body } = getFormSubmissionInfo(
                target,
                basename,
              );
              if (options.navigate === false) {
                let key = options.fetcherKey || getUniqueFetcherId();
                router.fetch(key, currentRouteId, options.action || action, {
                  preventScrollReset: options.preventScrollReset,
                  formData,
                  body,
                  formMethod: options.method || method,
                  formEncType: options.encType || encType,
                  unstable_flushSync: options.unstable_flushSync,
                });
              } else
                router.navigate(options.action || action, {
                  preventScrollReset: options.preventScrollReset,
                  formData,
                  body,
                  formMethod: options.method || method,
                  formEncType: options.encType || encType,
                  replace: options.replace,
                  state: options.state,
                  fromRouteId: currentRouteId,
                  unstable_flushSync: options.unstable_flushSync,
                  unstable_viewTransition: options.unstable_viewTransition,
                });
            },
            [router, basename, currentRouteId],
          );
        }
        // v7: Eventually we should deprecate this entirely in favor of using the
        // router method directly?
        function useFormAction(action, _temp2) {
          let { relative } = _temp2 === void 0 ? {} : _temp2;
          let { basename } = _react.useContext((0, _reactRouter.UNSAFE_NavigationContext));
          let routeContext = _react.useContext((0, _reactRouter.UNSAFE_RouteContext));
          !routeContext &&
            (0, _router.UNSAFE_invariant)(
              false,
              "useFormAction must be used inside a RouteContext",
            );
          let [match] = routeContext.matches.slice(-1);
          // Shallow clone path so we can modify it below, otherwise we modify the
          // object referenced by useMemo inside useResolvedPath
          let path = _extends(
            {},
            (0, _reactRouter.useResolvedPath)(action ? action : ".", {
              relative,
            }),
          );
          // If no action was specified, browsers will persist current search params
          // when determining the path, so match that behavior
          // https://github.com/remix-run/remix/issues/927
          let location = (0, _reactRouter.useLocation)();
          if (action == null) {
            // Safe to write to this directly here since if action was undefined, we
            // would have called useResolvedPath(".") which will never include a search
            path.search = location.search;
            // When grabbing search params from the URL, remove any included ?index param
            // since it might not apply to our contextual route.  We add it back based
            // on match.route.index below
            let params = new URLSearchParams(path.search);
            if (params.has("index") && params.get("index") === "") {
              params.delete("index");
              path.search = params.toString() ? "?" + params.toString() : "";
            }
          }
          if ((!action || action === ".") && match.route.index)
            path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
          // If we're operating within a basename, prepend it to the pathname prior
          // to creating the form action.  If this is a root navigation, then just use
          // the raw basename which allows the basename to have full control over the
          // presence of a trailing slash on root actions
          if (basename !== "/")
            path.pathname =
              path.pathname === "/" ? basename : (0, _router.joinPaths)([basename, path.pathname]);
          return (0, _reactRouter.createPath)(path);
        }
        // TODO: (v7) Change the useFetcher generic default from `any` to `unknown`
        /**
         * Interacts with route loaders and actions without causing a navigation. Great
         * for any interaction that stays on the same page.
         */ function useFetcher(_temp3) {
          var _route$matches;
          let { key } = _temp3 === void 0 ? {} : _temp3;
          let { router } = useDataRouterContext(DataRouterHook.UseFetcher);
          let state = useDataRouterState(DataRouterStateHook.UseFetcher);
          let fetcherData = _react.useContext(FetchersContext);
          let route = _react.useContext((0, _reactRouter.UNSAFE_RouteContext));
          let routeId =
            (_route$matches = route.matches[route.matches.length - 1]) == null
              ? void 0
              : _route$matches.route.id;
          !fetcherData &&
            (0, _router.UNSAFE_invariant)(
              false,
              "useFetcher must be used inside a FetchersContext",
            );
          !route &&
            (0, _router.UNSAFE_invariant)(false, "useFetcher must be used inside a RouteContext");
          !(routeId != null) &&
            (0, _router.UNSAFE_invariant)(
              false,
              'useFetcher can only be used on routes that contain a unique "id"',
            );
          // Fetcher key handling
          // OK to call conditionally to feature detect `useId`
          // eslint-disable-next-line react-hooks/rules-of-hooks
          let defaultKey = useIdImpl ? useIdImpl() : "";
          let [fetcherKey, setFetcherKey] = _react.useState(key || defaultKey);
          if (key && key !== fetcherKey) setFetcherKey(key);
          else if (!fetcherKey)
            // We will only fall through here when `useId` is not available
            setFetcherKey(getUniqueFetcherId());
          // Registration/cleanup
          _react.useEffect(() => {
            router.getFetcher(fetcherKey);
            return () => {
              // Tell the router we've unmounted - if v7_fetcherPersist is enabled this
              // will not delete immediately but instead queue up a delete after the
              // fetcher returns to an `idle` state
              router.deleteFetcher(fetcherKey);
            };
          }, [router, fetcherKey]);
          // Fetcher additions
          let load = _react.useCallback(
            (href, opts) => {
              !routeId &&
                (0, _router.UNSAFE_invariant)(false, "No routeId available for fetcher.load()");
              router.fetch(fetcherKey, routeId, href, opts);
            },
            [fetcherKey, routeId, router],
          );
          let submitImpl = useSubmit();
          let submit = _react.useCallback(
            (target, opts) => {
              submitImpl(
                target,
                _extends({}, opts, {
                  navigate: false,
                  fetcherKey,
                }),
              );
            },
            [fetcherKey, submitImpl],
          );
          let FetcherForm = _react.useMemo(() => {
            let FetcherForm = /*#__PURE__*/ _react.forwardRef((props, ref) => {
              return /*#__PURE__*/ _react.createElement(
                Form,
                _extends({}, props, {
                  navigate: false,
                  fetcherKey: fetcherKey,
                  ref: ref,
                }),
              );
            });
            FetcherForm.displayName = "fetcher.Form";
            return FetcherForm;
          }, [fetcherKey]);
          // Exposed FetcherWithComponents
          let fetcher = state.fetchers.get(fetcherKey) || (0, _router.IDLE_FETCHER);
          let data = fetcherData.get(fetcherKey);
          let fetcherWithComponents = _react.useMemo(
            () =>
              _extends(
                {
                  Form: FetcherForm,
                  submit,
                  load,
                },
                fetcher,
                {
                  data,
                },
              ),
            [FetcherForm, submit, load, fetcher, data],
          );
          return fetcherWithComponents;
        }
        /**
         * Provides all fetchers currently on the page. Useful for layouts and parent
         * routes that need to provide pending/optimistic UI regarding the fetch.
         */ function useFetchers() {
          let state = useDataRouterState(DataRouterStateHook.UseFetchers);
          return Array.from(state.fetchers.entries()).map((_ref11) => {
            let [key, fetcher] = _ref11;
            return _extends({}, fetcher, {
              key,
            });
          });
        }
        const SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
        let savedScrollPositions = {};
        /**
         * When rendered inside a RouterProvider, will restore scroll positions on navigations
         */ function useScrollRestoration(_temp4) {
          let { getKey, storageKey } = _temp4 === void 0 ? {} : _temp4;
          let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);
          let { restoreScrollPosition, preventScrollReset } = useDataRouterState(
            DataRouterStateHook.UseScrollRestoration,
          );
          let { basename } = _react.useContext((0, _reactRouter.UNSAFE_NavigationContext));
          let location = (0, _reactRouter.useLocation)();
          let matches = (0, _reactRouter.useMatches)();
          let navigation = (0, _reactRouter.useNavigation)();
          // Trigger manual scroll restoration while we're active
          _react.useEffect(() => {
            window.history.scrollRestoration = "manual";
            return () => {
              window.history.scrollRestoration = "auto";
            };
          }, []);
          // Save positions on pagehide
          usePageHide(
            _react.useCallback(() => {
              if (navigation.state === "idle") {
                let key = (getKey ? getKey(location, matches) : null) || location.key;
                savedScrollPositions[key] = window.scrollY;
              }
              try {
                sessionStorage.setItem(
                  storageKey || SCROLL_RESTORATION_STORAGE_KEY,
                  JSON.stringify(savedScrollPositions),
                );
              } catch (error) {
                (0, _router.UNSAFE_warning)(
                  false,
                  "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" +
                    error +
                    ").",
                );
              }
              window.history.scrollRestoration = "auto";
            }, [storageKey, getKey, navigation.state, location, matches]),
          );
          // Read in any saved scroll locations
          if (typeof document !== "undefined") {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            _react.useLayoutEffect(() => {
              try {
                let sessionPositions = sessionStorage.getItem(
                  storageKey || SCROLL_RESTORATION_STORAGE_KEY,
                );
                if (sessionPositions) savedScrollPositions = JSON.parse(sessionPositions);
              } catch (e) {
                // no-op, use default empty object
              }
            }, [storageKey]);
            // Enable scroll restoration in the router
            // eslint-disable-next-line react-hooks/rules-of-hooks
            _react.useLayoutEffect(() => {
              let getKeyWithoutBasename =
                getKey && basename !== "/"
                  ? (location, matches) =>
                      getKey(
                        _extends({}, location, {
                          pathname:
                            (0, _router.stripBasename)(location.pathname, basename) ||
                            location.pathname,
                        }),
                        matches,
                      )
                  : getKey;
              let disableScrollRestoration =
                router == null
                  ? void 0
                  : router.enableScrollRestoration(
                      savedScrollPositions,
                      () => window.scrollY,
                      getKeyWithoutBasename,
                    );
              return () => disableScrollRestoration && disableScrollRestoration();
            }, [router, basename, getKey]);
            // Restore scrolling when state.restoreScrollPosition changes
            // eslint-disable-next-line react-hooks/rules-of-hooks
            _react.useLayoutEffect(() => {
              // Explicit false means don't do anything (used for submissions)
              if (restoreScrollPosition === false) return;
              // been here before, scroll to it
              if (typeof restoreScrollPosition === "number") {
                window.scrollTo(0, restoreScrollPosition);
                return;
              }
              // try to scroll to the hash
              if (location.hash) {
                let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
                if (el) {
                  el.scrollIntoView();
                  return;
                }
              }
              // Don't reset if this navigation opted out
              if (preventScrollReset === true) return;
              // otherwise go to the top on new locations
              window.scrollTo(0, 0);
            }, [location, restoreScrollPosition, preventScrollReset]);
          }
        }
        /**
         * Setup a callback to be fired on the window's `beforeunload` event. This is
         * useful for saving some data to `window.localStorage` just before the page
         * refreshes.
         *
         * Note: The `callback` argument should be a function created with
         * `React.useCallback()`.
         */ function useBeforeUnload(callback, options) {
          let { capture } = options || {};
          _react.useEffect(() => {
            let opts =
              capture != null
                ? {
                    capture,
                  }
                : undefined;
            window.addEventListener("beforeunload", callback, opts);
            return () => {
              window.removeEventListener("beforeunload", callback, opts);
            };
          }, [callback, capture]);
        }
        /**
         * Setup a callback to be fired on the window's `pagehide` event. This is
         * useful for saving some data to `window.localStorage` just before the page
         * refreshes.  This event is better supported than beforeunload across browsers.
         *
         * Note: The `callback` argument should be a function created with
         * `React.useCallback()`.
         */ function usePageHide(callback, options) {
          let { capture } = options || {};
          _react.useEffect(() => {
            let opts =
              capture != null
                ? {
                    capture,
                  }
                : undefined;
            window.addEventListener("pagehide", callback, opts);
            return () => {
              window.removeEventListener("pagehide", callback, opts);
            };
          }, [callback, capture]);
        }
        /**
         * Wrapper around useBlocker to show a window.confirm prompt to users instead
         * of building a custom UI with useBlocker.
         *
         * Warning: This has *a lot of rough edges* and behaves very differently (and
         * very incorrectly in some cases) across browsers if user click addition
         * back/forward navigations while the confirm is open.  Use at your own risk.
         */ function usePrompt(_ref12) {
          let { when, message } = _ref12;
          let blocker = (0, _reactRouter.useBlocker)(when);
          _react.useEffect(() => {
            if (blocker.state === "blocked") {
              let proceed = window.confirm(message);
              if (proceed)
                // This timeout is needed to avoid a weird "race" on POP navigations
                // between the `window.history` revert navigation and the result of
                // `window.confirm`
                setTimeout(blocker.proceed, 0);
              else blocker.reset();
            }
          }, [blocker, message]);
          _react.useEffect(() => {
            if (blocker.state === "blocked" && !when) blocker.reset();
          }, [blocker, when]);
        }
        /**
         * Return a boolean indicating if there is an active view transition to the
         * given href.  You can use this value to render CSS classes or viewTransitionName
         * styles onto your elements
         *
         * @param href The destination href
         * @param [opts.relative] Relative routing type ("route" | "path")
         */ function useViewTransitionState(to, opts) {
          if (opts === void 0) opts = {};
          let vtContext = _react.useContext(ViewTransitionContext);
          !(vtContext != null) &&
            (0, _router.UNSAFE_invariant)(
              false,
              "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?",
            );
          let { basename } = useDataRouterContext(DataRouterHook.useViewTransitionState);
          let path = (0, _reactRouter.useResolvedPath)(to, {
            relative: opts.relative,
          });
          if (!vtContext.isTransitioning) return false;
          let currentPath =
            (0, _router.stripBasename)(vtContext.currentLocation.pathname, basename) ||
            vtContext.currentLocation.pathname;
          let nextPath =
            (0, _router.stripBasename)(vtContext.nextLocation.pathname, basename) ||
            vtContext.nextLocation.pathname;
          // Transition is active if we're going to or coming from the indicated
          // destination.  This ensures that other PUSH navigations that reverse
          // an indicated transition apply.  I.e., on the list view you have:
          //
          //   <NavLink to="/details/1" unstable_viewTransition>
          //
          // If you click the breadcrumb back to the list view:
          //
          //   <NavLink to="/list" unstable_viewTransition>
          //
          // We should apply the transition because it's indicated as active going
          // from /list -> /details/1 and therefore should be active on the reverse
          // (even though this isn't strictly a POP reverse)
          return (
            (0, _router.matchPath)(path.pathname, nextPath) != null ||
            (0, _router.matchPath)(path.pathname, currentPath) != null
          );
        }
      },
      {
        react: "21dqq",
        "react-dom": "j6uA9",
        "react-router": "dbWyW",
        "@remix-run/router": "5ncDG",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    dbWyW: [
      function (require, module, exports) {
        /**
         * React Router v6.22.3
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        parcelHelpers.export(
          exports,
          "AbortedDeferredError",
          () => (0, _router.AbortedDeferredError),
        );
        parcelHelpers.export(exports, "NavigationType", () => (0, _router.Action));
        parcelHelpers.export(exports, "createPath", () => (0, _router.createPath));
        parcelHelpers.export(exports, "defer", () => (0, _router.defer));
        parcelHelpers.export(exports, "generatePath", () => (0, _router.generatePath));
        parcelHelpers.export(
          exports,
          "isRouteErrorResponse",
          () => (0, _router.isRouteErrorResponse),
        );
        parcelHelpers.export(exports, "json", () => (0, _router.json));
        parcelHelpers.export(exports, "matchPath", () => (0, _router.matchPath));
        parcelHelpers.export(exports, "matchRoutes", () => (0, _router.matchRoutes));
        parcelHelpers.export(exports, "parsePath", () => (0, _router.parsePath));
        parcelHelpers.export(exports, "redirect", () => (0, _router.redirect));
        parcelHelpers.export(exports, "redirectDocument", () => (0, _router.redirectDocument));
        parcelHelpers.export(exports, "resolvePath", () => (0, _router.resolvePath));
        parcelHelpers.export(exports, "Await", () => Await);
        parcelHelpers.export(exports, "MemoryRouter", () => MemoryRouter);
        parcelHelpers.export(exports, "Navigate", () => Navigate);
        parcelHelpers.export(exports, "Outlet", () => Outlet);
        parcelHelpers.export(exports, "Route", () => Route);
        parcelHelpers.export(exports, "Router", () => Router);
        parcelHelpers.export(exports, "RouterProvider", () => RouterProvider);
        parcelHelpers.export(exports, "Routes", () => Routes);
        parcelHelpers.export(exports, "UNSAFE_DataRouterContext", () => DataRouterContext);
        parcelHelpers.export(
          exports,
          "UNSAFE_DataRouterStateContext",
          () => DataRouterStateContext,
        );
        parcelHelpers.export(exports, "UNSAFE_LocationContext", () => LocationContext);
        parcelHelpers.export(exports, "UNSAFE_NavigationContext", () => NavigationContext);
        parcelHelpers.export(exports, "UNSAFE_RouteContext", () => RouteContext);
        parcelHelpers.export(exports, "UNSAFE_mapRouteProperties", () => mapRouteProperties);
        parcelHelpers.export(exports, "UNSAFE_useRouteId", () => useRouteId);
        parcelHelpers.export(exports, "UNSAFE_useRoutesImpl", () => useRoutesImpl);
        parcelHelpers.export(exports, "createMemoryRouter", () => createMemoryRouter);
        parcelHelpers.export(exports, "createRoutesFromChildren", () => createRoutesFromChildren);
        parcelHelpers.export(exports, "createRoutesFromElements", () => createRoutesFromChildren);
        parcelHelpers.export(exports, "renderMatches", () => renderMatches);
        parcelHelpers.export(exports, "useActionData", () => useActionData);
        parcelHelpers.export(exports, "useAsyncError", () => useAsyncError);
        parcelHelpers.export(exports, "useAsyncValue", () => useAsyncValue);
        parcelHelpers.export(exports, "useBlocker", () => useBlocker);
        parcelHelpers.export(exports, "useHref", () => useHref);
        parcelHelpers.export(exports, "useInRouterContext", () => useInRouterContext);
        parcelHelpers.export(exports, "useLoaderData", () => useLoaderData);
        parcelHelpers.export(exports, "useLocation", () => useLocation);
        parcelHelpers.export(exports, "useMatch", () => useMatch);
        parcelHelpers.export(exports, "useMatches", () => useMatches);
        parcelHelpers.export(exports, "useNavigate", () => useNavigate);
        parcelHelpers.export(exports, "useNavigation", () => useNavigation);
        parcelHelpers.export(exports, "useNavigationType", () => useNavigationType);
        parcelHelpers.export(exports, "useOutlet", () => useOutlet);
        parcelHelpers.export(exports, "useOutletContext", () => useOutletContext);
        parcelHelpers.export(exports, "useParams", () => useParams);
        parcelHelpers.export(exports, "useResolvedPath", () => useResolvedPath);
        parcelHelpers.export(exports, "useRevalidator", () => useRevalidator);
        parcelHelpers.export(exports, "useRouteError", () => useRouteError);
        parcelHelpers.export(exports, "useRouteLoaderData", () => useRouteLoaderData);
        parcelHelpers.export(exports, "useRoutes", () => useRoutes);
        var _react = require("react");
        var _router = require("@remix-run/router");
        function _extends() {
          _extends = Object.assign
            ? Object.assign.bind()
            : function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source)
                    if (Object.prototype.hasOwnProperty.call(source, key))
                      target[key] = source[key];
                }
                return target;
              };
          return _extends.apply(this, arguments);
        }
        // Create react-specific types from the agnostic types in @remix-run/router to
        // export from react-router
        const DataRouterContext = /*#__PURE__*/ _react.createContext(null);
        DataRouterContext.displayName = "DataRouter";
        const DataRouterStateContext = /*#__PURE__*/ _react.createContext(null);
        DataRouterStateContext.displayName = "DataRouterState";
        const AwaitContext = /*#__PURE__*/ _react.createContext(null);
        AwaitContext.displayName = "Await";
        /**
         * A Navigator is a "location changer"; it's how you get to different locations.
         *
         * Every history instance conforms to the Navigator interface, but the
         * distinction is useful primarily when it comes to the low-level `<Router>` API
         * where both the location and a navigator must be provided separately in order
         * to avoid "tearing" that may occur in a suspense-enabled app if the action
         * and/or location were to be read directly from the history instance.
         */ const NavigationContext = /*#__PURE__*/ _react.createContext(null);
        NavigationContext.displayName = "Navigation";
        const LocationContext = /*#__PURE__*/ _react.createContext(null);
        LocationContext.displayName = "Location";
        const RouteContext = /*#__PURE__*/ _react.createContext({
          outlet: null,
          matches: [],
          isDataRoute: false,
        });
        RouteContext.displayName = "Route";
        const RouteErrorContext = /*#__PURE__*/ _react.createContext(null);
        RouteErrorContext.displayName = "RouteError";
        /**
         * Returns the full href for the given "to" value. This is useful for building
         * custom links that are also accessible and preserve right-click behavior.
         *
         * @see https://reactrouter.com/hooks/use-href
         */ function useHref(to, _temp) {
          let { relative } = _temp === void 0 ? {} : _temp;
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // router loaded. We can help them understand how to avoid that.
              "useHref() may be used only in the context of a <Router> component.",
            );
          let { basename, navigator } = _react.useContext(NavigationContext);
          let { hash, pathname, search } = useResolvedPath(to, {
            relative,
          });
          let joinedPathname = pathname;
          // If we're operating within a basename, prepend it to the pathname prior
          // to creating the href.  If this is a root navigation, then just use the raw
          // basename which allows the basename to have full control over the presence
          // of a trailing slash on root links
          if (basename !== "/")
            joinedPathname =
              pathname === "/" ? basename : (0, _router.joinPaths)([basename, pathname]);
          return navigator.createHref({
            pathname: joinedPathname,
            search,
            hash,
          });
        }
        /**
         * Returns true if this component is a descendant of a `<Router>`.
         *
         * @see https://reactrouter.com/hooks/use-in-router-context
         */ function useInRouterContext() {
          return _react.useContext(LocationContext) != null;
        }
        /**
         * Returns the current location object, which represents the current URL in web
         * browsers.
         *
         * Note: If you're using this it may mean you're doing some of your own
         * "routing" in your app, and we'd like to know what your use case is. We may
         * be able to provide something higher-level to better suit your needs.
         *
         * @see https://reactrouter.com/hooks/use-location
         */ function useLocation() {
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // router loaded. We can help them understand how to avoid that.
              "useLocation() may be used only in the context of a <Router> component.",
            );
          return _react.useContext(LocationContext).location;
        }
        /**
         * Returns the current navigation action which describes how the router came to
         * the current location, either by a pop, push, or replace on the history stack.
         *
         * @see https://reactrouter.com/hooks/use-navigation-type
         */ function useNavigationType() {
          return _react.useContext(LocationContext).navigationType;
        }
        /**
         * Returns a PathMatch object if the given pattern matches the current URL.
         * This is useful for components that need to know "active" state, e.g.
         * `<NavLink>`.
         *
         * @see https://reactrouter.com/hooks/use-match
         */ function useMatch(pattern) {
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // router loaded. We can help them understand how to avoid that.
              "useMatch() may be used only in the context of a <Router> component.",
            );
          let { pathname } = useLocation();
          return _react.useMemo(
            () => (0, _router.matchPath)(pattern, pathname),
            [pathname, pattern],
          );
        }
        /**
         * The interface for the navigate() function returned from useNavigate().
         */ const navigateEffectWarning =
          "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
        // Mute warnings for calls to useNavigate in SSR environments
        function useIsomorphicLayoutEffect(cb) {
          let isStatic = _react.useContext(NavigationContext).static;
          if (!isStatic)
            // We should be able to get rid of this once react 18.3 is released
            // See: https://github.com/facebook/react/pull/26395
            // eslint-disable-next-line react-hooks/rules-of-hooks
            _react.useLayoutEffect(cb);
        }
        /**
         * Returns an imperative method for changing the location. Used by `<Link>`s, but
         * may also be used by other elements to change the location.
         *
         * @see https://reactrouter.com/hooks/use-navigate
         */ function useNavigate() {
          let { isDataRoute } = _react.useContext(RouteContext);
          // Conditional usage is OK here because the usage of a data router is static
          // eslint-disable-next-line react-hooks/rules-of-hooks
          return isDataRoute ? useNavigateStable() : useNavigateUnstable();
        }
        function useNavigateUnstable() {
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // router loaded. We can help them understand how to avoid that.
              "useNavigate() may be used only in the context of a <Router> component.",
            );
          let dataRouterContext = _react.useContext(DataRouterContext);
          let { basename, future, navigator } = _react.useContext(NavigationContext);
          let { matches } = _react.useContext(RouteContext);
          let { pathname: locationPathname } = useLocation();
          let routePathnamesJson = JSON.stringify(
            (0, _router.UNSAFE_getResolveToMatches)(matches, future.v7_relativeSplatPath),
          );
          let activeRef = _react.useRef(false);
          useIsomorphicLayoutEffect(() => {
            activeRef.current = true;
          });
          let navigate = _react.useCallback(
            function (to, options) {
              if (options === void 0) options = {};
              (0, _router.UNSAFE_warning)(activeRef.current, navigateEffectWarning);
              // Short circuit here since if this happens on first render the navigate
              // is useless because we haven't wired up our history listener yet
              if (!activeRef.current) return;
              if (typeof to === "number") {
                navigator.go(to);
                return;
              }
              let path = (0, _router.resolveTo)(
                to,
                JSON.parse(routePathnamesJson),
                locationPathname,
                options.relative === "path",
              );
              // If we're operating within a basename, prepend it to the pathname prior
              // to handing off to history (but only if we're not in a data router,
              // otherwise it'll prepend the basename inside of the router).
              // If this is a root navigation, then we navigate to the raw basename
              // which allows the basename to have full control over the presence of a
              // trailing slash on root links
              if (dataRouterContext == null && basename !== "/")
                path.pathname =
                  path.pathname === "/"
                    ? basename
                    : (0, _router.joinPaths)([basename, path.pathname]);
              (!!options.replace ? navigator.replace : navigator.push)(
                path,
                options.state,
                options,
              );
            },
            [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext],
          );
          return navigate;
        }
        const OutletContext = /*#__PURE__*/ _react.createContext(null);
        /**
         * Returns the context (if provided) for the child route at this level of the route
         * hierarchy.
         * @see https://reactrouter.com/hooks/use-outlet-context
         */ function useOutletContext() {
          return _react.useContext(OutletContext);
        }
        /**
         * Returns the element for the child route at this level of the route
         * hierarchy. Used internally by `<Outlet>` to render child routes.
         *
         * @see https://reactrouter.com/hooks/use-outlet
         */ function useOutlet(context) {
          let outlet = _react.useContext(RouteContext).outlet;
          if (outlet)
            return /*#__PURE__*/ _react.createElement(
              OutletContext.Provider,
              {
                value: context,
              },
              outlet,
            );
          return outlet;
        }
        /**
         * Returns an object of key/value pairs of the dynamic params from the current
         * URL that were matched by the route path.
         *
         * @see https://reactrouter.com/hooks/use-params
         */ function useParams() {
          let { matches } = _react.useContext(RouteContext);
          let routeMatch = matches[matches.length - 1];
          return routeMatch ? routeMatch.params : {};
        }
        /**
         * Resolves the pathname of the given `to` value against the current location.
         *
         * @see https://reactrouter.com/hooks/use-resolved-path
         */ function useResolvedPath(to, _temp2) {
          let { relative } = _temp2 === void 0 ? {} : _temp2;
          let { future } = _react.useContext(NavigationContext);
          let { matches } = _react.useContext(RouteContext);
          let { pathname: locationPathname } = useLocation();
          let routePathnamesJson = JSON.stringify(
            (0, _router.UNSAFE_getResolveToMatches)(matches, future.v7_relativeSplatPath),
          );
          return _react.useMemo(
            () =>
              (0, _router.resolveTo)(
                to,
                JSON.parse(routePathnamesJson),
                locationPathname,
                relative === "path",
              ),
            [to, routePathnamesJson, locationPathname, relative],
          );
        }
        /**
         * Returns the element of the route that matched the current location, prepared
         * with the correct context to render the remainder of the route tree. Route
         * elements in the tree must render an `<Outlet>` to render their child route's
         * element.
         *
         * @see https://reactrouter.com/hooks/use-routes
         */ function useRoutes(routes, locationArg) {
          return useRoutesImpl(routes, locationArg);
        }
        // Internal implementation with accept optional param for RouterProvider usage
        function useRoutesImpl(routes, locationArg, dataRouterState, future) {
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // router loaded. We can help them understand how to avoid that.
              "useRoutes() may be used only in the context of a <Router> component.",
            );
          let { navigator } = _react.useContext(NavigationContext);
          let { matches: parentMatches } = _react.useContext(RouteContext);
          let routeMatch = parentMatches[parentMatches.length - 1];
          let parentParams = routeMatch ? routeMatch.params : {};
          let parentPathname = routeMatch ? routeMatch.pathname : "/";
          let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
          let parentRoute = routeMatch && routeMatch.route;
          {
            // You won't get a warning about 2 different <Routes> under a <Route>
            // without a trailing *, but this is a best-effort warning anyway since we
            // cannot even give the warning unless they land at the parent route.
            //
            // Example:
            //
            // <Routes>
            //   {/* This route path MUST end with /* because otherwise
            //       it will never match /blog/post/123 */}
            //   <Route path="blog" element={<Blog />} />
            //   <Route path="blog/feed" element={<BlogFeed />} />
            // </Routes>
            //
            // function Blog() {
            //   return (
            //     <Routes>
            //       <Route path="post/:id" element={<Post />} />
            //     </Routes>
            //   );
            // }
            let parentPath = (parentRoute && parentRoute.path) || "";
            warningOnce(
              parentPathname,
              !parentRoute || parentPath.endsWith("*"),
              "You rendered descendant <Routes> (or called `useRoutes()`) at " +
                ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') +
                'parent route path has no trailing "*". This means if you navigate ' +
                "deeper, the parent won't match anymore and therefore the child " +
                "routes will never render.\n\n" +
                ('Please change the parent <Route path="' + parentPath + '"> to <Route ') +
                ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'),
            );
          }
          let locationFromContext = useLocation();
          let location;
          if (locationArg) {
            var _parsedLocationArg$pa;
            let parsedLocationArg =
              typeof locationArg === "string" ? (0, _router.parsePath)(locationArg) : locationArg;
            !(
              parentPathnameBase === "/" ||
              ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null
                ? void 0
                : _parsedLocationArg$pa.startsWith(parentPathnameBase))
            ) &&
              (0, _router.UNSAFE_invariant)(
                false,
                "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " +
                  ('matched by all parent routes. The current pathname base is "' +
                    parentPathnameBase +
                    '" ') +
                  ('but pathname "' +
                    parsedLocationArg.pathname +
                    '" was given in the `location` prop.'),
              );
            location = parsedLocationArg;
          } else location = locationFromContext;
          let pathname = location.pathname || "/";
          let remainingPathname = pathname;
          if (parentPathnameBase !== "/") {
            // Determine the remaining pathname by removing the # of URL segments the
            // parentPathnameBase has, instead of removing based on character count.
            // This is because we can't guarantee that incoming/outgoing encodings/
            // decodings will match exactly.
            // We decode paths before matching on a per-segment basis with
            // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they
            // match what `window.location.pathname` would reflect.  Those don't 100%
            // align when it comes to encoded URI characters such as % and &.
            //
            // So we may end up with:
            //   pathname:           "/descendant/a%25b/match"
            //   parentPathnameBase: "/descendant/a%b"
            //
            // And the direct substring removal approach won't work :/
            let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
            let segments = pathname.replace(/^\//, "").split("/");
            remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
          }
          let matches = (0, _router.matchRoutes)(routes, {
            pathname: remainingPathname,
          });
          (0, _router.UNSAFE_warning)(
            parentRoute || matches != null,
            'No routes matched location "' +
              location.pathname +
              location.search +
              location.hash +
              '" ',
          );
          (0, _router.UNSAFE_warning)(
            matches == null ||
              matches[matches.length - 1].route.element !== undefined ||
              matches[matches.length - 1].route.Component !== undefined ||
              matches[matches.length - 1].route.lazy !== undefined,
            'Matched leaf route at location "' +
              location.pathname +
              location.search +
              location.hash +
              '" ' +
              "does not have an element or Component. This means it will render an <Outlet /> with a " +
              'null value by default resulting in an "empty" page.',
          );
          let renderedMatches = _renderMatches(
            matches &&
              matches.map((match) =>
                Object.assign({}, match, {
                  params: Object.assign({}, parentParams, match.params),
                  pathname: (0, _router.joinPaths)([
                    parentPathnameBase,
                    // Re-encode pathnames that were decoded inside matchRoutes
                    navigator.encodeLocation
                      ? navigator.encodeLocation(match.pathname).pathname
                      : match.pathname,
                  ]),
                  pathnameBase:
                    match.pathnameBase === "/"
                      ? parentPathnameBase
                      : (0, _router.joinPaths)([
                          parentPathnameBase,
                          // Re-encode pathnames that were decoded inside matchRoutes
                          navigator.encodeLocation
                            ? navigator.encodeLocation(match.pathnameBase).pathname
                            : match.pathnameBase,
                        ]),
                }),
              ),
            parentMatches,
            dataRouterState,
            future,
          );
          // When a user passes in a `locationArg`, the associated routes need to
          // be wrapped in a new `LocationContext.Provider` in order for `useLocation`
          // to use the scoped location instead of the global location.
          if (locationArg && renderedMatches)
            return /*#__PURE__*/ _react.createElement(
              LocationContext.Provider,
              {
                value: {
                  location: _extends(
                    {
                      pathname: "/",
                      search: "",
                      hash: "",
                      state: null,
                      key: "default",
                    },
                    location,
                  ),
                  navigationType: (0, _router.Action).Pop,
                },
              },
              renderedMatches,
            );
          return renderedMatches;
        }
        function DefaultErrorComponent() {
          let error = useRouteError();
          let message = (0, _router.isRouteErrorResponse)(error)
            ? error.status + " " + error.statusText
            : error instanceof Error
            ? error.message
            : JSON.stringify(error);
          let stack = error instanceof Error ? error.stack : null;
          let lightgrey = "rgba(200,200,200, 0.5)";
          let preStyles = {
            padding: "0.5rem",
            backgroundColor: lightgrey,
          };
          let codeStyles = {
            padding: "2px 4px",
            backgroundColor: lightgrey,
          };
          let devInfo = null;
          console.error("Error handled by React Router default ErrorBoundary:", error);
          devInfo = /*#__PURE__*/ _react.createElement(
            _react.Fragment,
            null,
            /*#__PURE__*/ _react.createElement(
              "p",
              null,
              "\uD83D\uDCBF Hey developer \uD83D\uDC4B",
            ),
            /*#__PURE__*/ _react.createElement(
              "p",
              null,
              "You can provide a way better UX than this when your app throws errors by providing your own ",
              /*#__PURE__*/ _react.createElement(
                "code",
                {
                  style: codeStyles,
                },
                "ErrorBoundary",
              ),
              " or",
              " ",
              /*#__PURE__*/ _react.createElement(
                "code",
                {
                  style: codeStyles,
                },
                "errorElement",
              ),
              " prop on your route.",
            ),
          );
          return /*#__PURE__*/ _react.createElement(
            _react.Fragment,
            null,
            /*#__PURE__*/ _react.createElement("h2", null, "Unexpected Application Error!"),
            /*#__PURE__*/ _react.createElement(
              "h3",
              {
                style: {
                  fontStyle: "italic",
                },
              },
              message,
            ),
            stack
              ? /*#__PURE__*/ _react.createElement(
                  "pre",
                  {
                    style: preStyles,
                  },
                  stack,
                )
              : null,
            devInfo,
          );
        }
        const defaultErrorElement = /*#__PURE__*/ _react.createElement(DefaultErrorComponent, null);
        class RenderErrorBoundary extends _react.Component {
          constructor(props) {
            super(props);
            this.state = {
              location: props.location,
              revalidation: props.revalidation,
              error: props.error,
            };
          }
          static getDerivedStateFromError(error) {
            return {
              error: error,
            };
          }
          static getDerivedStateFromProps(props, state) {
            // When we get into an error state, the user will likely click "back" to the
            // previous page that didn't have an error. Because this wraps the entire
            // application, that will have no effect--the error page continues to display.
            // This gives us a mechanism to recover from the error when the location changes.
            //
            // Whether we're in an error state or not, we update the location in state
            // so that when we are in an error state, it gets reset when a new location
            // comes in and the user recovers from the error.
            if (
              state.location !== props.location ||
              (state.revalidation !== "idle" && props.revalidation === "idle")
            )
              return {
                error: props.error,
                location: props.location,
                revalidation: props.revalidation,
              };
            // If we're not changing locations, preserve the location but still surface
            // any new errors that may come through. We retain the existing error, we do
            // this because the error provided from the app state may be cleared without
            // the location changing.
            return {
              error: props.error !== undefined ? props.error : state.error,
              location: state.location,
              revalidation: props.revalidation || state.revalidation,
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error(
              "React Router caught the following error during render",
              error,
              errorInfo,
            );
          }
          render() {
            return this.state.error !== undefined
              ? /*#__PURE__*/ _react.createElement(
                  RouteContext.Provider,
                  {
                    value: this.props.routeContext,
                  },
                  /*#__PURE__*/ _react.createElement(RouteErrorContext.Provider, {
                    value: this.state.error,
                    children: this.props.component,
                  }),
                )
              : this.props.children;
          }
        }
        function RenderedRoute(_ref) {
          let { routeContext, match, children } = _ref;
          let dataRouterContext = _react.useContext(DataRouterContext);
          // Track how deep we got in our render pass to emulate SSR componentDidCatch
          // in a DataStaticRouter
          if (
            dataRouterContext &&
            dataRouterContext.static &&
            dataRouterContext.staticContext &&
            (match.route.errorElement || match.route.ErrorBoundary)
          )
            dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
          return /*#__PURE__*/ _react.createElement(
            RouteContext.Provider,
            {
              value: routeContext,
            },
            children,
          );
        }
        function _renderMatches(matches, parentMatches, dataRouterState, future) {
          var _dataRouterState2;
          if (parentMatches === void 0) parentMatches = [];
          if (dataRouterState === void 0) dataRouterState = null;
          if (future === void 0) future = null;
          if (matches == null) {
            var _dataRouterState;
            if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors)
              // Don't bail if we have data router errors so we can render them in the
              // boundary.  Use the pre-matched (or shimmed) matches
              matches = dataRouterState.matches;
            else return null;
          }
          let renderedMatches = matches;
          // If we have data errors, trim matches to the highest error boundary
          let errors =
            (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
          if (errors != null) {
            let errorIndex = renderedMatches.findIndex(
              (m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]),
            );
            !(errorIndex >= 0) &&
              (0, _router.UNSAFE_invariant)(
                false,
                "Could not find a matching route for errors on route IDs: " +
                  Object.keys(errors).join(","),
              );
            renderedMatches = renderedMatches.slice(
              0,
              Math.min(renderedMatches.length, errorIndex + 1),
            );
          }
          // If we're in a partial hydration mode, detect if we need to render down to
          // a given HydrateFallback while we load the rest of the hydration data
          let renderFallback = false;
          let fallbackIndex = -1;
          if (dataRouterState && future && future.v7_partialHydration)
            for (let i = 0; i < renderedMatches.length; i++) {
              let match = renderedMatches[i];
              // Track the deepest fallback up until the first route without data
              if (match.route.HydrateFallback || match.route.hydrateFallbackElement)
                fallbackIndex = i;
              if (match.route.id) {
                let { loaderData, errors } = dataRouterState;
                let needsToRunLoader =
                  match.route.loader &&
                  loaderData[match.route.id] === undefined &&
                  (!errors || errors[match.route.id] === undefined);
                if (match.route.lazy || needsToRunLoader) {
                  // We found the first route that's not ready to render (waiting on
                  // lazy, or has a loader that hasn't run yet).  Flag that we need to
                  // render a fallback and render up until the appropriate fallback
                  renderFallback = true;
                  if (fallbackIndex >= 0)
                    renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
                  else renderedMatches = [renderedMatches[0]];
                  break;
                }
              }
            }
          return renderedMatches.reduceRight((outlet, match, index) => {
            // Only data routers handle errors/fallbacks
            let error;
            let shouldRenderHydrateFallback = false;
            let errorElement = null;
            let hydrateFallbackElement = null;
            if (dataRouterState) {
              error = errors && match.route.id ? errors[match.route.id] : undefined;
              errorElement = match.route.errorElement || defaultErrorElement;
              if (renderFallback) {
                if (fallbackIndex < 0 && index === 0) {
                  warningOnce(
                    "route-fallback",
                    false,
                    "No `HydrateFallback` element provided to render during initial hydration",
                  );
                  shouldRenderHydrateFallback = true;
                  hydrateFallbackElement = null;
                } else if (fallbackIndex === index) {
                  shouldRenderHydrateFallback = true;
                  hydrateFallbackElement = match.route.hydrateFallbackElement || null;
                }
              }
            }
            let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));
            let getChildren = () => {
              let children;
              if (error) children = errorElement;
              else if (shouldRenderHydrateFallback) children = hydrateFallbackElement;
              else if (match.route.Component)
                // Note: This is a de-optimized path since React won't re-use the
                // ReactElement since it's identity changes with each new
                // React.createElement call.  We keep this so folks can use
                // `<Route Component={...}>` in `<Routes>` but generally `Component`
                // usage is only advised in `RouterProvider` when we can convert it to
                // `element` ahead of time.
                children = /*#__PURE__*/ _react.createElement(match.route.Component, null);
              else if (match.route.element) children = match.route.element;
              else children = outlet;
              return /*#__PURE__*/ _react.createElement(RenderedRoute, {
                match: match,
                routeContext: {
                  outlet,
                  matches,
                  isDataRoute: dataRouterState != null,
                },
                children: children,
              });
            };
            // Only wrap in an error boundary within data router usages when we have an
            // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to
            // an ancestor ErrorBoundary/errorElement
            return dataRouterState &&
              (match.route.ErrorBoundary || match.route.errorElement || index === 0)
              ? /*#__PURE__*/ _react.createElement(RenderErrorBoundary, {
                  location: dataRouterState.location,
                  revalidation: dataRouterState.revalidation,
                  component: errorElement,
                  error: error,
                  children: getChildren(),
                  routeContext: {
                    outlet: null,
                    matches,
                    isDataRoute: true,
                  },
                })
              : getChildren();
          }, null);
        }
        var DataRouterHook = /*#__PURE__*/ (function (DataRouterHook) {
          DataRouterHook["UseBlocker"] = "useBlocker";
          DataRouterHook["UseRevalidator"] = "useRevalidator";
          DataRouterHook["UseNavigateStable"] = "useNavigate";
          return DataRouterHook;
        })(DataRouterHook || {});
        var DataRouterStateHook = /*#__PURE__*/ (function (DataRouterStateHook) {
          DataRouterStateHook["UseBlocker"] = "useBlocker";
          DataRouterStateHook["UseLoaderData"] = "useLoaderData";
          DataRouterStateHook["UseActionData"] = "useActionData";
          DataRouterStateHook["UseRouteError"] = "useRouteError";
          DataRouterStateHook["UseNavigation"] = "useNavigation";
          DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";
          DataRouterStateHook["UseMatches"] = "useMatches";
          DataRouterStateHook["UseRevalidator"] = "useRevalidator";
          DataRouterStateHook["UseNavigateStable"] = "useNavigate";
          DataRouterStateHook["UseRouteId"] = "useRouteId";
          return DataRouterStateHook;
        })(DataRouterStateHook || {});
        function getDataRouterConsoleError(hookName) {
          return (
            hookName +
            " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router."
          );
        }
        function useDataRouterContext(hookName) {
          let ctx = _react.useContext(DataRouterContext);
          !ctx && (0, _router.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName));
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state = _react.useContext(DataRouterStateContext);
          !state && (0, _router.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName));
          return state;
        }
        function useRouteContext(hookName) {
          let route = _react.useContext(RouteContext);
          !route && (0, _router.UNSAFE_invariant)(false, getDataRouterConsoleError(hookName));
          return route;
        }
        // Internal version with hookName-aware debugging
        function useCurrentRouteId(hookName) {
          let route = useRouteContext(hookName);
          let thisRoute = route.matches[route.matches.length - 1];
          !thisRoute.route.id &&
            (0, _router.UNSAFE_invariant)(
              false,
              hookName + ' can only be used on routes that contain a unique "id"',
            );
          return thisRoute.route.id;
        }
        /**
         * Returns the ID for the nearest contextual route
         */ function useRouteId() {
          return useCurrentRouteId(DataRouterStateHook.UseRouteId);
        }
        /**
         * Returns the current navigation, defaulting to an "idle" navigation when
         * no navigation is in progress
         */ function useNavigation() {
          let state = useDataRouterState(DataRouterStateHook.UseNavigation);
          return state.navigation;
        }
        /**
         * Returns a revalidate function for manually triggering revalidation, as well
         * as the current state of any manual revalidations
         */ function useRevalidator() {
          let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);
          let state = useDataRouterState(DataRouterStateHook.UseRevalidator);
          return _react.useMemo(
            () => ({
              revalidate: dataRouterContext.router.revalidate,
              state: state.revalidation,
            }),
            [dataRouterContext.router.revalidate, state.revalidation],
          );
        }
        /**
         * Returns the active route matches, useful for accessing loaderData for
         * parent/child routes or the route "handle" property
         */ function useMatches() {
          let { matches, loaderData } = useDataRouterState(DataRouterStateHook.UseMatches);
          return _react.useMemo(
            () => matches.map((m) => (0, _router.UNSAFE_convertRouteMatchToUiMatch)(m, loaderData)),
            [matches, loaderData],
          );
        }
        /**
         * Returns the loader data for the nearest ancestor Route loader
         */ function useLoaderData() {
          let state = useDataRouterState(DataRouterStateHook.UseLoaderData);
          let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
          if (state.errors && state.errors[routeId] != null) {
            console.error(
              "You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")",
            );
            return undefined;
          }
          return state.loaderData[routeId];
        }
        /**
         * Returns the loaderData for the given routeId
         */ function useRouteLoaderData(routeId) {
          let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);
          return state.loaderData[routeId];
        }
        /**
         * Returns the action data for the nearest ancestor Route action
         */ function useActionData() {
          let state = useDataRouterState(DataRouterStateHook.UseActionData);
          let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
          return state.actionData ? state.actionData[routeId] : undefined;
        }
        /**
         * Returns the nearest ancestor Route error, which could be a loader/action
         * error or a render error.  This is intended to be called from your
         * ErrorBoundary/errorElement to display a proper error message.
         */ function useRouteError() {
          var _state$errors;
          let error = _react.useContext(RouteErrorContext);
          let state = useDataRouterState(DataRouterStateHook.UseRouteError);
          let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
          // If this was a render error, we put it in a RouteError context inside
          // of RenderErrorBoundary
          if (error !== undefined) return error;
          // Otherwise look for errors from our data router state
          return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
        }
        /**
         * Returns the happy-path data from the nearest ancestor `<Await />` value
         */ function useAsyncValue() {
          let value = _react.useContext(AwaitContext);
          return value == null ? void 0 : value._data;
        }
        /**
         * Returns the error from the nearest ancestor `<Await />` value
         */ function useAsyncError() {
          let value = _react.useContext(AwaitContext);
          return value == null ? void 0 : value._error;
        }
        let blockerId = 0;
        /**
         * Allow the application to block navigations within the SPA and present the
         * user a confirmation dialog to confirm the navigation.  Mostly used to avoid
         * using half-filled form data.  This does not handle hard-reloads or
         * cross-origin navigations.
         */ function useBlocker(shouldBlock) {
          let { router, basename } = useDataRouterContext(DataRouterHook.UseBlocker);
          let state = useDataRouterState(DataRouterStateHook.UseBlocker);
          let [blockerKey, setBlockerKey] = _react.useState("");
          let blockerFunction = _react.useCallback(
            (arg) => {
              if (typeof shouldBlock !== "function") return !!shouldBlock;
              if (basename === "/") return shouldBlock(arg);
              // If they provided us a function and we've got an active basename, strip
              // it from the locations we expose to the user to match the behavior of
              // useLocation
              let { currentLocation, nextLocation, historyAction } = arg;
              return shouldBlock({
                currentLocation: _extends({}, currentLocation, {
                  pathname:
                    (0, _router.stripBasename)(currentLocation.pathname, basename) ||
                    currentLocation.pathname,
                }),
                nextLocation: _extends({}, nextLocation, {
                  pathname:
                    (0, _router.stripBasename)(nextLocation.pathname, basename) ||
                    nextLocation.pathname,
                }),
                historyAction,
              });
            },
            [basename, shouldBlock],
          );
          // This effect is in charge of blocker key assignment and deletion (which is
          // tightly coupled to the key)
          _react.useEffect(() => {
            let key = String(++blockerId);
            setBlockerKey(key);
            return () => router.deleteBlocker(key);
          }, [router]);
          // This effect handles assigning the blockerFunction.  This is to handle
          // unstable blocker function identities, and happens only after the prior
          // effect so we don't get an orphaned blockerFunction in the router with a
          // key of "".  Until then we just have the IDLE_BLOCKER.
          _react.useEffect(() => {
            if (blockerKey !== "") router.getBlocker(blockerKey, blockerFunction);
          }, [router, blockerKey, blockerFunction]);
          // Prefer the blocker from `state` not `router.state` since DataRouterContext
          // is memoized so this ensures we update on blocker state updates
          return blockerKey && state.blockers.has(blockerKey)
            ? state.blockers.get(blockerKey)
            : (0, _router.IDLE_BLOCKER);
        }
        /**
         * Stable version of useNavigate that is used when we are in the context of
         * a RouterProvider.
         */ function useNavigateStable() {
          let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);
          let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
          let activeRef = _react.useRef(false);
          useIsomorphicLayoutEffect(() => {
            activeRef.current = true;
          });
          let navigate = _react.useCallback(
            function (to, options) {
              if (options === void 0) options = {};
              (0, _router.UNSAFE_warning)(activeRef.current, navigateEffectWarning);
              // Short circuit here since if this happens on first render the navigate
              // is useless because we haven't wired up our router subscriber yet
              if (!activeRef.current) return;
              if (typeof to === "number") router.navigate(to);
              else
                router.navigate(
                  to,
                  _extends(
                    {
                      fromRouteId: id,
                    },
                    options,
                  ),
                );
            },
            [router, id],
          );
          return navigate;
        }
        const alreadyWarned = {};
        function warningOnce(key, cond, message) {
          if (!cond && !alreadyWarned[key]) {
            alreadyWarned[key] = true;
            (0, _router.UNSAFE_warning)(false, message);
          }
        }
        /**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const START_TRANSITION = "startTransition";
        const startTransitionImpl = _react[START_TRANSITION];
        /**
         * Given a Remix Router instance, render the appropriate UI
         */ function RouterProvider(_ref) {
          let { fallbackElement, router, future } = _ref;
          let [state, setStateImpl] = _react.useState(router.state);
          let { v7_startTransition } = future || {};
          let setState = _react.useCallback(
            (newState) => {
              if (v7_startTransition && startTransitionImpl)
                startTransitionImpl(() => setStateImpl(newState));
              else setStateImpl(newState);
            },
            [setStateImpl, v7_startTransition],
          );
          // Need to use a layout effect here so we are subscribed early enough to
          // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
          _react.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
          _react.useEffect(() => {
            (0, _router.UNSAFE_warning)(
              fallbackElement == null || !router.future.v7_partialHydration,
              "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead",
            );
            // Only log this once on initial mount
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, []);
          let navigator = _react.useMemo(() => {
            return {
              createHref: router.createHref,
              encodeLocation: router.encodeLocation,
              go: (n) => router.navigate(n),
              push: (to, state, opts) =>
                router.navigate(to, {
                  state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset,
                }),
              replace: (to, state, opts) =>
                router.navigate(to, {
                  replace: true,
                  state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset,
                }),
            };
          }, [router]);
          let basename = router.basename || "/";
          let dataRouterContext = _react.useMemo(
            () => ({
              router,
              navigator,
              static: false,
              basename,
            }),
            [router, navigator, basename],
          );
          // The fragment and {null} here are important!  We need them to keep React 18's
          // useId happy when we are server-rendering since we may have a <script> here
          // containing the hydrated server-side staticContext (from StaticRouterProvider).
          // useId relies on the component tree structure to generate deterministic id's
          // so we need to ensure it remains the same on the client even though
          // we don't need the <script> tag
          return /*#__PURE__*/ _react.createElement(
            _react.Fragment,
            null,
            /*#__PURE__*/ _react.createElement(
              DataRouterContext.Provider,
              {
                value: dataRouterContext,
              },
              /*#__PURE__*/ _react.createElement(
                DataRouterStateContext.Provider,
                {
                  value: state,
                },
                /*#__PURE__*/ _react.createElement(
                  Router,
                  {
                    basename: basename,
                    location: state.location,
                    navigationType: state.historyAction,
                    navigator: navigator,
                    future: {
                      v7_relativeSplatPath: router.future.v7_relativeSplatPath,
                    },
                  },
                  state.initialized || router.future.v7_partialHydration
                    ? /*#__PURE__*/ _react.createElement(DataRoutes, {
                        routes: router.routes,
                        future: router.future,
                        state: state,
                      })
                    : fallbackElement,
                ),
              ),
            ),
            null,
          );
        }
        function DataRoutes(_ref2) {
          let { routes, future, state } = _ref2;
          return useRoutesImpl(routes, undefined, state, future);
        }
        /**
         * A `<Router>` that stores all entries in memory.
         *
         * @see https://reactrouter.com/router-components/memory-router
         */ function MemoryRouter(_ref3) {
          let { basename, children, initialEntries, initialIndex, future } = _ref3;
          let historyRef = _react.useRef();
          if (historyRef.current == null)
            historyRef.current = (0, _router.createMemoryHistory)({
              initialEntries,
              initialIndex,
              v5Compat: true,
            });
          let history = historyRef.current;
          let [state, setStateImpl] = _react.useState({
            action: history.action,
            location: history.location,
          });
          let { v7_startTransition } = future || {};
          let setState = _react.useCallback(
            (newState) => {
              v7_startTransition && startTransitionImpl
                ? startTransitionImpl(() => setStateImpl(newState))
                : setStateImpl(newState);
            },
            [setStateImpl, v7_startTransition],
          );
          _react.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /*#__PURE__*/ _react.createElement(Router, {
            basename: basename,
            children: children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
            future: future,
          });
        }
        /**
         * Changes the current location.
         *
         * Note: This API is mostly useful in React.Component subclasses that are not
         * able to use hooks. In functional components, we recommend you use the
         * `useNavigate` hook instead.
         *
         * @see https://reactrouter.com/components/navigate
         */ function Navigate(_ref4) {
          let { to, replace, state, relative } = _ref4;
          !useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false, // the router loaded. We can help them understand how to avoid that.
              "<Navigate> may be used only in the context of a <Router> component.",
            );
          let { future, static: isStatic } = _react.useContext(NavigationContext);
          (0, _router.UNSAFE_warning)(
            !isStatic,
            "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.",
          );
          let { matches } = _react.useContext(RouteContext);
          let { pathname: locationPathname } = useLocation();
          let navigate = useNavigate();
          // Resolve the path outside of the effect so that when effects run twice in
          // StrictMode they navigate to the same place
          let path = (0, _router.resolveTo)(
            to,
            (0, _router.UNSAFE_getResolveToMatches)(matches, future.v7_relativeSplatPath),
            locationPathname,
            relative === "path",
          );
          let jsonPath = JSON.stringify(path);
          _react.useEffect(
            () =>
              navigate(JSON.parse(jsonPath), {
                replace,
                state,
                relative,
              }),
            [navigate, jsonPath, relative, replace, state],
          );
          return null;
        }
        /**
         * Renders the child route's element, if there is one.
         *
         * @see https://reactrouter.com/components/outlet
         */ function Outlet(props) {
          return useOutlet(props.context);
        }
        /**
         * Declares an element that should be rendered at a certain URL path.
         *
         * @see https://reactrouter.com/components/route
         */ function Route(_props) {
          (0, _router.UNSAFE_invariant)(
            false,
            "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.",
          );
        }
        /**
         * Provides location context for the rest of the app.
         *
         * Note: You usually won't render a `<Router>` directly. Instead, you'll render a
         * router that is more specific to your environment such as a `<BrowserRouter>`
         * in web browsers or a `<StaticRouter>` for server rendering.
         *
         * @see https://reactrouter.com/router-components/router
         */ function Router(_ref5) {
          let {
            basename: basenameProp = "/",
            children = null,
            location: locationProp,
            navigationType = (0, _router.Action).Pop,
            navigator,
            static: staticProp = false,
            future,
          } = _ref5;
          !!useInRouterContext() &&
            (0, _router.UNSAFE_invariant)(
              false,
              "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.",
            );
          // Preserve trailing slashes on basename, so we can let the user control
          // the enforcement of trailing slashes throughout the app
          let basename = basenameProp.replace(/^\/*/, "/");
          let navigationContext = _react.useMemo(
            () => ({
              basename,
              navigator,
              static: staticProp,
              future: _extends(
                {
                  v7_relativeSplatPath: false,
                },
                future,
              ),
            }),
            [basename, future, navigator, staticProp],
          );
          if (typeof locationProp === "string") locationProp = (0, _router.parsePath)(locationProp);
          let {
            pathname = "/",
            search = "",
            hash = "",
            state = null,
            key = "default",
          } = locationProp;
          let locationContext = _react.useMemo(() => {
            let trailingPathname = (0, _router.stripBasename)(pathname, basename);
            if (trailingPathname == null) return null;
            return {
              location: {
                pathname: trailingPathname,
                search,
                hash,
                state,
                key,
              },
              navigationType,
            };
          }, [basename, pathname, search, hash, state, key, navigationType]);
          (0, _router.UNSAFE_warning)(
            locationContext != null,
            '<Router basename="' +
              basename +
              '"> is not able to match the URL ' +
              ('"' + pathname + search + hash + '" because it does not start with the ') +
              "basename, so the <Router> won't render anything.",
          );
          if (locationContext == null) return null;
          return /*#__PURE__*/ _react.createElement(
            NavigationContext.Provider,
            {
              value: navigationContext,
            },
            /*#__PURE__*/ _react.createElement(LocationContext.Provider, {
              children: children,
              value: locationContext,
            }),
          );
        }
        /**
         * A container for a nested tree of `<Route>` elements that renders the branch
         * that best matches the current location.
         *
         * @see https://reactrouter.com/components/routes
         */ function Routes(_ref6) {
          let { children, location } = _ref6;
          return useRoutes(createRoutesFromChildren(children), location);
        }
        /**
         * Component to use for rendering lazily loaded data from returning defer()
         * in a loader function
         */ function Await(_ref7) {
          let { children, errorElement, resolve } = _ref7;
          return /*#__PURE__*/ _react.createElement(
            AwaitErrorBoundary,
            {
              resolve: resolve,
              errorElement: errorElement,
            },
            /*#__PURE__*/ _react.createElement(ResolveAwait, null, children),
          );
        }
        var AwaitRenderStatus = /*#__PURE__*/ (function (AwaitRenderStatus) {
          AwaitRenderStatus[(AwaitRenderStatus["pending"] = 0)] = "pending";
          AwaitRenderStatus[(AwaitRenderStatus["success"] = 1)] = "success";
          AwaitRenderStatus[(AwaitRenderStatus["error"] = 2)] = "error";
          return AwaitRenderStatus;
        })(AwaitRenderStatus || {});
        const neverSettledPromise = new Promise(() => {});
        class AwaitErrorBoundary extends _react.Component {
          constructor(props) {
            super(props);
            this.state = {
              error: null,
            };
          }
          static getDerivedStateFromError(error) {
            return {
              error,
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error("<Await> caught the following error during render", error, errorInfo);
          }
          render() {
            let { children, errorElement, resolve } = this.props;
            let promise = null;
            let status = AwaitRenderStatus.pending;
            if (!(resolve instanceof Promise)) {
              // Didn't get a promise - provide as a resolved promise
              status = AwaitRenderStatus.success;
              promise = Promise.resolve();
              Object.defineProperty(promise, "_tracked", {
                get: () => true,
              });
              Object.defineProperty(promise, "_data", {
                get: () => resolve,
              });
            } else if (this.state.error) {
              // Caught a render error, provide it as a rejected promise
              status = AwaitRenderStatus.error;
              let renderError = this.state.error;
              promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings
              Object.defineProperty(promise, "_tracked", {
                get: () => true,
              });
              Object.defineProperty(promise, "_error", {
                get: () => renderError,
              });
            } else if (resolve._tracked) {
              // Already tracked promise - check contents
              promise = resolve;
              status =
                promise._error !== undefined
                  ? AwaitRenderStatus.error
                  : promise._data !== undefined
                  ? AwaitRenderStatus.success
                  : AwaitRenderStatus.pending;
            } else {
              // Raw (untracked) promise - track it
              status = AwaitRenderStatus.pending;
              Object.defineProperty(resolve, "_tracked", {
                get: () => true,
              });
              promise = resolve.then(
                (data) =>
                  Object.defineProperty(resolve, "_data", {
                    get: () => data,
                  }),
                (error) =>
                  Object.defineProperty(resolve, "_error", {
                    get: () => error,
                  }),
              );
            }
            if (
              status === AwaitRenderStatus.error &&
              promise._error instanceof (0, _router.AbortedDeferredError)
            )
              // Freeze the UI by throwing a never resolved promise
              throw neverSettledPromise;
            if (status === AwaitRenderStatus.error && !errorElement)
              // No errorElement, throw to the nearest route-level error boundary
              throw promise._error;
            if (status === AwaitRenderStatus.error)
              // Render via our errorElement
              return /*#__PURE__*/ _react.createElement(AwaitContext.Provider, {
                value: promise,
                children: errorElement,
              });
            if (status === AwaitRenderStatus.success)
              // Render children with resolved value
              return /*#__PURE__*/ _react.createElement(AwaitContext.Provider, {
                value: promise,
                children: children,
              });
            // Throw to the suspense boundary
            throw promise;
          }
        }
        /**
         * @private
         * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`
         */ function ResolveAwait(_ref8) {
          let { children } = _ref8;
          let data = useAsyncValue();
          let toRender = typeof children === "function" ? children(data) : children;
          return /*#__PURE__*/ _react.createElement(_react.Fragment, null, toRender);
        }
        ///////////////////////////////////////////////////////////////////////////////
        // UTILS
        ///////////////////////////////////////////////////////////////////////////////
        /**
         * Creates a route config from a React "children" object, which is usually
         * either a `<Route>` element or an array of them. Used internally by
         * `<Routes>` to create a route config from its children.
         *
         * @see https://reactrouter.com/utils/create-routes-from-children
         */ function createRoutesFromChildren(children, parentPath) {
          if (parentPath === void 0) parentPath = [];
          let routes = [];
          _react.Children.forEach(children, (element, index) => {
            if (!(/*#__PURE__*/ _react.isValidElement(element)))
              // Ignore non-elements. This allows people to more easily inline
              // conditionals in their route config.
              return;
            let treePath = [...parentPath, index];
            if (element.type === _react.Fragment) {
              // Transparently support React.Fragment and its children.
              routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
              return;
            }
            !(element.type === Route) &&
              (0, _router.UNSAFE_invariant)(
                false,
                "[" +
                  (typeof element.type === "string" ? element.type : element.type.name) +
                  "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>",
              );
            !(!element.props.index || !element.props.children) &&
              (0, _router.UNSAFE_invariant)(false, "An index route cannot have child routes.");
            let route = {
              id: element.props.id || treePath.join("-"),
              caseSensitive: element.props.caseSensitive,
              element: element.props.element,
              Component: element.props.Component,
              index: element.props.index,
              path: element.props.path,
              loader: element.props.loader,
              action: element.props.action,
              errorElement: element.props.errorElement,
              ErrorBoundary: element.props.ErrorBoundary,
              hasErrorBoundary:
                element.props.ErrorBoundary != null || element.props.errorElement != null,
              shouldRevalidate: element.props.shouldRevalidate,
              handle: element.props.handle,
              lazy: element.props.lazy,
            };
            if (element.props.children)
              route.children = createRoutesFromChildren(element.props.children, treePath);
            routes.push(route);
          });
          return routes;
        }
        /**
         * Renders the result of `matchRoutes()` into a React element.
         */ function renderMatches(matches) {
          return _renderMatches(matches);
        }
        function mapRouteProperties(route) {
          let updates = {
            // Note: this check also occurs in createRoutesFromChildren so update
            // there if you change this -- please and thank you!
            hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null,
          };
          if (route.Component) {
            if (route.element)
              (0, _router.UNSAFE_warning)(
                false,
                "You should not include both `Component` and `element` on your route - `Component` will be used.",
              );
            Object.assign(updates, {
              element: /*#__PURE__*/ _react.createElement(route.Component),
              Component: undefined,
            });
          }
          if (route.HydrateFallback) {
            if (route.hydrateFallbackElement)
              (0, _router.UNSAFE_warning)(
                false,
                "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.",
              );
            Object.assign(updates, {
              hydrateFallbackElement: /*#__PURE__*/ _react.createElement(route.HydrateFallback),
              HydrateFallback: undefined,
            });
          }
          if (route.ErrorBoundary) {
            if (route.errorElement)
              (0, _router.UNSAFE_warning)(
                false,
                "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.",
              );
            Object.assign(updates, {
              errorElement: /*#__PURE__*/ _react.createElement(route.ErrorBoundary),
              ErrorBoundary: undefined,
            });
          }
          return updates;
        }
        function createMemoryRouter(routes, opts) {
          return (0, _router.createRouter)({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true,
            }),
            history: (0, _router.createMemoryHistory)({
              initialEntries: opts == null ? void 0 : opts.initialEntries,
              initialIndex: opts == null ? void 0 : opts.initialIndex,
            }),
            hydrationData: opts == null ? void 0 : opts.hydrationData,
            routes,
            mapRouteProperties,
          }).initialize();
        }
      },
      {
        react: "21dqq",
        "@remix-run/router": "5ncDG",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
      },
    ],
    "5ncDG": [
      function (require, module, exports) {
        /**
         * @remix-run/router v1.15.3
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
        parcelHelpers.defineInteropFlag(exports);
        //#endregion
        parcelHelpers.export(exports, "AbortedDeferredError", () => AbortedDeferredError);
        parcelHelpers.export(exports, "Action", () => Action);
        parcelHelpers.export(exports, "IDLE_BLOCKER", () => IDLE_BLOCKER);
        parcelHelpers.export(exports, "IDLE_FETCHER", () => IDLE_FETCHER);
        parcelHelpers.export(exports, "IDLE_NAVIGATION", () => IDLE_NAVIGATION);
        parcelHelpers.export(exports, "UNSAFE_DEFERRED_SYMBOL", () => UNSAFE_DEFERRED_SYMBOL);
        parcelHelpers.export(exports, "UNSAFE_DeferredData", () => DeferredData);
        parcelHelpers.export(exports, "UNSAFE_ErrorResponseImpl", () => ErrorResponseImpl);
        parcelHelpers.export(
          exports,
          "UNSAFE_convertRouteMatchToUiMatch",
          () => convertRouteMatchToUiMatch,
        );
        parcelHelpers.export(
          exports,
          "UNSAFE_convertRoutesToDataRoutes",
          () => convertRoutesToDataRoutes,
        );
        parcelHelpers.export(exports, "UNSAFE_getResolveToMatches", () => getResolveToMatches);
        parcelHelpers.export(exports, "UNSAFE_invariant", () => invariant);
        parcelHelpers.export(exports, "UNSAFE_warning", () => warning);
        parcelHelpers.export(exports, "createBrowserHistory", () => createBrowserHistory);
        parcelHelpers.export(exports, "createHashHistory", () => createHashHistory);
        parcelHelpers.export(exports, "createMemoryHistory", () => createMemoryHistory);
        parcelHelpers.export(exports, "createPath", () => createPath);
        parcelHelpers.export(exports, "createRouter", () => createRouter);
        parcelHelpers.export(exports, "createStaticHandler", () => createStaticHandler);
        parcelHelpers.export(exports, "defer", () => defer);
        parcelHelpers.export(exports, "generatePath", () => generatePath);
        parcelHelpers.export(exports, "getStaticContextFromError", () => getStaticContextFromError);
        parcelHelpers.export(exports, "getToPathname", () => getToPathname);
        parcelHelpers.export(exports, "isDeferredData", () => isDeferredData);
        parcelHelpers.export(exports, "isRouteErrorResponse", () => isRouteErrorResponse);
        parcelHelpers.export(exports, "joinPaths", () => joinPaths);
        parcelHelpers.export(exports, "json", () => json);
        parcelHelpers.export(exports, "matchPath", () => matchPath);
        parcelHelpers.export(exports, "matchRoutes", () => matchRoutes);
        parcelHelpers.export(exports, "normalizePathname", () => normalizePathname);
        parcelHelpers.export(exports, "parsePath", () => parsePath);
        parcelHelpers.export(exports, "redirect", () => redirect);
        parcelHelpers.export(exports, "redirectDocument", () => redirectDocument);
        parcelHelpers.export(exports, "resolvePath", () => resolvePath);
        parcelHelpers.export(exports, "resolveTo", () => resolveTo);
        parcelHelpers.export(exports, "stripBasename", () => stripBasename);
        function _extends() {
          _extends = Object.assign
            ? Object.assign.bind()
            : function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source)
                    if (Object.prototype.hasOwnProperty.call(source, key))
                      target[key] = source[key];
                }
                return target;
              };
          return _extends.apply(this, arguments);
        }
        ////////////////////////////////////////////////////////////////////////////////
        //#region Types and Constants
        ////////////////////////////////////////////////////////////////////////////////
        /**
         * Actions represent the type of change to a location value.
         */ var Action;
        (function (Action) {
          /**
           * A POP indicates a change to an arbitrary index in the history stack, such
           * as a back or forward navigation. It does not describe the direction of the
           * navigation, only that the current index changed.
           *
           * Note: This is the default action for newly created history objects.
           */ Action["Pop"] = "POP";
          /**
           * A PUSH indicates a new entry being added to the history stack, such as when
           * a link is clicked and a new page loads. When this happens, all subsequent
           * entries in the stack are lost.
           */ Action["Push"] = "PUSH";
          /**
           * A REPLACE indicates the entry at the current index in the history stack
           * being replaced by a new one.
           */ Action["Replace"] = "REPLACE";
        })(Action || (Action = {}));
        const PopStateEventType = "popstate";
        /**
         * Memory history stores the current location in memory. It is designed for use
         * in stateful non-browser environments like tests and React Native.
         */ function createMemoryHistory(options) {
          if (options === void 0) options = {};
          let { initialEntries = ["/"], initialIndex, v5Compat = false } = options;
          let entries; // Declare so we can access from createMemoryLocation
          entries = initialEntries.map((entry, index) =>
            createMemoryLocation(
              entry,
              typeof entry === "string" ? null : entry.state,
              index === 0 ? "default" : undefined,
            ),
          );
          let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
          let action = Action.Pop;
          let listener = null;
          function clampIndex(n) {
            return Math.min(Math.max(n, 0), entries.length - 1);
          }
          function getCurrentLocation() {
            return entries[index];
          }
          function createMemoryLocation(to, state, key) {
            if (state === void 0) state = null;
            let location = createLocation(
              entries ? getCurrentLocation().pathname : "/",
              to,
              state,
              key,
            );
            warning(
              location.pathname.charAt(0) === "/",
              "relative pathnames are not supported in memory history: " + JSON.stringify(to),
            );
            return location;
          }
          function createHref(to) {
            return typeof to === "string" ? to : createPath(to);
          }
          let history = {
            get index() {
              return index;
            },
            get action() {
              return action;
            },
            get location() {
              return getCurrentLocation();
            },
            createHref,
            createURL(to) {
              return new URL(createHref(to), "http://localhost");
            },
            encodeLocation(to) {
              let path = typeof to === "string" ? parsePath(to) : to;
              return {
                pathname: path.pathname || "",
                search: path.search || "",
                hash: path.hash || "",
              };
            },
            push(to, state) {
              action = Action.Push;
              let nextLocation = createMemoryLocation(to, state);
              index += 1;
              entries.splice(index, entries.length, nextLocation);
              if (v5Compat && listener)
                listener({
                  action,
                  location: nextLocation,
                  delta: 1,
                });
            },
            replace(to, state) {
              action = Action.Replace;
              let nextLocation = createMemoryLocation(to, state);
              entries[index] = nextLocation;
              if (v5Compat && listener)
                listener({
                  action,
                  location: nextLocation,
                  delta: 0,
                });
            },
            go(delta) {
              action = Action.Pop;
              let nextIndex = clampIndex(index + delta);
              let nextLocation = entries[nextIndex];
              index = nextIndex;
              if (listener)
                listener({
                  action,
                  location: nextLocation,
                  delta,
                });
            },
            listen(fn) {
              listener = fn;
              return () => {
                listener = null;
              };
            },
          };
          return history;
        }
        /**
         * Browser history stores the location in regular URLs. This is the standard for
         * most web apps, but it requires some configuration on the server to ensure you
         * serve the same app at multiple URLs.
         *
         * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
         */ function createBrowserHistory(options) {
          if (options === void 0) options = {};
          function createBrowserLocation(window1, globalHistory) {
            let { pathname, search, hash } = window1.location;
            return createLocation(
              "",
              {
                pathname,
                search,
                hash,
              }, // state defaults to `null` because `window.history.state` does
              (globalHistory.state && globalHistory.state.usr) || null,
              (globalHistory.state && globalHistory.state.key) || "default",
            );
          }
          function createBrowserHref(window1, to) {
            return typeof to === "string" ? to : createPath(to);
          }
          return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
        }
        /**
         * Hash history stores the location in window.location.hash. This makes it ideal
         * for situations where you don't want to send the location to the server for
         * some reason, either because you do cannot configure it or the URL space is
         * reserved for something else.
         *
         * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
         */ function createHashHistory(options) {
          if (options === void 0) options = {};
          function createHashLocation(window1, globalHistory) {
            let {
              pathname = "/",
              search = "",
              hash = "",
            } = parsePath(window1.location.hash.substr(1));
            // Hash URL should always have a leading / just like window.location.pathname
            // does, so if an app ends up at a route like /#something then we add a
            // leading slash so all of our path-matching behaves the same as if it would
            // in a browser router.  This is particularly important when there exists a
            // root splat route (<Route path="*">) since that matches internally against
            // "/*" and we'd expect /#something to 404 in a hash router app.
            if (!pathname.startsWith("/") && !pathname.startsWith(".")) pathname = "/" + pathname;
            return createLocation(
              "",
              {
                pathname,
                search,
                hash,
              }, // state defaults to `null` because `window.history.state` does
              (globalHistory.state && globalHistory.state.usr) || null,
              (globalHistory.state && globalHistory.state.key) || "default",
            );
          }
          function createHashHref(window1, to) {
            let base = window1.document.querySelector("base");
            let href = "";
            if (base && base.getAttribute("href")) {
              let url = window1.location.href;
              let hashIndex = url.indexOf("#");
              href = hashIndex === -1 ? url : url.slice(0, hashIndex);
            }
            return href + "#" + (typeof to === "string" ? to : createPath(to));
          }
          function validateHashLocation(location, to) {
            warning(
              location.pathname.charAt(0) === "/",
              "relative pathnames are not supported in hash history.push(" +
                JSON.stringify(to) +
                ")",
            );
          }
          return getUrlBasedHistory(
            createHashLocation,
            createHashHref,
            validateHashLocation,
            options,
          );
        }
        function invariant(value, message) {
          if (value === false || value === null || typeof value === "undefined")
            throw new Error(message);
        }
        function warning(cond, message) {
          if (!cond) {
            // eslint-disable-next-line no-console
            if (typeof console !== "undefined") console.warn(message);
            try {
              // Welcome to debugging history!
              //
              // This error is thrown as a convenience, so you can more easily
              // find the source for a warning that appears in the console by
              // enabling "pause on exceptions" in your JavaScript debugger.
              throw new Error(message);
              // eslint-disable-next-line no-empty
            } catch (e) {}
          }
        }
        function createKey() {
          return Math.random().toString(36).substr(2, 8);
        }
        /**
         * For browser-based histories, we combine the state and key into an object
         */ function getHistoryState(location, index) {
          return {
            usr: location.state,
            key: location.key,
            idx: index,
          };
        }
        /**
         * Creates a Location object with a unique key from the given Path
         */ function createLocation(current, to, state, key) {
          if (state === void 0) state = null;
          let location = _extends(
            {
              pathname: typeof current === "string" ? current : current.pathname,
              search: "",
              hash: "",
            },
            typeof to === "string" ? parsePath(to) : to,
            {
              state,
              // TODO: This could be cleaned up.  push/replace should probably just take
              // full Locations now and avoid the need to run through this flow at all
              // But that's a pretty big refactor to the current test suite so going to
              // keep as is for the time being and just let any incoming keys take precedence
              key: (to && to.key) || key || createKey(),
            },
          );
          return location;
        }
        /**
         * Creates a string URL path from the given pathname, search, and hash components.
         */ function createPath(_ref) {
          let { pathname = "/", search = "", hash = "" } = _ref;
          if (search && search !== "?")
            pathname += search.charAt(0) === "?" ? search : "?" + search;
          if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
          return pathname;
        }
        /**
         * Parses a string URL path into its separate pathname, search, and hash components.
         */ function parsePath(path) {
          let parsedPath = {};
          if (path) {
            let hashIndex = path.indexOf("#");
            if (hashIndex >= 0) {
              parsedPath.hash = path.substr(hashIndex);
              path = path.substr(0, hashIndex);
            }
            let searchIndex = path.indexOf("?");
            if (searchIndex >= 0) {
              parsedPath.search = path.substr(searchIndex);
              path = path.substr(0, searchIndex);
            }
            if (path) parsedPath.pathname = path;
          }
          return parsedPath;
        }
        function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
          if (options === void 0) options = {};
          let { window: window1 = document.defaultView, v5Compat = false } = options;
          let globalHistory = window1.history;
          let action = Action.Pop;
          let listener = null;
          let index = getIndex();
          // Index should only be null when we initialize. If not, it's because the
          // user called history.pushState or history.replaceState directly, in which
          // case we should log a warning as it will result in bugs.
          if (index == null) {
            index = 0;
            globalHistory.replaceState(
              _extends({}, globalHistory.state, {
                idx: index,
              }),
              "",
            );
          }
          function getIndex() {
            let state = globalHistory.state || {
              idx: null,
            };
            return state.idx;
          }
          function handlePop() {
            action = Action.Pop;
            let nextIndex = getIndex();
            let delta = nextIndex == null ? null : nextIndex - index;
            index = nextIndex;
            if (listener)
              listener({
                action,
                location: history.location,
                delta,
              });
          }
          function push(to, state) {
            action = Action.Push;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex() + 1;
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            // try...catch because iOS limits us to 100 pushState calls :/
            try {
              globalHistory.pushState(historyState, "", url);
            } catch (error) {
              // If the exception is because `state` can't be serialized, let that throw
              // outwards just like a replace call would so the dev knows the cause
              // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps
              // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
              if (error instanceof DOMException && error.name === "DataCloneError") throw error;
              // They are going to lose state here, but there is no real
              // way to warn them about it since the page will refresh...
              window1.location.assign(url);
            }
            if (v5Compat && listener)
              listener({
                action,
                location: history.location,
                delta: 1,
              });
          }
          function replace(to, state) {
            action = Action.Replace;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex();
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            globalHistory.replaceState(historyState, "", url);
            if (v5Compat && listener)
              listener({
                action,
                location: history.location,
                delta: 0,
              });
          }
          function createURL(to) {
            // window.location.origin is "null" (the literal string value) in Firefox
            // under certain conditions, notably when serving from a local HTML file
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
            let base =
              window1.location.origin !== "null" ? window1.location.origin : window1.location.href;
            let href = typeof to === "string" ? to : createPath(to);
            // Treating this as a full URL will strip any trailing spaces so we need to
            // pre-encode them since they might be part of a matching splat param from
            // an ancestor route
            href = href.replace(/ $/, "%20");
            invariant(
              base,
              "No window.location.(origin|href) available to create URL for href: " + href,
            );
            return new URL(href, base);
          }
          let history = {
            get action() {
              return action;
            },
            get location() {
              return getLocation(window1, globalHistory);
            },
            listen(fn) {
              if (listener) throw new Error("A history only accepts one active listener");
              window1.addEventListener(PopStateEventType, handlePop);
              listener = fn;
              return () => {
                window1.removeEventListener(PopStateEventType, handlePop);
                listener = null;
              };
            },
            createHref(to) {
              return createHref(window1, to);
            },
            createURL,
            encodeLocation(to) {
              // Encode a Location the same way window.location would
              let url = createURL(to);
              return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash,
              };
            },
            push,
            replace,
            go(n) {
              return globalHistory.go(n);
            },
          };
          return history;
        }
        //#endregion
        var ResultType;
        (function (ResultType) {
          ResultType["data"] = "data";
          ResultType["deferred"] = "deferred";
          ResultType["redirect"] = "redirect";
          ResultType["error"] = "error";
        })(ResultType || (ResultType = {}));
        const immutableRouteKeys = new Set([
          "lazy",
          "caseSensitive",
          "path",
          "id",
          "index",
          "children",
        ]);
        function isIndexRoute(route) {
          return route.index === true;
        }
        // Walk the route tree generating unique IDs where necessary, so we are working
        // solely with AgnosticDataRouteObject's within the Router
        function convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {
          if (parentPath === void 0) parentPath = [];
          if (manifest === void 0) manifest = {};
          return routes.map((route, index) => {
            let treePath = [...parentPath, index];
            let id = typeof route.id === "string" ? route.id : treePath.join("-");
            invariant(
              route.index !== true || !route.children,
              "Cannot specify children on an index route",
            );
            invariant(
              !manifest[id],
              'Found a route id collision on id "' +
                id +
                '".  Route ' +
                "id's must be globally unique within Data Router usages",
            );
            if (isIndexRoute(route)) {
              let indexRoute = _extends({}, route, mapRouteProperties(route), {
                id,
              });
              manifest[id] = indexRoute;
              return indexRoute;
            } else {
              let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {
                id,
                children: undefined,
              });
              manifest[id] = pathOrLayoutRoute;
              if (route.children)
                pathOrLayoutRoute.children = convertRoutesToDataRoutes(
                  route.children,
                  mapRouteProperties,
                  treePath,
                  manifest,
                );
              return pathOrLayoutRoute;
            }
          });
        }
        /**
         * Matches the given routes to a location and returns the match data.
         *
         * @see https://reactrouter.com/utils/match-routes
         */ function matchRoutes(routes, locationArg, basename) {
          if (basename === void 0) basename = "/";
          let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
          let pathname = stripBasename(location.pathname || "/", basename);
          if (pathname == null) return null;
          let branches = flattenRoutes(routes);
          rankRouteBranches(branches);
          let matches = null;
          for (let i = 0; matches == null && i < branches.length; ++i) {
            // Incoming pathnames are generally encoded from either window.location
            // or from router.navigate, but we want to match against the unencoded
            // paths in the route definitions.  Memory router locations won't be
            // encoded here but there also shouldn't be anything to decode so this
            // should be a safe operation.  This avoids needing matchRoutes to be
            // history-aware.
            let decoded = decodePath(pathname);
            matches = matchRouteBranch(branches[i], decoded);
          }
          return matches;
        }
        function convertRouteMatchToUiMatch(match, loaderData) {
          let { route, pathname, params } = match;
          return {
            id: route.id,
            pathname,
            params,
            data: loaderData[route.id],
            handle: route.handle,
          };
        }
        function flattenRoutes(routes, branches, parentsMeta, parentPath) {
          if (branches === void 0) branches = [];
          if (parentsMeta === void 0) parentsMeta = [];
          if (parentPath === void 0) parentPath = "";
          let flattenRoute = (route, index, relativePath) => {
            let meta = {
              relativePath: relativePath === undefined ? route.path || "" : relativePath,
              caseSensitive: route.caseSensitive === true,
              childrenIndex: index,
              route,
            };
            if (meta.relativePath.startsWith("/")) {
              invariant(
                meta.relativePath.startsWith(parentPath),
                'Absolute route path "' +
                  meta.relativePath +
                  '" nested under path ' +
                  ('"' + parentPath + '" is not valid. An absolute child route path ') +
                  "must start with the combined path of all its parent routes.",
              );
              meta.relativePath = meta.relativePath.slice(parentPath.length);
            }
            let path = joinPaths([parentPath, meta.relativePath]);
            let routesMeta = parentsMeta.concat(meta);
            // Add the children before adding this route to the array, so we traverse the
            // route tree depth-first and child routes appear before their parents in
            // the "flattened" version.
            if (route.children && route.children.length > 0) {
              invariant(
                // Our types know better, but runtime JS may not!
                // @ts-expect-error
                route.index !== true,
                "Index routes must not have child routes. Please remove " +
                  ('all child routes from route path "' + path + '".'),
              );
              flattenRoutes(route.children, branches, routesMeta, path);
            }
            // Routes without a path shouldn't ever match by themselves unless they are
            // index routes, so don't add them to the list of possible branches.
            if (route.path == null && !route.index) return;
            branches.push({
              path,
              score: computeScore(path, route.index),
              routesMeta,
            });
          };
          routes.forEach((route, index) => {
            var _route$path;
            // coarse-grain check for optional params
            if (
              route.path === "" ||
              !((_route$path = route.path) != null && _route$path.includes("?"))
            )
              flattenRoute(route, index);
            else
              for (let exploded of explodeOptionalSegments(route.path))
                flattenRoute(route, index, exploded);
          });
          return branches;
        }
        /**
         * Computes all combinations of optional path segments for a given path,
         * excluding combinations that are ambiguous and of lower priority.
         *
         * For example, `/one/:two?/three/:four?/:five?` explodes to:
         * - `/one/three`
         * - `/one/:two/three`
         * - `/one/three/:four`
         * - `/one/three/:five`
         * - `/one/:two/three/:four`
         * - `/one/:two/three/:five`
         * - `/one/three/:four/:five`
         * - `/one/:two/three/:four/:five`
         */ function explodeOptionalSegments(path) {
          let segments = path.split("/");
          if (segments.length === 0) return [];
          let [first, ...rest] = segments;
          // Optional path segments are denoted by a trailing `?`
          let isOptional = first.endsWith("?");
          // Compute the corresponding required segment: `foo?` -> `foo`
          let required = first.replace(/\?$/, "");
          if (rest.length === 0)
            // Intepret empty string as omitting an optional segment
            // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
            return isOptional ? [required, ""] : [required];
          let restExploded = explodeOptionalSegments(rest.join("/"));
          let result = [];
          // All child paths with the prefix.  Do this for all children before the
          // optional version for all children, so we get consistent ordering where the
          // parent optional aspect is preferred as required.  Otherwise, we can get
          // child sections interspersed where deeper optional segments are higher than
          // parent optional segments, where for example, /:two would explode _earlier_
          // then /:one.  By always including the parent as required _for all children_
          // first, we avoid this issue
          result.push(
            ...restExploded.map((subpath) =>
              subpath === "" ? required : [required, subpath].join("/"),
            ),
          );
          // Then, if this is an optional value, add all child versions without
          if (isOptional) result.push(...restExploded);
          // for absolute paths, ensure `/` instead of empty segment
          return result.map((exploded) =>
            path.startsWith("/") && exploded === "" ? "/" : exploded,
          );
        }
        function rankRouteBranches(branches) {
          branches.sort((a, b) =>
            a.score !== b.score
              ? b.score - a.score // Higher score first
              : compareIndexes(
                  a.routesMeta.map((meta) => meta.childrenIndex),
                  b.routesMeta.map((meta) => meta.childrenIndex),
                ),
          );
        }
        const paramRe = /^:[\w-]+$/;
        const dynamicSegmentValue = 3;
        const indexRouteValue = 2;
        const emptySegmentValue = 1;
        const staticSegmentValue = 10;
        const splatPenalty = -2;
        const isSplat = (s) => s === "*";
        function computeScore(path, index) {
          let segments = path.split("/");
          let initialScore = segments.length;
          if (segments.some(isSplat)) initialScore += splatPenalty;
          if (index) initialScore += indexRouteValue;
          return segments
            .filter((s) => !isSplat(s))
            .reduce(
              (score, segment) =>
                score +
                (paramRe.test(segment)
                  ? dynamicSegmentValue
                  : segment === ""
                  ? emptySegmentValue
                  : staticSegmentValue),
              initialScore,
            );
        }
        function compareIndexes(a, b) {
          let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
          return siblings // If two routes are siblings, we should try to match the earlier sibling
            ? // first. This allows people to have fine-grained control over the matching
              // behavior by simply putting routes with identical paths in the order they
              // want them tried.
              a[a.length - 1] - b[b.length - 1] // Otherwise, it doesn't really make sense to rank non-siblings by index,
            : // so they sort equally.
              0;
        }
        function matchRouteBranch(branch, pathname) {
          let { routesMeta } = branch;
          let matchedParams = {};
          let matchedPathname = "/";
          let matches = [];
          for (let i = 0; i < routesMeta.length; ++i) {
            let meta = routesMeta[i];
            let end = i === routesMeta.length - 1;
            let remainingPathname =
              matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
            let match = matchPath(
              {
                path: meta.relativePath,
                caseSensitive: meta.caseSensitive,
                end,
              },
              remainingPathname,
            );
            if (!match) return null;
            Object.assign(matchedParams, match.params);
            let route = meta.route;
            matches.push({
              // TODO: Can this as be avoided?
              params: matchedParams,
              pathname: joinPaths([matchedPathname, match.pathname]),
              pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
              route,
            });
            if (match.pathnameBase !== "/")
              matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
          }
          return matches;
        }
        /**
         * Returns a path with params interpolated.
         *
         * @see https://reactrouter.com/utils/generate-path
         */ function generatePath(originalPath, params) {
          if (params === void 0) params = {};
          let path = originalPath;
          if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
            warning(
              false,
              'Route path "' +
                path +
                '" will be treated as if it were ' +
                ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') +
                "always follow a `/` in the pattern. To get rid of this warning, " +
                ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'),
            );
            path = path.replace(/\*$/, "/*");
          }
          // ensure `/` is added at the beginning if the path is absolute
          const prefix = path.startsWith("/") ? "/" : "";
          const stringify = (p) => (p == null ? "" : typeof p === "string" ? p : String(p));
          const segments = path
            .split(/\/+/)
            .map((segment, index, array) => {
              const isLastSegment = index === array.length - 1;
              // only apply the splat if it's the last segment
              if (isLastSegment && segment === "*") {
                const star = "*";
                // Apply the splat
                return stringify(params[star]);
              }
              const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
              if (keyMatch) {
                const [, key, optional] = keyMatch;
                let param = params[key];
                invariant(optional === "?" || param != null, 'Missing ":' + key + '" param');
                return stringify(param);
              }
              // Remove any optional markers from optional static segments
              return segment.replace(/\?$/g, "");
            }) // Remove empty segments
            .filter((segment) => !!segment);
          return prefix + segments.join("/");
        }
        /**
         * Performs pattern matching on a URL pathname and returns information about
         * the match.
         *
         * @see https://reactrouter.com/utils/match-path
         */ function matchPath(pattern, pathname) {
          if (typeof pattern === "string")
            pattern = {
              path: pattern,
              caseSensitive: false,
              end: true,
            };
          let [matcher, compiledParams] = compilePath(
            pattern.path,
            pattern.caseSensitive,
            pattern.end,
          );
          let match = pathname.match(matcher);
          if (!match) return null;
          let matchedPathname = match[0];
          let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
          let captureGroups = match.slice(1);
          let params = compiledParams.reduce((memo, _ref, index) => {
            let { paramName, isOptional } = _ref;
            // We need to compute the pathnameBase here using the raw splat value
            // instead of using params["*"] later because it will be decoded then
            if (paramName === "*") {
              let splatValue = captureGroups[index] || "";
              pathnameBase = matchedPathname
                .slice(0, matchedPathname.length - splatValue.length)
                .replace(/(.)\/+$/, "$1");
            }
            const value = captureGroups[index];
            if (isOptional && !value) memo[paramName] = undefined;
            else memo[paramName] = (value || "").replace(/%2F/g, "/");
            return memo;
          }, {});
          return {
            params,
            pathname: matchedPathname,
            pathnameBase,
            pattern,
          };
        }
        function compilePath(path, caseSensitive, end) {
          if (caseSensitive === void 0) caseSensitive = false;
          if (end === void 0) end = true;
          warning(
            path === "*" || !path.endsWith("*") || path.endsWith("/*"),
            'Route path "' +
              path +
              '" will be treated as if it were ' +
              ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') +
              "always follow a `/` in the pattern. To get rid of this warning, " +
              ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'),
          );
          let params = [];
          let regexpSource =
            "^" +
            path
              .replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
              .replace(/^\/*/, "/") // Make sure it has a leading /
              .replace(/[\\.*+^${}|()[\]]/g, "\\$&") // Escape special regex chars
              .replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
                params.push({
                  paramName,
                  isOptional: isOptional != null,
                });
                return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
              });
          if (path.endsWith("*")) {
            params.push({
              paramName: "*",
            });
            regexpSource +=
              path === "*" || path === "/*"
                ? "(.*)$" // Already matched the initial /, just match the rest
                : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
          } else if (end)
            // When matching to the end, ignore trailing slashes
            regexpSource += "\\/*$";
          else if (path !== "" && path !== "/")
            // If our path is non-empty and contains anything beyond an initial slash,
            // then we have _some_ form of path in our regex, so we should expect to
            // match only if we find the end of this path segment.  Look for an optional
            // non-captured trailing slash (to match a portion of the URL) or the end
            // of the path (if we've matched to the end).  We used to do this with a
            // word boundary but that gives false positives on routes like
            // /user-preferences since `-` counts as a word boundary.
            regexpSource += "(?:(?=\\/|$))";
          let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
          return [matcher, params];
        }
        function decodePath(value) {
          try {
            return value
              .split("/")
              .map((v) => decodeURIComponent(v).replace(/\//g, "%2F"))
              .join("/");
          } catch (error) {
            warning(
              false,
              'The URL path "' +
                value +
                '" could not be decoded because it is is a ' +
                "malformed URL segment. This is probably due to a bad percent " +
                ("encoding (" + error + ")."),
            );
            return value;
          }
        }
        /**
         * @private
         */ function stripBasename(pathname, basename) {
          if (basename === "/") return pathname;
          if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) return null;
          // We want to leave trailing slash behavior in the user's control, so if they
          // specify a basename with a trailing slash, we should support it
          let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
          let nextChar = pathname.charAt(startIndex);
          if (nextChar && nextChar !== "/")
            // pathname does not start with basename/
            return null;
          return pathname.slice(startIndex) || "/";
        }
        /**
         * Returns a resolved path object relative to the given pathname.
         *
         * @see https://reactrouter.com/utils/resolve-path
         */ function resolvePath(to, fromPathname) {
          if (fromPathname === void 0) fromPathname = "/";
          let {
            pathname: toPathname,
            search = "",
            hash = "",
          } = typeof to === "string" ? parsePath(to) : to;
          let pathname = toPathname
            ? toPathname.startsWith("/")
              ? toPathname
              : resolvePathname(toPathname, fromPathname)
            : fromPathname;
          return {
            pathname,
            search: normalizeSearch(search),
            hash: normalizeHash(hash),
          };
        }
        function resolvePathname(relativePath, fromPathname) {
          let segments = fromPathname.replace(/\/+$/, "").split("/");
          let relativeSegments = relativePath.split("/");
          relativeSegments.forEach((segment) => {
            if (segment === "..") {
              // Keep the root "" segment so the pathname starts at /
              if (segments.length > 1) segments.pop();
            } else if (segment !== ".") segments.push(segment);
          });
          return segments.length > 1 ? segments.join("/") : "/";
        }
        function getInvalidPathError(char, field, dest, path) {
          return (
            "Cannot include a '" +
            char +
            "' character in a manually specified " +
            ("`to." +
              field +
              "` field [" +
              JSON.stringify(path) +
              "].  Please separate it out to the ") +
            ("`to." + dest + "` field. Alternatively you may provide the full path as ") +
            'a string in <Link to="..."> and the router will parse it for you.'
          );
        }
        /**
         * @private
         *
         * When processing relative navigation we want to ignore ancestor routes that
         * do not contribute to the path, such that index/pathless layout routes don't
         * interfere.
         *
         * For example, when moving a route element into an index route and/or a
         * pathless layout route, relative link behavior contained within should stay
         * the same.  Both of the following examples should link back to the root:
         *
         *   <Route path="/">
         *     <Route path="accounts" element={<Link to=".."}>
         *   </Route>
         *
         *   <Route path="/">
         *     <Route path="accounts">
         *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
         *         <Route index element={<Link to=".."} />  // <-- Does not contribute
         *       </Route
         *     </Route>
         *   </Route>
         */ function getPathContributingMatches(matches) {
          return matches.filter(
            (match, index) => index === 0 || (match.route.path && match.route.path.length > 0),
          );
        }
        // Return the array of pathnames for the current route matches - used to
        // generate the routePathnames input for resolveTo()
        function getResolveToMatches(matches, v7_relativeSplatPath) {
          let pathMatches = getPathContributingMatches(matches);
          // When v7_relativeSplatPath is enabled, use the full pathname for the leaf
          // match so we include splat values for "." links.  See:
          // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329
          if (v7_relativeSplatPath)
            return pathMatches.map((match, idx) =>
              idx === matches.length - 1 ? match.pathname : match.pathnameBase,
            );
          return pathMatches.map((match) => match.pathnameBase);
        }
        /**
         * @private
         */ function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
          if (isPathRelative === void 0) isPathRelative = false;
          let to;
          if (typeof toArg === "string") to = parsePath(toArg);
          else {
            to = _extends({}, toArg);
            invariant(
              !to.pathname || !to.pathname.includes("?"),
              getInvalidPathError("?", "pathname", "search", to),
            );
            invariant(
              !to.pathname || !to.pathname.includes("#"),
              getInvalidPathError("#", "pathname", "hash", to),
            );
            invariant(
              !to.search || !to.search.includes("#"),
              getInvalidPathError("#", "search", "hash", to),
            );
          }
          let isEmptyPath = toArg === "" || to.pathname === "";
          let toPathname = isEmptyPath ? "/" : to.pathname;
          let from;
          // Routing is relative to the current pathname if explicitly requested.
          //
          // If a pathname is explicitly provided in `to`, it should be relative to the
          // route context. This is explained in `Note on `<Link to>` values` in our
          // migration guide from v5 as a means of disambiguation between `to` values
          // that begin with `/` and those that do not. However, this is problematic for
          // `to` values that do not provide a pathname. `to` can simply be a search or
          // hash string, in which case we should assume that the navigation is relative
          // to the current location's pathname and *not* the route pathname.
          if (toPathname == null) from = locationPathname;
          else {
            let routePathnameIndex = routePathnames.length - 1;
            // With relative="route" (the default), each leading .. segment means
            // "go up one route" instead of "go up one URL segment".  This is a key
            // difference from how <a href> works and a major reason we call this a
            // "to" value instead of a "href".
            if (!isPathRelative && toPathname.startsWith("..")) {
              let toSegments = toPathname.split("/");
              while (toSegments[0] === "..") {
                toSegments.shift();
                routePathnameIndex -= 1;
              }
              to.pathname = toSegments.join("/");
            }
            from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
          }
          let path = resolvePath(to, from);
          // Ensure the pathname has a trailing slash if the original "to" had one
          let hasExplicitTrailingSlash =
            toPathname && toPathname !== "/" && toPathname.endsWith("/");
          // Or if this was a link to the current path which has a trailing slash
          let hasCurrentTrailingSlash =
            (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
          if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash))
            path.pathname += "/";
          return path;
        }
        /**
         * @private
         */ function getToPathname(to) {
          // Empty strings should be treated the same as / paths
          return to === "" || to.pathname === ""
            ? "/"
            : typeof to === "string"
            ? parsePath(to).pathname
            : to.pathname;
        }
        /**
         * @private
         */ const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
        /**
         * @private
         */ const normalizePathname = (pathname) =>
          pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
        /**
         * @private
         */ const normalizeSearch = (search) =>
          !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
        /**
         * @private
         */ const normalizeHash = (hash) =>
          !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
        /**
         * This is a shortcut for creating `application/json` responses. Converts `data`
         * to JSON and sets the `Content-Type` header.
         */ const json = function json(data, init) {
          if (init === void 0) init = {};
          let responseInit =
            typeof init === "number"
              ? {
                  status: init,
                }
              : init;
          let headers = new Headers(responseInit.headers);
          if (!headers.has("Content-Type"))
            headers.set("Content-Type", "application/json; charset=utf-8");
          return new Response(
            JSON.stringify(data),
            _extends({}, responseInit, {
              headers,
            }),
          );
        };
        class AbortedDeferredError extends Error {}
        class DeferredData {
          constructor(data, responseInit) {
            this.pendingKeysSet = new Set();
            this.subscribers = new Set();
            this.deferredKeys = [];
            invariant(
              data && typeof data === "object" && !Array.isArray(data),
              "defer() only accepts plain objects",
            );
            // Set up an AbortController + Promise we can race against to exit early
            // cancellation
            let reject;
            this.abortPromise = new Promise((_, r) => (reject = r));
            this.controller = new AbortController();
            let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
            this.unlistenAbortSignal = () =>
              this.controller.signal.removeEventListener("abort", onAbort);
            this.controller.signal.addEventListener("abort", onAbort);
            this.data = Object.entries(data).reduce((acc, _ref2) => {
              let [key, value] = _ref2;
              return Object.assign(acc, {
                [key]: this.trackPromise(key, value),
              });
            }, {});
            if (this.done)
              // All incoming values were resolved
              this.unlistenAbortSignal();
            this.init = responseInit;
          }
          trackPromise(key, value) {
            if (!(value instanceof Promise)) return value;
            this.deferredKeys.push(key);
            this.pendingKeysSet.add(key);
            // We store a little wrapper promise that will be extended with
            // _data/_error props upon resolve/reject
            let promise = Promise.race([value, this.abortPromise]).then(
              (data) => this.onSettle(promise, key, undefined, data),
              (error) => this.onSettle(promise, key, error),
            );
            // Register rejection listeners to avoid uncaught promise rejections on
            // errors or aborted deferred values
            promise.catch(() => {});
            Object.defineProperty(promise, "_tracked", {
              get: () => true,
            });
            return promise;
          }
          onSettle(promise, key, error, data) {
            if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {
              this.unlistenAbortSignal();
              Object.defineProperty(promise, "_error", {
                get: () => error,
              });
              return Promise.reject(error);
            }
            this.pendingKeysSet.delete(key);
            if (this.done)
              // Nothing left to abort!
              this.unlistenAbortSignal();
            // If the promise was resolved/rejected with undefined, we'll throw an error as you
            // should always resolve with a value or null
            if (error === undefined && data === undefined) {
              let undefinedError = new Error(
                'Deferred data for key "' +
                  key +
                  '" resolved/rejected with `undefined`, ' +
                  "you must resolve/reject with a value or `null`.",
              );
              Object.defineProperty(promise, "_error", {
                get: () => undefinedError,
              });
              this.emit(false, key);
              return Promise.reject(undefinedError);
            }
            if (data === undefined) {
              Object.defineProperty(promise, "_error", {
                get: () => error,
              });
              this.emit(false, key);
              return Promise.reject(error);
            }
            Object.defineProperty(promise, "_data", {
              get: () => data,
            });
            this.emit(false, key);
            return data;
          }
          emit(aborted, settledKey) {
            this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
          }
          subscribe(fn) {
            this.subscribers.add(fn);
            return () => this.subscribers.delete(fn);
          }
          cancel() {
            this.controller.abort();
            this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));
            this.emit(true);
          }
          async resolveData(signal) {
            let aborted = false;
            if (!this.done) {
              let onAbort = () => this.cancel();
              signal.addEventListener("abort", onAbort);
              aborted = await new Promise((resolve) => {
                this.subscribe((aborted) => {
                  signal.removeEventListener("abort", onAbort);
                  if (aborted || this.done) resolve(aborted);
                });
              });
            }
            return aborted;
          }
          get done() {
            return this.pendingKeysSet.size === 0;
          }
          get unwrappedData() {
            invariant(
              this.data !== null && this.done,
              "Can only unwrap data on initialized and settled deferreds",
            );
            return Object.entries(this.data).reduce((acc, _ref3) => {
              let [key, value] = _ref3;
              return Object.assign(acc, {
                [key]: unwrapTrackedPromise(value),
              });
            }, {});
          }
          get pendingKeys() {
            return Array.from(this.pendingKeysSet);
          }
        }
        function isTrackedPromise(value) {
          return value instanceof Promise && value._tracked === true;
        }
        function unwrapTrackedPromise(value) {
          if (!isTrackedPromise(value)) return value;
          if (value._error) throw value._error;
          return value._data;
        }
        const defer = function defer(data, init) {
          if (init === void 0) init = {};
          let responseInit =
            typeof init === "number"
              ? {
                  status: init,
                }
              : init;
          return new DeferredData(data, responseInit);
        };
        /**
         * A redirect response. Sets the status code and the `Location` header.
         * Defaults to "302 Found".
         */ const redirect = function redirect(url, init) {
          if (init === void 0) init = 302;
          let responseInit = init;
          if (typeof responseInit === "number")
            responseInit = {
              status: responseInit,
            };
          else if (typeof responseInit.status === "undefined") responseInit.status = 302;
          let headers = new Headers(responseInit.headers);
          headers.set("Location", url);
          return new Response(
            null,
            _extends({}, responseInit, {
              headers,
            }),
          );
        };
        /**
         * A redirect response that will force a document reload to the new location.
         * Sets the status code and the `Location` header.
         * Defaults to "302 Found".
         */ const redirectDocument = (url, init) => {
          let response = redirect(url, init);
          response.headers.set("X-Remix-Reload-Document", "true");
          return response;
        };
        /**
         * @private
         * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
         *
         * We don't export the class for public use since it's an implementation
         * detail, but we export the interface above so folks can build their own
         * abstractions around instances via isRouteErrorResponse()
         */ class ErrorResponseImpl {
          constructor(status, statusText, data, internal) {
            if (internal === void 0) internal = false;
            this.status = status;
            this.statusText = statusText || "";
            this.internal = internal;
            if (data instanceof Error) {
              this.data = data.toString();
              this.error = data;
            } else this.data = data;
          }
        }
        /**
         * Check if the given error is an ErrorResponse generated from a 4xx/5xx
         * Response thrown from an action/loader
         */ function isRouteErrorResponse(error) {
          return (
            error != null &&
            typeof error.status === "number" &&
            typeof error.statusText === "string" &&
            typeof error.internal === "boolean" &&
            "data" in error
          );
        }
        const validMutationMethodsArr = ["post", "put", "patch", "delete"];
        const validMutationMethods = new Set(validMutationMethodsArr);
        const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
        const validRequestMethods = new Set(validRequestMethodsArr);
        const redirectStatusCodes = new Set([301, 302, 303, 307, 308]);
        const redirectPreserveMethodStatusCodes = new Set([307, 308]);
        const IDLE_NAVIGATION = {
          state: "idle",
          location: undefined,
          formMethod: undefined,
          formAction: undefined,
          formEncType: undefined,
          formData: undefined,
          json: undefined,
          text: undefined,
        };
        const IDLE_FETCHER = {
          state: "idle",
          data: undefined,
          formMethod: undefined,
          formAction: undefined,
          formEncType: undefined,
          formData: undefined,
          json: undefined,
          text: undefined,
        };
        const IDLE_BLOCKER = {
          state: "unblocked",
          proceed: undefined,
          reset: undefined,
          location: undefined,
        };
        const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        const defaultMapRouteProperties = (route) => ({
          hasErrorBoundary: Boolean(route.hasErrorBoundary),
        });
        const TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
        //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region createRouter
        ////////////////////////////////////////////////////////////////////////////////
        /**
         * Create a router and listen to history POP navigations
         */ function createRouter(init) {
          const routerWindow = init.window
            ? init.window
            : typeof window !== "undefined"
            ? window
            : undefined;
          const isBrowser =
            typeof routerWindow !== "undefined" &&
            typeof routerWindow.document !== "undefined" &&
            typeof routerWindow.document.createElement !== "undefined";
          const isServer = !isBrowser;
          invariant(
            init.routes.length > 0,
            "You must provide a non-empty routes array to createRouter",
          );
          let mapRouteProperties;
          if (init.mapRouteProperties) mapRouteProperties = init.mapRouteProperties;
          else if (init.detectErrorBoundary) {
            // If they are still using the deprecated version, wrap it with the new API
            let detectErrorBoundary = init.detectErrorBoundary;
            mapRouteProperties = (route) => ({
              hasErrorBoundary: detectErrorBoundary(route),
            });
          } else mapRouteProperties = defaultMapRouteProperties;
          // Routes keyed by ID
          let manifest = {};
          // Routes in tree format for matching
          let dataRoutes = convertRoutesToDataRoutes(
            init.routes,
            mapRouteProperties,
            undefined,
            manifest,
          );
          let inFlightDataRoutes;
          let basename = init.basename || "/";
          // Config driven behavior flags
          let future = _extends(
            {
              v7_fetcherPersist: false,
              v7_normalizeFormMethod: false,
              v7_partialHydration: false,
              v7_prependBasename: false,
              v7_relativeSplatPath: false,
            },
            init.future,
          );
          // Cleanup function for history
          let unlistenHistory = null;
          // Externally-provided functions to call on all state changes
          let subscribers = new Set();
          // Externally-provided object to hold scroll restoration locations during routing
          let savedScrollPositions = null;
          // Externally-provided function to get scroll restoration keys
          let getScrollRestorationKey = null;
          // Externally-provided function to get current scroll position
          let getScrollPosition = null;
          // One-time flag to control the initial hydration scroll restoration.  Because
          // we don't get the saved positions from <ScrollRestoration /> until _after_
          // the initial render, we need to manually trigger a separate updateState to
          // send along the restoreScrollPosition
          // Set to true if we have `hydrationData` since we assume we were SSR'd and that
          // SSR did the initial scroll restoration.
          let initialScrollRestored = init.hydrationData != null;
          let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
          let initialErrors = null;
          if (initialMatches == null) {
            // If we do not match a user-provided-route, fall back to the root
            // to allow the error boundary to take over
            let error = getInternalRouterError(404, {
              pathname: init.history.location.pathname,
            });
            let { matches, route } = getShortCircuitMatches(dataRoutes);
            initialMatches = matches;
            initialErrors = {
              [route.id]: error,
            };
          }
          let initialized;
          let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);
          let hasLoaders = initialMatches.some((m) => m.route.loader);
          if (hasLazyRoutes)
            // All initialMatches need to be loaded before we're ready.  If we have lazy
            // functions around still then we'll need to run them in initialize()
            initialized = false;
          else if (!hasLoaders)
            // If we've got no loaders to run, then we're good to go
            initialized = true;
          else if (future.v7_partialHydration) {
            // If partial hydration is enabled, we're initialized so long as we were
            // provided with hydrationData for every route with a loader, and no loaders
            // were marked for explicit hydration
            let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
            let errors = init.hydrationData ? init.hydrationData.errors : null;
            let isRouteInitialized = (m) => {
              // No loader, nothing to initialize
              if (!m.route.loader) return true;
              // Explicitly opting-in to running on hydration
              if (m.route.loader.hydrate === true) return false;
              // Otherwise, initialized if hydrated with data or an error
              return (
                (loaderData && loaderData[m.route.id] !== undefined) ||
                (errors && errors[m.route.id] !== undefined)
              );
            };
            // If errors exist, don't consider routes below the boundary
            if (errors) {
              let idx = initialMatches.findIndex((m) => errors[m.route.id] !== undefined);
              initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);
            } else initialized = initialMatches.every(isRouteInitialized);
          } // Without partial hydration - we're initialized if we were provided any
          // hydrationData - which is expected to be complete
          else initialized = init.hydrationData != null;
          let router;
          let state = {
            historyAction: init.history.action,
            location: init.history.location,
            matches: initialMatches,
            initialized,
            navigation: IDLE_NAVIGATION,
            // Don't restore on initial updateState() if we were SSR'd
            restoreScrollPosition: init.hydrationData != null ? false : null,
            preventScrollReset: false,
            revalidation: "idle",
            loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},
            actionData: (init.hydrationData && init.hydrationData.actionData) || null,
            errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,
            fetchers: new Map(),
            blockers: new Map(),
          };
          // -- Stateful internal variables to manage navigations --
          // Current navigation in progress (to be committed in completeNavigation)
          let pendingAction = Action.Pop;
          // Should the current navigation prevent the scroll reset if scroll cannot
          // be restored?
          let pendingPreventScrollReset = false;
          // AbortController for the active navigation
          let pendingNavigationController;
          // Should the current navigation enable document.startViewTransition?
          let pendingViewTransitionEnabled = false;
          // Store applied view transitions so we can apply them on POP
          let appliedViewTransitions = new Map();
          // Cleanup function for persisting applied transitions to sessionStorage
          let removePageHideEventListener = null;
          // We use this to avoid touching history in completeNavigation if a
          // revalidation is entirely uninterrupted
          let isUninterruptedRevalidation = false;
          // Use this internal flag to force revalidation of all loaders:
          //  - submissions (completed or interrupted)
          //  - useRevalidator()
          //  - X-Remix-Revalidate (from redirect)
          let isRevalidationRequired = false;
          // Use this internal array to capture routes that require revalidation due
          // to a cancelled deferred on action submission
          let cancelledDeferredRoutes = [];
          // Use this internal array to capture fetcher loads that were cancelled by an
          // action navigation and require revalidation
          let cancelledFetcherLoads = [];
          // AbortControllers for any in-flight fetchers
          let fetchControllers = new Map();
          // Track loads based on the order in which they started
          let incrementingLoadId = 0;
          // Track the outstanding pending navigation data load to be compared against
          // the globally incrementing load when a fetcher load lands after a completed
          // navigation
          let pendingNavigationLoadId = -1;
          // Fetchers that triggered data reloads as a result of their actions
          let fetchReloadIds = new Map();
          // Fetchers that triggered redirect navigations
          let fetchRedirectIds = new Set();
          // Most recent href/match for fetcher.load calls for fetchers
          let fetchLoadMatches = new Map();
          // Ref-count mounted fetchers so we know when it's ok to clean them up
          let activeFetchers = new Map();
          // Fetchers that have requested a delete when using v7_fetcherPersist,
          // they'll be officially removed after they return to idle
          let deletedFetchers = new Set();
          // Store DeferredData instances for active route matches.  When a
          // route loader returns defer() we stick one in here.  Then, when a nested
          // promise resolves we update loaderData.  If a new navigation starts we
          // cancel active deferreds for eliminated routes.
          let activeDeferreds = new Map();
          // Store blocker functions in a separate Map outside of router state since
          // we don't need to update UI state if they change
          let blockerFunctions = new Map();
          // Flag to ignore the next history update, so we can revert the URL change on
          // a POP navigation that was blocked by the user without touching router state
          let ignoreNextHistoryUpdate = false;
          // Initialize the router, all side effects should be kicked off from here.
          // Implemented as a Fluent API for ease of:
          //   let router = createRouter(init).initialize();
          function initialize() {
            // If history informs us of a POP navigation, start the navigation but do not update
            // state.  We'll update our own state once the navigation completes
            unlistenHistory = init.history.listen((_ref) => {
              let { action: historyAction, location, delta } = _ref;
              // Ignore this event if it was just us resetting the URL from a
              // blocked POP navigation
              if (ignoreNextHistoryUpdate) {
                ignoreNextHistoryUpdate = false;
                return;
              }
              warning(
                blockerFunctions.size === 0 || delta != null,
                "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.",
              );
              let blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction,
              });
              if (blockerKey && delta != null) {
                // Restore the URL to match the current UI, but don't update router state
                ignoreNextHistoryUpdate = true;
                init.history.go(delta * -1);
                // Put the blocker into a blocked state
                updateBlocker(blockerKey, {
                  state: "blocked",
                  location,
                  proceed() {
                    updateBlocker(blockerKey, {
                      state: "proceeding",
                      proceed: undefined,
                      reset: undefined,
                      location,
                    });
                    // Re-do the same POP navigation we just blocked
                    init.history.go(delta);
                  },
                  reset() {
                    let blockers = new Map(state.blockers);
                    blockers.set(blockerKey, IDLE_BLOCKER);
                    updateState({
                      blockers,
                    });
                  },
                });
                return;
              }
              return startNavigation(historyAction, location);
            });
            if (isBrowser) {
              // FIXME: This feels gross.  How can we cleanup the lines between
              // scrollRestoration/appliedTransitions persistance?
              restoreAppliedTransitions(routerWindow, appliedViewTransitions);
              let _saveAppliedTransitions = () =>
                persistAppliedTransitions(routerWindow, appliedViewTransitions);
              routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
              removePageHideEventListener = () =>
                routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
            }
            // Kick off initial data load if needed.  Use Pop to avoid modifying history
            // Note we don't do any handling of lazy here.  For SPA's it'll get handled
            // in the normal navigation flow.  For SSR it's expected that lazy modules are
            // resolved prior to router creation since we can't go into a fallbackElement
            // UI for SSR'd apps
            if (!state.initialized)
              startNavigation(Action.Pop, state.location, {
                initialHydration: true,
              });
            return router;
          }
          // Clean up a router and it's side effects
          function dispose() {
            if (unlistenHistory) unlistenHistory();
            if (removePageHideEventListener) removePageHideEventListener();
            subscribers.clear();
            pendingNavigationController && pendingNavigationController.abort();
            state.fetchers.forEach((_, key) => deleteFetcher(key));
            state.blockers.forEach((_, key) => deleteBlocker(key));
          }
          // Subscribe to state updates for the router
          function subscribe(fn) {
            subscribers.add(fn);
            return () => subscribers.delete(fn);
          }
          // Update our state and notify the calling context of the change
          function updateState(newState, opts) {
            if (opts === void 0) opts = {};
            state = _extends({}, state, newState);
            // Prep fetcher cleanup so we can tell the UI which fetcher data entries
            // can be removed
            let completedFetchers = [];
            let deletedFetchersKeys = [];
            if (future.v7_fetcherPersist)
              state.fetchers.forEach((fetcher, key) => {
                if (fetcher.state === "idle") {
                  if (deletedFetchers.has(key))
                    // Unmounted from the UI and can be totally removed
                    deletedFetchersKeys.push(key);
                  // Returned to idle but still mounted in the UI, so semi-remains for
                  // revalidations and such
                  else completedFetchers.push(key);
                }
              });
            // Iterate over a local copy so that if flushSync is used and we end up
            // removing and adding a new subscriber due to the useCallback dependencies,
            // we don't get ourselves into a loop calling the new subscriber immediately
            [...subscribers].forEach((subscriber) =>
              subscriber(state, {
                deletedFetchers: deletedFetchersKeys,
                unstable_viewTransitionOpts: opts.viewTransitionOpts,
                unstable_flushSync: opts.flushSync === true,
              }),
            );
            // Remove idle fetchers from state since we only care about in-flight fetchers.
            if (future.v7_fetcherPersist) {
              completedFetchers.forEach((key) => state.fetchers.delete(key));
              deletedFetchersKeys.forEach((key) => deleteFetcher(key));
            }
          }
          // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION
          // and setting state.[historyAction/location/matches] to the new route.
          // - Location is a required param
          // - Navigation will always be set to IDLE_NAVIGATION
          // - Can pass any other state in newState
          function completeNavigation(location, newState, _temp) {
            var _location$state, _location$state2;
            let { flushSync } = _temp === void 0 ? {} : _temp;
            // Deduce if we're in a loading/actionReload state:
            // - We have committed actionData in the store
            // - The current navigation was a mutation submission
            // - We're past the submitting state and into the loading state
            // - The location being loaded is not the result of a redirect
            let isActionReload =
              state.actionData != null &&
              state.navigation.formMethod != null &&
              isMutationMethod(state.navigation.formMethod) &&
              state.navigation.state === "loading" &&
              ((_location$state = location.state) == null
                ? void 0
                : _location$state._isRedirect) !== true;
            let actionData;
            if (newState.actionData) {
              if (Object.keys(newState.actionData).length > 0) actionData = newState.actionData;
              // Empty actionData -> clear prior actionData due to an action error
              else actionData = null;
            } else if (isActionReload)
              // Keep the current data if we're wrapping up the action reload
              actionData = state.actionData;
            // Clear actionData on any other completed navigations
            else actionData = null;
            // Always preserve any existing loaderData from re-used routes
            let loaderData = newState.loaderData
              ? mergeLoaderData(
                  state.loaderData,
                  newState.loaderData,
                  newState.matches || [],
                  newState.errors,
                )
              : state.loaderData;
            // On a successful navigation we can assume we got through all blockers
            // so we can start fresh
            let blockers = state.blockers;
            if (blockers.size > 0) {
              blockers = new Map(blockers);
              blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
            }
            // Always respect the user flag.  Otherwise don't reset on mutation
            // submission navigations unless they redirect
            let preventScrollReset =
              pendingPreventScrollReset === true ||
              (state.navigation.formMethod != null &&
                isMutationMethod(state.navigation.formMethod) &&
                ((_location$state2 = location.state) == null
                  ? void 0
                  : _location$state2._isRedirect) !== true);
            if (inFlightDataRoutes) {
              dataRoutes = inFlightDataRoutes;
              inFlightDataRoutes = undefined;
            }
            if (isUninterruptedRevalidation);
            else if (pendingAction === Action.Pop);
            else if (pendingAction === Action.Push) init.history.push(location, location.state);
            else if (pendingAction === Action.Replace)
              init.history.replace(location, location.state);
            let viewTransitionOpts;
            // On POP, enable transitions if they were enabled on the original navigation
            if (pendingAction === Action.Pop) {
              // Forward takes precedence so they behave like the original navigation
              let priorPaths = appliedViewTransitions.get(state.location.pathname);
              if (priorPaths && priorPaths.has(location.pathname))
                viewTransitionOpts = {
                  currentLocation: state.location,
                  nextLocation: location,
                };
              else if (appliedViewTransitions.has(location.pathname))
                // If we don't have a previous forward nav, assume we're popping back to
                // the new location and enable if that location previously enabled
                viewTransitionOpts = {
                  currentLocation: location,
                  nextLocation: state.location,
                };
            } else if (pendingViewTransitionEnabled) {
              // Store the applied transition on PUSH/REPLACE
              let toPaths = appliedViewTransitions.get(state.location.pathname);
              if (toPaths) toPaths.add(location.pathname);
              else {
                toPaths = new Set([location.pathname]);
                appliedViewTransitions.set(state.location.pathname, toPaths);
              }
              viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location,
              };
            }
            updateState(
              _extends({}, newState, {
                actionData,
                loaderData,
                historyAction: pendingAction,
                location,
                initialized: true,
                navigation: IDLE_NAVIGATION,
                revalidation: "idle",
                restoreScrollPosition: getSavedScrollPosition(
                  location,
                  newState.matches || state.matches,
                ),
                preventScrollReset,
                blockers,
              }),
              {
                viewTransitionOpts,
                flushSync: flushSync === true,
              },
            );
            // Reset stateful navigation vars
            pendingAction = Action.Pop;
            pendingPreventScrollReset = false;
            pendingViewTransitionEnabled = false;
            isUninterruptedRevalidation = false;
            isRevalidationRequired = false;
            cancelledDeferredRoutes = [];
            cancelledFetcherLoads = [];
          }
          // Trigger a navigation event, which can either be a numerical POP or a PUSH
          // replace with an optional submission
          async function navigate(to, opts) {
            if (typeof to === "number") {
              init.history.go(to);
              return;
            }
            let normalizedPath = normalizeTo(
              state.location,
              state.matches,
              basename,
              future.v7_prependBasename,
              to,
              future.v7_relativeSplatPath,
              opts == null ? void 0 : opts.fromRouteId,
              opts == null ? void 0 : opts.relative,
            );
            let { path, submission, error } = normalizeNavigateOptions(
              future.v7_normalizeFormMethod,
              false,
              normalizedPath,
              opts,
            );
            let currentLocation = state.location;
            let nextLocation = createLocation(state.location, path, opts && opts.state);
            // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded
            // URL from window.location, so we need to encode it here so the behavior
            // remains the same as POP and non-data-router usages.  new URL() does all
            // the same encoding we'd get from a history.pushState/window.location read
            // without having to touch history
            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
            let userReplace = opts && opts.replace != null ? opts.replace : undefined;
            let historyAction = Action.Push;
            if (userReplace === true) historyAction = Action.Replace;
            else if (userReplace === false);
            else if (
              submission != null &&
              isMutationMethod(submission.formMethod) &&
              submission.formAction === state.location.pathname + state.location.search
            )
              // By default on submissions to the current location we REPLACE so that
              // users don't have to double-click the back button to get to the prior
              // location.  If the user redirects to a different location from the
              // action/loader this will be ignored and the redirect will be a PUSH
              historyAction = Action.Replace;
            let preventScrollReset =
              opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;
            let flushSync = (opts && opts.unstable_flushSync) === true;
            let blockerKey = shouldBlockNavigation({
              currentLocation,
              nextLocation,
              historyAction,
            });
            if (blockerKey) {
              // Put the blocker into a blocked state
              updateBlocker(blockerKey, {
                state: "blocked",
                location: nextLocation,
                proceed() {
                  updateBlocker(blockerKey, {
                    state: "proceeding",
                    proceed: undefined,
                    reset: undefined,
                    location: nextLocation,
                  });
                  // Send the same navigation through
                  navigate(to, opts);
                },
                reset() {
                  let blockers = new Map(state.blockers);
                  blockers.set(blockerKey, IDLE_BLOCKER);
                  updateState({
                    blockers,
                  });
                },
              });
              return;
            }
            return await startNavigation(historyAction, nextLocation, {
              submission,
              // Send through the formData serialization error if we have one so we can
              // render at the right error boundary after we match routes
              pendingError: error,
              preventScrollReset,
              replace: opts && opts.replace,
              enableViewTransition: opts && opts.unstable_viewTransition,
              flushSync,
            });
          }
          // Revalidate all current loaders.  If a navigation is in progress or if this
          // is interrupted by a navigation, allow this to "succeed" by calling all
          // loaders during the next loader round
          function revalidate() {
            interruptActiveLoads();
            updateState({
              revalidation: "loading",
            });
            // If we're currently submitting an action, we don't need to start a new
            // navigation, we'll just let the follow up loader execution call all loaders
            if (state.navigation.state === "submitting") return;
            // If we're currently in an idle state, start a new navigation for the current
            // action/location and mark it as uninterrupted, which will skip the history
            // update in completeNavigation
            if (state.navigation.state === "idle") {
              startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true,
              });
              return;
            }
            // Otherwise, if we're currently in a loading state, just start a new
            // navigation to the navigation.location but do not trigger an uninterrupted
            // revalidation so that history correctly updates once the navigation completes
            startNavigation(pendingAction || state.historyAction, state.navigation.location, {
              overrideNavigation: state.navigation,
            });
          }
          // Start a navigation to the given action/location.  Can optionally provide a
          // overrideNavigation which will override the normalLoad in the case of a redirect
          // navigation
          async function startNavigation(historyAction, location, opts) {
            // Abort any in-progress navigations and start a new one. Unset any ongoing
            // uninterrupted revalidations unless told otherwise, since we want this
            // new navigation to update history normally
            pendingNavigationController && pendingNavigationController.abort();
            pendingNavigationController = null;
            pendingAction = historyAction;
            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
            // Save the current scroll position every time we start a new navigation,
            // and track whether we should reset scroll on completion
            saveScrollPosition(state.location, state.matches);
            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
            pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let loadingNavigation = opts && opts.overrideNavigation;
            let matches = matchRoutes(routesToUse, location, basename);
            let flushSync = (opts && opts.flushSync) === true;
            // Short circuit with a 404 on the root error boundary if we match nothing
            if (!matches) {
              let error = getInternalRouterError(404, {
                pathname: location.pathname,
              });
              let { matches: notFoundMatches, route } = getShortCircuitMatches(routesToUse);
              // Cancel all pending deferred on 404s since we don't keep any routes
              cancelActiveDeferreds();
              completeNavigation(
                location,
                {
                  matches: notFoundMatches,
                  loaderData: {},
                  errors: {
                    [route.id]: error,
                  },
                },
                {
                  flushSync,
                },
              );
              return;
            }
            // Short circuit if it's only a hash change and not a revalidation or
            // mutation submission.
            //
            // Ignore on initial page loads because since the initial load will always
            // be "same hash".  For example, on /page#hash and submit a <Form method="post">
            // which will default to a navigation to /page
            if (
              state.initialized &&
              !isRevalidationRequired &&
              isHashChangeOnly(state.location, location) &&
              !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))
            ) {
              completeNavigation(
                location,
                {
                  matches,
                },
                {
                  flushSync,
                },
              );
              return;
            }
            // Create a controller/Request for this navigation
            pendingNavigationController = new AbortController();
            let request = createClientSideRequest(
              init.history,
              location,
              pendingNavigationController.signal,
              opts && opts.submission,
            );
            let pendingActionData;
            let pendingError;
            if (opts && opts.pendingError)
              // If we have a pendingError, it means the user attempted a GET submission
              // with binary FormData so assign here and skip to handleLoaders.  That
              // way we handle calling loaders above the boundary etc.  It's not really
              // different from an actionError in that sense.
              pendingError = {
                [findNearestBoundary(matches).route.id]: opts.pendingError,
              };
            else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
              // Call action if we received an action submission
              let actionOutput = await handleAction(request, location, opts.submission, matches, {
                replace: opts.replace,
                flushSync,
              });
              if (actionOutput.shortCircuited) return;
              pendingActionData = actionOutput.pendingActionData;
              pendingError = actionOutput.pendingActionError;
              loadingNavigation = getLoadingNavigation(location, opts.submission);
              flushSync = false;
              // Create a GET request for the loaders
              request = new Request(request.url, {
                signal: request.signal,
              });
            }
            // Call loaders
            let { shortCircuited, loaderData, errors } = await handleLoaders(
              request,
              location,
              matches,
              loadingNavigation,
              opts && opts.submission,
              opts && opts.fetcherSubmission,
              opts && opts.replace,
              opts && opts.initialHydration === true,
              flushSync,
              pendingActionData,
              pendingError,
            );
            if (shortCircuited) return;
            // Clean up now that the action/loaders have completed.  Don't clean up if
            // we short circuited because pendingNavigationController will have already
            // been assigned to a new controller for the next navigation
            pendingNavigationController = null;
            completeNavigation(
              location,
              _extends(
                {
                  matches,
                },
                pendingActionData
                  ? {
                      actionData: pendingActionData,
                    }
                  : {},
                {
                  loaderData,
                  errors,
                },
              ),
            );
          }
          // Call the action matched by the leaf route for this navigation and handle
          // redirects/errors
          async function handleAction(request, location, submission, matches, opts) {
            if (opts === void 0) opts = {};
            interruptActiveLoads();
            // Put us in a submitting state
            let navigation = getSubmittingNavigation(location, submission);
            updateState(
              {
                navigation,
              },
              {
                flushSync: opts.flushSync === true,
              },
            );
            // Call our action and get the result
            let result;
            let actionMatch = getTargetMatch(matches, location);
            if (!actionMatch.route.action && !actionMatch.route.lazy)
              result = {
                type: ResultType.error,
                error: getInternalRouterError(405, {
                  method: request.method,
                  pathname: location.pathname,
                  routeId: actionMatch.route.id,
                }),
              };
            else {
              result = await callLoaderOrAction(
                "action",
                request,
                actionMatch,
                matches,
                manifest,
                mapRouteProperties,
                basename,
                future.v7_relativeSplatPath,
              );
              if (request.signal.aborted)
                return {
                  shortCircuited: true,
                };
            }
            if (isRedirectResult(result)) {
              let replace;
              if (opts && opts.replace != null) replace = opts.replace;
              // If the user didn't explicity indicate replace behavior, replace if
              // we redirected to the exact same location we're currently at to avoid
              // double back-buttons
              else replace = result.location === state.location.pathname + state.location.search;
              await startRedirectNavigation(state, result, {
                submission,
                replace,
              });
              return {
                shortCircuited: true,
              };
            }
            if (isErrorResult(result)) {
              // Store off the pending error - we use it to determine which loaders
              // to call and will commit it when we complete the navigation
              let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
              // By default, all submissions are REPLACE navigations, but if the
              // action threw an error that'll be rendered in an errorElement, we fall
              // back to PUSH so that the user can use the back button to get back to
              // the pre-submission form location to try again
              if ((opts && opts.replace) !== true) pendingAction = Action.Push;
              return {
                // Send back an empty object we can use to clear out any prior actionData
                pendingActionData: {},
                pendingActionError: {
                  [boundaryMatch.route.id]: result.error,
                },
              };
            }
            if (isDeferredResult(result))
              throw getInternalRouterError(400, {
                type: "defer-action",
              });
            return {
              pendingActionData: {
                [actionMatch.route.id]: result.data,
              },
            };
          }
          // Call all applicable loaders for the given matches, handling redirects,
          // errors, etc.
          async function handleLoaders(
            request,
            location,
            matches,
            overrideNavigation,
            submission,
            fetcherSubmission,
            replace,
            initialHydration,
            flushSync,
            pendingActionData,
            pendingError,
          ) {
            // Figure out the right navigation we want to use for data loading
            let loadingNavigation =
              overrideNavigation || getLoadingNavigation(location, submission);
            // If this was a redirect from an action we don't have a "submission" but
            // we have it on the loading navigation so use that if available
            let activeSubmission =
              submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
              init.history,
              state,
              matches,
              activeSubmission,
              location,
              future.v7_partialHydration && initialHydration === true,
              isRevalidationRequired,
              cancelledDeferredRoutes,
              cancelledFetcherLoads,
              deletedFetchers,
              fetchLoadMatches,
              fetchRedirectIds,
              routesToUse,
              basename,
              pendingActionData,
              pendingError,
            );
            // Cancel pending deferreds for no-longer-matched routes or routes we're
            // about to reload.  Note that if this is an action reload we would have
            // already cancelled all pending deferreds so this would be a no-op
            cancelActiveDeferreds(
              (routeId) =>
                !(matches && matches.some((m) => m.route.id === routeId)) ||
                (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId)),
            );
            pendingNavigationLoadId = ++incrementingLoadId;
            // Short circuit if we have no loaders to run
            if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
              let updatedFetchers = markFetchRedirectsDone();
              completeNavigation(
                location,
                _extends(
                  {
                    matches,
                    loaderData: {},
                    // Commit pending error if we're short circuiting
                    errors: pendingError || null,
                  },
                  pendingActionData
                    ? {
                        actionData: pendingActionData,
                      }
                    : {},
                  updatedFetchers
                    ? {
                        fetchers: new Map(state.fetchers),
                      }
                    : {},
                ),
                {
                  flushSync,
                },
              );
              return {
                shortCircuited: true,
              };
            }
            // If this is an uninterrupted revalidation, we remain in our current idle
            // state.  If not, we need to switch to our loading state and load data,
            // preserving any new action data or existing action data (in the case of
            // a revalidation interrupting an actionReload)
            // If we have partialHydration enabled, then don't update the state for the
            // initial data load since it's not a "navigation"
            if (
              !isUninterruptedRevalidation &&
              (!future.v7_partialHydration || !initialHydration)
            ) {
              revalidatingFetchers.forEach((rf) => {
                let fetcher = state.fetchers.get(rf.key);
                let revalidatingFetcher = getLoadingFetcher(
                  undefined,
                  fetcher ? fetcher.data : undefined,
                );
                state.fetchers.set(rf.key, revalidatingFetcher);
              });
              let actionData = pendingActionData || state.actionData;
              updateState(
                _extends(
                  {
                    navigation: loadingNavigation,
                  },
                  actionData
                    ? Object.keys(actionData).length === 0
                      ? {
                          actionData: null,
                        }
                      : {
                          actionData,
                        }
                    : {},
                  revalidatingFetchers.length > 0
                    ? {
                        fetchers: new Map(state.fetchers),
                      }
                    : {},
                ),
                {
                  flushSync,
                },
              );
            }
            revalidatingFetchers.forEach((rf) => {
              if (fetchControllers.has(rf.key)) abortFetcher(rf.key);
              if (rf.controller)
                // Fetchers use an independent AbortController so that aborting a fetcher
                // (via deleteFetcher) does not abort the triggering navigation that
                // triggered the revalidation
                fetchControllers.set(rf.key, rf.controller);
            });
            // Proxy navigation abort through to revalidation fetchers
            let abortPendingFetchRevalidations = () =>
              revalidatingFetchers.forEach((f) => abortFetcher(f.key));
            if (pendingNavigationController)
              pendingNavigationController.signal.addEventListener(
                "abort",
                abortPendingFetchRevalidations,
              );
            let { results, loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(
              state.matches,
              matches,
              matchesToLoad,
              revalidatingFetchers,
              request,
            );
            if (request.signal.aborted)
              return {
                shortCircuited: true,
              };
            // Clean up _after_ loaders have completed.  Don't clean up if we short
            // circuited because fetchControllers would have been aborted and
            // reassigned to new controllers for the next navigation
            if (pendingNavigationController)
              pendingNavigationController.signal.removeEventListener(
                "abort",
                abortPendingFetchRevalidations,
              );
            revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
            // If any loaders returned a redirect Response, start a new REPLACE navigation
            let redirect = findRedirect(results);
            if (redirect) {
              if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
              }
              await startRedirectNavigation(state, redirect.result, {
                replace,
              });
              return {
                shortCircuited: true,
              };
            }
            // Process and commit output from loaders
            let { loaderData, errors } = processLoaderData(
              state,
              matches,
              matchesToLoad,
              loaderResults,
              pendingError,
              revalidatingFetchers,
              fetcherResults,
              activeDeferreds,
            );
            // Wire up subscribers to update loaderData as promises settle
            activeDeferreds.forEach((deferredData, routeId) => {
              deferredData.subscribe((aborted) => {
                // Note: No need to updateState here since the TrackedPromise on
                // loaderData is stable across resolve/reject
                // Remove this instance if we were aborted or if promises have settled
                if (aborted || deferredData.done) activeDeferreds.delete(routeId);
              });
            });
            // During partial hydration, preserve SSR errors for routes that don't re-run
            if (future.v7_partialHydration && initialHydration && state.errors)
              Object.entries(state.errors)
                .filter((_ref2) => {
                  let [id] = _ref2;
                  return !matchesToLoad.some((m) => m.route.id === id);
                })
                .forEach((_ref3) => {
                  let [routeId, error] = _ref3;
                  errors = Object.assign(errors || {}, {
                    [routeId]: error,
                  });
                });
            let updatedFetchers = markFetchRedirectsDone();
            let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
            let shouldUpdateFetchers =
              updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
            return _extends(
              {
                loaderData,
                errors,
              },
              shouldUpdateFetchers
                ? {
                    fetchers: new Map(state.fetchers),
                  }
                : {},
            );
          }
          // Trigger a fetcher load/submit for the given fetcher key
          function fetch(key, routeId, href, opts) {
            if (isServer)
              throw new Error(
                "router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.",
              );
            if (fetchControllers.has(key)) abortFetcher(key);
            let flushSync = (opts && opts.unstable_flushSync) === true;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let normalizedPath = normalizeTo(
              state.location,
              state.matches,
              basename,
              future.v7_prependBasename,
              href,
              future.v7_relativeSplatPath,
              routeId,
              opts == null ? void 0 : opts.relative,
            );
            let matches = matchRoutes(routesToUse, normalizedPath, basename);
            if (!matches) {
              setFetcherError(
                key,
                routeId,
                getInternalRouterError(404, {
                  pathname: normalizedPath,
                }),
                {
                  flushSync,
                },
              );
              return;
            }
            let { path, submission, error } = normalizeNavigateOptions(
              future.v7_normalizeFormMethod,
              true,
              normalizedPath,
              opts,
            );
            if (error) {
              setFetcherError(key, routeId, error, {
                flushSync,
              });
              return;
            }
            let match = getTargetMatch(matches, path);
            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
            if (submission && isMutationMethod(submission.formMethod)) {
              handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);
              return;
            }
            // Store off the match so we can call it's shouldRevalidate on subsequent
            // revalidations
            fetchLoadMatches.set(key, {
              routeId,
              path,
            });
            handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);
          }
          // Call the action for the matched fetcher.submit(), and then handle redirects,
          // errors, and revalidation
          async function handleFetcherAction(
            key,
            routeId,
            path,
            match,
            requestMatches,
            flushSync,
            submission,
          ) {
            interruptActiveLoads();
            fetchLoadMatches.delete(key);
            if (!match.route.action && !match.route.lazy) {
              let error = getInternalRouterError(405, {
                method: submission.formMethod,
                pathname: path,
                routeId: routeId,
              });
              setFetcherError(key, routeId, error, {
                flushSync,
              });
              return;
            }
            // Put this fetcher into it's submitting state
            let existingFetcher = state.fetchers.get(key);
            updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
              flushSync,
            });
            // Call the action for the fetcher
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(
              init.history,
              path,
              abortController.signal,
              submission,
            );
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let actionResult = await callLoaderOrAction(
              "action",
              fetchRequest,
              match,
              requestMatches,
              manifest,
              mapRouteProperties,
              basename,
              future.v7_relativeSplatPath,
            );
            if (fetchRequest.signal.aborted) {
              // We can delete this so long as we weren't aborted by our own fetcher
              // re-submit which would have put _new_ controller is in fetchControllers
              if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
              return;
            }
            // When using v7_fetcherPersist, we don't want errors bubbling up to the UI
            // or redirects processed for unmounted fetchers so we just revert them to
            // idle
            if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
              if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
                updateFetcherState(key, getDoneFetcher(undefined));
                return;
              }
            } else {
              if (isRedirectResult(actionResult)) {
                fetchControllers.delete(key);
                if (pendingNavigationLoadId > originatingLoadId) {
                  // A new navigation was kicked off after our action started, so that
                  // should take precedence over this redirect navigation.  We already
                  // set isRevalidationRequired so all loaders for the new route should
                  // fire unless opted out via shouldRevalidate
                  updateFetcherState(key, getDoneFetcher(undefined));
                  return;
                } else {
                  fetchRedirectIds.add(key);
                  updateFetcherState(key, getLoadingFetcher(submission));
                  return startRedirectNavigation(state, actionResult, {
                    fetcherSubmission: submission,
                  });
                }
              }
              // Process any non-redirect errors thrown
              if (isErrorResult(actionResult)) {
                setFetcherError(key, routeId, actionResult.error);
                return;
              }
            }
            if (isDeferredResult(actionResult))
              throw getInternalRouterError(400, {
                type: "defer-action",
              });
            // Start the data load for current matches, or the next location if we're
            // in the middle of a navigation
            let nextLocation = state.navigation.location || state.location;
            let revalidationRequest = createClientSideRequest(
              init.history,
              nextLocation,
              abortController.signal,
            );
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let matches =
              state.navigation.state !== "idle"
                ? matchRoutes(routesToUse, state.navigation.location, basename)
                : state.matches;
            invariant(matches, "Didn't find any matches after fetcher action");
            let loadId = ++incrementingLoadId;
            fetchReloadIds.set(key, loadId);
            let loadFetcher = getLoadingFetcher(submission, actionResult.data);
            state.fetchers.set(key, loadFetcher);
            let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
              init.history,
              state,
              matches,
              submission,
              nextLocation,
              false,
              isRevalidationRequired,
              cancelledDeferredRoutes,
              cancelledFetcherLoads,
              deletedFetchers,
              fetchLoadMatches,
              fetchRedirectIds,
              routesToUse,
              basename,
              {
                [match.route.id]: actionResult.data,
              },
              undefined, // No need to send through errors since we short circuit above
            );
            // Put all revalidating fetchers into the loading state, except for the
            // current fetcher which we want to keep in it's current loading state which
            // contains it's action submission info + action data
            revalidatingFetchers
              .filter((rf) => rf.key !== key)
              .forEach((rf) => {
                let staleKey = rf.key;
                let existingFetcher = state.fetchers.get(staleKey);
                let revalidatingFetcher = getLoadingFetcher(
                  undefined,
                  existingFetcher ? existingFetcher.data : undefined,
                );
                state.fetchers.set(staleKey, revalidatingFetcher);
                if (fetchControllers.has(staleKey)) abortFetcher(staleKey);
                if (rf.controller) fetchControllers.set(staleKey, rf.controller);
              });
            updateState({
              fetchers: new Map(state.fetchers),
            });
            let abortPendingFetchRevalidations = () =>
              revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
            abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
            let { results, loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(
              state.matches,
              matches,
              matchesToLoad,
              revalidatingFetchers,
              revalidationRequest,
            );
            if (abortController.signal.aborted) return;
            abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
            fetchReloadIds.delete(key);
            fetchControllers.delete(key);
            revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
            let redirect = findRedirect(results);
            if (redirect) {
              if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
              }
              return startRedirectNavigation(state, redirect.result);
            }
            // Process and commit output from loaders
            let { loaderData, errors } = processLoaderData(
              state,
              state.matches,
              matchesToLoad,
              loaderResults,
              undefined,
              revalidatingFetchers,
              fetcherResults,
              activeDeferreds,
            );
            // Since we let revalidations complete even if the submitting fetcher was
            // deleted, only put it back to idle if it hasn't been deleted
            if (state.fetchers.has(key)) {
              let doneFetcher = getDoneFetcher(actionResult.data);
              state.fetchers.set(key, doneFetcher);
            }
            abortStaleFetchLoads(loadId);
            // If we are currently in a navigation loading state and this fetcher is
            // more recent than the navigation, we want the newer data so abort the
            // navigation and complete it with the fetcher data
            if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
              invariant(pendingAction, "Expected pending action");
              pendingNavigationController && pendingNavigationController.abort();
              completeNavigation(state.navigation.location, {
                matches,
                loaderData,
                errors,
                fetchers: new Map(state.fetchers),
              });
            } else {
              // otherwise just update with the fetcher data, preserving any existing
              // loaderData for loaders that did not need to reload.  We have to
              // manually merge here since we aren't going through completeNavigation
              updateState({
                errors,
                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),
                fetchers: new Map(state.fetchers),
              });
              isRevalidationRequired = false;
            }
          }
          // Call the matched loader for fetcher.load(), handling redirects, errors, etc.
          async function handleFetcherLoader(
            key,
            routeId,
            path,
            match,
            matches,
            flushSync,
            submission,
          ) {
            let existingFetcher = state.fetchers.get(key);
            updateFetcherState(
              key,
              getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined),
              {
                flushSync,
              },
            );
            // Call the loader for this fetcher route match
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let result = await callLoaderOrAction(
              "loader",
              fetchRequest,
              match,
              matches,
              manifest,
              mapRouteProperties,
              basename,
              future.v7_relativeSplatPath,
            );
            // Deferred isn't supported for fetcher loads, await everything and treat it
            // as a normal load.  resolveDeferredData will return undefined if this
            // fetcher gets aborted, so we just leave result untouched and short circuit
            // below if that happens
            if (isDeferredResult(result))
              result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;
            // We can delete this so long as we weren't aborted by our our own fetcher
            // re-load which would have put _new_ controller is in fetchControllers
            if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
            if (fetchRequest.signal.aborted) return;
            // We don't want errors bubbling up or redirects followed for unmounted
            // fetchers, so short circuit here if it was removed from the UI
            if (deletedFetchers.has(key)) {
              updateFetcherState(key, getDoneFetcher(undefined));
              return;
            }
            // If the loader threw a redirect Response, start a new REPLACE navigation
            if (isRedirectResult(result)) {
              if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our loader started, so that
                // should take precedence over this redirect navigation
                updateFetcherState(key, getDoneFetcher(undefined));
                return;
              } else {
                fetchRedirectIds.add(key);
                await startRedirectNavigation(state, result);
                return;
              }
            }
            // Process any non-redirect errors thrown
            if (isErrorResult(result)) {
              setFetcherError(key, routeId, result.error);
              return;
            }
            invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
            // Put the fetcher back into an idle state
            updateFetcherState(key, getDoneFetcher(result.data));
          }
          /**
           * Utility function to handle redirects returned from an action or loader.
           * Normally, a redirect "replaces" the navigation that triggered it.  So, for
           * example:
           *
           *  - user is on /a
           *  - user clicks a link to /b
           *  - loader for /b redirects to /c
           *
           * In a non-JS app the browser would track the in-flight navigation to /b and
           * then replace it with /c when it encountered the redirect response.  In
           * the end it would only ever update the URL bar with /c.
           *
           * In client-side routing using pushState/replaceState, we aim to emulate
           * this behavior and we also do not update history until the end of the
           * navigation (including processed redirects).  This means that we never
           * actually touch history until we've processed redirects, so we just use
           * the history action from the original navigation (PUSH or REPLACE).
           */ async function startRedirectNavigation(state, redirect, _temp2) {
            let { submission, fetcherSubmission, replace } = _temp2 === void 0 ? {} : _temp2;
            if (redirect.revalidate) isRevalidationRequired = true;
            let redirectLocation = createLocation(state.location, redirect.location, {
              _isRedirect: true,
            });
            invariant(redirectLocation, "Expected a location on the redirect navigation");
            if (isBrowser) {
              let isDocumentReload = false;
              if (redirect.reloadDocument)
                // Hard reload if the response contained X-Remix-Reload-Document
                isDocumentReload = true;
              else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {
                const url = init.history.createURL(redirect.location);
                isDocumentReload = // Hard reload if it's an absolute URL to a new origin
                  url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                  stripBasename(url.pathname, basename) == null;
              }
              if (isDocumentReload) {
                if (replace) routerWindow.location.replace(redirect.location);
                else routerWindow.location.assign(redirect.location);
                return;
              }
            }
            // There's no need to abort on redirects, since we don't detect the
            // redirect until the action/loaders have settled
            pendingNavigationController = null;
            let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;
            // Use the incoming submission if provided, fallback on the active one in
            // state.navigation
            let { formMethod, formAction, formEncType } = state.navigation;
            if (!submission && !fetcherSubmission && formMethod && formAction && formEncType)
              submission = getSubmissionFromNavigation(state.navigation);
            // If this was a 307/308 submission we want to preserve the HTTP method and
            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the
            // redirected location
            let activeSubmission = submission || fetcherSubmission;
            if (
              redirectPreserveMethodStatusCodes.has(redirect.status) &&
              activeSubmission &&
              isMutationMethod(activeSubmission.formMethod)
            )
              await startNavigation(redirectHistoryAction, redirectLocation, {
                submission: _extends({}, activeSubmission, {
                  formAction: redirect.location,
                }),
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset,
              });
            else {
              // If we have a navigation submission, we will preserve it through the
              // redirect navigation
              let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
              await startNavigation(redirectHistoryAction, redirectLocation, {
                overrideNavigation,
                // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset,
              });
            }
          }
          async function callLoadersAndMaybeResolveData(
            currentMatches,
            matches,
            matchesToLoad,
            fetchersToLoad,
            request,
          ) {
            // Call all navigation loaders and revalidating fetcher loaders in parallel,
            // then slice off the results into separate arrays so we can handle them
            // accordingly
            let results = await Promise.all([
              ...matchesToLoad.map((match) =>
                callLoaderOrAction(
                  "loader",
                  request,
                  match,
                  matches,
                  manifest,
                  mapRouteProperties,
                  basename,
                  future.v7_relativeSplatPath,
                ),
              ),
              ...fetchersToLoad.map((f) => {
                if (f.matches && f.match && f.controller)
                  return callLoaderOrAction(
                    "loader",
                    createClientSideRequest(init.history, f.path, f.controller.signal),
                    f.match,
                    f.matches,
                    manifest,
                    mapRouteProperties,
                    basename,
                    future.v7_relativeSplatPath,
                  );
                else {
                  let error = {
                    type: ResultType.error,
                    error: getInternalRouterError(404, {
                      pathname: f.path,
                    }),
                  };
                  return error;
                }
              }),
            ]);
            let loaderResults = results.slice(0, matchesToLoad.length);
            let fetcherResults = results.slice(matchesToLoad.length);
            await Promise.all([
              resolveDeferredResults(
                currentMatches,
                matchesToLoad,
                loaderResults,
                loaderResults.map(() => request.signal),
                false,
                state.loaderData,
              ),
              resolveDeferredResults(
                currentMatches,
                fetchersToLoad.map((f) => f.match),
                fetcherResults,
                fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),
                true,
              ),
            ]);
            return {
              results,
              loaderResults,
              fetcherResults,
            };
          }
          function interruptActiveLoads() {
            // Every interruption triggers a revalidation
            isRevalidationRequired = true;
            // Cancel pending route-level deferreds and mark cancelled routes for
            // revalidation
            cancelledDeferredRoutes.push(...cancelActiveDeferreds());
            // Abort in-flight fetcher loads
            fetchLoadMatches.forEach((_, key) => {
              if (fetchControllers.has(key)) {
                cancelledFetcherLoads.push(key);
                abortFetcher(key);
              }
            });
          }
          function updateFetcherState(key, fetcher, opts) {
            if (opts === void 0) opts = {};
            state.fetchers.set(key, fetcher);
            updateState(
              {
                fetchers: new Map(state.fetchers),
              },
              {
                flushSync: (opts && opts.flushSync) === true,
              },
            );
          }
          function setFetcherError(key, routeId, error, opts) {
            if (opts === void 0) opts = {};
            let boundaryMatch = findNearestBoundary(state.matches, routeId);
            deleteFetcher(key);
            updateState(
              {
                errors: {
                  [boundaryMatch.route.id]: error,
                },
                fetchers: new Map(state.fetchers),
              },
              {
                flushSync: (opts && opts.flushSync) === true,
              },
            );
          }
          function getFetcher(key) {
            if (future.v7_fetcherPersist) {
              activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
              // If this fetcher was previously marked for deletion, unmark it since we
              // have a new instance
              if (deletedFetchers.has(key)) deletedFetchers.delete(key);
            }
            return state.fetchers.get(key) || IDLE_FETCHER;
          }
          function deleteFetcher(key) {
            let fetcher = state.fetchers.get(key);
            // Don't abort the controller if this is a deletion of a fetcher.submit()
            // in it's loading phase since - we don't want to abort the corresponding
            // revalidation and want them to complete and land
            if (
              fetchControllers.has(key) &&
              !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))
            )
              abortFetcher(key);
            fetchLoadMatches.delete(key);
            fetchReloadIds.delete(key);
            fetchRedirectIds.delete(key);
            deletedFetchers.delete(key);
            state.fetchers.delete(key);
          }
          function deleteFetcherAndUpdateState(key) {
            if (future.v7_fetcherPersist) {
              let count = (activeFetchers.get(key) || 0) - 1;
              if (count <= 0) {
                activeFetchers.delete(key);
                deletedFetchers.add(key);
              } else activeFetchers.set(key, count);
            } else deleteFetcher(key);
            updateState({
              fetchers: new Map(state.fetchers),
            });
          }
          function abortFetcher(key) {
            let controller = fetchControllers.get(key);
            invariant(controller, "Expected fetch controller: " + key);
            controller.abort();
            fetchControllers.delete(key);
          }
          function markFetchersDone(keys) {
            for (let key of keys) {
              let fetcher = getFetcher(key);
              let doneFetcher = getDoneFetcher(fetcher.data);
              state.fetchers.set(key, doneFetcher);
            }
          }
          function markFetchRedirectsDone() {
            let doneKeys = [];
            let updatedFetchers = false;
            for (let key of fetchRedirectIds) {
              let fetcher = state.fetchers.get(key);
              invariant(fetcher, "Expected fetcher: " + key);
              if (fetcher.state === "loading") {
                fetchRedirectIds.delete(key);
                doneKeys.push(key);
                updatedFetchers = true;
              }
            }
            markFetchersDone(doneKeys);
            return updatedFetchers;
          }
          function abortStaleFetchLoads(landedId) {
            let yeetedKeys = [];
            for (let [key, id] of fetchReloadIds)
              if (id < landedId) {
                let fetcher = state.fetchers.get(key);
                invariant(fetcher, "Expected fetcher: " + key);
                if (fetcher.state === "loading") {
                  abortFetcher(key);
                  fetchReloadIds.delete(key);
                  yeetedKeys.push(key);
                }
              }
            markFetchersDone(yeetedKeys);
            return yeetedKeys.length > 0;
          }
          function getBlocker(key, fn) {
            let blocker = state.blockers.get(key) || IDLE_BLOCKER;
            if (blockerFunctions.get(key) !== fn) blockerFunctions.set(key, fn);
            return blocker;
          }
          function deleteBlocker(key) {
            state.blockers.delete(key);
            blockerFunctions.delete(key);
          }
          // Utility function to update blockers, ensuring valid state transitions
          function updateBlocker(key, newBlocker) {
            let blocker = state.blockers.get(key) || IDLE_BLOCKER;
            // Poor mans state machine :)
            // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM
            invariant(
              (blocker.state === "unblocked" && newBlocker.state === "blocked") ||
                (blocker.state === "blocked" && newBlocker.state === "blocked") ||
                (blocker.state === "blocked" && newBlocker.state === "proceeding") ||
                (blocker.state === "blocked" && newBlocker.state === "unblocked") ||
                (blocker.state === "proceeding" && newBlocker.state === "unblocked"),
              "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state,
            );
            let blockers = new Map(state.blockers);
            blockers.set(key, newBlocker);
            updateState({
              blockers,
            });
          }
          function shouldBlockNavigation(_ref4) {
            let { currentLocation, nextLocation, historyAction } = _ref4;
            if (blockerFunctions.size === 0) return;
            // We ony support a single active blocker at the moment since we don't have
            // any compelling use cases for multi-blocker yet
            if (blockerFunctions.size > 1)
              warning(false, "A router only supports one blocker at a time");
            let entries = Array.from(blockerFunctions.entries());
            let [blockerKey, blockerFunction] = entries[entries.length - 1];
            let blocker = state.blockers.get(blockerKey);
            if (blocker && blocker.state === "proceeding")
              // If the blocker is currently proceeding, we don't need to re-check
              // it and can let this navigation continue
              return;
            // At this point, we know we're unblocked/blocked so we need to check the
            // user-provided blocker function
            if (
              blockerFunction({
                currentLocation,
                nextLocation,
                historyAction,
              })
            )
              return blockerKey;
          }
          function cancelActiveDeferreds(predicate) {
            let cancelledRouteIds = [];
            activeDeferreds.forEach((dfd, routeId) => {
              if (!predicate || predicate(routeId)) {
                // Cancel the deferred - but do not remove from activeDeferreds here -
                // we rely on the subscribers to do that so our tests can assert proper
                // cleanup via _internalActiveDeferreds
                dfd.cancel();
                cancelledRouteIds.push(routeId);
                activeDeferreds.delete(routeId);
              }
            });
            return cancelledRouteIds;
          }
          // Opt in to capturing and reporting scroll positions during navigations,
          // used by the <ScrollRestoration> component
          function enableScrollRestoration(positions, getPosition, getKey) {
            savedScrollPositions = positions;
            getScrollPosition = getPosition;
            getScrollRestorationKey = getKey || null;
            // Perform initial hydration scroll restoration, since we miss the boat on
            // the initial updateState() because we've not yet rendered <ScrollRestoration/>
            // and therefore have no savedScrollPositions available
            if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
              initialScrollRestored = true;
              let y = getSavedScrollPosition(state.location, state.matches);
              if (y != null)
                updateState({
                  restoreScrollPosition: y,
                });
            }
            return () => {
              savedScrollPositions = null;
              getScrollPosition = null;
              getScrollRestorationKey = null;
            };
          }
          function getScrollKey(location, matches) {
            if (getScrollRestorationKey) {
              let key = getScrollRestorationKey(
                location,
                matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData)),
              );
              return key || location.key;
            }
            return location.key;
          }
          function saveScrollPosition(location, matches) {
            if (savedScrollPositions && getScrollPosition) {
              let key = getScrollKey(location, matches);
              savedScrollPositions[key] = getScrollPosition();
            }
          }
          function getSavedScrollPosition(location, matches) {
            if (savedScrollPositions) {
              let key = getScrollKey(location, matches);
              let y = savedScrollPositions[key];
              if (typeof y === "number") return y;
            }
            return null;
          }
          function _internalSetRoutes(newRoutes) {
            manifest = {};
            inFlightDataRoutes = convertRoutesToDataRoutes(
              newRoutes,
              mapRouteProperties,
              undefined,
              manifest,
            );
          }
          router = {
            get basename() {
              return basename;
            },
            get future() {
              return future;
            },
            get state() {
              return state;
            },
            get routes() {
              return dataRoutes;
            },
            get window() {
              return routerWindow;
            },
            initialize,
            subscribe,
            enableScrollRestoration,
            navigate,
            fetch,
            revalidate,
            // Passthrough to history-aware createHref used by useHref so we get proper
            // hash-aware URLs in DOM paths
            createHref: (to) => init.history.createHref(to),
            encodeLocation: (to) => init.history.encodeLocation(to),
            getFetcher,
            deleteFetcher: deleteFetcherAndUpdateState,
            dispose,
            getBlocker,
            deleteBlocker,
            _internalFetchControllers: fetchControllers,
            _internalActiveDeferreds: activeDeferreds,
            // TODO: Remove setRoutes, it's temporary to avoid dealing with
            // updating the tree while validating the update algorithm.
            _internalSetRoutes,
          };
          return router;
        }
        //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region createStaticHandler
        ////////////////////////////////////////////////////////////////////////////////
        const UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
        function createStaticHandler(routes, opts) {
          invariant(
            routes.length > 0,
            "You must provide a non-empty routes array to createStaticHandler",
          );
          let manifest = {};
          let basename = (opts ? opts.basename : null) || "/";
          let mapRouteProperties;
          if (opts != null && opts.mapRouteProperties) mapRouteProperties = opts.mapRouteProperties;
          else if (opts != null && opts.detectErrorBoundary) {
            // If they are still using the deprecated version, wrap it with the new API
            let detectErrorBoundary = opts.detectErrorBoundary;
            mapRouteProperties = (route) => ({
              hasErrorBoundary: detectErrorBoundary(route),
            });
          } else mapRouteProperties = defaultMapRouteProperties;
          // Config driven behavior flags
          let future = _extends(
            {
              v7_relativeSplatPath: false,
              v7_throwAbortReason: false,
            },
            opts ? opts.future : null,
          );
          let dataRoutes = convertRoutesToDataRoutes(
            routes,
            mapRouteProperties,
            undefined,
            manifest,
          );
          /**
           * The query() method is intended for document requests, in which we want to
           * call an optional action and potentially multiple loaders for all nested
           * routes.  It returns a StaticHandlerContext object, which is very similar
           * to the router state (location, loaderData, actionData, errors, etc.) and
           * also adds SSR-specific information such as the statusCode and headers
           * from action/loaders Responses.
           *
           * It _should_ never throw and should report all errors through the
           * returned context.errors object, properly associating errors to their error
           * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be
           * used to emulate React error boundaries during SSr by performing a second
           * pass only down to the boundaryId.
           *
           * The one exception where we do not return a StaticHandlerContext is when a
           * redirect response is returned or thrown from any action/loader.  We
           * propagate that out and return the raw Response so the HTTP server can
           * return it directly.
           */ async function query(request, _temp3) {
            let { requestContext } = _temp3 === void 0 ? {} : _temp3;
            let url = new URL(request.url);
            let method = request.method;
            let location = createLocation("", createPath(url), null, "default");
            let matches = matchRoutes(dataRoutes, location, basename);
            // SSR supports HEAD requests while SPA doesn't
            if (!isValidMethod(method) && method !== "HEAD") {
              let error = getInternalRouterError(405, {
                method,
              });
              let { matches: methodNotAllowedMatches, route } = getShortCircuitMatches(dataRoutes);
              return {
                basename,
                location,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error,
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null,
              };
            } else if (!matches) {
              let error = getInternalRouterError(404, {
                pathname: location.pathname,
              });
              let { matches: notFoundMatches, route } = getShortCircuitMatches(dataRoutes);
              return {
                basename,
                location,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error,
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null,
              };
            }
            let result = await queryImpl(request, location, matches, requestContext);
            if (isResponse(result)) return result;
            // When returning StaticHandlerContext, we patch back in the location here
            // since we need it for React Context.  But this helps keep our submit and
            // loadRouteData operating on a Request instead of a Location
            return _extends(
              {
                location,
                basename,
              },
              result,
            );
          }
          /**
           * The queryRoute() method is intended for targeted route requests, either
           * for fetch ?_data requests or resource route requests.  In this case, we
           * are only ever calling a single action or loader, and we are returning the
           * returned value directly.  In most cases, this will be a Response returned
           * from the action/loader, but it may be a primitive or other value as well -
           * and in such cases the calling context should handle that accordingly.
           *
           * We do respect the throw/return differentiation, so if an action/loader
           * throws, then this method will throw the value.  This is important so we
           * can do proper boundary identification in Remix where a thrown Response
           * must go to the Catch Boundary but a returned Response is happy-path.
           *
           * One thing to note is that any Router-initiated Errors that make sense
           * to associate with a status code will be thrown as an ErrorResponse
           * instance which include the raw Error, such that the calling context can
           * serialize the error as they see fit while including the proper response
           * code.  Examples here are 404 and 405 errors that occur prior to reaching
           * any user-defined loaders.
           */ async function queryRoute(request, _temp4) {
            let { routeId, requestContext } = _temp4 === void 0 ? {} : _temp4;
            let url = new URL(request.url);
            let method = request.method;
            let location = createLocation("", createPath(url), null, "default");
            let matches = matchRoutes(dataRoutes, location, basename);
            // SSR supports HEAD requests while SPA doesn't
            if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS")
              throw getInternalRouterError(405, {
                method,
              });
            else if (!matches)
              throw getInternalRouterError(404, {
                pathname: location.pathname,
              });
            let match = routeId
              ? matches.find((m) => m.route.id === routeId)
              : getTargetMatch(matches, location);
            if (routeId && !match)
              throw getInternalRouterError(403, {
                pathname: location.pathname,
                routeId,
              });
            else if (!match)
              // This should never hit I don't think?
              throw getInternalRouterError(404, {
                pathname: location.pathname,
              });
            let result = await queryImpl(request, location, matches, requestContext, match);
            if (isResponse(result)) return result;
            let error = result.errors ? Object.values(result.errors)[0] : undefined;
            if (error !== undefined)
              // If we got back result.errors, that means the loader/action threw
              // _something_ that wasn't a Response, but it's not guaranteed/required
              // to be an `instanceof Error` either, so we have to use throw here to
              // preserve the "error" state outside of queryImpl.
              throw error;
            // Pick off the right state value to return
            if (result.actionData) return Object.values(result.actionData)[0];
            if (result.loaderData) {
              var _result$activeDeferre;
              let data = Object.values(result.loaderData)[0];
              if (
                (_result$activeDeferre = result.activeDeferreds) != null &&
                _result$activeDeferre[match.route.id]
              )
                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];
              return data;
            }
            return undefined;
          }
          async function queryImpl(request, location, matches, requestContext, routeMatch) {
            invariant(
              request.signal,
              "query()/queryRoute() requests must contain an AbortController signal",
            );
            try {
              if (isMutationMethod(request.method.toLowerCase())) {
                let result = await submit(
                  request,
                  matches,
                  routeMatch || getTargetMatch(matches, location),
                  requestContext,
                  routeMatch != null,
                );
                return result;
              }
              let result = await loadRouteData(request, matches, requestContext, routeMatch);
              return isResponse(result)
                ? result
                : _extends({}, result, {
                    actionData: null,
                    actionHeaders: {},
                  });
            } catch (e) {
              // If the user threw/returned a Response in callLoaderOrAction, we throw
              // it to bail out and then return or throw here based on whether the user
              // returned or threw
              if (isQueryRouteResponse(e)) {
                if (e.type === ResultType.error) throw e.response;
                return e.response;
              }
              // Redirects are always returned since they don't propagate to catch
              // boundaries
              if (isRedirectResponse(e)) return e;
              throw e;
            }
          }
          async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
            let result;
            if (!actionMatch.route.action && !actionMatch.route.lazy) {
              let error = getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id,
              });
              if (isRouteRequest) throw error;
              result = {
                type: ResultType.error,
                error,
              };
            } else {
              result = await callLoaderOrAction(
                "action",
                request,
                actionMatch,
                matches,
                manifest,
                mapRouteProperties,
                basename,
                future.v7_relativeSplatPath,
                {
                  isStaticRequest: true,
                  isRouteRequest,
                  requestContext,
                },
              );
              if (request.signal.aborted)
                throwStaticHandlerAbortedError(request, isRouteRequest, future);
            }
            if (isRedirectResult(result))
              // Uhhhh - this should never happen, we should always throw these from
              // callLoaderOrAction, but the type narrowing here keeps TS happy and we
              // can get back on the "throw all redirect responses" train here should
              // this ever happen :/
              throw new Response(null, {
                status: result.status,
                headers: {
                  Location: result.location,
                },
              });
            if (isDeferredResult(result)) {
              let error = getInternalRouterError(400, {
                type: "defer-action",
              });
              if (isRouteRequest) throw error;
              result = {
                type: ResultType.error,
                error,
              };
            }
            if (isRouteRequest) {
              // Note: This should only be non-Response values if we get here, since
              // isRouteRequest should throw any Response received in callLoaderOrAction
              if (isErrorResult(result)) throw result.error;
              return {
                matches: [actionMatch],
                loaderData: {},
                actionData: {
                  [actionMatch.route.id]: result.data,
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null,
              };
            }
            if (isErrorResult(result)) {
              // Store off the pending error - we use it to determine which loaders
              // to call and will commit it when we complete the navigation
              let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
              let context = await loadRouteData(request, matches, requestContext, undefined, {
                [boundaryMatch.route.id]: result.error,
              });
              // action status codes take precedence over loader status codes
              return _extends({}, context, {
                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
                actionData: null,
                actionHeaders: _extends(
                  {},
                  result.headers
                    ? {
                        [actionMatch.route.id]: result.headers,
                      }
                    : {},
                ),
              });
            }
            // Create a GET request for the loaders
            let loaderRequest = new Request(request.url, {
              headers: request.headers,
              redirect: request.redirect,
              signal: request.signal,
            });
            let context = await loadRouteData(loaderRequest, matches, requestContext);
            return _extends(
              {},
              context,
              result.statusCode
                ? {
                    statusCode: result.statusCode,
                  }
                : {},
              {
                actionData: {
                  [actionMatch.route.id]: result.data,
                },
                actionHeaders: _extends(
                  {},
                  result.headers
                    ? {
                        [actionMatch.route.id]: result.headers,
                      }
                    : {},
                ),
              },
            );
          }
          async function loadRouteData(
            request,
            matches,
            requestContext,
            routeMatch,
            pendingActionError,
          ) {
            let isRouteRequest = routeMatch != null;
            // Short circuit if we have no loaders to run (queryRoute())
            if (
              isRouteRequest &&
              !(routeMatch != null && routeMatch.route.loader) &&
              !(routeMatch != null && routeMatch.route.lazy)
            )
              throw getInternalRouterError(400, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: routeMatch == null ? void 0 : routeMatch.route.id,
              });
            let requestMatches = routeMatch
              ? [routeMatch]
              : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);
            let matchesToLoad = requestMatches.filter((m) => m.route.loader || m.route.lazy);
            // Short circuit if we have no loaders to run (query())
            if (matchesToLoad.length === 0)
              return {
                matches,
                // Add a null for all matched routes for proper revalidation on the client
                loaderData: matches.reduce(
                  (acc, m) =>
                    Object.assign(acc, {
                      [m.route.id]: null,
                    }),
                  {},
                ),
                errors: pendingActionError || null,
                statusCode: 200,
                loaderHeaders: {},
                activeDeferreds: null,
              };
            let results = await Promise.all([
              ...matchesToLoad.map((match) =>
                callLoaderOrAction(
                  "loader",
                  request,
                  match,
                  matches,
                  manifest,
                  mapRouteProperties,
                  basename,
                  future.v7_relativeSplatPath,
                  {
                    isStaticRequest: true,
                    isRouteRequest,
                    requestContext,
                  },
                ),
              ),
            ]);
            if (request.signal.aborted)
              throwStaticHandlerAbortedError(request, isRouteRequest, future);
            // Process and commit output from loaders
            let activeDeferreds = new Map();
            let context = processRouteLoaderData(
              matches,
              matchesToLoad,
              results,
              pendingActionError,
              activeDeferreds,
            );
            // Add a null for any non-loader matches for proper revalidation on the client
            let executedLoaders = new Set(matchesToLoad.map((match) => match.route.id));
            matches.forEach((match) => {
              if (!executedLoaders.has(match.route.id)) context.loaderData[match.route.id] = null;
            });
            return _extends({}, context, {
              matches,
              activeDeferreds:
                activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null,
            });
          }
          return {
            dataRoutes,
            query,
            queryRoute,
          };
        }
        //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region Helpers
        ////////////////////////////////////////////////////////////////////////////////
        /**
         * Given an existing StaticHandlerContext and an error thrown at render time,
         * provide an updated StaticHandlerContext suitable for a second SSR render
         */ function getStaticContextFromError(routes, context, error) {
          let newContext = _extends({}, context, {
            statusCode: isRouteErrorResponse(error) ? error.status : 500,
            errors: {
              [context._deepestRenderedBoundaryId || routes[0].id]: error,
            },
          });
          return newContext;
        }
        function throwStaticHandlerAbortedError(request, isRouteRequest, future) {
          if (future.v7_throwAbortReason && request.signal.reason !== undefined)
            throw request.signal.reason;
          let method = isRouteRequest ? "queryRoute" : "query";
          throw new Error(method + "() call aborted: " + request.method + " " + request.url);
        }
        function isSubmissionNavigation(opts) {
          return (
            opts != null &&
            (("formData" in opts && opts.formData != null) ||
              ("body" in opts && opts.body !== undefined))
          );
        }
        function normalizeTo(
          location,
          matches,
          basename,
          prependBasename,
          to,
          v7_relativeSplatPath,
          fromRouteId,
          relative,
        ) {
          let contextualMatches;
          let activeRouteMatch;
          if (fromRouteId) {
            // Grab matches up to the calling route so our route-relative logic is
            // relative to the correct source route
            contextualMatches = [];
            for (let match of matches) {
              contextualMatches.push(match);
              if (match.route.id === fromRouteId) {
                activeRouteMatch = match;
                break;
              }
            }
          } else {
            contextualMatches = matches;
            activeRouteMatch = matches[matches.length - 1];
          }
          // Resolve the relative path
          let path = resolveTo(
            to ? to : ".",
            getResolveToMatches(contextualMatches, v7_relativeSplatPath),
            stripBasename(location.pathname, basename) || location.pathname,
            relative === "path",
          );
          // When `to` is not specified we inherit search/hash from the current
          // location, unlike when to="." and we just inherit the path.
          // See https://github.com/remix-run/remix/issues/927
          if (to == null) {
            path.search = location.search;
            path.hash = location.hash;
          }
          // Add an ?index param for matched index routes if we don't already have one
          if (
            (to == null || to === "" || to === ".") &&
            activeRouteMatch &&
            activeRouteMatch.route.index &&
            !hasNakedIndexQuery(path.search)
          )
            path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
          // If we're operating within a basename, prepend it to the pathname.  If
          // this is a root navigation, then just use the raw basename which allows
          // the basename to have full control over the presence of a trailing slash
          // on root actions
          if (prependBasename && basename !== "/")
            path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
          return createPath(path);
        }
        // Normalize navigation options by converting formMethod=GET formData objects to
        // URLSearchParams so they behave identically to links with query params
        function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
          // Return location verbatim on non-submission navigations
          if (!opts || !isSubmissionNavigation(opts))
            return {
              path,
            };
          if (opts.formMethod && !isValidMethod(opts.formMethod))
            return {
              path,
              error: getInternalRouterError(405, {
                method: opts.formMethod,
              }),
            };
          let getInvalidBodyError = () => ({
            path,
            error: getInternalRouterError(400, {
              type: "invalid-body",
            }),
          });
          // Create a Submission on non-GET navigations
          let rawFormMethod = opts.formMethod || "get";
          let formMethod = normalizeFormMethod
            ? rawFormMethod.toUpperCase()
            : rawFormMethod.toLowerCase();
          let formAction = stripHashFromPath(path);
          if (opts.body !== undefined) {
            if (opts.formEncType === "text/plain") {
              // text only support POST/PUT/PATCH/DELETE submissions
              if (!isMutationMethod(formMethod)) return getInvalidBodyError();
              let text =
                typeof opts.body === "string"
                  ? opts.body
                  : opts.body instanceof FormData || opts.body instanceof URLSearchParams // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
                  ? Array.from(opts.body.entries()).reduce((acc, _ref5) => {
                      let [name, value] = _ref5;
                      return "" + acc + name + "=" + value + "\n";
                    }, "")
                  : String(opts.body);
              return {
                path,
                submission: {
                  formMethod,
                  formAction,
                  formEncType: opts.formEncType,
                  formData: undefined,
                  json: undefined,
                  text,
                },
              };
            } else if (opts.formEncType === "application/json") {
              // json only supports POST/PUT/PATCH/DELETE submissions
              if (!isMutationMethod(formMethod)) return getInvalidBodyError();
              try {
                let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
                return {
                  path,
                  submission: {
                    formMethod,
                    formAction,
                    formEncType: opts.formEncType,
                    formData: undefined,
                    json,
                    text: undefined,
                  },
                };
              } catch (e) {
                return getInvalidBodyError();
              }
            }
          }
          invariant(
            typeof FormData === "function",
            "FormData is not available in this environment",
          );
          let searchParams;
          let formData;
          if (opts.formData) {
            searchParams = convertFormDataToSearchParams(opts.formData);
            formData = opts.formData;
          } else if (opts.body instanceof FormData) {
            searchParams = convertFormDataToSearchParams(opts.body);
            formData = opts.body;
          } else if (opts.body instanceof URLSearchParams) {
            searchParams = opts.body;
            formData = convertSearchParamsToFormData(searchParams);
          } else if (opts.body == null) {
            searchParams = new URLSearchParams();
            formData = new FormData();
          } else
            try {
              searchParams = new URLSearchParams(opts.body);
              formData = convertSearchParamsToFormData(searchParams);
            } catch (e) {
              return getInvalidBodyError();
            }
          let submission = {
            formMethod,
            formAction,
            formEncType: (opts && opts.formEncType) || "application/x-www-form-urlencoded",
            formData,
            json: undefined,
            text: undefined,
          };
          if (isMutationMethod(submission.formMethod))
            return {
              path,
              submission,
            };
          // Flatten submission onto URLSearchParams for GET submissions
          let parsedPath = parsePath(path);
          // On GET navigation submissions we can drop the ?index param from the
          // resulting location since all loaders will run.  But fetcher GET submissions
          // only run a single loader so we need to preserve any incoming ?index params
          if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search))
            searchParams.append("index", "");
          parsedPath.search = "?" + searchParams;
          return {
            path: createPath(parsedPath),
            submission,
          };
        }
        // Filter out all routes below any caught error as they aren't going to
        // render so we don't need to load them
        function getLoaderMatchesUntilBoundary(matches, boundaryId) {
          let boundaryMatches = matches;
          if (boundaryId) {
            let index = matches.findIndex((m) => m.route.id === boundaryId);
            if (index >= 0) boundaryMatches = matches.slice(0, index);
          }
          return boundaryMatches;
        }
        function getMatchesToLoad(
          history,
          state,
          matches,
          submission,
          location,
          isInitialLoad,
          isRevalidationRequired,
          cancelledDeferredRoutes,
          cancelledFetcherLoads,
          deletedFetchers,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          pendingActionData,
          pendingError,
        ) {
          let actionResult = pendingError
            ? Object.values(pendingError)[0]
            : pendingActionData
            ? Object.values(pendingActionData)[0]
            : undefined;
          let currentUrl = history.createURL(state.location);
          let nextUrl = history.createURL(location);
          // Pick navigation matches that are net-new or qualify for revalidation
          let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;
          let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
          let navigationMatches = boundaryMatches.filter((match, index) => {
            let { route } = match;
            if (route.lazy)
              // We haven't loaded this route yet so we don't know if it's got a loader!
              return true;
            if (route.loader == null) return false;
            if (isInitialLoad) {
              if (route.loader.hydrate) return true;
              return (
                state.loaderData[route.id] === undefined && // Don't re-run if the loader ran and threw an error
                (!state.errors || state.errors[route.id] === undefined)
              );
            }
            // Always call the loader on new route instances and pending defer cancellations
            if (
              isNewLoader(state.loaderData, state.matches[index], match) ||
              cancelledDeferredRoutes.some((id) => id === match.route.id)
            )
              return true;
            // This is the default implementation for when we revalidate.  If the route
            // provides it's own implementation, then we give them full control but
            // provide this value so they can leverage it if needed after they check
            // their own specific use cases
            let currentRouteMatch = state.matches[index];
            let nextRouteMatch = match;
            return shouldRevalidateLoader(
              match,
              _extends(
                {
                  currentUrl,
                  currentParams: currentRouteMatch.params,
                  nextUrl,
                  nextParams: nextRouteMatch.params,
                },
                submission,
                {
                  actionResult,
                  // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
                  defaultShouldRevalidate:
                    isRevalidationRequired || // Clicked the same link, resubmitted a GET form
                    currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
                    currentUrl.search !== nextUrl.search ||
                    isNewRouteInstance(currentRouteMatch, nextRouteMatch),
                },
              ),
            );
          });
          // Pick fetcher.loads that need to be revalidated
          let revalidatingFetchers = [];
          fetchLoadMatches.forEach((f, key) => {
            // Don't revalidate:
            //  - on initial load (shouldn't be any fetchers then anyway)
            //  - if fetcher won't be present in the subsequent render
            //    - no longer matches the URL (v7_fetcherPersist=false)
            //    - was unmounted but persisted due to v7_fetcherPersist=true
            if (
              isInitialLoad ||
              !matches.some((m) => m.route.id === f.routeId) ||
              deletedFetchers.has(key)
            )
              return;
            let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
            // If the fetcher path no longer matches, push it in with null matches so
            // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is
            // currently only a use-case for Remix HMR where the route tree can change
            // at runtime and remove a route previously loaded via a fetcher
            if (!fetcherMatches) {
              revalidatingFetchers.push({
                key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                controller: null,
              });
              return;
            }
            // Revalidating fetchers are decoupled from the route matches since they
            // load from a static href.  They revalidate based on explicit revalidation
            // (submission, useRevalidator, or X-Remix-Revalidate)
            let fetcher = state.fetchers.get(key);
            let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
            let shouldRevalidate = false;
            if (fetchRedirectIds.has(key))
              // Never trigger a revalidation of an actively redirecting fetcher
              shouldRevalidate = false;
            else if (cancelledFetcherLoads.includes(key))
              // Always revalidate if the fetcher was cancelled
              shouldRevalidate = true;
            else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined)
              // If the fetcher hasn't ever completed loading yet, then this isn't a
              // revalidation, it would just be a brand new load if an explicit
              // revalidation is required
              shouldRevalidate = isRevalidationRequired;
            // Otherwise fall back on any user-defined shouldRevalidate, defaulting
            // to explicit revalidations only
            else
              shouldRevalidate = shouldRevalidateLoader(
                fetcherMatch,
                _extends(
                  {
                    currentUrl,
                    currentParams: state.matches[state.matches.length - 1].params,
                    nextUrl,
                    nextParams: matches[matches.length - 1].params,
                  },
                  submission,
                  {
                    actionResult,
                    defaultShouldRevalidate: isRevalidationRequired,
                  },
                ),
              );
            if (shouldRevalidate)
              revalidatingFetchers.push({
                key,
                routeId: f.routeId,
                path: f.path,
                matches: fetcherMatches,
                match: fetcherMatch,
                controller: new AbortController(),
              });
          });
          return [navigationMatches, revalidatingFetchers];
        }
        function isNewLoader(currentLoaderData, currentMatch, match) {
          let isNew = // [a] -> [a, b]
            !currentMatch || // [a, b] -> [a, c]
            match.route.id !== currentMatch.route.id;
          // Handle the case that we don't have data for a re-used route, potentially
          // from a prior error or from a cancelled pending deferred
          let isMissingData = currentLoaderData[match.route.id] === undefined;
          // Always load if this is a net-new route or we don't yet have data
          return isNew || isMissingData;
        }
        function isNewRouteInstance(currentMatch, match) {
          let currentPath = currentMatch.route.path;
          return (
            // param change for this match, /users/123 -> /users/456
            currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
            // e.g. /files/images/avatar.jpg -> files/finances.xls
            (currentPath != null &&
              currentPath.endsWith("*") &&
              currentMatch.params["*"] !== match.params["*"])
          );
        }
        function shouldRevalidateLoader(loaderMatch, arg) {
          if (loaderMatch.route.shouldRevalidate) {
            let routeChoice = loaderMatch.route.shouldRevalidate(arg);
            if (typeof routeChoice === "boolean") return routeChoice;
          }
          return arg.defaultShouldRevalidate;
        }
        /**
         * Execute route.lazy() methods to lazily load route modules (loader, action,
         * shouldRevalidate) and update the routeManifest in place which shares objects
         * with dataRoutes so those get updated as well.
         */ async function loadLazyRouteModule(route, mapRouteProperties, manifest) {
          if (!route.lazy) return;
          let lazyRoute = await route.lazy();
          // If the lazy route function was executed and removed by another parallel
          // call then we can return - first lazy() to finish wins because the return
          // value of lazy is expected to be static
          if (!route.lazy) return;
          let routeToUpdate = manifest[route.id];
          invariant(routeToUpdate, "No route found in manifest");
          // Update the route in place.  This should be safe because there's no way
          // we could yet be sitting on this route as we can't get there without
          // resolving lazy() first.
          //
          // This is different than the HMR "update" use-case where we may actively be
          // on the route being updated.  The main concern boils down to "does this
          // mutation affect any ongoing navigations or any current state.matches
          // values?".  If not, it should be safe to update in place.
          let routeUpdates = {};
          for (let lazyRouteProperty in lazyRoute) {
            let staticRouteValue = routeToUpdate[lazyRouteProperty];
            let isPropertyStaticallyDefined =
              staticRouteValue !== undefined && // This property isn't static since it should always be updated based
              // on the route updates
              lazyRouteProperty !== "hasErrorBoundary";
            warning(
              !isPropertyStaticallyDefined,
              'Route "' +
                routeToUpdate.id +
                '" has a static property "' +
                lazyRouteProperty +
                '" ' +
                "defined but its lazy function is also returning a value for this property. " +
                ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'),
            );
            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty))
              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
          }
          // Mutate the route with the provided updates.  Do this first so we pass
          // the updated version to mapRouteProperties
          Object.assign(routeToUpdate, routeUpdates);
          // Mutate the `hasErrorBoundary` property on the route based on the route
          // updates and remove the `lazy` function so we don't resolve the lazy
          // route again.
          Object.assign(
            routeToUpdate,
            _extends({}, mapRouteProperties(routeToUpdate), {
              lazy: undefined,
            }),
          );
        }
        async function callLoaderOrAction(
          type,
          request,
          match,
          matches,
          manifest,
          mapRouteProperties,
          basename,
          v7_relativeSplatPath,
          opts,
        ) {
          if (opts === void 0) opts = {};
          let resultType;
          let result;
          let onReject;
          let runHandler = (handler) => {
            // Setup a promise we can race against so that abort signals short circuit
            let reject;
            let abortPromise = new Promise((_, r) => (reject = r));
            onReject = () => reject();
            request.signal.addEventListener("abort", onReject);
            return Promise.race([
              handler({
                request,
                params: match.params,
                context: opts.requestContext,
              }),
              abortPromise,
            ]);
          };
          try {
            let handler = match.route[type];
            if (match.route.lazy) {
              if (handler) {
                // Run statically defined handler in parallel with lazy()
                let handlerError;
                let values = await Promise.all([
                  // If the handler throws, don't let it immediately bubble out,
                  // since we need to let the lazy() execution finish so we know if this
                  // route has a boundary that can handle the error
                  runHandler(handler).catch((e) => {
                    handlerError = e;
                  }),
                  loadLazyRouteModule(match.route, mapRouteProperties, manifest),
                ]);
                if (handlerError) throw handlerError;
                result = values[0];
              } else {
                // Load lazy route module, then run any returned handler
                await loadLazyRouteModule(match.route, mapRouteProperties, manifest);
                handler = match.route[type];
                if (handler)
                  // Handler still run even if we got interrupted to maintain consistency
                  // with un-abortable behavior of handler execution on non-lazy or
                  // previously-lazy-loaded routes
                  result = await runHandler(handler);
                else if (type === "action") {
                  let url = new URL(request.url);
                  let pathname = url.pathname + url.search;
                  throw getInternalRouterError(405, {
                    method: request.method,
                    pathname,
                    routeId: match.route.id,
                  });
                } // lazy() route has no loader to run.  Short circuit here so we don't
                // hit the invariant below that errors on returning undefined.
                else
                  return {
                    type: ResultType.data,
                    data: undefined,
                  };
              }
            } else if (!handler) {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(404, {
                pathname,
              });
            } else result = await runHandler(handler);
            invariant(
              result !== undefined,
              "You defined " +
                (type === "action" ? "an action" : "a loader") +
                " for route " +
                ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") +
                "function. Please return a value or `null`.",
            );
          } catch (e) {
            resultType = ResultType.error;
            result = e;
          } finally {
            if (onReject) request.signal.removeEventListener("abort", onReject);
          }
          if (isResponse(result)) {
            let status = result.status;
            // Process redirects
            if (redirectStatusCodes.has(status)) {
              let location = result.headers.get("Location");
              invariant(
                location,
                "Redirects returned/thrown from loaders/actions must have a Location header",
              );
              // Support relative routing in internal redirects
              if (!ABSOLUTE_URL_REGEX.test(location))
                location = normalizeTo(
                  new URL(request.url),
                  matches.slice(0, matches.indexOf(match) + 1),
                  basename,
                  true,
                  location,
                  v7_relativeSplatPath,
                );
              else if (!opts.isStaticRequest) {
                // Strip off the protocol+origin for same-origin + same-basename absolute
                // redirects. If this is a static request, we can let it go back to the
                // browser as-is
                let currentUrl = new URL(request.url);
                let url = location.startsWith("//")
                  ? new URL(currentUrl.protocol + location)
                  : new URL(location);
                let isSameBasename = stripBasename(url.pathname, basename) != null;
                if (url.origin === currentUrl.origin && isSameBasename)
                  location = url.pathname + url.search + url.hash;
              }
              // Don't process redirects in the router during static requests requests.
              // Instead, throw the Response and let the server handle it with an HTTP
              // redirect.  We also update the Location header in place in this flow so
              // basename and relative routing is taken into account
              if (opts.isStaticRequest) {
                result.headers.set("Location", location);
                throw result;
              }
              return {
                type: ResultType.redirect,
                status,
                location,
                revalidate: result.headers.get("X-Remix-Revalidate") !== null,
                reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null,
              };
            }
            // For SSR single-route requests, we want to hand Responses back directly
            // without unwrapping.  We do this with the QueryRouteResponse wrapper
            // interface so we can know whether it was returned or thrown
            if (opts.isRouteRequest) {
              let queryRouteResponse = {
                type: resultType === ResultType.error ? ResultType.error : ResultType.data,
                response: result,
              };
              throw queryRouteResponse;
            }
            let data;
            try {
              let contentType = result.headers.get("Content-Type");
              // Check between word boundaries instead of startsWith() due to the last
              // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type
              if (contentType && /\bapplication\/json\b/.test(contentType)) {
                if (result.body == null) data = null;
                else data = await result.json();
              } else data = await result.text();
            } catch (e) {
              return {
                type: ResultType.error,
                error: e,
              };
            }
            if (resultType === ResultType.error)
              return {
                type: resultType,
                error: new ErrorResponseImpl(status, result.statusText, data),
                headers: result.headers,
              };
            return {
              type: ResultType.data,
              data,
              statusCode: result.status,
              headers: result.headers,
            };
          }
          if (resultType === ResultType.error)
            return {
              type: resultType,
              error: result,
            };
          if (isDeferredData(result)) {
            var _result$init, _result$init2;
            return {
              type: ResultType.deferred,
              deferredData: result,
              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
              headers:
                ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) &&
                new Headers(result.init.headers),
            };
          }
          return {
            type: ResultType.data,
            data: result,
          };
        }
        // Utility method for creating the Request instances for loaders/actions during
        // client-side navigations and fetches.  During SSR we will always have a
        // Request instance from the static handler (query/queryRoute)
        function createClientSideRequest(history, location, signal, submission) {
          let url = history.createURL(stripHashFromPath(location)).toString();
          let init = {
            signal,
          };
          if (submission && isMutationMethod(submission.formMethod)) {
            let { formMethod, formEncType } = submission;
            // Didn't think we needed this but it turns out unlike other methods, patch
            // won't be properly normalized to uppercase and results in a 405 error.
            // See: https://fetch.spec.whatwg.org/#concept-method
            init.method = formMethod.toUpperCase();
            if (formEncType === "application/json") {
              init.headers = new Headers({
                "Content-Type": formEncType,
              });
              init.body = JSON.stringify(submission.json);
            } else if (formEncType === "text/plain")
              // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
              init.body = submission.text;
            else if (formEncType === "application/x-www-form-urlencoded" && submission.formData)
              // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
              init.body = convertFormDataToSearchParams(submission.formData);
            // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
            else init.body = submission.formData;
          }
          return new Request(url, init);
        }
        function convertFormDataToSearchParams(formData) {
          let searchParams = new URLSearchParams();
          for (let [key, value] of formData.entries()) // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs
            searchParams.append(key, typeof value === "string" ? value : value.name);
          return searchParams;
        }
        function convertSearchParamsToFormData(searchParams) {
          let formData = new FormData();
          for (let [key, value] of searchParams.entries()) formData.append(key, value);
          return formData;
        }
        function processRouteLoaderData(
          matches,
          matchesToLoad,
          results,
          pendingError,
          activeDeferreds,
        ) {
          // Fill in loaderData/errors from our loaders
          let loaderData = {};
          let errors = null;
          let statusCode;
          let foundError = false;
          let loaderHeaders = {};
          // Process loader results into state.loaderData/state.errors
          results.forEach((result, index) => {
            let id = matchesToLoad[index].route.id;
            invariant(
              !isRedirectResult(result),
              "Cannot handle redirect results in processLoaderData",
            );
            if (isErrorResult(result)) {
              // Look upwards from the matched route for the closest ancestor
              // error boundary, defaulting to the root match
              let boundaryMatch = findNearestBoundary(matches, id);
              let error = result.error;
              // If we have a pending action error, we report it at the highest-route
              // that throws a loader error, and then clear it out to indicate that
              // it was consumed
              if (pendingError) {
                error = Object.values(pendingError)[0];
                pendingError = undefined;
              }
              errors = errors || {};
              // Prefer higher error values if lower errors bubble to the same boundary
              if (errors[boundaryMatch.route.id] == null) errors[boundaryMatch.route.id] = error;
              // Clear our any prior loaderData for the throwing route
              loaderData[id] = undefined;
              // Once we find our first (highest) error, we set the status code and
              // prevent deeper status codes from overriding
              if (!foundError) {
                foundError = true;
                statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
              }
              if (result.headers) loaderHeaders[id] = result.headers;
            } else {
              if (isDeferredResult(result)) {
                activeDeferreds.set(id, result.deferredData);
                loaderData[id] = result.deferredData.data;
              } else loaderData[id] = result.data;
              // Error status codes always override success status codes, but if all
              // loaders are successful we take the deepest status code.
              if (result.statusCode != null && result.statusCode !== 200 && !foundError)
                statusCode = result.statusCode;
              if (result.headers) loaderHeaders[id] = result.headers;
            }
          });
          // If we didn't consume the pending action error (i.e., all loaders
          // resolved), then consume it here.  Also clear out any loaderData for the
          // throwing route
          if (pendingError) {
            errors = pendingError;
            loaderData[Object.keys(pendingError)[0]] = undefined;
          }
          return {
            loaderData,
            errors,
            statusCode: statusCode || 200,
            loaderHeaders,
          };
        }
        function processLoaderData(
          state,
          matches,
          matchesToLoad,
          results,
          pendingError,
          revalidatingFetchers,
          fetcherResults,
          activeDeferreds,
        ) {
          let { loaderData, errors } = processRouteLoaderData(
            matches,
            matchesToLoad,
            results,
            pendingError,
            activeDeferreds,
          );
          // Process results from our revalidating fetchers
          for (let index = 0; index < revalidatingFetchers.length; index++) {
            let { key, match, controller } = revalidatingFetchers[index];
            invariant(
              fetcherResults !== undefined && fetcherResults[index] !== undefined,
              "Did not find corresponding fetcher result",
            );
            let result = fetcherResults[index];
            // Process fetcher non-redirect errors
            if (controller && controller.signal.aborted) continue;
            else if (isErrorResult(result)) {
              let boundaryMatch = findNearestBoundary(
                state.matches,
                match == null ? void 0 : match.route.id,
              );
              if (!(errors && errors[boundaryMatch.route.id]))
                errors = _extends({}, errors, {
                  [boundaryMatch.route.id]: result.error,
                });
              state.fetchers.delete(key);
            } else if (isRedirectResult(result))
              // Should never get here, redirects should get processed above, but we
              // keep this to type narrow to a success result in the else
              invariant(false, "Unhandled fetcher revalidation redirect");
            else if (isDeferredResult(result))
              // Should never get here, deferred data should be awaited for fetchers
              // in resolveDeferredResults
              invariant(false, "Unhandled fetcher deferred data");
            else {
              let doneFetcher = getDoneFetcher(result.data);
              state.fetchers.set(key, doneFetcher);
            }
          }
          return {
            loaderData,
            errors,
          };
        }
        function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
          let mergedLoaderData = _extends({}, newLoaderData);
          for (let match of matches) {
            let id = match.route.id;
            if (newLoaderData.hasOwnProperty(id)) {
              if (newLoaderData[id] !== undefined) mergedLoaderData[id] = newLoaderData[id];
            } else if (loaderData[id] !== undefined && match.route.loader)
              // Preserve existing keys not included in newLoaderData and where a loader
              // wasn't removed by HMR
              mergedLoaderData[id] = loaderData[id];
            if (errors && errors.hasOwnProperty(id)) break;
          }
          return mergedLoaderData;
        }
        // Find the nearest error boundary, looking upwards from the leaf route (or the
        // route specified by routeId) for the closest ancestor error boundary,
        // defaulting to the root match
        function findNearestBoundary(matches, routeId) {
          let eligibleMatches = routeId
            ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)
            : [...matches];
          return (
            eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0]
          );
        }
        function getShortCircuitMatches(routes) {
          // Prefer a root layout route if present, otherwise shim in a route object
          let route =
            routes.length === 1
              ? routes[0]
              : routes.find((r) => r.index || !r.path || r.path === "/") || {
                  id: "__shim-error-route__",
                };
          return {
            matches: [
              {
                params: {},
                pathname: "",
                pathnameBase: "",
                route,
              },
            ],
            route,
          };
        }
        function getInternalRouterError(status, _temp5) {
          let { pathname, routeId, method, type } = _temp5 === void 0 ? {} : _temp5;
          let statusText = "Unknown Server Error";
          let errorMessage = "Unknown @remix-run/router error";
          if (status === 400) {
            statusText = "Bad Request";
            if (method && pathname && routeId)
              errorMessage =
                "You made a " +
                method +
                ' request to "' +
                pathname +
                '" but ' +
                ('did not provide a `loader` for route "' + routeId + '", ') +
                "so there is no way to handle the request.";
            else if (type === "defer-action") errorMessage = "defer() is not supported in actions";
            else if (type === "invalid-body") errorMessage = "Unable to encode submission body";
          } else if (status === 403) {
            statusText = "Forbidden";
            errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
          } else if (status === 404) {
            statusText = "Not Found";
            errorMessage = 'No route matches URL "' + pathname + '"';
          } else if (status === 405) {
            statusText = "Method Not Allowed";
            if (method && pathname && routeId)
              errorMessage =
                "You made a " +
                method.toUpperCase() +
                ' request to "' +
                pathname +
                '" but ' +
                ('did not provide an `action` for route "' + routeId + '", ') +
                "so there is no way to handle the request.";
            else if (method) errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
          }
          return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
        }
        // Find any returned redirect errors, starting from the lowest match
        function findRedirect(results) {
          for (let i = results.length - 1; i >= 0; i--) {
            let result = results[i];
            if (isRedirectResult(result))
              return {
                result,
                idx: i,
              };
          }
        }
        function stripHashFromPath(path) {
          let parsedPath = typeof path === "string" ? parsePath(path) : path;
          return createPath(
            _extends({}, parsedPath, {
              hash: "",
            }),
          );
        }
        function isHashChangeOnly(a, b) {
          if (a.pathname !== b.pathname || a.search !== b.search) return false;
          if (a.hash === "")
            // /page -> /page#hash
            return b.hash !== "";
          else if (a.hash === b.hash)
            // /page#hash -> /page#hash
            return true;
          else if (b.hash !== "")
            // /page#hash -> /page#other
            return true;
          // If the hash is removed the browser will re-perform a request to the server
          // /page#hash -> /page
          return false;
        }
        function isDeferredResult(result) {
          return result.type === ResultType.deferred;
        }
        function isErrorResult(result) {
          return result.type === ResultType.error;
        }
        function isRedirectResult(result) {
          return (result && result.type) === ResultType.redirect;
        }
        function isDeferredData(value) {
          let deferred = value;
          return (
            deferred &&
            typeof deferred === "object" &&
            typeof deferred.data === "object" &&
            typeof deferred.subscribe === "function" &&
            typeof deferred.cancel === "function" &&
            typeof deferred.resolveData === "function"
          );
        }
        function isResponse(value) {
          return (
            value != null &&
            typeof value.status === "number" &&
            typeof value.statusText === "string" &&
            typeof value.headers === "object" &&
            typeof value.body !== "undefined"
          );
        }
        function isRedirectResponse(result) {
          if (!isResponse(result)) return false;
          let status = result.status;
          let location = result.headers.get("Location");
          return status >= 300 && status <= 399 && location != null;
        }
        function isQueryRouteResponse(obj) {
          return (
            obj &&
            isResponse(obj.response) &&
            (obj.type === ResultType.data || obj.type === ResultType.error)
          );
        }
        function isValidMethod(method) {
          return validRequestMethods.has(method.toLowerCase());
        }
        function isMutationMethod(method) {
          return validMutationMethods.has(method.toLowerCase());
        }
        async function resolveDeferredResults(
          currentMatches,
          matchesToLoad,
          results,
          signals,
          isFetcher,
          currentLoaderData,
        ) {
          for (let index = 0; index < results.length; index++) {
            let result = results[index];
            let match = matchesToLoad[index];
            // If we don't have a match, then we can have a deferred result to do
            // anything with.  This is for revalidating fetchers where the route was
            // removed during HMR
            if (!match) continue;
            let currentMatch = currentMatches.find((m) => m.route.id === match.route.id);
            let isRevalidatingLoader =
              currentMatch != null &&
              !isNewRouteInstance(currentMatch, match) &&
              (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;
            if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
              // Note: we do not have to touch activeDeferreds here since we race them
              // against the signal in resolveDeferredData and they'll get aborted
              // there if needed
              let signal = signals[index];
              invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
              await resolveDeferredData(result, signal, isFetcher).then((result) => {
                if (result) results[index] = result || results[index];
              });
            }
          }
        }
        async function resolveDeferredData(result, signal, unwrap) {
          if (unwrap === void 0) unwrap = false;
          let aborted = await result.deferredData.resolveData(signal);
          if (aborted) return;
          if (unwrap)
            try {
              return {
                type: ResultType.data,
                data: result.deferredData.unwrappedData,
              };
            } catch (e) {
              // Handle any TrackedPromise._error values encountered while unwrapping
              return {
                type: ResultType.error,
                error: e,
              };
            }
          return {
            type: ResultType.data,
            data: result.deferredData.data,
          };
        }
        function hasNakedIndexQuery(search) {
          return new URLSearchParams(search).getAll("index").some((v) => v === "");
        }
        function getTargetMatch(matches, location) {
          let search = typeof location === "string" ? parsePath(location).search : location.search;
          if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || ""))
            // Return the leaf index route when index is present
            return matches[matches.length - 1];
          // Otherwise grab the deepest "path contributing" match (ignoring index and
          // pathless layout routes)
          let pathMatches = getPathContributingMatches(matches);
          return pathMatches[pathMatches.length - 1];
        }
        function getSubmissionFromNavigation(navigation) {
          let { formMethod, formAction, formEncType, text, formData, json } = navigation;
          if (!formMethod || !formAction || !formEncType) return;
          if (text != null)
            return {
              formMethod,
              formAction,
              formEncType,
              formData: undefined,
              json: undefined,
              text,
            };
          else if (formData != null)
            return {
              formMethod,
              formAction,
              formEncType,
              formData,
              json: undefined,
              text: undefined,
            };
          else if (json !== undefined)
            return {
              formMethod,
              formAction,
              formEncType,
              formData: undefined,
              json,
              text: undefined,
            };
        }
        function getLoadingNavigation(location, submission) {
          if (submission) {
            let navigation = {
              state: "loading",
              location,
              formMethod: submission.formMethod,
              formAction: submission.formAction,
              formEncType: submission.formEncType,
              formData: submission.formData,
              json: submission.json,
              text: submission.text,
            };
            return navigation;
          } else {
            let navigation = {
              state: "loading",
              location,
              formMethod: undefined,
              formAction: undefined,
              formEncType: undefined,
              formData: undefined,
              json: undefined,
              text: undefined,
            };
            return navigation;
          }
        }
        function getSubmittingNavigation(location, submission) {
          let navigation = {
            state: "submitting",
            location,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
          };
          return navigation;
        }
        function getLoadingFetcher(submission, data) {
          if (submission) {
            let fetcher = {
              state: "loading",
              formMethod: submission.formMethod,
              formAction: submission.formAction,
              formEncType: submission.formEncType,
              formData: submission.formData,
              json: submission.json,
              text: submission.text,
              data,
            };
            return fetcher;
          } else {
            let fetcher = {
              state: "loading",
              formMethod: undefined,
              formAction: undefined,
              formEncType: undefined,
              formData: undefined,
              json: undefined,
              text: undefined,
              data,
            };
            return fetcher;
          }
        }
        function getSubmittingFetcher(submission, existingFetcher) {
          let fetcher = {
            state: "submitting",
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data: existingFetcher ? existingFetcher.data : undefined,
          };
          return fetcher;
        }
        function getDoneFetcher(data) {
          let fetcher = {
            state: "idle",
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined,
            data,
          };
          return fetcher;
        }
        function restoreAppliedTransitions(_window, transitions) {
          try {
            let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
            if (sessionPositions) {
              let json = JSON.parse(sessionPositions);
              for (let [k, v] of Object.entries(json || {}))
                if (v && Array.isArray(v)) transitions.set(k, new Set(v || []));
            }
          } catch (e) {
            // no-op, use default empty object
          }
        }
        function persistAppliedTransitions(_window, transitions) {
          if (transitions.size > 0) {
            let json = {};
            for (let [k, v] of transitions) json[k] = [...v];
            try {
              _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));
            } catch (error) {
              warning(
                false,
                "Failed to save applied view transitions in sessionStorage (" + error + ").",
              );
            }
          }
        }
      },
      { "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3" },
    ],
    hMWXE: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$f557 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$f557.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "BlockPage", () => BlockPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _aioSingleReplacements = require("components/aio/AioSingleReplacements");
          var _updateLineDisplayVersion = require("components/functions/UpdateLineDisplayVersion");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const BlockPage = () => {
            _s();
            const ta = (0, _react.useRef)(null);
            const [lines, setLines] = (0, _react.useState)([
              {
                left: "One line",
                canEdit: true,
              },
            ]);
            const [externalSingles, setExternalSingles] = (0, _react.useState)([]);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "calc(vw - 4rem - 2px)",
                        display: "flex",
                        justifyContent: "center",
                        padding: "1rem",
                        backgroundColor: "white",
                        border: "1px solid black",
                        margin: "1rem",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "h5",
                          {
                            children: "Titles",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 24,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _components.AsupInternalBlock),
                          {
                            id: "test-block",
                            lines: lines,
                            setLines: setLines,
                            minLines: 3,
                            maxLines: 10,
                            externalSingles: externalSingles,
                            style: {
                              fontFamily: "Courier New",
                              fontWeight: 800,
                            },
                            styleMap: {
                              Green: {
                                css: {
                                  color: "green",
                                },
                                aieExclude: ["Blue", "Red"],
                              },
                              Blue: {
                                css: {
                                  color: "blue",
                                },
                                aieExclude: ["Green", "Red"],
                              },
                              Red: {
                                css: {
                                  color: "red",
                                },
                                aieExclude: ["Green", "Blue"],
                              },
                            },
                            defaultType: (0, _components.AifLineType).centerOnly,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 25,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/BlockPage.tsx",
                      lineNumber: 13,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "calc(vw - 4rem - 2px)",
                        display: "flex",
                        justifyContent: "center",
                        padding: "1rem",
                        backgroundColor: "white",
                        border: "1px solid black",
                        margin: "1rem",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "h5",
                          {
                            children: "Footnotes",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 53,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _components.AsupInternalBlock),
                          {
                            id: "test-block",
                            lines: lines,
                            setLines: setLines,
                            minLines: 3,
                            maxLines: 10,
                            externalSingles: externalSingles,
                            style: {
                              fontFamily: "Courier New",
                              fontWeight: 800,
                            },
                            styleMap: {
                              Green: {
                                css: {
                                  color: "green",
                                },
                                aieExclude: ["Blue", "Red"],
                              },
                              Blue: {
                                css: {
                                  color: "blue",
                                },
                                aieExclude: ["Green", "Red"],
                              },
                              Red: {
                                css: {
                                  color: "red",
                                },
                                aieExclude: ["Green", "Blue"],
                              },
                            },
                            defaultType: (0, _components.AifLineType).leftOnly,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 54,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/BlockPage.tsx",
                      lineNumber: 42,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "calc(vw - 4rem - 2px)",
                        display: "flex",
                        justifyContent: "center",
                        padding: "1rem",
                        backgroundColor: "white",
                        border: "1px solid black",
                        margin: "1rem",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "h5",
                          {
                            children: "Freeform",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 82,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          (0, _components.AsupInternalBlock),
                          {
                            id: "test-block",
                            lines: lines,
                            setLines: setLines,
                            minLines: 3,
                            maxLines: 10,
                            externalSingles: externalSingles,
                            style: {
                              fontFamily: "Courier New",
                              fontWeight: 800,
                            },
                            styleMap: {
                              Green: {
                                css: {
                                  color: "green",
                                },
                                aieExclude: ["Blue", "Red"],
                              },
                              Blue: {
                                css: {
                                  color: "blue",
                                },
                                aieExclude: ["Green", "Red"],
                              },
                              Red: {
                                css: {
                                  color: "red",
                                },
                                aieExclude: ["Green", "Blue"],
                              },
                            },
                            defaultType: (0, _components.AifLineType).leftOnly,
                            canChangeType: true,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 83,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/BlockPage.tsx",
                      lineNumber: 71,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                      },
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _aioSingleReplacements.AioSingleReplacements),
                        {
                          id: "test-singles",
                          replacements: externalSingles,
                          setReplacements: (ret) => setExternalSingles(ret),
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/pages/BlockPage.tsx",
                          lineNumber: 102,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/BlockPage.tsx",
                      lineNumber: 101,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                        backgroundColor: "rgb(240, 240, 240)",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              try {
                                if (!ta.current) return;
                                if (ta.current.value === "")
                                  ta.current.value =
                                    window.localStorage.getItem("blockContent") ?? "";
                                const j = (0, _updateLineDisplayVersion.updateLineDisplayVersion)(
                                  JSON.parse(ta.current.value ?? "[]"),
                                );
                                setLines(j);
                              } catch (e) {
                                console.warn("JSON parse failed");
                                console.dir(e);
                              }
                            },
                            children: "Load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 117,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              if (!ta.current) return;
                              ta.current.value = JSON.stringify(lines, null, 2);
                              window.localStorage.setItem("blockContent", ta.current.value);
                            },
                            children: "Save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 134,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            style: {
                              width: "100%",
                            },
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                ref: ta,
                                style: {
                                  width: "100%",
                                  height: "220px",
                                },
                                rows: 6,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/BlockPage.tsx",
                                lineNumber: 144,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/BlockPage.tsx",
                            lineNumber: 143,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/BlockPage.tsx",
                      lineNumber: 109,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(BlockPage, "2XhybBAOtuIO6z6sU52jsPZgkqQ=");
          _c = BlockPage;
          var _c;
          $RefreshReg$(_c, "BlockPage");

          $parcel$ReactRefreshHelpers$f557.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "components/aio/AioSingleReplacements": "j33oM",
        "components/functions/UpdateLineDisplayVersion": "58RjM",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    j33oM: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$b88a = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$b88a.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "AioSingleReplacements", () => AioSingleReplacements);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _functions = require("../functions");
          var _aioIconButton = require("./aioIconButton");
          var _aioLabel = require("./aioLabel");
          var _aioString = require("./aioString");
          var _s = $RefreshSig$();
          const AioSingleReplacements = ({ id, label, replacements, setReplacements }) => {
            _s();
            /* Send everything back */ const returnData = (0, _react.useCallback)(
              (ret, i) => {
                if (typeof setReplacements !== "function") return;
                const newReplacements = [...(replacements ?? [])];
                newReplacements[i] = ret;
                setReplacements(newReplacements);
              },
              [replacements, setReplacements],
            );
            /** Update individual replacement */ const updateReplacement = (0, _react.useCallback)(
              (ret, i) => {
                if (
                  typeof setReplacements !== "function" ||
                  replacements === undefined ||
                  replacements.length < i - 1
                )
                  return;
                const newReplacement = {
                  airid: replacements[i].airid,
                  oldText: ret.oldText ?? replacements[i].oldText,
                  newText: ret.newText ?? replacements[i].newText,
                };
                returnData(newReplacement, i);
              },
              [replacements, returnData, setReplacements],
            );
            const addReplacement = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacements !== "function") return;
                const newReplacements = [...(replacements ?? [])];
                newReplacements.splice(i, 0, (0, _functions.newExternalSingle)());
                setReplacements(newReplacements);
              },
              [replacements, setReplacements],
            );
            const removeReplacement = (0, _react.useCallback)(
              (i) => {
                if (typeof setReplacements !== "function") return;
                const newReplacements = [...(replacements ?? [])];
                newReplacements.splice(i, 1);
                setReplacements(newReplacements);
              },
              [replacements, setReplacements],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _aioLabel.AioLabel),
                    {
                      id: `${id}-label`,
                      label: label,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/components/aio/AioSingleReplacements.tsx",
                      lineNumber: 83,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      children: [
                        typeof setReplacements === "function" &&
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _aioIconButton.AioIconButton),
                            {
                              id: `${id}-add`,
                              iconName: "aiox-addDown",
                              onClick: () => addReplacement(0),
                              tipText: "Add text",
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/components/aio/AioSingleReplacements.tsx",
                              lineNumber: 89,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        (replacements ?? []).map((repl, i) => {
                          return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "div",
                            {
                              children: [
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _aioString.AioString),
                                  {
                                    id: `${id}-from`,
                                    label: "From",
                                    value: (0, _functions.fromHtml)(repl.oldText ?? ""),
                                    setValue: (ret) =>
                                      updateReplacement(
                                        {
                                          oldText: (0, _functions.toHtml)(ret),
                                        },
                                        i,
                                      ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/AioSingleReplacements.tsx",
                                    lineNumber: 99,
                                    columnNumber: 15,
                                  },
                                  undefined,
                                ),
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _aioString.AioString),
                                  {
                                    id: `${id}-to`,
                                    label: "to",
                                    value: (0, _functions.fromHtml)(repl.newText ?? ""),
                                    setValue: (ret) =>
                                      updateReplacement(
                                        {
                                          newText: (0, _functions.toHtml)(ret),
                                        },
                                        i,
                                      ),
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/components/aio/AioSingleReplacements.tsx",
                                    lineNumber: 105,
                                    columnNumber: 15,
                                  },
                                  undefined,
                                ),
                                typeof setReplacements === "function" &&
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "div",
                                    {
                                      className: "aiox-button-holder",
                                      style: {
                                        display: "flex",
                                        flexDirection: "row",
                                        alignContent: "center",
                                        marginBottom: "2px",
                                      },
                                      children: [
                                        replacements &&
                                          replacements.length >= 1 &&
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            (0, _aioIconButton.AioIconButton),
                                            {
                                              id: `${id}-remove`,
                                              iconName: "aiox-removeUp",
                                              onClick: () => removeReplacement(i),
                                              tipText: "Remove text",
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName:
                                                "src/components/aio/AioSingleReplacements.tsx",
                                              lineNumber: 123,
                                              columnNumber: 21,
                                            },
                                            undefined,
                                          ),
                                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _aioIconButton.AioIconButton),
                                          {
                                            id: `${id}-add`,
                                            iconName: "aiox-addDown",
                                            onClick: () => addReplacement(i + 1),
                                            tipText: "Add text",
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName:
                                              "src/components/aio/AioSingleReplacements.tsx",
                                            lineNumber: 130,
                                            columnNumber: 19,
                                          },
                                          undefined,
                                        ),
                                      ],
                                    },
                                    void 0,
                                    true,
                                    {
                                      fileName: "src/components/aio/AioSingleReplacements.tsx",
                                      lineNumber: 113,
                                      columnNumber: 17,
                                    },
                                    undefined,
                                  ),
                              ],
                            },
                            `${i}-${repl.airid}`,
                            true,
                            {
                              fileName: "src/components/aio/AioSingleReplacements.tsx",
                              lineNumber: 98,
                              columnNumber: 13,
                            },
                            undefined,
                          );
                        }),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/components/aio/AioSingleReplacements.tsx",
                      lineNumber: 87,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(AioSingleReplacements, "OySOIGn3HPfCUalB5/g2prf+qk4=");
          _c = AioSingleReplacements;
          var _c;
          $RefreshReg$(_c, "AioSingleReplacements");

          $parcel$ReactRefreshHelpers$b88a.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../functions": "gfVyL",
        "./aioIconButton": "40L1H",
        "./aioLabel": "4cCtf",
        "./aioString": "lAE49",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    acdMU: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$f30c = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$f30c.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "EditorPage", () => EditorPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _reactRouterDom = require("react-router-dom");
          var _components = require("../components");
          var _s = $RefreshSig$();
          const EditorPage = () => {
            _s();
            const [textarea, setTextarea] = (0, _react.useState)("");
            const [text1, setText1] = (0, _react.useState)(
              '<div classname="aie-text" data-inline-style-ranges="[{&quot;offset&quot;:0,&quot;length&quot;:5,&quot;style&quot;:&quot;Notes&quot;}]"><span classname="Notes" style="color:blue;font-size:16pt">Notes</span>  work</div>',
            );
            const [text2, setText2] = (0, _react.useState)(
              '<div classname="aie-text" data-inline-style-ranges="[{&quot;offset&quot;:0,&quot;length&quot;:5,&quot;style&quot;:&quot;Notes&quot;}]"><span classname="Notes" style="color:blue;font-size:16pt">Notes</span>  work</div>',
            );
            const [text3, setText3] = (0, _react.useState)(
              '<div classname="aie-text" data-inline-style-ranges="[{&quot;offset&quot;:0,&quot;length&quot;:5,&quot;style&quot;:&quot;Notes&quot;}]"><span classname="Notes" style="color:blue;font-size:16pt">Notes</span>  work</div>',
            );
            const [text4, setText4] = (0, _react.useState)(
              '<div classname="aie-text" data-inline-style-ranges="[{&quot;offset&quot;:0,&quot;length&quot;:5,&quot;style&quot;:&quot;Notes&quot;}]"><span classname="Notes" style="color:blue;font-size:16pt">Notes</span>  work</div>',
            );
            const dothing = () => {
              console.log("Update");
              const newThing = '<p color="red">Here</p><span style="color:red">ref</span>';
              setText4(newThing);
            };
            const save = () => {
              window.localStorage.setItem(
                "content",
                JSON.stringify({
                  text1,
                  text2,
                  text3,
                  text4,
                }),
              );
              console.log("Saved: ");
              console.log(text1);
              console.log(text2);
              console.log(text3);
              console.log(text4);
            };
            const load = () => {
              const saved = JSON.parse(window.localStorage.getItem("content") ?? "");
              setText1(saved.text1);
              setText2(saved.text2);
              setText3(saved.text3);
              setText4(saved.text4);
            };
            const thisStyleMap = {
              Editable: {
                css: {
                  color: "red",
                  fontFamily: "courier",
                  fontSize: "16pt",
                },
                aieExclude: ["Optional", "Notes"],
              },
              Optional: {
                css: {
                  color: "green",
                  fontWeight: "100",
                  fontFamily: "serif",
                  fontSize: "16pt",
                },
                aieExclude: ["Editable", "Notes"],
              },
              Notes: {
                css: {
                  color: "blue",
                  fontSize: "16pt",
                },
                aieExclude: ["Editable", "Optional"],
              },
            };
            const locn = (0, _reactRouterDom.useLocation)();
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              "div",
              {
                style: {
                  margin: "1rem",
                  padding: "1rem",
                },
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "table",
                    {
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "tbody",
                        {
                          children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "tr",
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {
                                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _components.AsupInternalEditor),
                                        {
                                          id: "text-left",
                                          value: text1,
                                          setValue: setText1,
                                          showStyleButtons: true,
                                          style: {
                                            width: "195px",
                                            height: "100%",
                                          },
                                          textAlignment: "left",
                                          styleMap: thisStyleMap,
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/pages/EditorPage.tsx",
                                          lineNumber: 68,
                                          columnNumber: 15,
                                        },
                                        undefined,
                                      ),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 67,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 78,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 79,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/pages/EditorPage.tsx",
                                lineNumber: 66,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "tr",
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 82,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {
                                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _components.AsupInternalEditor),
                                        {
                                          id: "text-decimal",
                                          value: text2,
                                          setValue: setText2,
                                          showStyleButtons: true,
                                          style: {
                                            width: "195px",
                                            height: "100%",
                                          },
                                          textAlignment: "decimal",
                                          styleMap: thisStyleMap,
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/pages/EditorPage.tsx",
                                          lineNumber: 84,
                                          columnNumber: 15,
                                        },
                                        undefined,
                                      ),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 83,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 94,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/pages/EditorPage.tsx",
                                lineNumber: 81,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "tr",
                              {
                                children: [
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 97,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {},
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 98,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "td",
                                    {
                                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                        (0, _components.AsupInternalEditor),
                                        {
                                          id: "text-center",
                                          value: text3,
                                          setValue: setText3,
                                          showStyleButtons: true,
                                          style: {
                                            width: "196px",
                                            height: "100%",
                                          },
                                          textAlignment: "center",
                                          styleMap: thisStyleMap,
                                        },
                                        void 0,
                                        false,
                                        {
                                          fileName: "src/pages/EditorPage.tsx",
                                          lineNumber: 100,
                                          columnNumber: 15,
                                        },
                                        undefined,
                                      ),
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/EditorPage.tsx",
                                      lineNumber: 99,
                                      columnNumber: 13,
                                    },
                                    undefined,
                                  ),
                                ],
                              },
                              void 0,
                              true,
                              {
                                fileName: "src/pages/EditorPage.tsx",
                                lineNumber: 96,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          ],
                        },
                        void 0,
                        true,
                        {
                          fileName: "src/pages/EditorPage.tsx",
                          lineNumber: 65,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/EditorPage.tsx",
                      lineNumber: 64,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    (0, _components.AsupInternalEditor),
                    {
                      id: "text-right",
                      value: text4,
                      setValue: setText4,
                      showStyleButtons: true,
                      style: {
                        width: "600px",
                        height: "100%",
                      },
                      textAlignment: "right",
                      styleMap: thisStyleMap,
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/EditorPage.tsx",
                      lineNumber: 114,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        marginTop: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            children: ["Current location is... ", locn.pathname],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 131,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: dothing,
                            children: "set",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 132,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: save,
                            children: "save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 133,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: load,
                            children: "load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 134,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                rows: 3,
                                value: textarea,
                                onChange: (e) => {
                                  setTextarea(e.currentTarget.value);
                                },
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/EditorPage.tsx",
                                lineNumber: 136,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 135,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              setText1(textarea);
                              setText2(textarea);
                              setText3(textarea);
                              setText4(textarea);
                            },
                            children: "loadtextarea",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 144,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "h5",
                          {
                            children: "Text",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 154,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: text1,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 155,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: text2,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 156,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: text3,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 157,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: text4,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 158,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "h5",
                          {
                            children: "HTML",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 159,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "p",
                          {
                            // eslint-disable-next-line react/no-danger
                            dangerouslySetInnerHTML: {
                              __html: text1,
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 160,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "p",
                          {
                            // eslint-disable-next-line react/no-danger
                            dangerouslySetInnerHTML: {
                              __html: text2,
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 164,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "p",
                          {
                            // eslint-disable-next-line react/no-danger
                            dangerouslySetInnerHTML: {
                              __html: text3,
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 168,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "p",
                          {
                            // eslint-disable-next-line react/no-danger
                            dangerouslySetInnerHTML: {
                              __html: text4,
                            },
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/EditorPage.tsx",
                            lineNumber: 172,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/EditorPage.tsx",
                      lineNumber: 124,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
              {
                fileName: "src/pages/EditorPage.tsx",
                lineNumber: 58,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(EditorPage, "ifQBILJc/9gaPHjxLoa1NLJHCXE=", false, function () {
            return [(0, _reactRouterDom.useLocation)];
          });
          _c = EditorPage;
          var _c;
          $RefreshReg$(_c, "EditorPage");

          $parcel$ReactRefreshHelpers$f30c.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "react-router-dom": "9xmpe",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "4MX8d": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$4707 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$4707.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "ExpanderPage", () => ExpanderPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const ExpanderPage = () => {
            _s();
            const ta = (0, _react.useRef)(null);
            const [showBorders, setShowBorders] = (0, _react.useState)(false);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const [currentData, setCurrentData] = (0, _react.useState)();
            const [dropValue, setDropValue] = (0, _react.useState)("Nowt");
            /** Load defaults */ (0, _react.useEffect)(() => {
              /** Load table data as an example */ fetch(`${undefined}/data/tableData.json`, {
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
              })
                .then(function (response) {
                  return response.json();
                })
                .then(function (MyJson) {
                  setCurrentData(MyJson);
                });
            }, []);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "100%",
                        display: "flex",
                        justifyContent: "left",
                        margin: "2rem",
                      },
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _components.AioExpander),
                        {
                          id: "test-expander",
                          inputObject: currentData,
                          updateObject: (ret) => {
                            setCurrentData(ret);
                          },
                          showBorders: showBorders,
                          canAddItems: true,
                          canRemoveItems: true,
                          canMoveItems: true,
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/pages/ExpanderPage.tsx",
                          lineNumber: 35,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/ExpanderPage.tsx",
                      lineNumber: 27,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "100%",
                        display: "flex",
                        justifyContent: "left",
                        margin: "2rem",
                      },
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        (0, _components.AioDropSelect),
                        {
                          id: "test-drop-select",
                          value: dropValue,
                          setValue: setDropValue,
                          availableValues: ["Nowt", "Summat", "Owt", "Reyt"],
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/pages/ExpanderPage.tsx",
                          lineNumber: 55,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/ExpanderPage.tsx",
                      lineNumber: 47,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                        backgroundColor: "rgb(240, 240, 240)",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "label",
                          {
                            children: [
                              "Show borders",
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "input",
                                {
                                  name: "showWindowCheck",
                                  type: "checkbox",
                                  checked: showBorders,
                                  onChange: (e) => {
                                    setShowBorders(e.target.checked);
                                  },
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ExpanderPage.tsx",
                                  lineNumber: 72,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/ExpanderPage.tsx",
                            lineNumber: 70,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              try {
                                if (!ta.current) return;
                                if (ta.current.value === "")
                                  ta.current.value =
                                    window.localStorage.getItem("expanderContent") ?? "";
                                const j = JSON.parse(ta.current.value ?? "[]");
                                setCurrentData(j);
                              } catch (e) {
                                console.log("JSON parse failed");
                                console.dir(e);
                              }
                            },
                            children: "Load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ExpanderPage.tsx",
                            lineNumber: 81,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              if (!ta.current) return;
                              ta.current.value = JSON.stringify(currentData, null, 2);
                              window.localStorage.setItem("expanderContent", ta.current.value);
                            },
                            children: "Save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ExpanderPage.tsx",
                            lineNumber: 98,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                ref: ta,
                                style: {
                                  width: "98%",
                                  height: "200px",
                                },
                                rows: 6,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/ExpanderPage.tsx",
                                lineNumber: 108,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ExpanderPage.tsx",
                            lineNumber: 107,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/ExpanderPage.tsx",
                      lineNumber: 62,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(ExpanderPage, "2XglNnvfn8uH+GNLoco2Uy53Fi4=");
          _c = ExpanderPage;
          var _c;
          $RefreshReg$(_c, "ExpanderPage");

          $parcel$ReactRefreshHelpers$4707.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "4qXuG": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$d827 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$d827.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "ListPage", () => ListPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const ListPage = () => {
            _s();
            const ta = (0, _react.useRef)(null);
            const [extRepls, setExtRepls] = (0, _react.useState)([]);
            const [currentL, setCurrentL] = (0, _react.useState)(-1);
            const loadData = (0, _react.useCallback)(() => {
              try {
                if (ta.current && ta.current.value === "")
                  ta.current.value = window.localStorage.getItem("listContent") ?? "";
                if (ta.current) {
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  const j = JSON.parse(ta.current.value?.toString() ?? "[]");
                  setExtRepls((0, _components.updateReplToExtl)(j));
                  ta.current.value = JSON.stringify(j, null, 2);
                }
              } catch (e) {
                console.log("JSON parse failed");
                console.dir(e);
              }
            }, []);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        width: "100%",
                        margin: "1.5rem",
                        display: "flex",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            style: {
                              width: "30%",
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "h4",
                                {
                                  children: "Available lists",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ListPage.tsx",
                                  lineNumber: 42,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  children: extRepls.map((l, i) =>
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        children: [
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "span",
                                            {
                                              onFocus: () => {
                                                setCurrentL(i);
                                              },
                                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                                (0, _components.AioString),
                                                {
                                                  id: "test-string",
                                                  value: extRepls[i].givenName,
                                                  setValue: (ret) => {
                                                    const newEx = {
                                                      ...extRepls[i],
                                                      givenName: ret,
                                                    };
                                                    const newL = [...extRepls];
                                                    newL.splice(i, 1, newEx);
                                                    setExtRepls(newL);
                                                  },
                                                },
                                                void 0,
                                                false,
                                                {
                                                  fileName: "src/pages/ListPage.tsx",
                                                  lineNumber: 51,
                                                  columnNumber: 19,
                                                },
                                                undefined,
                                              ),
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName: "src/pages/ListPage.tsx",
                                              lineNumber: 46,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                            "div",
                                            {
                                              className: "aiox-button aiox-minus",
                                              onClick: () => {
                                                const newLi = [...extRepls];
                                                newLi.splice(i, 1);
                                                setExtRepls(newLi);
                                                setCurrentL(i - 1);
                                              },
                                            },
                                            void 0,
                                            false,
                                            {
                                              fileName: "src/pages/ListPage.tsx",
                                              lineNumber: 62,
                                              columnNumber: 17,
                                            },
                                            undefined,
                                          ),
                                          i === currentL &&
                                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                              "div",
                                              {
                                                style: {
                                                  display: "inline-block",
                                                  marginLeft: "0.5rem",
                                                  height: "1rem",
                                                  width: "1rem",
                                                  backgroundColor: "green",
                                                },
                                              },
                                              void 0,
                                              false,
                                              {
                                                fileName: "src/pages/ListPage.tsx",
                                                lineNumber: 72,
                                                columnNumber: 19,
                                              },
                                              undefined,
                                            ),
                                        ],
                                      },
                                      i,
                                      true,
                                      {
                                        fileName: "src/pages/ListPage.tsx",
                                        lineNumber: 45,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ListPage.tsx",
                                  lineNumber: 43,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  className: "aiox-button aiox-plus",
                                  onClick: () => {
                                    const newRepls = [...extRepls];
                                    newRepls.push((0, _components.newExternalReplacements)());
                                    setExtRepls(newRepls);
                                    setCurrentL(newRepls.length - 1);
                                  },
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ListPage.tsx",
                                  lineNumber: 86,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 41,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            style: {
                              width: "70%",
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "h4",
                                {
                                  children: "List values",
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ListPage.tsx",
                                  lineNumber: 97,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  children:
                                    currentL >= 0 &&
                                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                      "div",
                                      {
                                        style: {
                                          display: "flex",
                                          flexDirection: "column",
                                          gap: "0.5rem",
                                        },
                                        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                          (0, _components.AioReplacementDisplay),
                                          {
                                            id: "test-replacements",
                                            noText: true,
                                            oldText: "",
                                            newTexts: extRepls[currentL].newTexts,
                                            setReplacement: (ret) => {
                                              const e = {
                                                givenName: extRepls[currentL].givenName,
                                                newTexts: ret.newTexts,
                                              };
                                              const newE = [...extRepls];
                                              newE.splice(currentL, 1, e);
                                              setExtRepls(newE);
                                            },
                                          },
                                          void 0,
                                          false,
                                          {
                                            fileName: "src/pages/ListPage.tsx",
                                            lineNumber: 107,
                                            columnNumber: 17,
                                          },
                                          undefined,
                                        ),
                                      },
                                      void 0,
                                      false,
                                      {
                                        fileName: "src/pages/ListPage.tsx",
                                        lineNumber: 100,
                                        columnNumber: 15,
                                      },
                                      undefined,
                                    ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/ListPage.tsx",
                                  lineNumber: 98,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 96,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/ListPage.tsx",
                      lineNumber: 34,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                        backgroundColor: "rgb(220, 220, 220)",
                        borderRadius: "8px",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: loadData,
                            children: "Load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 137,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              if (!ta.current) return;
                              // Show intended data
                              ta.current.value = JSON.stringify(extRepls, null, 2);
                              // Save string
                              window.localStorage.setItem("listContent", JSON.stringify(extRepls));
                            },
                            children: "Save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 138,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            style: {
                              paddingLeft: "1rem",
                            },
                            children: "(browser storage)",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 149,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                style: {
                                  width: "98%",
                                  height: "200px",
                                },
                                ref: ta,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/ListPage.tsx",
                                lineNumber: 151,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/ListPage.tsx",
                            lineNumber: 150,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/ListPage.tsx",
                      lineNumber: 128,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(ListPage, "PH28et8A+4Dx4eEqNTC0b2r522c=");
          _c = ListPage;
          var _c;
          $RefreshReg$(_c, "ListPage");

          $parcel$ReactRefreshHelpers$d827.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    "6BQRX": [function () {}, {}],
    "1cK6r": [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$4a0f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$4a0f.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "TablePage", () => TablePage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _aioSingleReplacements = require("components/aio/AioSingleReplacements");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const TablePage = () => {
            _s();
            const ta = (0, _react.useRef)(null);
            const [tableData, setTableData] = (0, _react.useState)();
            const processedTableData = (0, _react.useRef)();
            const [sampleGroupTemplates, setSampleGroupTempaltes] = (0, _react.useState)();
            const [externalReplacements, setExternalReplacements] = (0, _react.useState)([]);
            const [listStatus, setListStatus] = (0, _react.useState)("");
            const commentStyles = {
              Optional: {
                css: {
                  color: "mediumseagreen",
                },
                aieExclude: ["Notes"],
              },
              Notes: {
                css: {
                  color: "royalblue",
                },
                aieExclude: ["Optional"],
              },
            };
            const cellStyles = {
              Optional: {
                css: {
                  color: "mediumseagreen",
                },
                aieExclude: ["Notes"],
              },
              Notes: {
                css: {
                  color: "royalblue",
                },
                aieExclude: ["Optional"],
              },
            };
            const [externalSingles, setExternalSingles] = (0, _react.useState)([]);
            const [showTableOptions, setShowTableOptions] = (0, _react.useState)(true);
            const [isEditable, setIsEditable] = (0, _react.useState)(true);
            /** Load defaults */ (0, _react.useEffect)(() => {
              /** Load row group templates */ fetch(`${undefined}/data/groupTemplates.json`, {
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
              })
                .then(function (response) {
                  return response.json();
                })
                .then(function (MyJson) {
                  setSampleGroupTempaltes(MyJson);
                });
              /** Load table data */ fetch(`${undefined}/data/tableData.json`, {
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
              })
                .then(function (response) {
                  return response.json();
                })
                .then(function (MyJson) {
                  setTableData((0, _components.updateTableDataVersion)(MyJson, 40));
                });
            }, []);
            const loadData = (0, _react.useCallback)(() => {
              try {
                if (ta.current && ta.current.value === "")
                  ta.current.value = window.localStorage.getItem("tableContent") ?? "";
                if (ta.current) {
                  const j = (0, _components.updateTableDataVersion)(
                    JSON.parse(ta.current.value?.toString() ?? "{}"),
                    40,
                  );
                  setTableData((0, _components.updateTableDataVersion)(j, 40));
                  ta.current.value = JSON.stringify(j, null, 2);
                }
              } catch (e) {
                console.log("JSON parse failed");
                console.dir(e);
              }
            }, []);
            const loadReplacements = (0, _react.useCallback)(() => {
              try {
                const j = JSON.parse(window.localStorage.getItem("listContent") ?? "[]");
                setExternalReplacements(j);
                const g = JSON.parse(window.localStorage.getItem("rowGroupContent") ?? "[]");
                setSampleGroupTempaltes(g);
                setListStatus(
                  `Loaded ${j.length} lists: ${j
                    .map((rv) => rv.givenName)
                    .join(", ")}, RG templates: ${g.map((rg) => rg.name).join(", ")}`,
                );
              } catch (e) {
                console.log("JSON parse from listContent failed");
                console.dir(e);
                setListStatus("Error loading external list data");
              }
            }, []);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: [
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        marginLeft: "1rem",
                        marginRight: "1rem",
                        width: "100%",
                        // display: "flex",
                        // justifyContent: "center",
                        overflow: "auto",
                        position: "relative",
                      },
                      children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                        "div",
                        {
                          children:
                            tableData === undefined
                              ? /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "span",
                                  {
                                    style: {
                                      margin: "3rem",
                                    },
                                    children: "Table loading",
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/pages/TablePage.tsx",
                                    lineNumber: 109,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                )
                              : /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  (0, _components.AsupInternalTable),
                                  {
                                    id: "test-table",
                                    noTableOptions: !showTableOptions,
                                    tableData: tableData,
                                    setTableData: (ret) => {
                                      setTableData(ret);
                                    },
                                    isEditable: isEditable,
                                    processedDataRef: processedTableData,
                                    style: {
                                      margin: "1rem",
                                    },
                                    showCellBorders: true,
                                    externalLists: externalReplacements,
                                    externalSingles: externalSingles,
                                    groupTemplates: sampleGroupTemplates,
                                    commentStyles: commentStyles,
                                    cellStyles: cellStyles,
                                    colWidthMod: 3,
                                    defaultCellWidth: 40,
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/pages/TablePage.tsx",
                                    lineNumber: 111,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                        },
                        void 0,
                        false,
                        {
                          fileName: "src/pages/TablePage.tsx",
                          lineNumber: 107,
                          columnNumber: 9,
                        },
                        undefined,
                      ),
                    },
                    void 0,
                    false,
                    {
                      fileName: "src/pages/TablePage.tsx",
                      lineNumber: 96,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                  /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                    "div",
                    {
                      style: {
                        margin: "1rem",
                        padding: "1rem",
                        border: "solid black 3px",
                        backgroundColor: "rgb(220, 220, 220)",
                        borderRadius: "8px",
                      },
                      children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "input",
                                {
                                  type: "checkbox",
                                  checked: showTableOptions,
                                  onChange: (e) => setShowTableOptions(e.currentTarget.checked),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/TablePage.tsx",
                                  lineNumber: 143,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              "\xa0 Show global options",
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 142,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            style: {
                              marginLeft: "1rem",
                            },
                            children: [
                              /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "input",
                                {
                                  type: "checkbox",
                                  checked: isEditable,
                                  onChange: (e) => setIsEditable(e.currentTarget.checked),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/TablePage.tsx",
                                  lineNumber: 151,
                                  columnNumber: 11,
                                },
                                undefined,
                              ),
                              "\xa0 Editable",
                            ],
                          },
                          void 0,
                          true,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 150,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "div",
                          {
                            style: {
                              margin: "1rem",
                            },
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              (0, _aioSingleReplacements.AioSingleReplacements),
                              {
                                id: "test-singles",
                                replacements: externalSingles,
                                setReplacements: (ret) => setExternalSingles(ret),
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/TablePage.tsx",
                                lineNumber: 159,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 158,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: loadData,
                            children: "Load",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 165,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: () => {
                              if (!ta.current) return;
                              // Show intended data
                              ta.current.value = JSON.stringify(tableData, null, 2);
                              // Save string
                              window.localStorage.setItem(
                                "tableContent",
                                JSON.stringify(tableData),
                              );
                            },
                            children: "Save",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 166,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            style: {
                              paddingLeft: "1rem",
                            },
                            children: "(browser storage)",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 177,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "button",
                          {
                            onClick: loadReplacements,
                            style: {
                              marginLeft: "1rem",
                              marginRight: "0.5rem",
                            },
                            children: "Load lists",
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 179,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "span",
                          {
                            children: listStatus,
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 185,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                          "pre",
                          {
                            children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                              "textarea",
                              {
                                style: {
                                  width: "98%",
                                  height: "200px",
                                },
                                ref: ta,
                              },
                              void 0,
                              false,
                              {
                                fileName: "src/pages/TablePage.tsx",
                                lineNumber: 188,
                                columnNumber: 11,
                              },
                              undefined,
                            ),
                          },
                          void 0,
                          false,
                          {
                            fileName: "src/pages/TablePage.tsx",
                            lineNumber: 187,
                            columnNumber: 9,
                          },
                          undefined,
                        ),
                      ],
                    },
                    void 0,
                    true,
                    {
                      fileName: "src/pages/TablePage.tsx",
                      lineNumber: 133,
                      columnNumber: 7,
                    },
                    undefined,
                  ),
                ],
              },
              void 0,
              true,
            );
          };
          _s(TablePage, "mVoDf23rBKCmexVPSyTLNHzjn4A=");
          _c = TablePage;
          var _c;
          $RefreshReg$(_c, "TablePage");

          $parcel$ReactRefreshHelpers$4a0f.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        "components/aio/AioSingleReplacements": "j33oM",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    eGYPj: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$ab34 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$ab34.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "WindowPage", () => WindowPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _components = require("../components");
          var _s = $RefreshSig$();
          const WindowPage = () => {
            _s();
            const [showWindow, setShowWindow] = (0, _react.useState)(true);
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _jsxDevRuntime.Fragment),
              {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                  "div",
                  {
                    style: {
                      margin: "1rem",
                      padding: "1rem",
                      border: "solid black 3px",
                    },
                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                      "form",
                      {
                        children: [
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            "label",
                            {
                              children: [
                                "Show Window",
                                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                  "input",
                                  {
                                    name: "showWindowCheck",
                                    type: "checkbox",
                                    checked: showWindow,
                                    onChange: (e) => {
                                      console.log(`Changing checkbox to ${e.target.checked}`);
                                      setShowWindow(e.target.checked);
                                    },
                                  },
                                  void 0,
                                  false,
                                  {
                                    fileName: "src/pages/WindowPage.tsx",
                                    lineNumber: 19,
                                    columnNumber: 13,
                                  },
                                  undefined,
                                ),
                              ],
                            },
                            void 0,
                            true,
                            {
                              fileName: "src/pages/WindowPage.tsx",
                              lineNumber: 17,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                          /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                            (0, _components.AsupInternalWindow),
                            {
                              id: "test-window",
                              visible: showWindow,
                              onClose: () => {
                                console.log("Closing window in WindowPage");
                                setShowWindow(false);
                              },
                              title: "This is the window title",
                              children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                "div",
                                {
                                  style: {
                                    backgroundColor: "cyan",
                                    width: "100%",
                                    height: "100%",
                                    display: "flex",
                                    flexGrow: 1,
                                    flexDirection: "column",
                                  },
                                  children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
                                    "span",
                                    {
                                      children: "h",
                                    },
                                    void 0,
                                    false,
                                    {
                                      fileName: "src/pages/WindowPage.tsx",
                                      lineNumber: 48,
                                      columnNumber: 15,
                                    },
                                    undefined,
                                  ),
                                },
                                void 0,
                                false,
                                {
                                  fileName: "src/pages/WindowPage.tsx",
                                  lineNumber: 38,
                                  columnNumber: 13,
                                },
                                undefined,
                              ),
                            },
                            void 0,
                            false,
                            {
                              fileName: "src/pages/WindowPage.tsx",
                              lineNumber: 29,
                              columnNumber: 11,
                            },
                            undefined,
                          ),
                        ],
                      },
                      void 0,
                      true,
                      {
                        fileName: "src/pages/WindowPage.tsx",
                        lineNumber: 16,
                        columnNumber: 9,
                      },
                      undefined,
                    ),
                  },
                  void 0,
                  false,
                  {
                    fileName: "src/pages/WindowPage.tsx",
                    lineNumber: 9,
                    columnNumber: 7,
                  },
                  undefined,
                ),
              },
              void 0,
              false,
            );
          };
          _s(WindowPage, "hUGw/h4cR8OIZuT+GjfVNi5dY9o=");
          _c = WindowPage;
          var _c;
          $RefreshReg$(_c, "WindowPage");

          $parcel$ReactRefreshHelpers$ab34.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../components": "dHnah",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    fE6W8: [
      function (require, module, exports) {
        var $parcel$ReactRefreshHelpers$ba2d = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
        var prevRefreshReg = window.$RefreshReg$;
        var prevRefreshSig = window.$RefreshSig$;
        $parcel$ReactRefreshHelpers$ba2d.prelude(module);

        try {
          var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
          parcelHelpers.defineInteropFlag(exports);
          parcelHelpers.export(exports, "CurrentPage", () => CurrentPage);
          var _jsxDevRuntime = require("react/jsx-dev-runtime");
          var _react = require("react");
          var _reactDefault = parcelHelpers.interopDefault(_react);
          var _asupInternalBlock = require("../components/aif/AsupInternalBlock");
          var _s = $RefreshSig$();
          const CurrentPage = () => {
            _s();
            const [left, setLeft] = (0, _reactDefault.default).useState("");
            const pageBy = (0, _reactDefault.default).useMemo(
              () => ({
                aifid: "page-by",
                left: left,
                addBelow: false,
                canRemove: false,
                canMove: false,
                center: null,
                right: null,
              }),
              [left],
            );
            return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)(
              (0, _asupInternalBlock.AsupInternalBlock),
              {
                id: "pageby",
                style: {
                  fontFamily: "Courier New",
                  fontSize: "9pt",
                  fontWeight: 500,
                },
                lines: [pageBy],
                setLines: (ret) => ret[0].left !== left && setLeft(ret[0].left ?? ""),
                externalSingles: [
                  {
                    oldText: "=",
                    newText: "<=",
                  },
                ],
                styleMap: {
                  Optional: {
                    css: {
                      color: "seagreen",
                    },
                    aieExclude: ["Notes", "Superscript", "O^", "N^"],
                  },
                  Notes: {
                    css: {
                      color: "royalblue",
                    },
                    aieExclude: ["Optional", "Superscript", "O^", "N^"],
                  },
                  Superscript: {
                    css: {
                      verticalAlign: "super",
                      fontSize: "small",
                    },
                    aieExclude: ["Optional", "Notes", "O^", "N^"],
                  },
                  "O^": {
                    css: {
                      color: "seagreen",
                      verticalAlign: "super",
                      fontSize: "small",
                    },
                    aieExclude: ["Optional", "Notes", "Superscript", "N^"],
                  },
                  "N^": {
                    css: {
                      color: "royalblue",
                      verticalAlign: "super",
                      fontSize: "small",
                    },
                    aieExclude: ["Optional", "Notes", "Superscript", "O^"],
                  },
                },
                minLines: 1,
                maxLines: 1,
              },
              void 0,
              false,
              {
                fileName: "src/pages/CurrentPage.tsx",
                lineNumber: 20,
                columnNumber: 5,
              },
              undefined,
            );
          };
          _s(CurrentPage, "CJnkrJ7bVCMwDFAxH1hFzU+jOjQ=");
          _c = CurrentPage;
          var _c;
          $RefreshReg$(_c, "CurrentPage");

          $parcel$ReactRefreshHelpers$ba2d.postlude(module);
        } finally {
          window.$RefreshReg$ = prevRefreshReg;
          window.$RefreshSig$ = prevRefreshSig;
        }
      },
      {
        "react/jsx-dev-runtime": "iTorj",
        react: "21dqq",
        "../components/aif/AsupInternalBlock": "7zNZw",
        "@parcel/transformer-js/src/esmodule-helpers.js": "gkKU3",
        "@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js": "km3Ru",
      },
    ],
    irmnC: [function () {}, {}],
  },
  ["4q9Wv", "1xC6H", "8lqZg"],
  "8lqZg",
  "parcelRequiree4b0",
);

//# sourceMappingURL=index.js.map
